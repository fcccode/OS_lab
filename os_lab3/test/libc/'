#include "./time.h"
#include "./stdio.h"
#include "./sys/hhos.h"
#ifdef _HHOS_LIBC_TEST
namespace hhlibc {

#endif

static char libc_internal_time_str[20];

static inline int yisleap(int year)
{
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
}

static inline int get_yday(int mon, int day, int year)
{
    static const int days[2][13] = {
        {0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334},
        {0, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335}
    };
    int leap = yisleap(year);
    return days[leap][mon] + day;
}

static auto weekday  = [](auto m, auto d, auto y){
    return (d += m < 3 ? y-- : y - 2, 23*m/9 + d + 4 + y/4- y/100 + y/400)%7;  
};

tm my_get_tm()
{
    unsigned char libc_internal_second;
    unsigned char libc_internal_minute;
    unsigned char libc_internal_hour;
    unsigned char libc_internal_day;
    unsigned char libc_internal_month;
    int libc_internal_year;
    sscanf(libc_internal_time_str, "%d/%d/%d-%d:%d:%d", 
            &libc_internal_year, &libc_internal_month, &libc_internal_day,
            &libc_internal_hour, &libc_internal_minute, &libc_internal_second);
    int libc_internal_day_of_year = get_yday(libc_internal_month, libc_internal_day, libc_internal_year);
    int libc_internal_day_of_week = weekday(libc_internal_month, libc_internal_day, libc_internal_year);
    return tm{
        libc_internal_second,
            libc_internal_minute,
            libc_internal_hour,
            libc_internal_day,
            libc_internal_month,
            libc_internal_year,
            libc_internal_day_of_week,
            libc_internal_day_of_year,
            0
    };
}

time_t time(time_t* pt)
{
    uint32_t t= system_call_get_timestamp();
    if(pt) *pt = t;
    return t;
}
static tm __TM__;

struct tm* gmtime(const time_t tp)
{
    int day_of_mon[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    int days = tp / 86400;
}

time_t mktime(struct tm* tp);
#ifdef _HHOS_LIBC_TEST
}
#endif
