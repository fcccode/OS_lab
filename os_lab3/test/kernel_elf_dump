
build/kernel/kernel.bin.elf:     file format elf32-i386


Disassembly of section .text:

00007e00 <_text>:
    7e00:	b0 34                	mov    $0x34,%al
    7e02:	e6 43                	out    %al,$0x43
    7e04:	b8 6f ba e6 40       	mov    $0x40e6ba6f,%eax
    7e09:	88 e0                	mov    %ah,%al
    7e0b:	e6 40                	out    %al,$0x40
    7e0d:	c6 06 a0             	movb   $0xa0,(%esi)
    7e10:	c5 00                	lds    (%eax),%eax
    7e12:	68 89 7e 6a 20       	push   $0x206a7e89
    7e17:	e8 50 00 83 c4       	call   c4837e6c <_data_end+0xc482b8c8>
    7e1c:	04 68                	add    $0x68,%al
    7e1e:	01 7f 6a             	add    %edi,0x6a(%edi)
    7e21:	24 e8                	and    $0xe8,%al
    7e23:	45                   	inc    %ebp
    7e24:	00 83 c4 04 68 67    	add    %al,0x676804c4(%ebx)
    7e2a:	7f 68                	jg     7e94 <interrupt_08h+0xb>
    7e2c:	80 00 e8             	addb   $0xe8,(%eax)
    7e2f:	39 00                	cmp    %eax,(%eax)
    7e31:	83 c4 04             	add    $0x4,%esp
    7e34:	68 69 7f 68 84       	push   $0x84687f69
    7e39:	00 e8                	add    %ch,%al
    7e3b:	2d 00 83 c4 04       	sub    $0x4c48300,%eax
    7e40:	68 be 7f 68 cc       	push   $0xcc687fbe
    7e45:	00 e8                	add    %ch,%al
    7e47:	21 00                	and    %eax,(%eax)
    7e49:	83 c4 04             	add    $0x4,%esp
    7e4c:	68 c5 7f 68 d0       	push   $0xd0687fc5
    7e51:	00 e8                	add    %ch,%al
    7e53:	15 00 83 c4 04       	adc    $0x4c48300,%eax
    7e58:	68 79 7f 68 60       	push   $0x60687f79
    7e5d:	02 e8                	add    %al,%ch
    7e5f:	09 00                	or     %eax,(%eax)
    7e61:	83 c4 04             	add    $0x4,%esp
    7e64:	e8 4e 02 fa eb       	call   ebfa80b7 <_data_end+0xebf9bb13>
    7e69:	fe                   	.byte 0xfe

00007e6a <install_int>:
    7e6a:	55                   	push   %ebp
    7e6b:	89 e5                	mov    %esp,%ebp
    7e6d:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    7e72:	8b 76 04             	mov    0x4(%esi),%esi
    7e75:	8b 4e 06             	mov    0x6(%esi),%ecx
    7e78:	26 89 0c 26          	mov    %ecx,%es:(%esi,%eiz,1)
    7e7c:	8c 4c 02 8e          	mov    %cs,-0x72(%edx,%eax,1)
    7e80:	c0                   	.byte 0xc0
    7e81:	5d                   	pop    %ebp
    7e82:	c3                   	ret    

00007e83 <int_08_what_to_play>:
	...

00007e85 <sys_int08_arrive>:
    7e85:	00 00                	add    %al,(%eax)
	...

00007e89 <interrupt_08h>:
    7e89:	fa                   	cli    
    7e8a:	06                   	push   %es
    7e8b:	60                   	pusha  
    7e8c:	b0 01                	mov    $0x1,%al
    7e8e:	86 06                	xchg   %al,(%esi)
    7e90:	85 7e 8c             	test   %edi,-0x74(%esi)
    7e93:	c8 8e c0 b9          	enter  $0xc08e,$0xb9
    7e97:	00 b8 8e e9 b4 09    	add    %bh,0x9b4e98e(%eax)

00007e9d <test_up>:
    7e9d:	26 83 3e 83          	cmpl   $0xffffff83,%es:(%esi)
    7ea1:	7e 10                	jle    7eb3 <test_left+0x5>
    7ea3:	7d 09                	jge    7eae <test_left>
    7ea5:	b0 7c                	mov    $0x7c,%al
    7ea7:	26 ff 06             	incl   %es:(%esi)
    7eaa:	83 7e eb 3a          	cmpl   $0x3a,-0x15(%esi)

00007eae <test_left>:
    7eae:	26 83 3e 83          	cmpl   $0xffffff83,%es:(%esi)
    7eb2:	7e 20                	jle    7ed4 <test_down+0x4>
    7eb4:	7d 09                	jge    7ebf <test_right>
    7eb6:	b0 2f                	mov    $0x2f,%al
    7eb8:	26 ff 06             	incl   %es:(%esi)
    7ebb:	83 7e eb 29          	cmpl   $0x29,-0x15(%esi)

00007ebf <test_right>:
    7ebf:	26 83 3e 83          	cmpl   $0xffffff83,%es:(%esi)
    7ec3:	7e 30                	jle    7ef5 <test_input_over+0xd>
    7ec5:	7d 09                	jge    7ed0 <test_down>
    7ec7:	b0 2d                	mov    $0x2d,%al
    7ec9:	26 ff 06             	incl   %es:(%esi)
    7ecc:	83 7e eb 18          	cmpl   $0x18,-0x15(%esi)

00007ed0 <test_down>:
    7ed0:	26 83 3e 83          	cmpl   $0xffffff83,%es:(%esi)
    7ed4:	7e 40                	jle    7f16 <interrupt_09h+0x15>
    7ed6:	7d 09                	jge    7ee1 <reset_char>
    7ed8:	b0 5c                	mov    $0x5c,%al
    7eda:	26 ff 06             	incl   %es:(%esi)
    7edd:	83 7e eb 07          	cmpl   $0x7,-0x15(%esi)

00007ee1 <reset_char>:
    7ee1:	26 c7 06 83 7e 00 00 	movl   $0x7e83,%es:(%esi)

00007ee8 <test_input_over>:
    7ee8:	65 a3 52 00 b0 20    	mov    %eax,%gs:0x20b00052
    7eee:	e6 20                	out    %al,$0x20
    7ef0:	e6 a0                	out    %al,$0xa0
    7ef2:	61                   	popa   
    7ef3:	07                   	pop    %es
    7ef4:	fb                   	sti    
    7ef5:	cf                   	iret   

00007ef6 <ouchs>:
    7ef6:	4f                   	dec    %edi
    7ef7:	55                   	push   %ebp
    7ef8:	43                   	inc    %ebx
    7ef9:	48                   	dec    %eax
    7efa:	21 4f 55             	and    %ecx,0x55(%edi)
    7efd:	43                   	inc    %ebx
    7efe:	48                   	dec    %eax
    7eff:	21                   	.byte 0x21

00007f00 <len_ouch>:
    7f00:	0a                   	.byte 0xa

00007f01 <interrupt_09h>:
    7f01:	fa                   	cli    
    7f02:	60                   	pusha  
    7f03:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    7f08:	89 dd                	mov    %ebx,%ebp
    7f0a:	b4 09                	mov    $0x9,%ah
    7f0c:	b0 4f                	mov    $0x4f,%al
    7f0e:	65 a3 3c 00 b0 55    	mov    %eax,%gs:0x55b0003c
    7f14:	65 a3 3e 00 b0 43    	mov    %eax,%gs:0x43b0003e
    7f1a:	65 a3 40 00 b0 48    	mov    %eax,%gs:0x48b00040
    7f20:	65 a3 42 00 b0 53    	mov    %eax,%gs:0x53b00042
    7f26:	65 a3 44 00 b0 21    	mov    %eax,%gs:0x21b00044
    7f2c:	65 a3 46 00 b0 4f    	mov    %eax,%gs:0x4fb00046
    7f32:	65 a3 48 00 b0 55    	mov    %eax,%gs:0x55b00048
    7f38:	65 a3 4a 00 b0 43    	mov    %eax,%gs:0x43b0004a
    7f3e:	65 a3 4c 00 b0 48    	mov    %eax,%gs:0x48b0004c
    7f44:	65 a3 4e 00 b0 21    	mov    %eax,%gs:0x21b0004e
    7f4a:	65 a3 50 00 1e 06    	mov    %eax,%gs:0x61e0050
    7f50:	8c c8                	mov    %cs,%eax
    7f52:	8e d8                	mov    %eax,%ds
    7f54:	8e c0                	mov    %eax,%es
    7f56:	66 e8 ca 02          	callw  8224 <dect_mode+0x2a>
    7f5a:	00 00                	add    %al,(%eax)
    7f5c:	07                   	pop    %es
    7f5d:	1f                   	pop    %ds
    7f5e:	b0 20                	mov    $0x20,%al
    7f60:	e6 20                	out    %al,$0x20
    7f62:	e6 a0                	out    %al,$0xa0
    7f64:	61                   	popa   
    7f65:	fb                   	sti    
    7f66:	cf                   	iret   

00007f67 <interrupt_20h>:
    7f67:	b4 4c                	mov    $0x4c,%ah

00007f69 <interrupt_21h>:
    7f69:	80 fc 4c             	cmp    $0x4c,%ah
    7f6c:	75 09                	jne    7f77 <panic_21h_func_not_impl>
    7f6e:	83 c4 06             	add    $0x6,%esp
    7f71:	66 ff 26             	jmpw   *(%esi)
    7f74:	0a                   	.byte 0xa
    7f75:	a0                   	.byte 0xa0
    7f76:	cf                   	iret   

00007f77 <panic_21h_func_not_impl>:
    7f77:	eb fe                	jmp    7f77 <panic_21h_func_not_impl>

00007f79 <interrupt_98h>:
    7f79:	fa                   	cli    
    7f7a:	80 fc 00             	cmp    $0x0,%ah
    7f7d:	75 08                	jne    7f87 <func_01>

00007f7f <func_00>:
    7f7f:	66 e8 23 04          	callw  83a6 <sleep_loop+0x14>
    7f83:	00 00                	add    %al,(%eax)
    7f85:	eb 36                	jmp    7fbd <func_03>

00007f87 <func_01>:
    7f87:	80 fc 01             	cmp    $0x1,%ah
    7f8a:	75 0f                	jne    7f9b <func_02>
    7f8c:	60                   	pusha  
    7f8d:	66 50                	push   %ax
    7f8f:	66 e8 00 01          	callw  8093 <_Z19sys_get_current_ttyv+0xb>
    7f93:	00 00                	add    %al,(%eax)
    7f95:	83 c4 04             	add    $0x4,%esp
    7f98:	61                   	popa   
    7f99:	eb 22                	jmp    7fbd <func_03>

00007f9b <func_02>:
    7f9b:	80 fc 02             	cmp    $0x2,%ah
    7f9e:	75 1d                	jne    7fbd <func_03>
    7fa0:	06                   	push   %es
    7fa1:	60                   	pusha  
    7fa2:	8c c8                	mov    %cs,%eax
    7fa4:	8e c0                	mov    %eax,%es
    7fa6:	fb                   	sti    

00007fa7 <sleep_loop>:
    7fa7:	26 80 3e 85          	cmpb   $0x85,%es:(%esi)
    7fab:	7e 00                	jle    7fad <sleep_loop+0x6>
    7fad:	74 f8                	je     7fa7 <sleep_loop>
    7faf:	b8 00 00 26 86       	mov    $0x86260000,%eax
    7fb4:	06                   	push   %es
    7fb5:	85 7e e2             	test   %edi,-0x1e(%esi)
    7fb8:	ee                   	out    %al,(%dx)
    7fb9:	61                   	popa   
    7fba:	07                   	pop    %es
    7fbb:	eb 00                	jmp    7fbd <func_03>

00007fbd <func_03>:
    7fbd:	cf                   	iret   

00007fbe <interrupt_33h>:
    7fbe:	66 e8 d5 06          	callw  8697 <sys_read_disk+0x61>
    7fc2:	00 00                	add    %al,(%eax)
    7fc4:	cf                   	iret   

00007fc5 <interrupt_34h>:
    7fc5:	66 e8 7c 07          	callw  8745 <interrupt_33h_c+0xac>
    7fc9:	00 00                	add    %al,(%eax)
    7fcb:	cf                   	iret   

00007fcc <_ZL8print_okPc>:
    int mask = 0x00FF;
    ch = ch & mask;
    sys_get_current_tty()->putchar(ch);
}
const char* str = "Welcome to HHOS version 1.2.0\nYou can input help to see how to use it!";
static inline void print_ok(char * mod) {
    7fcc:	66 55                	push   %bp
    7fce:	66 89 e5             	mov    %sp,%bp
    printf("%s init [", mod);
    7fd1:	66 50                	push   %ax
    7fd3:	66 68 a0 c1          	pushw  $0xc1a0
    7fd7:	00 00                	add    %al,(%eax)
    7fd9:	66 e8 f6 17          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    7fdd:	00 00                	add    %al,(%eax)
    {
        cur_y = y;
    }
    void set_color(int _color)
    {
        color = _color;
    7fdf:	66 a1 80 ac 67 66    	mov    0x6667ac80,%ax
    7fe5:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
    current_tty->set_color(MAKE_COLOR(VGA_BLACK, VGA_GREEN));
    printf("OK");
    7fec:	66 58                	pop    %ax
    7fee:	66 5a                	pop    %dx
    7ff0:	66 68 aa c1          	pushw  $0xc1aa
    7ff4:	00 00                	add    %al,(%eax)
    7ff6:	66 e8 d9 17          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    7ffa:	00 00                	add    %al,(%eax)
    7ffc:	66 a1 80 ac 67 66    	mov    0x6667ac80,%ax
    8002:	c7 40 08 07 00 00 00 	movl   $0x7,0x8(%eax)
    current_tty->set_color(MAKE_COLOR(VGA_BLACK, VGA_WHITE));
    printf("]\n");
    8009:	67 66 c7 04 24 ad    	movw   $0xad24,(%si)
    800f:	c1 00 00             	roll   $0x0,(%eax)
    8012:	66 e8 bd 17          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    8016:	00 00                	add    %al,(%eax)
}
    8018:	66 59                	pop    %cx
    801a:	66 c9                	leavew 
    801c:	66 c3                	retw   

0000801e <_ZN3tty11move_cursorEii.isra.1>:
    }
    void move_cursor(int x, int y)
    801e:	66 55                	push   %bp
    8020:	66 89 e5             	mov    %sp,%bp
    8023:	66 53                	push   %bx
    {
        uint16_t pos = x * 80 + y;
    8025:	6b c0 50             	imul   $0x50,%eax,%eax
    8028:	67 66 8d 1c          	lea    (%si),%bx
    802c:	10 66 6a             	adc    %ah,0x6a(%esi)
        sys_outb(0x3D4, 0x0F);
    802f:	0f 66 68 d4          	pcmpgtd -0x2c(%eax),%mm5
    8033:	03 00                	add    (%eax),%eax
    8035:	00 66 e8             	add    %ah,-0x18(%esi)
    8038:	c5 05 00 00 66 58    	lds    0x58660000,%eax
        sys_outb(0x3D5, (uint8_t) (pos & 0xFF));
    803e:	66 5a                	pop    %dx
    8040:	66 0f b6 c3          	movzbw %bl,%ax
    8044:	66 50                	push   %ax
    8046:	66 68 d5 03          	pushw  $0x3d5
    804a:	00 00                	add    %al,(%eax)
    804c:	66 e8 af 05          	callw  85ff <sys_inb+0xd>
    8050:	00 00                	add    %al,(%eax)
        sys_outb(0x3D4, 0x0E);
    8052:	66 59                	pop    %cx
    8054:	66 58                	pop    %ax
    8056:	66 6a 0e             	pushw  $0xe
    8059:	66 68 d4 03          	pushw  $0x3d4
    805d:	00 00                	add    %al,(%eax)
    805f:	66 e8 9c 05          	callw  85ff <sys_inb+0xd>
    8063:	00 00                	add    %al,(%eax)
        sys_outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
    8065:	66 58                	pop    %ax
    8067:	66 5a                	pop    %dx
    8069:	66 0f b6 df          	movzbw %bh,%bx
    806d:	66 53                	push   %bx
    806f:	66 68 d5 03          	pushw  $0x3d5
    8073:	00 00                	add    %al,(%eax)
    8075:	66 e8 86 05          	callw  85ff <sys_inb+0xd>
    8079:	00 00                	add    %al,(%eax)
    807b:	66 59                	pop    %cx
    807d:	66 5b                	pop    %bx
    }
    807f:	67 66 8b 5d fc       	mov    -0x4(%di),%bx
    8084:	66 c9                	leavew 
    8086:	66 c3                	retw   

00008088 <_Z19sys_get_current_ttyv>:
tty* sys_get_current_tty(){return current_tty;}
    8088:	66 55                	push   %bp
    808a:	66 89 e5             	mov    %sp,%bp
    808d:	66 a1 80 ac 66 5d    	mov    0x5d66ac80,%ax
    8093:	66 c3                	retw   

00008095 <sys_current_tty_putchar>:
{
    8095:	66 55                	push   %bp
    8097:	66 89 e5             	mov    %sp,%bp
    ch = ch & mask;
    809a:	67 66 0f b6 45 08    	movzbw 0x8(%di),%ax
    sys_get_current_tty()->putchar(ch);
    80a0:	66 50                	push   %ax
    80a2:	66 ff 36             	pushw  (%esi)
    80a5:	80 ac 66 e8 17 18 00 	subb   $0x0,0x1817e8(%esi,%eiz,2)
    80ac:	00 
}
    80ad:	66 58                	pop    %ax
    80af:	66 5a                	pop    %dx
    80b1:	66 c9                	leavew 
    80b3:	66 c3                	retw   

000080b5 <kernel_main>:
extern "C" void kernel_main()
{
    80b5:	66 55                	push   %bp
    80b7:	66 89 e5             	mov    %sp,%bp
    80ba:	66 53                	push   %bx
    80bc:	66 81 ec d8 0d       	sub    $0xdd8,%sp
    80c1:	00 00                	add    %al,(%eax)
        sys_bios_clear_screen();
    80c3:	66 e8 6a 02          	callw  8331 <sys_bios_print_string+0x21>
    80c7:	00 00                	add    %al,(%eax)
        tty_init();
    80c9:	67 66 8d 9d 24 f2    	lea    -0xddc(%di),%bx
    80cf:	ff                   	(bad)  
    80d0:	ff 66 53             	jmp    *0x53(%esi)
    80d3:	66 e8 b3 17          	callw  988a <_ZN2sh2bfEPKcS1_.isra.4+0x76>
    80d7:	00 00                	add    %al,(%eax)
    tty tty1;
    current_tty = &tty1;
    80d9:	66 89 1e             	mov    %bx,(%esi)
    80dc:	80 ac 66 59 66 b8 b0 	subb   $0xc1,-0x4f4799a7(%esi,%eiz,2)
    80e3:	c1 
    print_ok("TTY");
    80e4:	00 00                	add    %al,(%eax)
    80e6:	66 e8 e0 fe          	callw  7fca <interrupt_34h+0x5>
    80ea:	ff                   	(bad)  
    80eb:	ff 67 66             	jmp    *0x66(%edi)
        return -1;
    }


public:
    sh(){
    80ee:	c7 85 30 f2 ff ff 08 	movl   $0x8,-0xdd0(%ebp)
    80f5:	00 00 00 
    80f8:	66 31 c0             	xor    %ax,%ax
    struct cmd{
    80fb:	67 66 8d 9d 30 f2    	lea    -0xdd0(%di),%bx
    8101:	ff                   	(bad)  
    8102:	ff 67 66             	jmp    *0x66(%edi)
    8105:	c7 84 05 38 f3 ff ff 	movl   $0x0,-0xcc8(%ebp,%eax,1)
    810c:	00 00 00 00 
    8110:	66 83 c0 08          	add    $0x8,%ax
    sh(){
    8114:	66 3d 00 01          	cmp    $0x100,%ax
    8118:	00 00                	add    %al,(%eax)
    811a:	75 e7                	jne    8103 <kernel_main+0x4e>
    811c:	67 66 c7 85 b4 fd ff 	movw   $0xffff,-0x24c(%di)
    8123:	ff 
    8124:	00 00                	add    %al,(%eax)
    8126:	00 00                	add    %al,(%eax)
    8128:	67 66 c7 85 b8 fd ff 	movw   $0xffff,-0x248(%di)
    812f:	ff 
    8130:	00 00                	add    %al,(%eax)
    8132:	00 00                	add    %al,(%eax)
        memset(buf, 0, buf_size);
    8134:	66 68 80 00          	pushw  $0x80
    8138:	00 00                	add    %al,(%eax)
    813a:	66 6a 00             	pushw  $0x0
    813d:	67 66 8d 85 34 f4    	lea    -0xbcc(%di),%ax
    8143:	ff                   	(bad)  
    8144:	ff 66 50             	jmp    *0x50(%esi)
    8147:	66 e8 de 0a          	callw  8c29 <_Z7memmovePvPKvm+0x4b>
    814b:	00 00                	add    %al,(%eax)
        read_prog_record();
    814d:	66 83 c4 0c          	add    $0xc,%sp
    8151:	66 53                	push   %bx
    8153:	66 e8 4b 1b          	callw  9ca2 <_ZN2sh4execERKNS_3cmdE+0x2dc>
    8157:	00 00                	add    %al,(%eax)
        sys_read_disk(0, (uint32_t)help, HELP_FILE_SECTOR, 1);
    8159:	67 66 c7 04 24 01    	movw   $0x124,(%si)
    815f:	00 00                	add    %al,(%eax)
    8161:	00 66 6a             	add    %ah,0x6a(%esi)
    8164:	40                   	inc    %eax
    8165:	67 66 8d 85 b4 fb    	lea    -0x44c(%di),%ax
    816b:	ff                   	(bad)  
    816c:	ff 66 50             	jmp    *0x50(%esi)
    816f:	66 6a 00             	pushw  $0x0
    8172:	66 e8 be 04          	callw  8634 <sys_get_scancode+0xf>
    8176:	00 00                	add    %al,(%eax)
    sh sh1;
    print_ok("Shell");
    8178:	66 83 c4 10          	add    $0x10,%sp
    817c:	66 b8 b4 c1          	mov    $0xc1b4,%ax
    8180:	00 00                	add    %al,(%eax)
    8182:	66 e8 44 fe          	callw  7fca <interrupt_34h+0x5>
    8186:	ff                   	(bad)  
    8187:	ff 66 ff             	jmp    *-0x1(%esi)
    printf("%s\n", str);
    818a:	36 70 bc             	ss jo  8149 <kernel_main+0x94>
    818d:	66 68 9c c2          	pushw  $0xc29c
    8191:	00 00                	add    %al,(%eax)
    8193:	66 e8 3c 16          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    8197:	00 00                	add    %al,(%eax)
    sh1.run();
    8199:	66 58                	pop    %ax
    819b:	66 5a                	pop    %dx
    819d:	66 53                	push   %bx
    819f:	66 e8 3d 1c          	callw  9de0 <_ZN2sh16read_prog_recordEv+0x13c>
	...

000081a5 <kb_buf_in>:
    VGA_YELLOW			=   0x0E,
    VGA_BRIGHT_WHITE	=   0x0F
};

int kb_buf_in(unsigned char ch)
{
    81a5:	66 55                	push   %bp
    81a7:	66 89 e5             	mov    %sp,%bp
    kb_buf[buf_pos] = ch;
    81aa:	67 66 8b 55 08       	mov    0x8(%di),%dx
    81af:	66 a1 88 ac 67 88    	mov    0x8867ac88,%ax
    81b5:	90                   	nop
    81b6:	80 c5 00             	add    $0x0,%ch
    81b9:	00 66 f0             	add    %ah,-0x10(%esi)
    __sync_add_and_fetch (&buf_pos, 1);
    81bc:	ff 06                	incl   (%esi)
    81be:	88 ac 66 31 c0 66 5d 	mov    %ch,0x5d66c031(%esi,%eiz,2)
    return 0;
}
    81c5:	66 c3                	retw   

000081c7 <kb_buf_out>:
unsigned char kb_buf_out()
{
    81c7:	66 55                	push   %bp
    81c9:	66 89 e5             	mov    %sp,%bp
    int val = __sync_add_and_fetch(&buf_pos, 0);
    81cc:	66 31 c0             	xor    %ax,%ax
    81cf:	66 f0 0f c1 06       	lock xadd %ax,(%esi)
    81d4:	88 ac fb 66 85 c0 75 	mov    %ch,0x75c08566(%ebx,%edi,8)
    asm volatile("sti\n\t");
    while(val == 0){
    81db:	0c 66                	or     $0x66,%al
        val = __sync_add_and_fetch(&buf_pos, 0);
    81dd:	31 c0                	xor    %eax,%eax
    81df:	66 f0 0f c1 06       	lock xadd %ax,(%esi)
    81e4:	88 ac eb ef fa 67 8a 	mov    %ch,-0x75980511(%ebx,%ebp,8)
    }
    asm volatile("cli\n\t");
    unsigned char ch = kb_buf[val-1];
    81eb:	80 7f c5 00          	cmpb   $0x0,-0x3b(%edi)
    81ef:	00 66 f0             	add    %ah,-0x10(%esi)
    __sync_fetch_and_sub(&buf_pos, 1);
    81f2:	ff 0e                	decl   (%esi)
    81f4:	88                   	.byte 0x88
    81f5:	ac                   	lods   %ds:(%esi),%al
    return ch;
}
    81f6:	66 5d                	pop    %bp
    81f8:	66 c3                	retw   

000081fa <dect_mode>:
  [0xD2] = KEY_INS,   [0xD3] = KEY_DEL
};



unsigned char dect_mode(char sc){
    81fa:	66 55                	push   %bp
    81fc:	66 89 e5             	mov    %sp,%bp
    char ch = sc & 0x7f;
    81ff:	67 8a 45 08          	mov    0x8(%di),%al
    8203:	66 83 e0 7f          	and    $0x7f,%ax

    if (kb_mode & E0ESC) { 
    8207:	f6 06 84             	testb  $0x84,(%esi)
    820a:	ac                   	lods   %ds:(%esi),%al
    820b:	40                   	inc    %eax
    820c:	75 08                	jne    8216 <dect_mode+0x1c>
        switch (ch) {
            case 0x1D: return CTRL;
        }
    }
    else {
        switch(ch) {
    820e:	3c 2a                	cmp    $0x2a,%al
    8210:	74 0e                	je     8220 <dect_mode+0x26>
    8212:	3c 36                	cmp    $0x36,%al
    8214:	74 0a                	je     8220 <dect_mode+0x26>
            case 0x2A:
            case 0x36: return SHIFT;
            case 0x1D: return CTRL;
        }
    }
    return 0;
    8216:	3c 1d                	cmp    $0x1d,%al
    8218:	0f 94 c0             	sete   %al
    821b:	66 01 c0             	add    %ax,%ax
    821e:	eb 02                	jmp    8222 <dect_mode+0x28>
            case 0x36: return SHIFT;
    8220:	b0 01                	mov    $0x1,%al
}
    8222:	66 5d                	pop    %bp
    8224:	66 c3                	retw   

00008226 <kb_handler>:
    asm volatile ( "inb %1, %0"
    8226:	e4 64                	in     $0x64,%al
};
void kb_handler() {
  unsigned int st, data, c;

  st = sys_inb(KBSTATP);
  if((st & KBS_DIB) == 0)
    8228:	a8 01                	test   $0x1,%al
    822a:	0f 84 df 00 e4 60    	je     60e4830f <_data_end+0x60e3bd6b>
    return;
  data = sys_inb(KBDATAP);
    8230:	66 0f b6 c8          	movzbw %al,%cx
    8234:	66 8b 16             	mov    (%esi),%dx
    8237:	a0 c5 66 81 f9       	mov    0xf98166c5,%al

  if(data == 0xE0){
    823c:	e0 00                	loopne 823e <kb_handler+0x18>
    823e:	00 00                	add    %al,(%eax)
    8240:	75 0d                	jne    824f <kb_handler+0x29>
    ctrl_shift_status |= E0ESC;
    8242:	66 89 d0             	mov    %dx,%ax
    8245:	66 83 c8 40          	or     $0x40,%ax
    8249:	66 a3 a0 c5 66 c3    	mov    %ax,0xc366c5a0
void kb_handler() {
    824f:	66 55                	push   %bp
    8251:	66 89 e5             	mov    %sp,%bp
    8254:	66 53                	push   %bx
    8256:	66 89 d3             	mov    %dx,%bx
    8259:	66 83 e3 40          	and    $0x40,%bx
    return;
  } else if(data & 0x80){
    825d:	84 c0                	test   %al,%al
    825f:	79 27                	jns    8288 <kb_handler+0x62>
    // Key released
    data = (ctrl_shift_status & E0ESC ? data : data & 0x7F);
    8261:	66 85 db             	test   %bx,%bx
    8264:	75 07                	jne    826d <kb_handler+0x47>
    8266:	66 89 c1             	mov    %ax,%cx
    8269:	66 83 e1 7f          	and    $0x7f,%cx
    ctrl_shift_status &= ~(shiftcode[data] | E0ESC);
    826d:	67 8a 81 a0 c0       	mov    -0x3f60(%bx,%di),%al
    8272:	00 00                	add    %al,(%eax)
    8274:	66 83 c8 40          	or     $0x40,%ax
    8278:	66 0f b6 c0          	movzbw %al,%ax
    827c:	66 f7 d0             	not    %ax
    827f:	66 21 d0             	and    %dx,%ax
    8282:	66 a3 a0 c5 eb 7c    	mov    %ax,0x7cebc5a0
    return;
  } else if(ctrl_shift_status & E0ESC){
    8288:	66 85 db             	test   %bx,%bx
    828b:	74 13                	je     82a0 <kb_handler+0x7a>
    // Last character was an E0 escape; or with 0x80
    data |= 0x80;
    828d:	66 83 c8 80          	or     $0xff80,%ax
    8291:	66 0f b6 c8          	movzbw %al,%cx
    ctrl_shift_status &= ~E0ESC;
    8295:	66 89 d0             	mov    %dx,%ax
    8298:	66 83 e0 bf          	and    $0xffbf,%ax
    829c:	66 a3 a0 c5 67 66    	mov    %ax,0x6667c5a0
  }

  ctrl_shift_status |= shiftcode[data];
    82a2:	0f b6 91 a0 c0 00 00 	movzbl 0xc0a0(%ecx),%edx
    82a9:	66 0b 16             	or     (%esi),%dx
    82ac:	a0 c5 67 66 0f       	mov    0xf6667c5,%al
  ctrl_shift_status ^= togglecode[data];
    82b1:	b6 81                	mov    $0x81,%dh
    82b3:	a0 bf 00 00 66       	mov    0x660000bf,%al
    82b8:	31 c2                	xor    %eax,%edx
    82ba:	66 89 16             	mov    %dx,(%esi)
    82bd:	a0 c5 66 89 d0       	mov    0xd08966c5,%al
  c = charcode[ctrl_shift_status & (CTRL | SHIFT)][data];
    82c2:	66 83 e0 03          	and    $0x3,%ax
    82c6:	67 66 8b 04          	mov    (%si),%ax
    82ca:	85 80 bc 00 00 67    	test   %eax,0x670000bc(%eax)
    82d0:	66 0f b6 04 08       	movzbw (%eax,%ecx,1),%ax
  if(ctrl_shift_status & CAPSLOCK){
    82d5:	80 e2 08             	and    $0x8,%dl
    82d8:	74 20                	je     82fa <kb_handler+0xd4>
    if('a' <= c && c <= 'z')
    82da:	67 66 8d 50 9f       	lea    -0x61(%bx,%si),%dx
    82df:	66 83 fa 19          	cmp    $0x19,%dx
    82e3:	77 06                	ja     82eb <kb_handler+0xc5>
      c += 'A' - 'a';
    82e5:	66 83 e8 20          	sub    $0x20,%ax
    82e9:	eb 0f                	jmp    82fa <kb_handler+0xd4>
    else if('A' <= c && c <= 'Z')
    82eb:	67 66 8d 50 bf       	lea    -0x41(%bx,%si),%dx
    82f0:	66 83 fa 19          	cmp    $0x19,%dx
    82f4:	77 04                	ja     82fa <kb_handler+0xd4>
      c += 'a' - 'A';
    82f6:	66 83 c0 20          	add    $0x20,%ax
  }
  kb_buf_in(c);
    82fa:	66 50                	push   %ax
    82fc:	66 e8 a3 fe          	callw  81a3 <kernel_main+0xee>
    8300:	ff                   	(bad)  
    8301:	ff 66 58             	jmp    *0x58(%esi)
}
    8304:	67 66 8b 5d fc       	mov    -0x4(%di),%bx
    8309:	66 c9                	leavew 
    830b:	66 c3                	retw   
    830d:	66 c3                	retw   
    830f:	90                   	nop

00008310 <sys_bios_print_string>:
    8310:	55                   	push   %ebp
    8311:	89 e5                	mov    %esp,%ebp
    8313:	8b 4e 0a             	mov    0xa(%esi),%ecx
    8316:	8b 5e 0e             	mov    0xe(%esi),%ebx
    8319:	b7 00                	mov    $0x0,%bh
    831b:	8b 56 12             	mov    0x12(%esi),%edx
    831e:	8c d8                	mov    %ds,%eax
    8320:	8e c0                	mov    %eax,%es
    8322:	b8 01 13 8e ed       	mov    $0xed8e1301,%eax
    8327:	8b 6e 06             	mov    0x6(%esi),%ebp
    832a:	cd 10                	int    $0x10
    832c:	8c ed                	mov    %gs,%ebp
    832e:	5d                   	pop    %ebp
    832f:	66 59                	pop    %cx
    8331:	ff e1                	jmp    *%ecx

00008333 <sys_bios_clear_screen>:
    8333:	60                   	pusha  
    8334:	b4 06                	mov    $0x6,%ah
    8336:	b0 00                	mov    $0x0,%al
    8338:	b7 07                	mov    $0x7,%bh
    833a:	b5 00                	mov    $0x0,%ch
    833c:	b1 00                	mov    $0x0,%cl
    833e:	b6 18                	mov    $0x18,%dh
    8340:	b2 4f                	mov    $0x4f,%dl
    8342:	cd 10                	int    $0x10
    8344:	61                   	popa   
    8345:	66 59                	pop    %cx
    8347:	ff e1                	jmp    *%ecx

00008349 <sys_bios_getchar>:
    8349:	b4 00                	mov    $0x0,%ah
    834b:	cd 16                	int    $0x16
    834d:	b4 00                	mov    $0x0,%ah
    834f:	c3                   	ret    

00008350 <sys_execve_bin>:
    8350:	55                   	push   %ebp
    8351:	89 e5                	mov    %esp,%ebp
    8353:	60                   	pusha  
    8354:	1e                   	push   %ds
    8355:	06                   	push   %es
    8356:	b8 00 10 8e d8       	mov    $0xd88e1000,%eax
    835b:	8e c0                	mov    %eax,%es
    835d:	8e d0                	mov    %eax,%ss
    835f:	c7 06 00 a0 cd 00    	movl   $0xcda000,(%esi)
    8365:	c7 06 02 a0 20 00    	movl   $0x20a002,(%esi)
    836b:	c7 06 0a a0 7a 83    	movl   $0x837aa00a,(%esi)
    8371:	8c 0e                	mov    %cs,(%esi)
    8373:	0c a0                	or     $0xa0,%al
    8375:	ea                   	.byte 0xea
    8376:	00                   	.byte 0x0
    8377:	a1                   	.byte 0xa1
    8378:	00 10                	add    %dl,(%eax)

0000837a <return_point>:
    837a:	b8 00 00 8e d0       	mov    $0xd08e0000,%eax
    837f:	58                   	pop    %eax
    8380:	8e c0                	mov    %eax,%es
    8382:	58                   	pop    %eax
    8383:	8e d8                	mov    %eax,%ds
    8385:	61                   	popa   
    8386:	5d                   	pop    %ebp
    8387:	66 59                	pop    %cx
    8389:	ff e1                	jmp    *%ecx

0000838b <sys_sleep>:
    838b:	55                   	push   %ebp
    838c:	89 e5                	mov    %esp,%ebp
    838e:	60                   	pusha  
    838f:	8b 4e 0a             	mov    0xa(%esi),%ecx

00008392 <sleep_loop>:
    8392:	80 3e 85             	cmpb   $0x85,(%esi)
    8395:	7e 00                	jle    8397 <sleep_loop+0x5>
    8397:	74 f9                	je     8392 <sleep_loop>
    8399:	b8 00 00 86 06       	mov    $0x6860000,%eax
    839e:	85 7e e2             	test   %edi,-0x1e(%esi)
    83a1:	f0 61                	lock popa 
    83a3:	5d                   	pop    %ebp
    83a4:	66 59                	pop    %cx
    83a6:	ff e1                	jmp    *%ecx

000083a8 <sys_getchar>:
#include "sys_lib.h"
#include "../kernel/kb.h"

extern "C" int sys_getchar()
{
    83a8:	66 55                	push   %bp
    83aa:	66 89 e5             	mov    %sp,%bp
    unsigned char ch = kb_buf_out();
    83ad:	66 e8 14 fe          	callw  81c5 <kb_buf_in+0x20>
    83b1:	ff                   	(bad)  
    83b2:	ff 66 0f             	jmp    *0xf(%esi)
    return ch;
    83b5:	b6 c0                	mov    $0xc0,%dh
}
    83b7:	66 5d                	pop    %bp
    83b9:	66 c3                	retw   

000083bb <sys_bios_print_int>:

void sys_bios_print_int(int num, int color, int pos)
{
    83bb:	66 55                	push   %bp
    83bd:	66 89 e5             	mov    %sp,%bp
    83c0:	66 57                	push   %di
    83c2:	66 56                	push   %si
    83c4:	66 53                	push   %bx
    83c6:	66 50                	push   %ax
    int num_ = num;
    83c8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    83cd:	66 b9 01 00          	mov    $0x1,%cx
    83d1:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    83d3:	66 bb 0a 00          	mov    $0xa,%bx
    83d7:	00 00                	add    %al,(%eax)
    83d9:	66 99                	cwtd   
    83db:	66 f7 fb             	idiv   %bx
    83de:	66 85 c0             	test   %ax,%ax
    83e1:	74 04                	je     83e7 <sys_bios_print_int+0x2c>
    83e3:	66 41                	inc    %cx
    83e5:	eb f2                	jmp    83d9 <sys_bios_print_int+0x1e>
    char arr[len + 1];
    83e7:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    83ec:	66 83 e0 fc          	and    $0xfffc,%ax
    83f0:	66 29 c4             	sub    %ax,%sp
    83f3:	66 89 e7             	mov    %sp,%di
    83f6:	67 66 8d 1c          	lea    (%si),%bx
    83fa:	0c 67                	or     $0x67,%al
    int power = 1;
    83fc:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    8402:	00 00                	add    %al,(%eax)
    for(int i = 0; i < len; ++i, power *= 10)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    8404:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8409:	66 99                	cwtd   
    840b:	67 66 f7 7d f0       	idivw  -0x10(%di)
    8410:	66 be 0a 00          	mov    $0xa,%si
    8414:	00 00                	add    %al,(%eax)
    8416:	66 99                	cwtd   
    8418:	66 f7 fe             	idiv   %si
    841b:	66 83 c2 30          	add    $0x30,%dx
    841f:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    8423:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    8429:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    842e:	66 4b                	dec    %bx
    8430:	66 39 df             	cmp    %bx,%di
    8433:	75 cf                	jne    8404 <sys_bios_print_int+0x49>
    arr[len] = '\0';
    8435:	67 c6 04 0f          	movb   $0xf,(%si)
    8439:	00 67 66             	add    %ah,0x66(%edi)
    sys_bios_print_string(arr, len, color, pos);
    843c:	ff 75 10             	pushl  0x10(%ebp)
    843f:	67 66 ff 75 0c       	pushw  0xc(%di)
    8444:	66 51                	push   %cx
    8446:	66 57                	push   %di
    8448:	66 e8 c2 fe          	callw  830e <kb_handler+0xe8>
    844c:	ff                   	(bad)  
    844d:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8450:	c4 10                	les    (%eax),%edx
    8452:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8457:	66 5b                	pop    %bx
    8459:	66 5e                	pop    %si
    845b:	66 5f                	pop    %di
    845d:	66 5d                	pop    %bp
    845f:	66 c3                	retw   

00008461 <sys_putchar>:
    //"mov word ptr gs:[bp],ax\n\t"
                   //".att_syntax noprefix\n\t");
//}

void sys_putchar(int c, int color, int x, int y)
{
    8461:	66 55                	push   %bp
    8463:	66 89 e5             	mov    %sp,%bp
    8466:	66 53                	push   %bx
    int offset = (x * 80 + y)*2;
    uint16_t ch = c | (color << 8);
    8468:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    846d:	66 c1 e0 08          	shl    $0x8,%ax
    8471:	67 66 0b 45 08       	or     0x8(%di),%ax
    int offset = (x * 80 + y)*2;
    8476:	67 66 6b 5d 10 50    	imul   $0x50,0x10(%di),%bx
    847c:	67 66 03 5d 14       	add    0x14(%di),%bx
    8481:	66 01 db             	add    %bx,%bx
    "mov word ptr gs:[bp],ax\n\t"
    "popa\n\t"
    ".att_syntax noprefix\n\t"
    :
    :"a"(ch),"b"(offset)
    :"%ecx");
    8484:	66 60                	pushaw 
    8486:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    848b:	89 dd                	mov    %ebx,%ebp
    848d:	65 89 46 00          	mov    %eax,%gs:0x0(%esi)
    8491:	66 61                	popaw  
}
    8493:	66 5b                	pop    %bx
    8495:	66 5d                	pop    %bp
    8497:	66 c3                	retw   

00008499 <sys_print_string>:
{
    8499:	66 55                	push   %bp
    849b:	66 89 e5             	mov    %sp,%bp
    849e:	66 56                	push   %si
    84a0:	66 53                	push   %bx
    84a2:	67 66 8b 5d 14       	mov    0x14(%di),%bx
    84a7:	67 66 8b 75 0c       	mov    0xc(%di),%si
    84ac:	66 01 de             	add    %bx,%si
    84af:	66 89 da             	mov    %bx,%dx
    for(unsigned int i = 0; i < len; ++i)
    84b2:	66 39 f2             	cmp    %si,%dx
    84b5:	74 28                	je     84df <sys_print_string+0x46>
        sys_putchar(str[i], color, x, y + i);
    84b7:	66 52                	push   %dx
    84b9:	67 66 ff 75 10       	pushw  0x10(%di)
    84be:	66 6a 07             	pushw  $0x7
    84c1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    84c6:	66 29 d8             	sub    %bx,%ax
    84c9:	67 66 0f be 04       	movsbw (%si),%ax
    84ce:	10 66 50             	adc    %ah,0x50(%esi)
    84d1:	66 e8 8a ff          	callw  845f <sys_bios_print_int+0xa4>
    84d5:	ff                   	(bad)  
    84d6:	ff 66 42             	jmp    *0x42(%esi)
    for(unsigned int i = 0; i < len; ++i)
    84d9:	66 83 c4 10          	add    $0x10,%sp
    84dd:	eb d3                	jmp    84b2 <sys_print_string+0x19>
}
    84df:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    84e4:	66 5b                	pop    %bx
    84e6:	66 5e                	pop    %si
    84e8:	66 5d                	pop    %bp
    84ea:	66 c3                	retw   

000084ec <sys_print_int>:
{
    84ec:	66 55                	push   %bp
    84ee:	66 89 e5             	mov    %sp,%bp
    84f1:	66 57                	push   %di
    84f3:	66 56                	push   %si
    84f5:	66 53                	push   %bx
    84f7:	66 50                	push   %ax
    int num_ = num;
    84f9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    84fe:	66 b9 01 00          	mov    $0x1,%cx
    8502:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    8504:	66 bb 0a 00          	mov    $0xa,%bx
    8508:	00 00                	add    %al,(%eax)
    850a:	66 99                	cwtd   
    850c:	66 f7 fb             	idiv   %bx
    850f:	66 85 c0             	test   %ax,%ax
    8512:	74 04                	je     8518 <sys_print_int+0x2c>
    8514:	66 41                	inc    %cx
    8516:	eb f2                	jmp    850a <sys_print_int+0x1e>
    char arr[len + 1];
    8518:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    851d:	66 83 e0 fc          	and    $0xfffc,%ax
    8521:	66 29 c4             	sub    %ax,%sp
    8524:	66 89 e7             	mov    %sp,%di
    8527:	67 66 8d 1c          	lea    (%si),%bx
    852b:	0c 67                	or     $0x67,%al
    int power = 1;
    852d:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    8533:	00 00                	add    %al,(%eax)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    8535:	67 66 8b 45 08       	mov    0x8(%di),%ax
    853a:	66 99                	cwtd   
    853c:	67 66 f7 7d f0       	idivw  -0x10(%di)
    8541:	66 be 0a 00          	mov    $0xa,%si
    8545:	00 00                	add    %al,(%eax)
    8547:	66 99                	cwtd   
    8549:	66 f7 fe             	idiv   %si
    854c:	66 83 c2 30          	add    $0x30,%dx
    8550:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    8554:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    855a:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    855f:	66 4b                	dec    %bx
    8561:	66 39 df             	cmp    %bx,%di
    8564:	75 cf                	jne    8535 <sys_print_int+0x49>
    arr[len] = '\0';
    8566:	67 c6 04 0f          	movb   $0xf,(%si)
    856a:	00 67 66             	add    %ah,0x66(%edi)
    sys_print_string(arr, len, x, y); 
    856d:	ff 75 10             	pushl  0x10(%ebp)
    8570:	67 66 ff 75 0c       	pushw  0xc(%di)
    8575:	66 51                	push   %cx
    8577:	66 57                	push   %di
    8579:	66 e8 1a ff          	callw  8497 <sys_putchar+0x36>
    857d:	ff                   	(bad)  
    857e:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8581:	c4 10                	les    (%eax),%edx
    8583:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8588:	66 5b                	pop    %bx
    858a:	66 5e                	pop    %si
    858c:	66 5f                	pop    %di
    858e:	66 5d                	pop    %bp
    8590:	66 c3                	retw   

00008592 <sys_bios_scroll_up>:

void sys_bios_scroll_up(int color)
{
    8592:	66 55                	push   %bp
    8594:	66 89 e5             	mov    %sp,%bp
    "movb $79, %%dl\n\t"
    "movb $0x06, %%ah\n\t"
    "int $0x10\n\t"
    "popa\n\t"
    :
    : "g"(color));
    8597:	66 60                	pushaw 
    8599:	b0 01                	mov    $0x1,%al
    859b:	67 8a 7d 08          	mov    0x8(%di),%bh
    859f:	b5 00                	mov    $0x0,%ch
    85a1:	b1 00                	mov    $0x0,%cl
    85a3:	b6 18                	mov    $0x18,%dh
    85a5:	b2 4f                	mov    $0x4f,%dl
    85a7:	b4 06                	mov    $0x6,%ah
    85a9:	cd 10                	int    $0x10
    85ab:	66 61                	popaw  
}
    85ad:	66 5d                	pop    %bp
    85af:	66 c3                	retw   

000085b1 <sys_bios_putchar>:

void sys_bios_putchar(char c, int color, int x, int y)
{
    85b1:	66 55                	push   %bp
    85b3:	66 89 e5             	mov    %sp,%bp
    85b6:	66 50                	push   %ax
    85b8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    85bd:	67 88 45 fc          	mov    %al,-0x4(%di)
    sys_bios_print_string(&c, 1, color, MAKE_POS(x, y));
    85c1:	67 66 8b 45 10       	mov    0x10(%di),%ax
    85c6:	66 c1 e0 08          	shl    $0x8,%ax
    85ca:	67 66 0f b6 55 14    	movzbw 0x14(%di),%dx
    85d0:	66 09 d0             	or     %dx,%ax
    85d3:	66 50                	push   %ax
    85d5:	67 66 ff 75 0c       	pushw  0xc(%di)
    85da:	66 6a 01             	pushw  $0x1
    85dd:	67 66 8d 45 fc       	lea    -0x4(%di),%ax
    85e2:	66 50                	push   %ax
    85e4:	66 e8 26 fd          	callw  830e <kb_handler+0xe8>
    85e8:	ff                   	(bad)  
    85e9:	ff 66 83             	jmp    *-0x7d(%esi)
}
    85ec:	c4 10                	les    (%eax),%edx
    85ee:	66 c9                	leavew 
    85f0:	66 c3                	retw   

000085f2 <sys_inb>:

uint8_t sys_inb(uint16_t port)
{
    85f2:	66 55                	push   %bp
    85f4:	66 89 e5             	mov    %sp,%bp
    uint8_t ret;
    asm volatile ( "inb %1, %0"
                   : "=a"(ret)
                   : "Nd"(port) );
    85f7:	67 66 8b 55 08       	mov    0x8(%di),%dx
    85fc:	ec                   	in     (%dx),%al
    return ret;
}
    85fd:	66 5d                	pop    %bp
    85ff:	66 c3                	retw   

00008601 <sys_outb>:
//    asm(".att_syntax noprefix\n");
//    return ret;
//}

void sys_outb(uint16_t port, uint8_t data)
{
    8601:	66 55                	push   %bp
    8603:	66 89 e5             	mov    %sp,%bp
    asm volatile ( "outb %0, %1"
                   : 
                   : "a"(data), "Nd"(port) );
    8606:	67 66 8b 55 08       	mov    0x8(%di),%dx
    860b:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8610:	ee                   	out    %al,(%dx)
}
    8611:	66 5d                	pop    %bp
    8613:	66 c3                	retw   

00008615 <sys_dbg_bochs_putc>:
//                    : "=a"(ret)
//                    : "Nd"(port) );
//     return ret;
// }

void sys_dbg_bochs_putc(char c){
    8615:	66 55                	push   %bp
    8617:	66 89 e5             	mov    %sp,%bp
                   : "a"(data), "Nd"(port) );
    861a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    861f:	e6 e9                	out    %al,$0xe9
    sys_outb(0xe9, (uint8_t)c);
}
    8621:	66 5d                	pop    %bp
    8623:	66 c3                	retw   

00008625 <sys_get_scancode>:

char sys_get_scancode()
{
    8625:	66 55                	push   %bp
    8627:	66 89 e5             	mov    %sp,%bp
                   : "Nd"(port) );
    862a:	e4 64                	in     $0x64,%al
    while (!(sys_inb(0x64) & 1));
    862c:	a8 01                	test   $0x1,%al
    862e:	74 fa                	je     862a <sys_get_scancode+0x5>
                   : "Nd"(port) );
    8630:	e4 60                	in     $0x60,%al
    return sys_inb(0x60);
}
    8632:	66 5d                	pop    %bp
    8634:	66 c3                	retw   

00008636 <sys_read_disk>:

void sys_read_disk(uint32_t segment, uint32_t address, uint16_t logical_start_sector, uint8_t secotr_cnt)
{
    8636:	66 55                	push   %bp
    8638:	66 89 e5             	mov    %sp,%bp
    863b:	66 53                	push   %bx
    uint8_t head = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) / FLOPPY_SECTOR_PER_TRACK;
    863d:	67 66 0f b7 45 10    	movzww 0x10(%di),%ax
    8643:	66 b9 24 00          	mov    $0x24,%cx
    8647:	00 00                	add    %al,(%eax)
    8649:	66 99                	cwtd   
    864b:	66 f7 f9             	idiv   %cx
    864e:	66 89 c1             	mov    %ax,%cx
    8651:	66 bb 12 00          	mov    $0x12,%bx
    8655:	00 00                	add    %al,(%eax)
    8657:	66 89 d0             	mov    %dx,%ax
    865a:	66 99                	cwtd   
    865c:	66 f7 fb             	idiv   %bx
    uint16_t cylinder = logical_start_sector / (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK);
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    //位操作一定要注意类型匹配（两小时）
    uint16_t mask1 = 255;
    uint16_t mask2 = 768;
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    865f:	66 89 cb             	mov    %cx,%bx
    8662:	66 c1 e3 08          	shl    $0x8,%bx
    8666:	66 81 e1 00 03       	and    $0x300,%cx
    866b:	00 00                	add    %al,(%eax)
    866d:	66 c1 f9 02          	sar    $0x2,%cx
    8671:	66 09 d9             	or     %bx,%cx
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    8674:	66 42                	inc    %dx
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    8676:	66 09 d1             	or     %dx,%cx
     "movb %4, %%al\n\t"    //扇区数
     "movb $0, %%dl\n\t"    //驱动器号
     "movb $2, %%ah\n\t"    //功能号
     "int $0x13\n\t"
     "pop %%es\n\t"
     : :"g"(segment), "g"(address), "g"(head), "g"(_cx), "g" (secotr_cnt));
    8679:	06                   	push   %es
    867a:	67 8b 5d 08          	mov    0x8(%di),%ebx
    867e:	8e c3                	mov    %ebx,%es
    8680:	67 8b 5d 0c          	mov    0xc(%di),%ebx
    8684:	88 c6                	mov    %al,%dh
    8686:	89 c9                	mov    %ecx,%ecx
    8688:	67 8a 45 14          	mov    0x14(%di),%al
    868c:	b2 00                	mov    $0x0,%dl
    868e:	b4 02                	mov    $0x2,%ah
    8690:	cd 13                	int    $0x13
    8692:	07                   	pop    %es
}
    8693:	66 5b                	pop    %bx
    8695:	66 5d                	pop    %bp
    8697:	66 c3                	retw   

00008699 <interrupt_33h_c>:

extern "C" void interrupt_33h_c() {
    8699:	66 55                	push   %bp
    869b:	66 89 e5             	mov    %sp,%bp
    const char* l12 = "|_   _|    | |   |____ ||____ |";
    const char* l13 = "  | | _ __ | |_      / /    / /";
    const char* l14 = "  | || '_ \\| __|     \\ \\    \\ \\";
    const char* l15 = " _| || | | | |_  .___/ /.___/ /";
    const char* l16 = " \\___/_| |_|\\__| \\____/ \\____/ ";
    sys_bios_print_string(l11, 31, MAKE_COLOR(VGA_BLACK, VGA_CYAN), MAKE_POS(0, 0));
    869e:	66 6a 00             	pushw  $0x0
    86a1:	66 6a 03             	pushw  $0x3
    86a4:	66 6a 1f             	pushw  $0x1f
    86a7:	66 68 00 c3          	pushw  $0xc300
    86ab:	00 00                	add    %al,(%eax)
    86ad:	66 e8 5d fc          	callw  830e <kb_handler+0xe8>
    86b1:	ff                   	(bad)  
    86b2:	ff 66 83             	jmp    *-0x7d(%esi)
    sys_bios_print_string(l12, 31, MAKE_COLOR(VGA_BLACK, VGA_CYAN), MAKE_POS(1, 0));
    86b5:	c4 10                	les    (%eax),%edx
    86b7:	66 68 00 01          	pushw  $0x100
    86bb:	00 00                	add    %al,(%eax)
    86bd:	66 6a 03             	pushw  $0x3
    86c0:	66 6a 1f             	pushw  $0x1f
    86c3:	66 68 20 c3          	pushw  $0xc320
    86c7:	00 00                	add    %al,(%eax)
    86c9:	66 e8 41 fc          	callw  830e <kb_handler+0xe8>
    86cd:	ff                   	(bad)  
    86ce:	ff 66 83             	jmp    *-0x7d(%esi)
    sys_bios_print_string(l13, 31, MAKE_COLOR(VGA_BLACK, VGA_CYAN), MAKE_POS(2, 0));
    86d1:	c4 10                	les    (%eax),%edx
    86d3:	66 68 00 02          	pushw  $0x200
    86d7:	00 00                	add    %al,(%eax)
    86d9:	66 6a 03             	pushw  $0x3
    86dc:	66 6a 1f             	pushw  $0x1f
    86df:	66 68 40 c3          	pushw  $0xc340
    86e3:	00 00                	add    %al,(%eax)
    86e5:	66 e8 25 fc          	callw  830e <kb_handler+0xe8>
    86e9:	ff                   	(bad)  
    86ea:	ff 66 83             	jmp    *-0x7d(%esi)
    sys_bios_print_string(l14, 31, MAKE_COLOR(VGA_BLACK, VGA_CYAN), MAKE_POS(3, 0));
    86ed:	c4 10                	les    (%eax),%edx
    86ef:	66 68 00 03          	pushw  $0x300
    86f3:	00 00                	add    %al,(%eax)
    86f5:	66 6a 03             	pushw  $0x3
    86f8:	66 6a 1f             	pushw  $0x1f
    86fb:	66 68 60 c3          	pushw  $0xc360
    86ff:	00 00                	add    %al,(%eax)
    8701:	66 e8 09 fc          	callw  830e <kb_handler+0xe8>
    8705:	ff                   	(bad)  
    8706:	ff 66 83             	jmp    *-0x7d(%esi)
    sys_bios_print_string(l15, 31, MAKE_COLOR(VGA_BLACK, VGA_CYAN), MAKE_POS(4, 0));
    8709:	c4 10                	les    (%eax),%edx
    870b:	66 68 00 04          	pushw  $0x400
    870f:	00 00                	add    %al,(%eax)
    8711:	66 6a 03             	pushw  $0x3
    8714:	66 6a 1f             	pushw  $0x1f
    8717:	66 68 80 c3          	pushw  $0xc380
    871b:	00 00                	add    %al,(%eax)
    871d:	66 e8 ed fb          	callw  830e <kb_handler+0xe8>
    8721:	ff                   	(bad)  
    8722:	ff 66 83             	jmp    *-0x7d(%esi)
    sys_bios_print_string(l16, 31, MAKE_COLOR(VGA_BLACK, VGA_CYAN), MAKE_POS(5, 0));
    8725:	c4 10                	les    (%eax),%edx
    8727:	66 68 00 05          	pushw  $0x500
    872b:	00 00                	add    %al,(%eax)
    872d:	66 6a 03             	pushw  $0x3
    8730:	66 6a 1f             	pushw  $0x1f
    8733:	66 68 a0 c3          	pushw  $0xc3a0
    8737:	00 00                	add    %al,(%eax)
    8739:	66 e8 d1 fb          	callw  830e <kb_handler+0xe8>
    873d:	ff                   	(bad)  
    873e:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8741:	c4 10                	les    (%eax),%edx
    8743:	66 c9                	leavew 
    8745:	66 c3                	retw   

00008747 <interrupt_34h_c>:

extern "C" void interrupt_34h_c() {
    8747:	66 55                	push   %bp
    8749:	66 89 e5             	mov    %sp,%bp
    const char * l16 = "| $$$$$$$$| $$$$$$$$| $$  | $$ _\\$$$$$$\\";
    const char * l17 = "| $$  | $$| $$  | $$| $$__/ $$|  \\__| $$";
    const char * l18 = "| $$  | $$| $$  | $$ \\$$    $$ \\$$    $$";
    const char * l19 = " \\$$   \\$$ \\$$   \\$$  \\$$$$$$   \\$$$$$$ ";

    sys_bios_print_string(l11, 40, MAKE_COLOR(VGA_BLACK, VGA_BRIGHT_CYAN), MAKE_POS(0, 40));
    874c:	66 6a 28             	pushw  $0x28
    874f:	66 6a 0b             	pushw  $0xb
    8752:	66 6a 28             	pushw  $0x28
    8755:	66 68 c0 c3          	pushw  $0xc3c0
    8759:	00 00                	add    %al,(%eax)
    875b:	66 e8 af fb          	callw  830e <kb_handler+0xe8>
    875f:	ff                   	(bad)  
    8760:	ff 66 83             	jmp    *-0x7d(%esi)
    sys_bios_print_string(l12, 40, MAKE_COLOR(VGA_BLACK, VGA_BRIGHT_CYAN), MAKE_POS(1, 40));
    8763:	c4 10                	les    (%eax),%edx
    8765:	66 68 28 01          	pushw  $0x128
    8769:	00 00                	add    %al,(%eax)
    876b:	66 6a 0b             	pushw  $0xb
    876e:	66 6a 28             	pushw  $0x28
    8771:	66 68 e9 c3          	pushw  $0xc3e9
    8775:	00 00                	add    %al,(%eax)
    8777:	66 e8 93 fb          	callw  830e <kb_handler+0xe8>
    877b:	ff                   	(bad)  
    877c:	ff 66 83             	jmp    *-0x7d(%esi)
    sys_bios_print_string(l13, 40, MAKE_COLOR(VGA_BLACK, VGA_BRIGHT_CYAN), MAKE_POS(2, 40));
    877f:	c4 10                	les    (%eax),%edx
    8781:	66 68 28 02          	pushw  $0x228
    8785:	00 00                	add    %al,(%eax)
    8787:	66 6a 0b             	pushw  $0xb
    878a:	66 6a 28             	pushw  $0x28
    878d:	66 68 12 c4          	pushw  $0xc412
    8791:	00 00                	add    %al,(%eax)
    8793:	66 e8 77 fb          	callw  830e <kb_handler+0xe8>
    8797:	ff                   	(bad)  
    8798:	ff 66 83             	jmp    *-0x7d(%esi)
    sys_bios_print_string(l14, 40, MAKE_COLOR(VGA_BLACK, VGA_BRIGHT_CYAN), MAKE_POS(3, 40));
    879b:	c4 10                	les    (%eax),%edx
    879d:	66 68 28 03          	pushw  $0x328
    87a1:	00 00                	add    %al,(%eax)
    87a3:	66 6a 0b             	pushw  $0xb
    87a6:	66 6a 28             	pushw  $0x28
    87a9:	66 68 3b c4          	pushw  $0xc43b
    87ad:	00 00                	add    %al,(%eax)
    87af:	66 e8 5b fb          	callw  830e <kb_handler+0xe8>
    87b3:	ff                   	(bad)  
    87b4:	ff 66 83             	jmp    *-0x7d(%esi)
    sys_bios_print_string(l15, 40, MAKE_COLOR(VGA_BLACK, VGA_BRIGHT_CYAN), MAKE_POS(4, 40));
    87b7:	c4 10                	les    (%eax),%edx
    87b9:	66 68 28 04          	pushw  $0x428
    87bd:	00 00                	add    %al,(%eax)
    87bf:	66 6a 0b             	pushw  $0xb
    87c2:	66 6a 28             	pushw  $0x28
    87c5:	66 68 64 c4          	pushw  $0xc464
    87c9:	00 00                	add    %al,(%eax)
    87cb:	66 e8 3f fb          	callw  830e <kb_handler+0xe8>
    87cf:	ff                   	(bad)  
    87d0:	ff 66 83             	jmp    *-0x7d(%esi)
    sys_bios_print_string(l16, 40, MAKE_COLOR(VGA_BLACK, VGA_BRIGHT_CYAN), MAKE_POS(5, 40));
    87d3:	c4 10                	les    (%eax),%edx
    87d5:	66 68 28 05          	pushw  $0x528
    87d9:	00 00                	add    %al,(%eax)
    87db:	66 6a 0b             	pushw  $0xb
    87de:	66 6a 28             	pushw  $0x28
    87e1:	66 68 8d c4          	pushw  $0xc48d
    87e5:	00 00                	add    %al,(%eax)
    87e7:	66 e8 23 fb          	callw  830e <kb_handler+0xe8>
    87eb:	ff                   	(bad)  
    87ec:	ff 66 83             	jmp    *-0x7d(%esi)
    sys_bios_print_string(l17, 40, MAKE_COLOR(VGA_BLACK, VGA_BRIGHT_CYAN), MAKE_POS(6, 40));
    87ef:	c4 10                	les    (%eax),%edx
    87f1:	66 68 28 06          	pushw  $0x628
    87f5:	00 00                	add    %al,(%eax)
    87f7:	66 6a 0b             	pushw  $0xb
    87fa:	66 6a 28             	pushw  $0x28
    87fd:	66 68 b6 c4          	pushw  $0xc4b6
    8801:	00 00                	add    %al,(%eax)
    8803:	66 e8 07 fb          	callw  830e <kb_handler+0xe8>
    8807:	ff                   	(bad)  
    8808:	ff 66 83             	jmp    *-0x7d(%esi)
    sys_bios_print_string(l18, 40, MAKE_COLOR(VGA_BLACK, VGA_BRIGHT_CYAN), MAKE_POS(7, 40));
    880b:	c4 10                	les    (%eax),%edx
    880d:	66 68 28 07          	pushw  $0x728
    8811:	00 00                	add    %al,(%eax)
    8813:	66 6a 0b             	pushw  $0xb
    8816:	66 6a 28             	pushw  $0x28
    8819:	66 68 df c4          	pushw  $0xc4df
    881d:	00 00                	add    %al,(%eax)
    881f:	66 e8 eb fa          	callw  830e <kb_handler+0xe8>
    8823:	ff                   	(bad)  
    8824:	ff 66 83             	jmp    *-0x7d(%esi)
    sys_bios_print_string(l19, 40, MAKE_COLOR(VGA_BLACK, VGA_BRIGHT_CYAN), MAKE_POS(8, 40));
    8827:	c4 10                	les    (%eax),%edx
    8829:	66 68 28 08          	pushw  $0x828
    882d:	00 00                	add    %al,(%eax)
    882f:	66 6a 0b             	pushw  $0xb
    8832:	66 6a 28             	pushw  $0x28
    8835:	66 68 08 c5          	pushw  $0xc508
    8839:	00 00                	add    %al,(%eax)
    883b:	66 e8 cf fa          	callw  830e <kb_handler+0xe8>
    883f:	ff                   	(bad)  
    8840:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8843:	c4 10                	les    (%eax),%edx
    8845:	66 c9                	leavew 
    8847:	66 c3                	retw   

00008849 <_Z9read_cmosPh>:
#include "sys_lib.h"
#include "../libc/stdio.h"
void read_cmos (unsigned char array [])
{
    8849:	66 55                	push   %bp
    884b:	66 89 e5             	mov    %sp,%bp
    884e:	66 53                	push   %bx
    8850:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    8855:	66 31 d2             	xor    %dx,%dx
   unsigned char tvalue, index;
 
   for(index = 0; index < 128; index++)
    8858:	66 81 fa 80 00       	cmp    $0x80,%dx
    885d:	00 00                	add    %al,(%eax)
    885f:	74 12                	je     8873 <_Z9read_cmosPh+0x2a>
            "sti\n\t"
            "movb %%al, %0\n\t"
            :"=r"(tvalue)
            :"r"(index)
            :"%eax"
               );
    8861:	fa                   	cli    
    8862:	88 d0                	mov    %dl,%al
    8864:	e6 70                	out    %al,$0x70
    8866:	e4 71                	in     $0x71,%al
    8868:	fb                   	sti    
    8869:	88 c3                	mov    %al,%bl
       array[index] = tvalue;
    886b:	67 88 1c             	mov    %bl,(%si)
    886e:	11 66 42             	adc    %esp,0x42(%esi)
   for(index = 0; index < 128; index++)
    8871:	eb e5                	jmp    8858 <_Z9read_cmosPh+0xf>
   }
}
    8873:	66 5b                	pop    %bx
    8875:	66 5d                	pop    %bp
    8877:	66 c3                	retw   

00008879 <_Z27get_update_in_progress_flagv>:
enum {
      cmos_address = 0x70,
      cmos_data    = 0x71
};
 
int get_update_in_progress_flag() {
    8879:	66 55                	push   %bp
    887b:	66 89 e5             	mov    %sp,%bp
      sys_outb(cmos_address, 0x0A);
    887e:	66 6a 0a             	pushw  $0xa
    8881:	66 6a 70             	pushw  $0x70
    8884:	66 e8 77 fd          	callw  85ff <sys_inb+0xd>
    8888:	ff                   	(bad)  
    8889:	ff 66 58             	jmp    *0x58(%esi)
      return (sys_inb(cmos_data) & 0x80);
    888c:	66 5a                	pop    %dx
    888e:	66 6a 71             	pushw  $0x71
    8891:	66 e8 5b fd          	callw  85f0 <sys_bios_putchar+0x3f>
    8895:	ff                   	(bad)  
    8896:	ff 66 83             	jmp    *-0x7d(%esi)
    8899:	e0 80                	loopne 881b <interrupt_34h_c+0xd4>
    889b:	66 0f b6 c0          	movzbw %al,%ax
}
    889f:	66 c9                	leavew 
    88a1:	66 c3                	retw   

000088a3 <_Z16get_RTC_registeri>:
 
unsigned char get_RTC_register(int reg) {
    88a3:	66 55                	push   %bp
    88a5:	66 89 e5             	mov    %sp,%bp
      sys_outb(cmos_address, reg);
    88a8:	67 66 0f b6 45 08    	movzbw 0x8(%di),%ax
    88ae:	66 50                	push   %ax
    88b0:	66 6a 70             	pushw  $0x70
    88b3:	66 e8 48 fd          	callw  85ff <sys_inb+0xd>
    88b7:	ff                   	(bad)  
    88b8:	ff 66 58             	jmp    *0x58(%esi)
      return sys_inb(cmos_data);
    88bb:	66 5a                	pop    %dx
    88bd:	67 66 c7 45 08 71 00 	movw   $0x71,0x8(%di)
    88c4:	00 00                	add    %al,(%eax)
}
    88c6:	66 c9                	leavew 
      return sys_inb(cmos_data);
    88c8:	e9                   	.byte 0xe9
    88c9:	27                   	daa    
    88ca:	fd                   	std    

000088cb <read_rtc>:
 
void read_rtc() {
    88cb:	66 55                	push   %bp
    88cd:	66 89 e5             	mov    %sp,%bp
    88d0:	66 57                	push   %di
    88d2:	66 56                	push   %si
    88d4:	66 53                	push   %bx
    88d6:	66 53                	push   %bx
      unsigned char last_day;
      unsigned char last_month;
      unsigned char last_year;
      unsigned char registerB;
 
      while (get_update_in_progress_flag());
    88d8:	66 e8 9b ff          	callw  8877 <_Z9read_cmosPh+0x2e>
    88dc:	ff                   	(bad)  
    88dd:	ff 66 85             	jmp    *-0x7b(%esi)
    88e0:	c0 75 f5 66          	shlb   $0x66,-0xb(%ebp)
      sys_internal_second = get_RTC_register(0x00);
    88e4:	6a 00                	push   $0x0
    88e6:	66 e8 b7 ff          	callw  88a1 <_Z27get_update_in_progress_flagv+0x28>
    88ea:	ff                   	(bad)  
    88eb:	ff a2 a8 ac 67 66    	jmp    *0x6667aca8(%edx)
      sys_internal_minute = get_RTC_register(0x02);
    88f1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
    88f8:	66 e8 a5 ff          	callw  88a1 <_Z27get_update_in_progress_flagv+0x28>
    88fc:	ff                   	(bad)  
    88fd:	ff a2 a7 ac 67 66    	jmp    *0x6667aca7(%edx)
      sys_internal_hour = get_RTC_register(0x04);
    8903:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
    890a:	66 e8 93 ff          	callw  88a1 <_Z27get_update_in_progress_flagv+0x28>
    890e:	ff                   	(bad)  
    890f:	ff a2 a6 ac 67 66    	jmp    *0x6667aca6(%edx)
      sys_internal_day = get_RTC_register(0x07);
    8915:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
    891c:	66 e8 81 ff          	callw  88a1 <_Z27get_update_in_progress_flagv+0x28>
    8920:	ff                   	(bad)  
    8921:	ff a2 a5 ac 67 66    	jmp    *0x6667aca5(%edx)
      sys_internal_month = get_RTC_register(0x08);
    8927:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
    892e:	66 e8 6f ff          	callw  88a1 <_Z27get_update_in_progress_flagv+0x28>
    8932:	ff                   	(bad)  
    8933:	ff a2 a4 ac 67 66    	jmp    *0x6667aca4(%edx)
      sys_internal_year = get_RTC_register(0x09);
    8939:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
    8940:	66 e8 5d ff          	callw  88a1 <_Z27get_update_in_progress_flagv+0x28>
    8944:	ff                   	(bad)  
    8945:	ff 66 0f             	jmp    *0xf(%esi)
    8948:	b6 c0                	mov    $0xc0,%dh
    894a:	66 a3 a0 ac 66 59    	mov    %ax,0x5966aca0
 
      do {
            last_second = sys_internal_second;
    8950:	a0 a8 ac 66 89       	mov    0x8966aca8,%al
    8955:	c7                   	(bad)  
            last_minute = sys_internal_minute;
    8956:	a0 a7 ac 67 88       	mov    0x8867aca7,%al
    895b:	45                   	inc    %ebp
    895c:	f3 8a 1e             	repz mov (%esi),%bl
            last_hour = sys_internal_hour;
    895f:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
    8960:	ac                   	lods   %ds:(%esi),%al
            last_day = sys_internal_day;
    8961:	a0 a5 ac 67 88       	mov    0x8867aca5,%al
    8966:	45                   	inc    %ebp
    8967:	f2 a0 a4 ac 67 88    	repnz mov 0x8867aca4,%al
            last_month = sys_internal_month;
    896d:	45                   	inc    %ebp
    896e:	f1                   	icebp  
            last_year = sys_internal_year;
    896f:	66 8b 36             	mov    (%esi),%si
    8972:	a0 ac 66 e8 ff       	mov    0xffe866ac,%al
 
            while (get_update_in_progress_flag());           // Make sure an update isn't in progress
    8977:	fe                   	(bad)  
    8978:	ff                   	(bad)  
    8979:	ff 66 85             	jmp    *-0x7b(%esi)
    897c:	c0 75 f5 66          	shlb   $0x66,-0xb(%ebp)
            sys_internal_second = get_RTC_register(0x00);
    8980:	6a 00                	push   $0x0
    8982:	66 e8 1b ff          	callw  88a1 <_Z27get_update_in_progress_flagv+0x28>
    8986:	ff                   	(bad)  
    8987:	ff a2 a8 ac 67 66    	jmp    *0x6667aca8(%edx)
            sys_internal_minute = get_RTC_register(0x02);
    898d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
    8994:	66 e8 09 ff          	callw  88a1 <_Z27get_update_in_progress_flagv+0x28>
    8998:	ff                   	(bad)  
    8999:	ff a2 a7 ac 67 66    	jmp    *0x6667aca7(%edx)
            sys_internal_hour = get_RTC_register(0x04);
    899f:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
    89a6:	66 e8 f7 fe          	callw  88a1 <_Z27get_update_in_progress_flagv+0x28>
    89aa:	ff                   	(bad)  
    89ab:	ff a2 a6 ac 67 66    	jmp    *0x6667aca6(%edx)
            sys_internal_day = get_RTC_register(0x07);
    89b1:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
    89b8:	66 e8 e5 fe          	callw  88a1 <_Z27get_update_in_progress_flagv+0x28>
    89bc:	ff                   	(bad)  
    89bd:	ff a2 a5 ac 67 66    	jmp    *0x6667aca5(%edx)
            sys_internal_month = get_RTC_register(0x08);
    89c3:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
    89ca:	66 e8 d3 fe          	callw  88a1 <_Z27get_update_in_progress_flagv+0x28>
    89ce:	ff                   	(bad)  
    89cf:	ff a2 a4 ac 67 66    	jmp    *0x6667aca4(%edx)
            sys_internal_year = get_RTC_register(0x09);
    89d5:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
    89dc:	66 e8 c1 fe          	callw  88a1 <_Z27get_update_in_progress_flagv+0x28>
    89e0:	ff                   	(bad)  
    89e1:	ff 66 0f             	jmp    *0xf(%esi)
    89e4:	b6 c0                	mov    $0xc0,%dh
    89e6:	66 a3 a0 ac 66 5a    	mov    %ax,0x5a66aca0
      } while( (last_second != sys_internal_second) || (last_minute != sys_internal_minute) || (last_hour != sys_internal_hour) ||
               (last_day != sys_internal_day) || (last_month != sys_internal_month) || (last_year != sys_internal_year));
    89ec:	66 89 f9             	mov    %di,%cx
    89ef:	38 0e                	cmp    %cl,(%esi)
    89f1:	a8 ac                	test   $0xac,%al
    89f3:	0f 85 59 ff 67 8a    	jne    8a688952 <_data_end+0x8a67c3ae>
      } while( (last_second != sys_internal_second) || (last_minute != sys_internal_minute) || (last_hour != sys_internal_hour) ||
    89f9:	4d                   	dec    %ebp
    89fa:	f3 38 0e             	repz cmp %cl,(%esi)
    89fd:	a7                   	cmpsl  %es:(%edi),%ds:(%esi)
    89fe:	ac                   	lods   %ds:(%esi),%al
    89ff:	0f 85 4d ff 3a 1e    	jne    1e3b8952 <_data_end+0x1e3ac3ae>
    8a05:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
    8a06:	ac                   	lods   %ds:(%esi),%al
    8a07:	0f 85 45 ff 67 8a    	jne    8a688952 <_data_end+0x8a67c3ae>
    8a0d:	5d                   	pop    %ebp
    8a0e:	f2 3a 1e             	repnz cmp (%esi),%bl
    8a11:	a5                   	movsl  %ds:(%esi),%es:(%edi)
    8a12:	ac                   	lods   %ds:(%esi),%al
    8a13:	0f 85 39 ff 67 8a    	jne    8a688952 <_data_end+0x8a67c3ae>
               (last_day != sys_internal_day) || (last_month != sys_internal_month) || (last_year != sys_internal_year));
    8a19:	5d                   	pop    %ebp
    8a1a:	f1                   	icebp  
    8a1b:	3a 1e                	cmp    (%esi),%bl
    8a1d:	a4                   	movsb  %ds:(%esi),%es:(%edi)
    8a1e:	ac                   	lods   %ds:(%esi),%al
    8a1f:	0f 85 2d ff 66 89    	jne    89678952 <_data_end+0x8966c3ae>
    8a25:	f1                   	icebp  
    8a26:	66 0f b6 f1          	movzbw %cl,%si
    8a2a:	66 39 c6             	cmp    %ax,%si
    8a2d:	0f 85 1f ff 66 6a    	jne    6a678952 <_data_end+0x6a66c3ae>
 
      registerB = get_RTC_register(0x0B);
    8a33:	0b 66 e8             	or     -0x18(%esi),%esp
    8a36:	69 fe ff ff 66 89    	imul   $0x8966ffff,%esi,%edi
    8a3c:	c6                   	(bad)  
 
      if (!(registerB & 0x04)) {
    8a3d:	66 58                	pop    %ax
    8a3f:	66 f7 c6 04 00       	test   $0x4,%si
    8a44:	00 00                	add    %al,(%eax)
    8a46:	0f 85 93 00 8a 16    	jne    168a8adf <_data_end+0x1689c53b>
            sys_internal_second = (sys_internal_second & 0x0F) + ((sys_internal_second / 16) * 10);
    8a4c:	a8 ac                	test   $0xac,%al
    8a4e:	88 d0                	mov    %dl,%al
    8a50:	c0 e8 04             	shr    $0x4,%al
    8a53:	b1 0a                	mov    $0xa,%cl
    8a55:	f6 e1                	mul    %cl
    8a57:	66 83 e2 0f          	and    $0xf,%dx
    8a5b:	66 01 d0             	add    %dx,%ax
    8a5e:	a2 a8 ac 8a 16       	mov    %al,0x168aaca8
            sys_internal_minute = (sys_internal_minute & 0x0F) + ((sys_internal_minute / 16) * 10);
    8a63:	a7                   	cmpsl  %es:(%edi),%ds:(%esi)
    8a64:	ac                   	lods   %ds:(%esi),%al
    8a65:	88 d0                	mov    %dl,%al
    8a67:	c0 e8 04             	shr    $0x4,%al
    8a6a:	f6 e1                	mul    %cl
    8a6c:	66 83 e2 0f          	and    $0xf,%dx
    8a70:	66 01 d0             	add    %dx,%ax
    8a73:	a2 a7 ac 8a 1e       	mov    %al,0x1e8aaca7
            sys_internal_hour = ( (sys_internal_hour & 0x0F) + (((sys_internal_hour & 0x70) / 16) * 10) ) | (sys_internal_hour & 0x80);
    8a78:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
    8a79:	ac                   	lods   %ds:(%esi),%al
    8a7a:	88 d8                	mov    %bl,%al
    8a7c:	c0 e8 04             	shr    $0x4,%al
    8a7f:	66 83 e0 07          	and    $0x7,%ax
    8a83:	f6 e1                	mul    %cl
    8a85:	88 da                	mov    %bl,%dl
    8a87:	66 83 e2 0f          	and    $0xf,%dx
    8a8b:	66 01 c2             	add    %ax,%dx
    8a8e:	66 83 e3 80          	and    $0xff80,%bx
    8a92:	66 09 da             	or     %bx,%dx
    8a95:	88 16                	mov    %dl,(%esi)
    8a97:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
    8a98:	ac                   	lods   %ds:(%esi),%al
            sys_internal_day = (sys_internal_day & 0x0F) + ((sys_internal_day / 16) * 10);
    8a99:	8a 16                	mov    (%esi),%dl
    8a9b:	a5                   	movsl  %ds:(%esi),%es:(%edi)
    8a9c:	ac                   	lods   %ds:(%esi),%al
    8a9d:	88 d0                	mov    %dl,%al
    8a9f:	c0 e8 04             	shr    $0x4,%al
    8aa2:	f6 e1                	mul    %cl
    8aa4:	66 83 e2 0f          	and    $0xf,%dx
    8aa8:	66 01 d0             	add    %dx,%ax
    8aab:	a2 a5 ac 8a 16       	mov    %al,0x168aaca5
            sys_internal_month = (sys_internal_month & 0x0F) + ((sys_internal_month / 16) * 10);
    8ab0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
    8ab1:	ac                   	lods   %ds:(%esi),%al
    8ab2:	88 d0                	mov    %dl,%al
    8ab4:	c0 e8 04             	shr    $0x4,%al
    8ab7:	f6 e1                	mul    %cl
    8ab9:	66 83 e2 0f          	and    $0xf,%dx
    8abd:	66 01 d0             	add    %dx,%ax
    8ac0:	a2 a4 ac 66 a1       	mov    %al,0xa166aca4
            sys_internal_year = (sys_internal_year & 0x0F) + ((sys_internal_year / 16) * 10);
    8ac5:	a0 ac 66 89 c2       	mov    0xc28966ac,%al
    8aca:	66 c1 ea 04          	shr    $0x4,%dx
    8ace:	66 6b d2 0a          	imul   $0xa,%dx,%dx
    8ad2:	66 83 e0 0f          	and    $0xf,%ax
    8ad6:	66 01 d0             	add    %dx,%ax
    8ad9:	66 a3 a0 ac a0 a6    	mov    %ax,0xa6a0aca0
    8adf:	ac                   	lods   %ds:(%esi),%al
      }
 
      if (!(registerB & 0x02) && (sys_internal_hour & 0x80)) {
    8ae0:	66 83 e6 02          	and    $0x2,%si
    8ae4:	75 1b                	jne    8b01 <read_rtc+0x236>
    8ae6:	84 c0                	test   %al,%al
    8ae8:	79 17                	jns    8b01 <read_rtc+0x236>
            sys_internal_hour = ((sys_internal_hour & 0x7F) + 12) % 24;
    8aea:	66 83 e0 7f          	and    $0x7f,%ax
    8aee:	66 83 c0 0c          	add    $0xc,%ax
    8af2:	66 b9 18 00          	mov    $0x18,%cx
    8af6:	00 00                	add    %al,(%eax)
    8af8:	66 99                	cwtd   
    8afa:	66 f7 f9             	idiv   %cx
    8afd:	88 16                	mov    %dl,(%esi)
    8aff:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
    8b00:	ac                   	lods   %ds:(%esi),%al
      }
 
      sys_internal_year += (SYS_INTERNAL_CURRENT_YEAR / 100) * 100;
    8b01:	66 a1 a0 ac 67 66    	mov    0x6667aca0,%ax
    8b07:	8d 90 d0 07 00 00    	lea    0x7d0(%eax),%edx
      if(sys_internal_year < SYS_INTERNAL_CURRENT_YEAR) sys_internal_year += 100;
    8b0d:	66 81 fa e1 07       	cmp    $0x7e1,%dx
    8b12:	00 00                	add    %al,(%eax)
    8b14:	76 07                	jbe    8b1d <read_rtc+0x252>
      sys_internal_year += (SYS_INTERNAL_CURRENT_YEAR / 100) * 100;
    8b16:	66 89 16             	mov    %dx,(%esi)
    8b19:	a0 ac eb 0a 66       	mov    0x660aebac,%al
      if(sys_internal_year < SYS_INTERNAL_CURRENT_YEAR) sys_internal_year += 100;
    8b1e:	05 34 08 00 00       	add    $0x834,%eax
    8b23:	66 a3 a0 ac 66 0f    	mov    %ax,0xf66aca0
      sprintf(sys_internal_time_str,"%d/%d/%d-%d:%d:%d\n", sys_internal_year, sys_internal_month, sys_internal_day, sys_internal_hour, sys_internal_minute, sys_internal_second);
    8b29:	b6 06                	mov    $0x6,%dh
    8b2b:	a8 ac                	test   $0xac,%al
    8b2d:	66 50                	push   %ax
    8b2f:	66 0f b6 06          	movzbw (%esi),%ax
    8b33:	a7                   	cmpsl  %es:(%edi),%ds:(%esi)
    8b34:	ac                   	lods   %ds:(%esi),%al
    8b35:	66 50                	push   %ax
    8b37:	66 0f b6 06          	movzbw (%esi),%ax
    8b3b:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
    8b3c:	ac                   	lods   %ds:(%esi),%al
    8b3d:	66 50                	push   %ax
    8b3f:	66 0f b6 06          	movzbw (%esi),%ax
    8b43:	a5                   	movsl  %ds:(%esi),%es:(%edi)
    8b44:	ac                   	lods   %ds:(%esi),%al
    8b45:	66 50                	push   %ax
    8b47:	66 0f b6 06          	movzbw (%esi),%ax
    8b4b:	a4                   	movsb  %ds:(%esi),%es:(%edi)
    8b4c:	ac                   	lods   %ds:(%esi),%al
    8b4d:	66 50                	push   %ax
    8b4f:	66 ff 36             	pushw  (%esi)
    8b52:	a0 ac 66 68 31       	mov    0x316866ac,%al
    8b57:	c5 00                	lds    (%eax),%eax
    8b59:	00 66 68             	add    %ah,0x68(%esi)
    8b5c:	8c ac 00 00 66 e8 4f 	mov    %gs,0x4fe86600(%eax,%eax,1)
    8b63:	0c 00                	or     $0x0,%al
    8b65:	00 66 83             	add    %ah,-0x7d(%esi)
}
    8b68:	c4 20                	les    (%eax),%esp
    8b6a:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8b6f:	66 5b                	pop    %bx
    8b71:	66 5e                	pop    %si
    8b73:	66 5f                	pop    %di
    8b75:	66 5d                	pop    %bp
    8b77:	66 c3                	retw   

00008b79 <_Z6memcmpPKvS0_m>:
namespace hhlibc {

#endif

int memcmp(const void * _s1, const void* _s2, size_t n)
{
    8b79:	66 55                	push   %bp
    8b7b:	66 89 e5             	mov    %sp,%bp
    8b7e:	66 31 d2             	xor    %dx,%dx
    auto s1 = reinterpret_cast<const unsigned char*>(_s1);
    auto s2 = reinterpret_cast<const unsigned char*>(_s2);
    while(n--)
    8b81:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    8b86:	74 22                	je     8baa <_Z6memcmpPKvS0_m+0x31>
    {
        if(*s1 != *s2)          //**不能**让!=时跳出然后返回*s1 - *s2
    8b88:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8b8d:	67 66 0f b6 04       	movzbw (%si),%ax
    8b92:	10 66 42             	adc    %ah,0x42(%esi)
    8b95:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    8b9a:	67 66 0f b6 4c 11    	movzbw 0x11(%si),%cx
    8ba0:	ff                   	(bad)  
    8ba1:	38 c8                	cmp    %cl,%al
    8ba3:	74 dc                	je     8b81 <_Z6memcmpPKvS0_m+0x8>
        {                       //因为那样在实际上==的时候，会比较错误
            return *s1 - *s2;
    8ba5:	66 29 c8             	sub    %cx,%ax
    8ba8:	eb 03                	jmp    8bad <_Z6memcmpPKvS0_m+0x34>
        }
        ++s1;
        ++s2;
    }
    return 0;
    8baa:	66 31 c0             	xor    %ax,%ax
}
    8bad:	66 5d                	pop    %bp
    8baf:	66 c3                	retw   

00008bb1 <_Z6memcpyPvPKvm>:

void* memcpy(void* _dst, const void* _src, size_t n)
{
    8bb1:	66 55                	push   %bp
    8bb3:	66 89 e5             	mov    %sp,%bp
    8bb6:	66 53                	push   %bx
    8bb8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8bbd:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    8bc2:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    while (n--)
    8bc5:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    8bca:	74 0c                	je     8bd8 <_Z6memcpyPvPKvm+0x27>
    {
        *(dst++) = *(src++);
    8bcc:	67 8a 0c             	mov    (%si),%cl
    8bcf:	13 67 88             	adc    -0x78(%edi),%esp
    8bd2:	0c 10                	or     $0x10,%al
    8bd4:	66 42                	inc    %dx
    while (n--)
    8bd6:	eb ed                	jmp    8bc5 <_Z6memcpyPvPKvm+0x14>
    }
    return _dst;
}
    8bd8:	66 5b                	pop    %bx
    8bda:	66 5d                	pop    %bp
    8bdc:	66 c3                	retw   

00008bde <_Z7memmovePvPKvm>:
void* memmove(void* _dst, const void* _src, size_t n)
{
    8bde:	66 55                	push   %bp
    8be0:	66 89 e5             	mov    %sp,%bp
    8be3:	66 56                	push   %si
    8be5:	66 53                	push   %bx
    8be7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8bec:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    8bf1:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    if(dst < src)
    8bf6:	66 39 d8             	cmp    %bx,%ax
    8bf9:	73 14                	jae    8c0f <_Z7memmovePvPKvm+0x31>
    8bfb:	66 31 c9             	xor    %cx,%cx
    {
        while(n--)
    8bfe:	66 39 f1             	cmp    %si,%cx
    8c01:	74 20                	je     8c23 <_Z7memmovePvPKvm+0x45>
        {
            *(dst++) = *(src++);
    8c03:	67 8a 14             	mov    (%si),%dl
    8c06:	0b 67 88             	or     -0x78(%edi),%esp
    8c09:	14 08                	adc    $0x8,%al
    8c0b:	66 41                	inc    %cx
        while(n--)
    8c0d:	eb ef                	jmp    8bfe <_Z7memmovePvPKvm+0x20>
        }
    }
    else if(dst > src)
    8c0f:	76 12                	jbe    8c23 <_Z7memmovePvPKvm+0x45>
    {
        src += n;
        dst += n;
        while(n--)
    8c11:	66 4e                	dec    %si
    8c13:	66 83 fe ff          	cmp    $0xffff,%si
    8c17:	74 0a                	je     8c23 <_Z7memmovePvPKvm+0x45>
        {
            *(--dst) = *(--src);
    8c19:	67 8a 0c             	mov    (%si),%cl
    8c1c:	33 67 88             	xor    -0x78(%edi),%esp
    8c1f:	0c 30                	or     $0x30,%al
        while(n--)
    8c21:	eb ee                	jmp    8c11 <_Z7memmovePvPKvm+0x33>
        }
    }
    return _dst;
}
    8c23:	66 5b                	pop    %bx
    8c25:	66 5e                	pop    %si
    8c27:	66 5d                	pop    %bp
    8c29:	66 c3                	retw   

00008c2b <_Z6memsetPvim>:
void* memset(void* _dst, int c, size_t n)
{
    8c2b:	66 55                	push   %bp
    8c2d:	66 89 e5             	mov    %sp,%bp
    8c30:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8c35:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    8c3a:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    while(n--)
    8c3d:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    8c42:	74 08                	je     8c4c <_Z6memsetPvim+0x21>
    {
        *(dst++) = static_cast<unsigned char>(c);
    8c44:	67 88 0c             	mov    %cl,(%si)
    8c47:	10 66 42             	adc    %ah,0x42(%esi)
    while(n--)
    8c4a:	eb f1                	jmp    8c3d <_Z6memsetPvim+0x12>
    }
    return _dst;
}
    8c4c:	66 5d                	pop    %bp
    8c4e:	66 c3                	retw   

00008c50 <_Z6strlenPKc>:
size_t strlen(const char* _str)
{
    8c50:	66 55                	push   %bp
    8c52:	66 89 e5             	mov    %sp,%bp
    8c55:	67 66 8b 55 08       	mov    0x8(%di),%dx
    auto str = _str;
    size_t len = 0;
    8c5a:	66 31 c0             	xor    %ax,%ax
    while(*(_str++))
    8c5d:	67 80 3c 02          	cmpb   $0x2,(%si)
    8c61:	00 74 04 66          	add    %dh,0x66(%esp,%eax,1)
    {
        len++;
    8c65:	40                   	inc    %eax
    while(*(_str++))
    8c66:	eb f5                	jmp    8c5d <_Z6strlenPKc+0xd>
    }
    return len;
}
    8c68:	66 5d                	pop    %bp
    8c6a:	66 c3                	retw   

00008c6c <_Z6strcpyPcPKc>:
char *strcpy(char* _dst, const char* _src)
{
    8c6c:	66 55                	push   %bp
    8c6e:	66 89 e5             	mov    %sp,%bp
    8c71:	66 56                	push   %si
    8c73:	66 53                	push   %bx
    8c75:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8c7a:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    auto len = strlen(_src);
    8c7f:	66 51                	push   %cx
    8c81:	66 e8 c9 ff          	callw  8c4e <_Z6memsetPvim+0x23>
    8c85:	ff                   	(bad)  
    8c86:	ff 66 89             	jmp    *-0x77(%esi)
    8c89:	c6                   	(bad)  
    memcpy(reinterpret_cast<void*>(_dst), reinterpret_cast<const void *>(_src), len);
    8c8a:	67 66 89 04          	mov    %ax,(%si)
    8c8e:	24 66                	and    $0x66,%al
    8c90:	51                   	push   %ecx
    8c91:	66 53                	push   %bx
    8c93:	66 e8 18 ff          	callw  8baf <_Z6memcmpPKvS0_m+0x36>
    8c97:	ff                   	(bad)  
    8c98:	ff 67 c6             	jmp    *-0x3a(%edi)
    _dst[len] = '\0';
    8c9b:	04 33                	add    $0x33,%al
    8c9d:	00 66 89             	add    %ah,-0x77(%esi)
    return _dst;
}
    8ca0:	d8 67 66             	fsubs  0x66(%edi)
    8ca3:	8d 65 f8             	lea    -0x8(%ebp),%esp
    8ca6:	66 5b                	pop    %bx
    8ca8:	66 5e                	pop    %si
    8caa:	66 5d                	pop    %bp
    8cac:	66 c3                	retw   

00008cae <_Z6strcmpPKcS0_>:
int strcmp(const char* _s1, const char* _s2)
{
    8cae:	66 55                	push   %bp
    8cb0:	66 89 e5             	mov    %sp,%bp
    8cb3:	66 57                	push   %di
    8cb5:	66 56                	push   %si
    8cb7:	66 53                	push   %bx
    8cb9:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    8cbe:	67 66 8b 7d 0c       	mov    0xc(%di),%di
    auto len1 = strlen(_s1);
    8cc3:	66 51                	push   %cx
    8cc5:	66 e8 85 ff          	callw  8c4e <_Z6memsetPvim+0x23>
    8cc9:	ff                   	(bad)  
    8cca:	ff 66 89             	jmp    *-0x77(%esi)
    8ccd:	c3                   	ret    
    auto len2 = strlen(_s2);
    8cce:	67 66 89 3c          	mov    %di,(%si)
    8cd2:	24 66                	and    $0x66,%al
    8cd4:	e8 77 ff ff ff       	call   8c50 <_Z6strlenPKc>
    8cd9:	66 5a                	pop    %dx
    8cdb:	66 89 c6             	mov    %ax,%si
    auto len = len1 < len2 ? len1 : len2;
    auto ret = memcmp(reinterpret_cast<const void*>(_s1), reinterpret_cast<const void *>(_s2), len);
    8cde:	66 39 c3             	cmp    %ax,%bx
    8ce1:	77 03                	ja     8ce6 <_Z6strcmpPKcS0_+0x38>
    8ce3:	66 89 d8             	mov    %bx,%ax
    8ce6:	66 50                	push   %ax
    8ce8:	66 57                	push   %di
    8cea:	66 51                	push   %cx
    8cec:	66 e8 87 fe          	callw  8b77 <read_rtc+0x2ac>
    8cf0:	ff                   	(bad)  
    8cf1:	ff 66 83             	jmp    *-0x7d(%esi)
    8cf4:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    if(ret == 0)
    8cf7:	85 c0                	test   %eax,%eax
    8cf9:	75 11                	jne    8d0c <_Z6strcmpPKcS0_+0x5e>
    {
        if(len1 == len2)
    8cfb:	66 39 f3             	cmp    %si,%bx
    8cfe:	74 0c                	je     8d0c <_Z6strcmpPKcS0_+0x5e>
        {
            return -1;
        }
        else
        {
            return 1;
    8d00:	66 39 de             	cmp    %bx,%si
    8d03:	66 19 c0             	sbb    %ax,%ax
    8d06:	66 83 e0 02          	and    $0x2,%ax
    8d0a:	66 48                	dec    %ax
        }
    }
    return ret;
}
    8d0c:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8d11:	66 5b                	pop    %bx
    8d13:	66 5e                	pop    %si
    8d15:	66 5f                	pop    %di
    8d17:	66 5d                	pop    %bp
    8d19:	66 c3                	retw   

00008d1b <_Z7reversePc>:

void reverse(char* buffer)
{
    8d1b:	66 55                	push   %bp
    8d1d:	66 89 e5             	mov    %sp,%bp
    8d20:	66 56                	push   %si
    8d22:	66 53                	push   %bx
    8d24:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    char ch;
    size_t len = strlen(buffer);
    8d29:	66 51                	push   %cx
    8d2b:	66 e8 1f ff          	callw  8c4e <_Z6memsetPvim+0x23>
    8d2f:	ff                   	(bad)  
    8d30:	ff 66 5a             	jmp    *0x5a(%esi)
    8d33:	66 89 ca             	mov    %cx,%dx
    8d36:	67 66 8d 0c          	lea    (%si),%cx
    8d3a:	01 66 d1             	add    %esp,-0x2f(%esi)
    for(size_t i = 0; i < len / 2; ++i)
    8d3d:	e8 67 66 8d 34       	call   348df3a9 <_data_end+0x348d2e05>
    8d42:	10 66 49             	adc    %ah,0x49(%esi)
    8d45:	66 39 f2             	cmp    %si,%dx
    8d48:	74 10                	je     8d5a <_Z7reversePc+0x3f>
    {
        ch = *(buffer + i);
    8d4a:	67 8a 1a             	mov    (%bp,%si),%bl
        *(buffer + i) = *(buffer + len - 1 - i);
    8d4d:	67 8a 01             	mov    (%bx,%di),%al
    8d50:	67 88 02             	mov    %al,(%bp,%si)
        *(buffer + len - 1 - i)  = ch;
    8d53:	67 88 19             	mov    %bl,(%bx,%di)
    8d56:	66 42                	inc    %dx
    for(size_t i = 0; i < len / 2; ++i)
    8d58:	eb e9                	jmp    8d43 <_Z7reversePc+0x28>
    }
}
    8d5a:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    8d5f:	66 5b                	pop    %bx
    8d61:	66 5e                	pop    %si
    8d63:	66 5d                	pop    %bp
    8d65:	66 c3                	retw   

00008d67 <_Z7isspacei>:
namespace hhlibc {

#endif

int isspace( int ch )
{
    8d67:	66 55                	push   %bp
    8d69:	66 89 e5             	mov    %sp,%bp
    8d6c:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return (ch == 9 || ch == 32 || (ch >= 10 && ch <= 13));
    8d71:	67 66 8d 42 f7       	lea    -0x9(%bp,%si),%ax
    8d76:	66 83 f8 04          	cmp    $0x4,%ax
    8d7a:	0f 96 c0             	setbe  %al
    8d7d:	66 83 fa 20          	cmp    $0x20,%dx
    8d81:	0f 94 c2             	sete   %dl
    8d84:	66 09 d0             	or     %dx,%ax
    8d87:	66 0f b6 c0          	movzbw %al,%ax
}
    8d8b:	66 5d                	pop    %bp
    8d8d:	66 c3                	retw   

00008d8f <_Z7isdigiti>:
{
    return isdigit(ch) || isalpha(ch);
}

int isdigit(int ch)
{
    8d8f:	66 55                	push   %bp
    8d91:	66 89 e5             	mov    %sp,%bp
    return (ch >= 48 && ch <= 57);
    8d94:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8d99:	66 83 e8 30          	sub    $0x30,%ax
    8d9d:	66 83 f8 09          	cmp    $0x9,%ax
    8da1:	0f 96 c0             	setbe  %al
    8da4:	66 0f b6 c0          	movzbw %al,%ax
}
    8da8:	66 5d                	pop    %bp
    8daa:	66 c3                	retw   

00008dac <_Z7isalphai>:

int isalpha(int ch)
{
    8dac:	66 55                	push   %bp
    8dae:	66 89 e5             	mov    %sp,%bp
    return  isupper(ch)||islower(ch);
    8db1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8db6:	66 83 e0 df          	and    $0xffdf,%ax
    8dba:	66 83 e8 41          	sub    $0x41,%ax
    8dbe:	66 83 f8 19          	cmp    $0x19,%ax
    8dc2:	0f 96 c0             	setbe  %al
    8dc5:	66 0f b6 c0          	movzbw %al,%ax
}
    8dc9:	66 5d                	pop    %bp
    8dcb:	66 c3                	retw   

00008dcd <_Z7isalnumi>:
{
    8dcd:	66 55                	push   %bp
    8dcf:	66 89 e5             	mov    %sp,%bp
    8dd2:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return (ch >= 48 && ch <= 57);
    8dd7:	67 66 8d 4a d0       	lea    -0x30(%bp,%si),%cx
    8ddc:	b0 01                	mov    $0x1,%al
    return isdigit(ch) || isalpha(ch);
    8dde:	66 83 f9 09          	cmp    $0x9,%cx
    8de2:	76 10                	jbe    8df4 <_Z7isalnumi+0x27>
    8de4:	66 52                	push   %dx
    8de6:	66 e8 c0 ff          	callw  8daa <_Z7isdigiti+0x1b>
    8dea:	ff                   	(bad)  
    8deb:	ff 66 5a             	jmp    *0x5a(%esi)
    8dee:	66 85 c0             	test   %ax,%ax
    8df1:	0f 95 c0             	setne  %al
    8df4:	66 0f b6 c0          	movzbw %al,%ax
}
    8df8:	66 c9                	leavew 
    8dfa:	66 c3                	retw   

00008dfc <_Z7isupperi>:
int isupper(int ch)
{
    8dfc:	66 55                	push   %bp
    8dfe:	66 89 e5             	mov    %sp,%bp
    return (ch >= 65 && ch <= 90);
    8e01:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8e06:	66 83 e8 41          	sub    $0x41,%ax
    8e0a:	66 83 f8 19          	cmp    $0x19,%ax
    8e0e:	0f 96 c0             	setbe  %al
    8e11:	66 0f b6 c0          	movzbw %al,%ax
}
    8e15:	66 5d                	pop    %bp
    8e17:	66 c3                	retw   

00008e19 <_Z7isloweri>:

int islower(int ch)
{
    8e19:	66 55                	push   %bp
    8e1b:	66 89 e5             	mov    %sp,%bp
    return (ch >= 97 && ch <= 122);
    8e1e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8e23:	66 83 e8 61          	sub    $0x61,%ax
    8e27:	66 83 f8 19          	cmp    $0x19,%ax
    8e2b:	0f 96 c0             	setbe  %al
    8e2e:	66 0f b6 c0          	movzbw %al,%ax
}
    8e32:	66 5d                	pop    %bp
    8e34:	66 c3                	retw   

00008e36 <_Z7iscntrli>:

int iscntrl(int ch)
{
    8e36:	66 55                	push   %bp
    8e38:	66 89 e5             	mov    %sp,%bp
    8e3b:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return (ch >= 0 && ch <=31) || ch == 127;
    8e40:	66 83 fa 7f          	cmp    $0x7f,%dx
    8e44:	0f 94 c0             	sete   %al
    8e47:	66 83 fa 1f          	cmp    $0x1f,%dx
    8e4b:	0f 96 c2             	setbe  %dl
    8e4e:	66 09 d0             	or     %dx,%ax
    8e51:	66 0f b6 c0          	movzbw %al,%ax
}
    8e55:	66 5d                	pop    %bp
    8e57:	66 c3                	retw   

00008e59 <_Z7isgraphi>:

int isgraph(int ch)
{
    8e59:	66 55                	push   %bp
    8e5b:	66 89 e5             	mov    %sp,%bp
    return (ch >= 33 && ch <= 126);
    8e5e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8e63:	66 83 e8 21          	sub    $0x21,%ax
    8e67:	66 83 f8 5d          	cmp    $0x5d,%ax
    8e6b:	0f 96 c0             	setbe  %al
    8e6e:	66 0f b6 c0          	movzbw %al,%ax
}
    8e72:	66 5d                	pop    %bp
    8e74:	66 c3                	retw   

00008e76 <_Z7isprinti>:

int isprint(int ch)
{
    8e76:	66 55                	push   %bp
    8e78:	66 89 e5             	mov    %sp,%bp
    return (ch >= 32 && ch <= 126);
    8e7b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8e80:	66 83 e8 20          	sub    $0x20,%ax
    8e84:	66 83 f8 5e          	cmp    $0x5e,%ax
    8e88:	0f 96 c0             	setbe  %al
    8e8b:	66 0f b6 c0          	movzbw %al,%ax
}
    8e8f:	66 5d                	pop    %bp
    8e91:	66 c3                	retw   

00008e93 <_Z7ispuncti>:

int ispunct(int ch)
{
    8e93:	66 55                	push   %bp
    8e95:	66 89 e5             	mov    %sp,%bp
    8e98:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return (ch >= 33 && ch <=47) || (ch >= 58 && ch <=64) 
    8e9d:	67 66 8d 4a df       	lea    -0x21(%bp,%si),%cx
            || (ch >= 91 && ch <= 96) || (ch >= 123 && ch <= 126);
    8ea2:	b0 01                	mov    $0x1,%al
    8ea4:	66 83 f9 0e          	cmp    $0xe,%cx
    8ea8:	76 21                	jbe    8ecb <_Z7ispuncti+0x38>
    return (ch >= 33 && ch <=47) || (ch >= 58 && ch <=64) 
    8eaa:	67 66 8d 4a c6       	lea    -0x3a(%bp,%si),%cx
    8eaf:	66 83 f9 06          	cmp    $0x6,%cx
    8eb3:	76 16                	jbe    8ecb <_Z7ispuncti+0x38>
            || (ch >= 91 && ch <= 96) || (ch >= 123 && ch <= 126);
    8eb5:	67 66 8d 4a a5       	lea    -0x5b(%bp,%si),%cx
    8eba:	66 83 f9 05          	cmp    $0x5,%cx
    8ebe:	76 0b                	jbe    8ecb <_Z7ispuncti+0x38>
    8ec0:	66 83 ea 7b          	sub    $0x7b,%dx
    8ec4:	66 83 fa 03          	cmp    $0x3,%dx
    8ec8:	0f 96 c0             	setbe  %al
    8ecb:	66 0f b6 c0          	movzbw %al,%ax
}
    8ecf:	66 5d                	pop    %bp
    8ed1:	66 c3                	retw   

00008ed3 <_Z8isxdigiti>:

int isxdigit(int ch)
{
    8ed3:	66 55                	push   %bp
    8ed5:	66 89 e5             	mov    %sp,%bp
    8ed8:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return (ch >= 48 && ch <= 57);
    8edd:	67 66 8d 4a d0       	lea    -0x30(%bp,%si),%cx
    8ee2:	b0 01                	mov    $0x1,%al
    return isdigit(ch) || (ch >= 65 && ch <= 70) || (ch >= 97 && ch <= 102);
    8ee4:	66 83 f9 09          	cmp    $0x9,%cx
    8ee8:	76 0f                	jbe    8ef9 <_Z8isxdigiti+0x26>
    8eea:	66 83 e2 df          	and    $0xffdf,%dx
    8eee:	66 83 ea 41          	sub    $0x41,%dx
    8ef2:	66 83 fa 05          	cmp    $0x5,%dx
    8ef6:	0f 96 c0             	setbe  %al
    8ef9:	66 0f b6 c0          	movzbw %al,%ax
}
    8efd:	66 5d                	pop    %bp
    8eff:	66 c3                	retw   

00008f01 <_Z7toloweri>:
int tolower(int ch)
{
    8f01:	66 55                	push   %bp
    8f03:	66 89 e5             	mov    %sp,%bp
    return ch + 0x20;
    8f06:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8f0b:	66 83 c0 20          	add    $0x20,%ax
}
    8f0f:	66 5d                	pop    %bp
    8f11:	66 c3                	retw   

00008f13 <_Z7toupperi>:
int toupper(int ch)
{
    8f13:	66 55                	push   %bp
    8f15:	66 89 e5             	mov    %sp,%bp
    return ch - 0x20;
    8f18:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8f1d:	66 83 e8 20          	sub    $0x20,%ax
}
    8f21:	66 5d                	pop    %bp
    8f23:	66 c3                	retw   
    8f25:	90                   	nop

00008f26 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0>:
    if(base == 0 && !auto_detected)
    {
        base = 10;
        auto_detected = true;
    }
    auto char_to_digit = [](auto ch){
    8f26:	66 55                	push   %bp
    8f28:	66 89 e5             	mov    %sp,%bp
    8f2b:	66 89 c2             	mov    %ax,%dx
        int digit;
        if(ch >= '0' && ch <= '9')
    8f2e:	66 83 e8 30          	sub    $0x30,%ax
    8f32:	3c 09                	cmp    $0x9,%al
    8f34:	77 0b                	ja     8f41 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x1b>
            digit = ch - '0';
    8f36:	66 0f be d2          	movsbw %dl,%dx
    8f3a:	67 66 8d 42 d0       	lea    -0x30(%bp,%si),%ax
    8f3f:	eb 2b                	jmp    8f6c <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='A' && ch <= 'F')
    8f41:	67 66 8d 42 bf       	lea    -0x41(%bp,%si),%ax
    8f46:	3c 05                	cmp    $0x5,%al
    8f48:	77 0b                	ja     8f55 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x2f>
            digit = ch - 'A' + 10;
    8f4a:	66 0f be d2          	movsbw %dl,%dx
    8f4e:	67 66 8d 42 c9       	lea    -0x37(%bp,%si),%ax
    8f53:	eb 17                	jmp    8f6c <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='a' && ch <= 'f')
    8f55:	67 66 8d 4a 9f       	lea    -0x61(%bp,%si),%cx
            digit = ch - 'a' + 10;
        else
            digit = -1;
    8f5a:	66 83 c8 ff          	or     $0xffff,%ax
        else if(ch >='a' && ch <= 'f')
    8f5e:	80 f9 05             	cmp    $0x5,%cl
    8f61:	77 09                	ja     8f6c <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
            digit = ch - 'a' + 10;
    8f63:	66 0f be d2          	movsbw %dl,%dx
    8f67:	67 66 8d 42 a9       	lea    -0x57(%bp,%si),%ax
        return digit;
    };
    8f6c:	66 5d                	pop    %bp
    8f6e:	66 c3                	retw   

00008f70 <_Z5abortv>:
{
    8f70:	66 55                	push   %bp
    8f72:	66 89 e5             	mov    %sp,%bp
    asm volatile ("int $0x20\n\t");
    8f75:	cd 20                	int    $0x20
}
    8f77:	66 5d                	pop    %bp
    8f79:	66 c3                	retw   

00008f7b <_Z3absi>:
{
    8f7b:	66 55                	push   %bp
    8f7d:	66 89 e5             	mov    %sp,%bp
    8f80:	67 66 8b 45 08       	mov    0x8(%di),%ax
    return n > 0 ? n : -n;
    8f85:	66 99                	cwtd   
    8f87:	66 31 d0             	xor    %dx,%ax
    8f8a:	66 29 d0             	sub    %dx,%ax
}
    8f8d:	66 5d                	pop    %bp
    8f8f:	66 c3                	retw   

00008f91 <_Z4labsl>:
{
    8f91:	66 55                	push   %bp
    8f93:	66 89 e5             	mov    %sp,%bp
    8f96:	67 66 8b 45 08       	mov    0x8(%di),%ax
    return n > 0 ? n : -n;
    8f9b:	66 99                	cwtd   
    8f9d:	66 31 d0             	xor    %dx,%ax
    8fa0:	66 29 d0             	sub    %dx,%ax
}
    8fa3:	66 5d                	pop    %bp
    8fa5:	66 c3                	retw   

00008fa7 <_Z3divii>:
{
    8fa7:	66 55                	push   %bp
    8fa9:	66 89 e5             	mov    %sp,%bp
    8fac:	66 57                	push   %di
    8fae:	66 56                	push   %si
    8fb0:	66 53                	push   %bx
    8fb2:	66 83 ec 0c          	sub    $0xc,%sp
    8fb6:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8fbb:	67 66 8b 75 10       	mov    0x10(%di),%si
    if(x == 0) return div_t{0, 0};
    8fc0:	67 66 83 7d 0c 00    	cmpw   $0x0,0xc(%di)
    8fc6:	75 13                	jne    8fdb <_Z3divii+0x34>
    8fc8:	67 66 c7 03 00 00    	movw   $0x0,(%bp,%di)
    8fce:	00 00                	add    %al,(%eax)
    8fd0:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    8fd7:	00 00                	add    %al,(%eax)
    8fd9:	eb 63                	jmp    903e <_Z3divii+0x97>
    div_t r = div(x/2, y);
    8fdb:	67 66 8d 7d ec       	lea    -0x14(%di),%di
    8fe0:	66 56                	push   %si
    8fe2:	66 b9 02 00          	mov    $0x2,%cx
    8fe6:	00 00                	add    %al,(%eax)
    8fe8:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8fed:	66 99                	cwtd   
    8fef:	66 f7 f9             	idiv   %cx
    8ff2:	66 50                	push   %ax
    8ff4:	66 57                	push   %di
    8ff6:	66 e8 ab ff          	callw  8fa5 <_Z4labsl+0x14>
    8ffa:	ff                   	(bad)  
    8ffb:	ff 67 66             	jmp    *0x66(%edi)
    8ffe:	8b 55 ec             	mov    -0x14(%ebp),%edx
    9001:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    r.quot = 2 * r.quot;
    9006:	67 66 8d 3c          	lea    (%si),%di
    900a:	12 67 66             	adc    0x66(%edi),%ah
    900d:	89 7d e8             	mov    %edi,-0x18(%ebp)
    9010:	66 89 f9             	mov    %di,%cx
    r.rem = 2 * r.rem;
    9013:	66 01 c0             	add    %ax,%ax
    if(x % 2) r.rem = r.rem + 1;
    9016:	66 5a                	pop    %dx
    9018:	66 5f                	pop    %di
    901a:	66 31 d2             	xor    %dx,%dx
    901d:	67 f6 45 0c 01       	testb  $0x1,0xc(%di)
    9022:	0f 95 c2             	setne  %dl
    9025:	66 89 d7             	mov    %dx,%di
    9028:	66 01 f8             	add    %di,%ax
    if(r.rem >= y) 
    902b:	66 39 c6             	cmp    %ax,%si
    902e:	7f 05                	jg     9035 <_Z3divii+0x8e>
        r.quot = r.quot + 1;
    9030:	66 41                	inc    %cx
        r.rem = r.rem - y;
    9032:	66 29 f0             	sub    %si,%ax
    return r;
    9035:	67 66 89 0b          	mov    %cx,(%bp,%di)
    9039:	67 66 89 43 04       	mov    %ax,0x4(%bp,%di)
}
    903e:	66 89 d8             	mov    %bx,%ax
    9041:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    9046:	66 5b                	pop    %bx
    9048:	66 5e                	pop    %si
    904a:	66 5f                	pop    %di
    904c:	66 5d                	pop    %bp
    904e:	66 c2 04 00          	retw   $0x4

00009052 <_Z4ldivll>:
{
    9052:	66 55                	push   %bp
    9054:	66 89 e5             	mov    %sp,%bp
    9057:	66 57                	push   %di
    9059:	66 56                	push   %si
    905b:	66 53                	push   %bx
    905d:	66 83 ec 0c          	sub    $0xc,%sp
    9061:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    9066:	67 66 8b 75 10       	mov    0x10(%di),%si
    if(x == 0) return ldiv_t{0, 0};
    906b:	67 66 83 7d 0c 00    	cmpw   $0x0,0xc(%di)
    9071:	75 13                	jne    9086 <_Z4ldivll+0x34>
    9073:	67 66 c7 03 00 00    	movw   $0x0,(%bp,%di)
    9079:	00 00                	add    %al,(%eax)
    907b:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    9082:	00 00                	add    %al,(%eax)
    9084:	eb 63                	jmp    90e9 <_Z4ldivll+0x97>
    ldiv_t r = ldiv(x/2, y);
    9086:	67 66 8d 7d ec       	lea    -0x14(%di),%di
    908b:	66 56                	push   %si
    908d:	66 b9 02 00          	mov    $0x2,%cx
    9091:	00 00                	add    %al,(%eax)
    9093:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9098:	66 99                	cwtd   
    909a:	66 f7 f9             	idiv   %cx
    909d:	66 50                	push   %ax
    909f:	66 57                	push   %di
    90a1:	66 e8 ab ff          	callw  9050 <_Z3divii+0xa9>
    90a5:	ff                   	(bad)  
    90a6:	ff 67 66             	jmp    *0x66(%edi)
    90a9:	8b 55 ec             	mov    -0x14(%ebp),%edx
    90ac:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    r.quot = 2 * r.quot;
    90b1:	67 66 8d 3c          	lea    (%si),%di
    90b5:	12 67 66             	adc    0x66(%edi),%ah
    90b8:	89 7d e8             	mov    %edi,-0x18(%ebp)
    90bb:	66 89 f9             	mov    %di,%cx
    r.rem = 2 * r.rem;
    90be:	66 01 c0             	add    %ax,%ax
    if(x % 2) r.rem = r.rem + 1;
    90c1:	66 5a                	pop    %dx
    90c3:	66 5f                	pop    %di
    90c5:	66 31 d2             	xor    %dx,%dx
    90c8:	67 f6 45 0c 01       	testb  $0x1,0xc(%di)
    90cd:	0f 95 c2             	setne  %dl
    90d0:	66 89 d7             	mov    %dx,%di
    90d3:	66 01 f8             	add    %di,%ax
    if(r.rem >= y) 
    90d6:	66 39 c6             	cmp    %ax,%si
    90d9:	7f 05                	jg     90e0 <_Z4ldivll+0x8e>
        r.quot = r.quot + 1;
    90db:	66 41                	inc    %cx
        r.rem = r.rem - y;
    90dd:	66 29 f0             	sub    %si,%ax
    return r;
    90e0:	67 66 89 0b          	mov    %cx,(%bp,%di)
    90e4:	67 66 89 43 04       	mov    %ax,0x4(%bp,%di)
}
    90e9:	66 89 d8             	mov    %bx,%ax
    90ec:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    90f1:	66 5b                	pop    %bx
    90f3:	66 5e                	pop    %si
    90f5:	66 5f                	pop    %di
    90f7:	66 5d                	pop    %bp
    90f9:	66 c2 04 00          	retw   $0x4

000090fd <_Z6strtolPKcPPci>:
{
    90fd:	66 55                	push   %bp
    90ff:	66 89 e5             	mov    %sp,%bp
    9102:	66 57                	push   %di
    9104:	66 56                	push   %si
    9106:	66 53                	push   %bx
    9108:	66 83 ec 0c          	sub    $0xc,%sp
    910c:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto start = str;   
    9111:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    while(isspace(*start))
    9116:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    911b:	66 50                	push   %ax
    911d:	66 e8 44 fc          	callw  8d65 <_Z7reversePc+0x4a>
    9121:	ff                   	(bad)  
    9122:	ff 66 5f             	jmp    *0x5f(%esi)
    9125:	66 85 c0             	test   %ax,%ax
    9128:	74 04                	je     912e <_Z6strtolPKcPPci+0x31>
        ++start;
    912a:	66 43                	inc    %bx
    while(isspace(*start))
    912c:	eb e8                	jmp    9116 <_Z6strtolPKcPPci+0x19>
    size_t len_num = strlen(start);//非白空格数字串长度
    912e:	66 53                	push   %bx
    9130:	66 e8 1a fb          	callw  8c4e <_Z6memsetPvim+0x23>
    9134:	ff                   	(bad)  
    9135:	ff 66 59             	jmp    *0x59(%esi)
    if(len_num == 0)
    9138:	66 85 c0             	test   %ax,%ax
    913b:	75 1e                	jne    915b <_Z6strtolPKcPPci+0x5e>
        return 0;
    913d:	66 31 c0             	xor    %ax,%ax
        if(str_end) *str_end = const_cast<char*>(str);
    9140:	67 66 83 7d 0c 00    	cmpw   $0x0,0xc(%di)
    9146:	0f 84 4d 01 67 66    	je     66679299 <_data_end+0x6666ccf5>
    914c:	8b 7d 0c             	mov    0xc(%ebp),%edi
    914f:	67 66 8b 75 08       	mov    0x8(%di),%si
    9154:	67 66 89 37          	mov    %si,(%bx)
    9158:	e9 3c 01 67 8a       	jmp    8a679299 <_data_end+0x8a66ccf5>
    if(*high == '+' || *high == '-')
    915d:	13 80 fa 2b 74 10    	adc    0x10742bfa(%eax),%eax
    9163:	80 fa 2d             	cmp    $0x2d,%dl
    9166:	75 21                	jne    9189 <_Z6strtolPKcPPci+0x8c>
        sign = (*high == '+') ? 1 : -1;
    9168:	67 66 c7 45 f0 ff ff 	movw   $0xffff,-0x10(%di)
    916f:	ff                   	(bad)  
    9170:	ff                   	(bad)  
    9171:	eb 09                	jmp    917c <_Z6strtolPKcPPci+0x7f>
    9173:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    917a:	00 00                	add    %al,(%eax)
        ++high;
    917c:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
        sign_char_bit = 1;
    9181:	66 ba 01 00          	mov    $0x1,%dx
    9185:	00 00                	add    %al,(%eax)
    9187:	eb 0f                	jmp    9198 <_Z6strtolPKcPPci+0x9b>
    9189:	66 89 df             	mov    %bx,%di
    size_t sign_char_bit = 0;
    918c:	66 31 d2             	xor    %dx,%dx
    int sign = 1;
    918f:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    9196:	00 00                	add    %al,(%eax)
    if(base == 16 || (base == 0 && !auto_detected))
    9198:	66 f7 c6 ef ff       	test   $0xffef,%si
    919d:	ff                   	(bad)  
    919e:	ff 75 29             	pushl  0x29(%ebp)
        if(len_num > 1 + sign_char_bit && 
    91a1:	67 66 8d 4a 01       	lea    0x1(%bp,%si),%cx
    91a6:	66 39 c1             	cmp    %ax,%cx
    91a9:	73 1f                	jae    91ca <_Z6strtolPKcPPci+0xcd>
    91ab:	67 80 3f 30          	cmpb   $0x30,(%bx)
    91af:	75 19                	jne    91ca <_Z6strtolPKcPPci+0xcd>
           (*(high + 1) == 'x' || *(high + 1) == 'X'))
    91b1:	67 8a 4f 01          	mov    0x1(%bx),%cl
    91b5:	66 83 e1 df          	and    $0xffdf,%cx
    91b9:	80 f9 58             	cmp    $0x58,%cl
    91bc:	75 0c                	jne    91ca <_Z6strtolPKcPPci+0xcd>
             high += 2;
    91be:	66 83 c7 02          	add    $0x2,%di
             base = 16;
    91c2:	66 be 10 00          	mov    $0x10,%si
    91c6:	00 00                	add    %al,(%eax)
    91c8:	eb 2b                	jmp    91f5 <_Z6strtolPKcPPci+0xf8>
    if(base == 8 || (base == 0 && !auto_detected))
    91ca:	66 83 fe 08          	cmp    $0x8,%si
    91ce:	74 05                	je     91d5 <_Z6strtolPKcPPci+0xd8>
    91d0:	66 85 f6             	test   %si,%si
    91d3:	75 20                	jne    91f5 <_Z6strtolPKcPPci+0xf8>
        if(len_num > sign_char_bit && *high == 0)   //存在八进制前缀0
    91d5:	66 39 c2             	cmp    %ax,%dx
    91d8:	73 10                	jae    91ea <_Z6strtolPKcPPci+0xed>
    91da:	67 80 3f 00          	cmpb   $0x0,(%bx)
    91de:	75 0a                	jne    91ea <_Z6strtolPKcPPci+0xed>
            high += 1;
    91e0:	66 47                	inc    %di
            base = 8;
    91e2:	66 be 08 00          	mov    $0x8,%si
    91e6:	00 00                	add    %al,(%eax)
    91e8:	eb 0b                	jmp    91f5 <_Z6strtolPKcPPci+0xf8>
    if(base == 0 && !auto_detected)
    91ea:	66 85 f6             	test   %si,%si
    91ed:	75 06                	jne    91f5 <_Z6strtolPKcPPci+0xf8>
        base = 10;
    91ef:	66 be 0a 00          	mov    $0xa,%si
    91f3:	00 00                	add    %al,(%eax)
    bool has_vaild_char = false;
    91f5:	67 c6 45 ec 00       	movb   $0x0,-0x14(%di)
    auto low = start;   
    //使low指向数字低位后的一个位置
    while(!isspace(*low) &&             //判断是否是白空格
    91fa:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    91ff:	66 50                	push   %ax
    9201:	66 e8 60 fb          	callw  8d65 <_Z7reversePc+0x4a>
    9205:	ff                   	(bad)  
    9206:	ff 66 5a             	jmp    *0x5a(%esi)
          (*low != '\0') &&             //判断是否字符串结束
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    9209:	66 85 c0             	test   %ax,%ax
    920c:	75 28                	jne    9236 <_Z6strtolPKcPPci+0x139>
          (*low != '\0') &&             //判断是否字符串结束
    920e:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    while(!isspace(*low) &&             //判断是否是白空格
    9213:	84 c0                	test   %al,%al
    9215:	74 1f                	je     9236 <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    9217:	66 e8 09 fd          	callw  8f24 <_Z7toupperi+0x11>
    921b:	ff                   	(bad)  
    921c:	ff 66 83             	jmp    *-0x7d(%esi)
          (*low != '\0') &&             //判断是否字符串结束
    921f:	f8                   	clc    
    9220:	ff 0f                	decl   (%edi)
    9222:	95                   	xchg   %eax,%ebp
    9223:	c2 66 39             	ret    $0x3966
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    9226:	f0 0f 9c c0          	lock setl %al
    922a:	20 c2                	and    %al,%dl
    922c:	74 08                	je     9236 <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) < base    //判断是否是该进制
          )
    {
        ++low;
    922e:	66 43                	inc    %bx
        has_vaild_char = true;
    9230:	67 88 55 ec          	mov    %dl,-0x14(%di)
    while(!isspace(*low) &&             //判断是否是白空格
    9234:	eb c4                	jmp    91fa <_Z6strtolPKcPPci+0xfd>
    }
    if(!has_vaild_char)
    9236:	67 80 7d ec 00       	cmpb   $0x0,-0x14(%di)
    923b:	0f 84 fe fe 67 66    	je     6668913f <_data_end+0x6667cb9b>
        if (str_end) *str_end = const_cast<char*>(str);
        return 0;
    }
    long power = 1;
    long ret = 0;
    if(str_end) *str_end = const_cast<char*>(low);
    9241:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
    9245:	74 09                	je     9250 <_Z6strtolPKcPPci+0x153>
    9247:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    924c:	67 66 89 18          	mov    %bx,(%bx,%si)
    for(auto p = low - 1; p >= high; --p)
    9250:	66 4b                	dec    %bx
    long ret = 0;
    9252:	66 31 c9             	xor    %cx,%cx
    long power = 1;
    9255:	66 ba 01 00          	mov    $0x1,%dx
    9259:	00 00                	add    %al,(%eax)
    925b:	67 66 89 55 e8       	mov    %dx,-0x18(%di)
    for(auto p = low - 1; p >= high; --p)
    9260:	66 39 fb             	cmp    %di,%bx
    9263:	72 29                	jb     928e <_Z6strtolPKcPPci+0x191>
    9265:	67 66 89 4d ec       	mov    %cx,-0x14(%di)
    {
        int digit = char_to_digit(*p);
    926a:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    926f:	66 e8 b1 fc          	callw  8f24 <_Z7toupperi+0x11>
    9273:	ff                   	(bad)  
    9274:	ff 67 66             	jmp    *0x66(%edi)
        ret += power * digit;
    9277:	8b 55 e8             	mov    -0x18(%ebp),%edx
    927a:	66 0f af c2          	imul   %dx,%ax
    927e:	67 66 8b 4d ec       	mov    -0x14(%di),%cx
    9283:	66 01 c1             	add    %ax,%cx
        
        power *= base;
    9286:	66 0f af d6          	imul   %si,%dx
    for(auto p = low - 1; p >= high; --p)
    928a:	66 4b                	dec    %bx
    928c:	eb cd                	jmp    925b <_Z6strtolPKcPPci+0x15e>
    }
    ret *= sign;
    928e:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    9293:	66 0f af c1          	imul   %cx,%ax
    return ret;
}
    9297:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    929c:	66 5b                	pop    %bx
    929e:	66 5e                	pop    %si
    92a0:	66 5f                	pop    %di
    92a2:	66 5d                	pop    %bp
    92a4:	66 c3                	retw   

000092a6 <_Z4atoiPKc>:
{
    92a6:	66 55                	push   %bp
    92a8:	66 89 e5             	mov    %sp,%bp
    return (int)strtol(s, (char**)nullptr, 10);
    92ab:	66 6a 0a             	pushw  $0xa
    92ae:	66 6a 00             	pushw  $0x0
    92b1:	67 66 ff 75 08       	pushw  0x8(%di)
    92b6:	66 e8 41 fe          	callw  90fb <_Z4ldivll+0xa9>
    92ba:	ff                   	(bad)  
    92bb:	ff 66 c9             	jmp    *-0x37(%esi)
}
    92be:	66 c3                	retw   

000092c0 <_Z4atolPKc>:
{
    92c0:	66 55                	push   %bp
    92c2:	66 89 e5             	mov    %sp,%bp
    return strtol(s, (char**)nullptr, 10);
    92c5:	66 6a 0a             	pushw  $0xa
    92c8:	66 6a 00             	pushw  $0x0
    92cb:	67 66 ff 75 08       	pushw  0x8(%di)
    92d0:	66 e8 27 fe          	callw  90fb <_Z4ldivll+0xa9>
    92d4:	ff                   	(bad)  
    92d5:	ff 66 c9             	jmp    *-0x37(%esi)
}
    92d8:	66 c3                	retw   

000092da <_ZL19system_call_getcharv>:
    );

}

static inline int system_call_getchar()
{
    92da:	66 55                	push   %bp
    92dc:	66 89 e5             	mov    %sp,%bp
    INVOKE_INT_SAFE(98)
    "movl %%eax, %0\n\t"
    :"=r"(ret)
    :
    :"%eax"
    );
    92df:	b4 00                	mov    $0x0,%ah
    92e1:	8c d3                	mov    %ss,%ebx
    92e3:	8e e3                	mov    %ebx,%fs
    92e5:	bb 00 00 8e d3       	mov    $0xd38e0000,%ebx
    92ea:	8e db                	mov    %ebx,%ds
    92ec:	8e c3                	mov    %ebx,%es
    92ee:	cd 98                	int    $0x98
    92f0:	8c e3                	mov    %fs,%ebx
    92f2:	8e d3                	mov    %ebx,%ss
    92f4:	8e db                	mov    %ebx,%ds
    92f6:	8e c3                	mov    %ebx,%es
    92f8:	66 89 c2             	mov    %ax,%dx
    int mask = 0xFFFF;
    ret = ret & mask;
    92fb:	66 0f b7 c2          	movzww %dx,%ax
    return ret;
}
    92ff:	66 5d                	pop    %bp
    9301:	66 c3                	retw   

00009303 <_ZL19system_call_putchari>:
static inline void system_call_putchar(int ch)
{
    9303:	66 55                	push   %bp
    9305:	66 89 e5             	mov    %sp,%bp
    9308:	66 53                	push   %bx
    930a:	66 89 c2             	mov    %ax,%dx
    INVOKE_INT_SAFE(98)

    :
    :"r"(c)
    :"%eax", "ebx"
    );
    930d:	88 d0                	mov    %dl,%al
    930f:	b4 01                	mov    $0x1,%ah
    9311:	8c d3                	mov    %ss,%ebx
    9313:	8e e3                	mov    %ebx,%fs
    9315:	bb 00 00 8e d3       	mov    $0xd38e0000,%ebx
    931a:	8e db                	mov    %ebx,%ds
    931c:	8e c3                	mov    %ebx,%es
    931e:	cd 98                	int    $0x98
    9320:	8c e3                	mov    %fs,%ebx
    9322:	8e d3                	mov    %ebx,%ss
    9324:	8e db                	mov    %ebx,%ds
    9326:	8e c3                	mov    %ebx,%es
    //TODO
}
    9328:	66 5b                	pop    %bx
    932a:	66 5d                	pop    %bp
    932c:	66 c3                	retw   

0000932e <_Z7putchari>:
namespace hhlibc {

#endif
#ifndef _HHOS_LIBC_TEST
int putchar( int ch )
{
    932e:	66 55                	push   %bp
    9330:	66 89 e5             	mov    %sp,%bp
    9333:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    //sys_get_current_tty()->putchar(ch);
    system_call_putchar(ch);
    9338:	66 89 c8             	mov    %cx,%ax
    933b:	66 e8 c2 ff          	callw  9301 <_ZL19system_call_getcharv+0x27>
    933f:	ff                   	(bad)  
    9340:	ff 66 89             	jmp    *-0x77(%esi)
    //sys_tty_putchar(ch);
    return ch;
}
    9343:	c8 66 5d 66          	enter  $0x5d66,$0x66
    9347:	c3                   	ret    

00009348 <_Z4putsPKc>:

int puts(const char* string)
{
    9348:	66 55                	push   %bp
    934a:	66 89 e5             	mov    %sp,%bp
    934d:	66 53                	push   %bx
    934f:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    auto len = strlen(string);
    9354:	66 53                	push   %bx
    9356:	66 e8 f4 f8          	callw  8c4e <_Z6memsetPvim+0x23>
    935a:	ff                   	(bad)  
    935b:	ff 66 89             	jmp    *-0x77(%esi)
    935e:	d9 67 66             	fldenv 0x66(%edi)
    9361:	8d 1c 03             	lea    (%ebx,%eax,1),%ebx
    9364:	66 58                	pop    %ax
    for(size_t i = 0; i < len; ++i)
    9366:	66 39 d9             	cmp    %bx,%cx
    9369:	74 0f                	je     937a <_Z4putsPKc+0x32>
    {
        putchar(*(string + i));
    936b:	67 66 0f be 01       	movsbw (%bx,%di),%ax
    system_call_putchar(ch);
    9370:	66 e8 8d ff          	callw  9301 <_ZL19system_call_getcharv+0x27>
    9374:	ff                   	(bad)  
    9375:	ff 66 41             	jmp    *0x41(%esi)
    for(size_t i = 0; i < len; ++i)
    9378:	eb ec                	jmp    9366 <_Z4putsPKc+0x1e>
    }
    return 0;
}
    937a:	66 31 c0             	xor    %ax,%ax
    937d:	67 66 8b 5d fc       	mov    -0x4(%di),%bx
    9382:	66 c9                	leavew 
    9384:	66 c3                	retw   

00009386 <_Z7getcharv>:
#endif


#ifndef _HHOS_LIBC_TEST
int getchar(void)
{
    9386:	66 55                	push   %bp
    9388:	66 89 e5             	mov    %sp,%bp
    int ch = system_call_getchar();
    return ch;
}
    938b:	66 5d                	pop    %bp
    int ch = system_call_getchar();
    938d:	e9                   	.byte 0xe9
    938e:	4a                   	dec    %edx
    938f:	ff                   	.byte 0xff

00009390 <_Z4getsPc>:
char *gets( char *str )
{
    9390:	66 55                	push   %bp
    9392:	66 89 e5             	mov    %sp,%bp
    9395:	66 53                	push   %bx
    9397:	66 51                	push   %cx
    9399:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    int ch = system_call_getchar();
    939e:	66 e8 36 ff          	callw  92d8 <_Z4atolPKc+0x18>
    93a2:	ff                   	(bad)  
    93a3:	ff 66 89             	jmp    *-0x77(%esi)
    93a6:	c3                   	ret    
    int cnt = 0;
    char ch;
    while(true)
    {
        ch = getchar();
        if (ch == '\b')
    93a7:	3c 08                	cmp    $0x8,%al
    93a9:	74 f3                	je     939e <_Z4getsPc+0xe>
        {
            if (cnt > 0)
                putchar(ch);
            continue;
        }
        putchar(ch);
    93ab:	66 0f be c0          	movsbw %al,%ax
    93af:	67 88 5d fb          	mov    %bl,-0x5(%di)
    system_call_putchar(ch);
    93b3:	66 e8 4a ff          	callw  9301 <_ZL19system_call_getcharv+0x27>
    93b7:	ff                   	(bad)  
    93b8:	ff 67 8a             	jmp    *-0x76(%edi)
        if(ch == 13 || ch == 10) {
    93bb:	55                   	push   %ebp
    93bc:	fb                   	sti    
    93bd:	80 fa 0a             	cmp    $0xa,%dl
    93c0:	74 0d                	je     93cf <_Z4getsPc+0x3f>
    93c2:	80 fa 0d             	cmp    $0xd,%dl
    93c5:	74 08                	je     93cf <_Z4getsPc+0x3f>
            putchar('\n');
            break;
        }
        *(str++) = ch;
    93c7:	66 41                	inc    %cx
    93c9:	67 88 59 ff          	mov    %bl,-0x1(%bx,%di)
    93cd:	eb cf                	jmp    939e <_Z4getsPc+0xe>
    system_call_putchar(ch);
    93cf:	66 b8 0a 00          	mov    $0xa,%ax
    93d3:	00 00                	add    %al,(%eax)
    93d5:	66 e8 28 ff          	callw  9301 <_ZL19system_call_getcharv+0x27>
    93d9:	ff                   	(bad)  
    93da:	ff 67 c6             	jmp    *-0x3a(%edi)
    }
    *str = '\0';
    93dd:	01 00                	add    %eax,(%eax)
    return str;
}
    93df:	66 89 c8             	mov    %cx,%ax
    93e2:	66 5a                	pop    %dx
    93e4:	66 5b                	pop    %bx
    93e6:	66 5d                	pop    %bp
    93e8:	66 c3                	retw   

000093ea <_Z7vsscanfPKcS0_Pc>:
#endif

int vsscanf( const char* buffer, const char* format, va_list vlist )
{
    93ea:	66 55                	push   %bp
    93ec:	66 89 e5             	mov    %sp,%bp
    93ef:	66 57                	push   %di
    93f1:	66 56                	push   %si
    93f3:	66 53                	push   %bx
    93f5:	66 83 ec 14          	sub    $0x14,%sp
    93f9:	67 66 8b 75 08       	mov    0x8(%di),%si
    93fe:	67 66 8b 7d 10       	mov    0x10(%di),%di
    auto len_fmt = strlen(format);
    9403:	67 66 ff 75 0c       	pushw  0xc(%di)
    9408:	66 e8 42 f8          	callw  8c4e <_Z6memsetPvim+0x23>
    940c:	ff                   	(bad)  
    940d:	ff 67 66             	jmp    *0x66(%edi)
    9410:	89 45 e0             	mov    %eax,-0x20(%ebp)
    9413:	66 59                	pop    %cx
    auto p_fmt = format; 
    9415:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    941a:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    auto p_buf = buffer;
    bool error = false;
    int ret = 0;
    941f:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    9426:	00 00                	add    %al,(%eax)
    bool error = false;
    9428:	67 c6 45 e7 00       	movb   $0x0,-0x19(%di)
    while(static_cast<size_t>(p_fmt - format) < len_fmt)
    942d:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    9432:	67 66 2b 45 0c       	sub    0xc(%di),%ax
    9437:	67 66 3b 45 e0       	cmp    -0x20(%di),%ax
    943c:	0f 93 c0             	setae  %al
    {
        if(error) break;
    943f:	67 08 45 e7          	or     %al,-0x19(%di)
    9443:	0f 85 50 01 67 66    	jne    66679599 <_data_end+0x6666cff5>
        if(isspace(*p_fmt)) //略过白空格
    9449:	8b 45 e8             	mov    -0x18(%ebp),%eax
    944c:	67 66 0f be 00       	movsbw (%bx,%si),%ax
    9451:	66 50                	push   %ax
    9453:	66 e8 0e f9          	callw  8d65 <_Z7reversePc+0x4a>
    9457:	ff                   	(bad)  
    9458:	ff 66 5a             	jmp    *0x5a(%esi)
    945b:	66 85 c0             	test   %ax,%ax
    945e:	74 1d                	je     947d <_Z7vsscanfPKcS0_Pc+0x93>
        {
            p_fmt++;
    9460:	67 66 ff 45 e8       	incw   -0x18(%di)
            while(isspace(*buffer)) buffer++;
    9465:	67 66 0f be 06 66 50 	movsbw 0x5066,%ax
    946c:	66 e8 f5 f8          	callw  8d65 <_Z7reversePc+0x4a>
    9470:	ff                   	(bad)  
    9471:	ff 66 5b             	jmp    *0x5b(%esi)
    9474:	66 85 c0             	test   %ax,%ax
    9477:	74 b4                	je     942d <_Z7vsscanfPKcS0_Pc+0x43>
    9479:	66 46                	inc    %si
    947b:	eb e8                	jmp    9465 <_Z7vsscanfPKcS0_Pc+0x7b>
            continue;
        }
        else if(*p_fmt == '%') //格式控制符
    947d:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    9482:	67 80 38 25          	cmpb   $0x25,(%bx,%si)
    9486:	75 a5                	jne    942d <_Z7vsscanfPKcS0_Pc+0x43>
        {
            p_fmt++;
            char specifier = *p_fmt;
    9488:	67 8a 40 01          	mov    0x1(%bx,%si),%al
            p_fmt++;
    948c:	67 66 83 45 e8 02    	addw   $0x2,-0x18(%di)
            switch(specifier)
    9492:	3c 69                	cmp    $0x69,%al
    9494:	0f 84 b0 00 7f 25    	je     257f954a <_data_end+0x257ecfa6>
    949a:	3c 58                	cmp    $0x58,%al
    949c:	0f 84 c4 00 7f 10    	je     107f9566 <_data_end+0x107ecfc2>
    94a2:	3c 25                	cmp    $0x25,%al
    94a4:	75 87                	jne    942d <_Z7vsscanfPKcS0_Pc+0x43>
            {
                case '%':
                {
                    if(*buffer == '%') 
    94a6:	67 80 3e 25 67 0f    	cmpb   $0xf,0x6725
    94ac:	95                   	xchg   %eax,%ebp
    94ad:	45                   	inc    %ebp
    94ae:	e7 e9                	out    %eax,$0xe9
    94b0:	7b ff                	jnp    94b1 <_Z7vsscanfPKcS0_Pc+0xc7>
            switch(specifier)
    94b2:	3c 63                	cmp    $0x63,%al
    94b4:	74 31                	je     94e7 <_Z7vsscanfPKcS0_Pc+0xfd>
    94b6:	3c 64                	cmp    $0x64,%al
    94b8:	0f 84 9a 00 e9 6e    	je     6ee99558 <_data_end+0x6ee8cfb4>
    94be:	ff                   	(bad)  
    94bf:	3c 73                	cmp    $0x73,%al
    94c1:	74 4d                	je     9510 <_Z7vsscanfPKcS0_Pc+0x126>
    94c3:	7f 15                	jg     94da <_Z7vsscanfPKcS0_Pc+0xf0>
    94c5:	3c 6f                	cmp    $0x6f,%al
    94c7:	0f 85 62 ff 67 66    	jne    6668942f <_data_end+0x6667ce8b>
                    ++ret;
                    break;
                }
                case 'o':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    94cd:	8d 5f 04             	lea    0x4(%edi),%ebx
    94d0:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 8);
    94d4:	66 6a 08             	pushw  $0x8
    94d7:	e9 96 00 3c 75       	jmp    753c9572 <_data_end+0x753bcfce>
            switch(specifier)
    94dc:	74 78                	je     9556 <_Z7vsscanfPKcS0_Pc+0x16c>
    94de:	3c 78                	cmp    $0x78,%al
    94e0:	0f 84 80 00 e9 46    	je     46e99566 <_data_end+0x46e8cfc2>
    94e6:	ff 67 66             	jmp    *0x66(%edi)
                    char* p = va_arg(vlist, char*);
    94e9:	8b 17                	mov    (%edi),%edx
                    *p = *buffer;
    94eb:	67 8a 06 67 88       	mov    -0x7799,%al
    94f0:	02 66 46             	add    0x46(%esi),%ah
                    ++ret;
    94f3:	67 66 ff 45 ec       	incw   -0x14(%di)
                    char* p = va_arg(vlist, char*);
    94f8:	66 83 c7 04          	add    $0x4,%di
                    break;
    94fc:	e9 2e ff 66 50       	jmp    5067942f <_data_end+0x5066ce8b>
                    while (*buffer && isspace(*buffer)) buffer++;
    9501:	66 e8 60 f8          	callw  8d65 <_Z7reversePc+0x4a>
    9505:	ff                   	(bad)  
    9506:	ff 66 59             	jmp    *0x59(%esi)
    9509:	66 85 c0             	test   %ax,%ax
    950c:	74 0b                	je     9519 <_Z7vsscanfPKcS0_Pc+0x12f>
    950e:	66 46                	inc    %si
    9510:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    9517:	75 e6                	jne    94ff <_Z7vsscanfPKcS0_Pc+0x115>
                    char* p = va_arg(vlist, char*);
    9519:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    951e:	67 66 8b 3f          	mov    (%bx),%di
                    while(*buffer && !isspace(*buffer))
    9522:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    9529:	75 0b                	jne    9536 <_Z7vsscanfPKcS0_Pc+0x14c>
                    *p = '\0';
    952b:	67 c6 07 00          	movb   $0x0,(%bx)
                    ++ret;
    952f:	67 66 ff 45 ec       	incw   -0x14(%di)
    9534:	eb 5b                	jmp    9591 <_Z7vsscanfPKcS0_Pc+0x1a7>
                    while(*buffer && !isspace(*buffer))
    9536:	66 50                	push   %ax
    9538:	66 e8 29 f8          	callw  8d65 <_Z7reversePc+0x4a>
    953c:	ff                   	(bad)  
    953d:	ff 66 5a             	jmp    *0x5a(%esi)
    9540:	66 85 c0             	test   %ax,%ax
    9543:	75 e6                	jne    952b <_Z7vsscanfPKcS0_Pc+0x141>
                        *(p++) = *(buffer++);
    9545:	a4                   	movsb  %ds:(%esi),%es:(%edi)
                    while(*buffer && !isspace(*buffer))
    9546:	eb da                	jmp    9522 <_Z7vsscanfPKcS0_Pc+0x138>
                    int* p = va_arg(vlist, int*);
    9548:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    954d:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 0);
    9551:	66 6a 00             	pushw  $0x0
    9554:	eb 1a                	jmp    9570 <_Z7vsscanfPKcS0_Pc+0x186>
                    unsigned int* p = va_arg(vlist, unsigned int*);
    9556:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    955b:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 10);
    955f:	66 6a 0a             	pushw  $0xa
    9562:	eb 0c                	jmp    9570 <_Z7vsscanfPKcS0_Pc+0x186>
                    break;
                }
                case 'x':
                case 'X':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    9564:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    9569:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 16);
    956d:	66 6a 10             	pushw  $0x10
    9570:	67 66 8d 45 f0       	lea    -0x10(%di),%ax
    9575:	66 50                	push   %ax
    9577:	66 56                	push   %si
    9579:	66 e8 7e fb          	callw  90fb <_Z4ldivll+0xa9>
    957d:	ff                   	(bad)  
    957e:	ff 67 66             	jmp    *0x66(%edi)
                    *p = static_cast<unsigned int>(num);
    9581:	89 07                	mov    %eax,(%edi)
                    buffer = end;
    9583:	67 66 8b 75 f0       	mov    -0x10(%di),%si
                    ++ret;
    9588:	67 66 ff 45 ec       	incw   -0x14(%di)
    958d:	66 83 c4 0c          	add    $0xc,%sp
                    unsigned int* p = va_arg(vlist, unsigned int*);
    9591:	66 89 df             	mov    %bx,%di
    9594:	e9 96 fe 67 66       	jmp    6668942f <_data_end+0x6667ce8b>
                    break;
            }
        }
    }
    return ret;
}
    9599:	8b 45 ec             	mov    -0x14(%ebp),%eax
    959c:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    95a1:	66 5b                	pop    %bx
    95a3:	66 5e                	pop    %si
    95a5:	66 5f                	pop    %di
    95a7:	66 5d                	pop    %bp
    95a9:	66 c3                	retw   

000095ab <_Z6sscanfPKcS0_z>:
int sscanf( const char* buffer, const char* format, ... )
{
    95ab:	66 55                	push   %bp
    95ad:	66 89 e5             	mov    %sp,%bp
   	int ret;
	va_list va;
	va_start(va, format);
    95b0:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsscanf(buffer, format, va);
    95b5:	66 50                	push   %ax
    95b7:	67 66 ff 75 0c       	pushw  0xc(%di)
    95bc:	67 66 ff 75 08       	pushw  0x8(%di)
    95c1:	66 e8 23 fe          	callw  93e8 <_Z4getsPc+0x58>
    95c5:	ff                   	(bad)  
    95c6:	ff 66 c9             	jmp    *-0x37(%esi)
	va_end(va);
    return ret; 
}
    95c9:	66 c3                	retw   

000095cb <_Z5scanfPKcz>:
#ifndef _HHOS_LIBC_TEST
static char scanfbuf[80*25];
//TODO 关于这个返回值
int scanf( const char* format, ... )
{
    95cb:	66 55                	push   %bp
    95cd:	66 89 e5             	mov    %sp,%bp
    if (!gets(scanfbuf)) return EOF;
    95d0:	66 68 c0 ac          	pushw  $0xacc0
    95d4:	00 00                	add    %al,(%eax)
    95d6:	66 e8 b4 fd          	callw  938e <_Z7getcharv+0x8>
    95da:	ff                   	(bad)  
    95db:	ff 66 89             	jmp    *-0x77(%esi)
    95de:	c2 66 58             	ret    $0x5866
    95e1:	66 83 c8 ff          	or     $0xffff,%ax
    95e5:	66 85 d2             	test   %dx,%dx
    95e8:	74 1c                	je     9606 <_Z5scanfPKcz+0x3b>
	int ret;
	va_list va;
	va_start(va, format);
    95ea:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsscanf(scanfbuf, format, va);
    95ef:	66 50                	push   %ax
    95f1:	67 66 ff 75 08       	pushw  0x8(%di)
    95f6:	66 68 c0 ac          	pushw  $0xacc0
    95fa:	00 00                	add    %al,(%eax)
    95fc:	66 e8 e8 fd          	callw  93e8 <_Z4getsPc+0x58>
    9600:	ff                   	(bad)  
    9601:	ff 66 83             	jmp    *-0x7d(%esi)
	va_end(va);
    return ret;
    9604:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    9607:	c9                   	leave  
    9608:	66 c3                	retw   

0000960a <_Z8vsprintfPcPKcS_>:
{
    960a:	66 55                	push   %bp
    960c:	66 89 e5             	mov    %sp,%bp
    960f:	66 57                	push   %di
    9611:	66 56                	push   %si
    9613:	66 53                	push   %bx
    9615:	66 83 ec 0c          	sub    $0xc,%sp
    9619:	67 66 8b 75 0c       	mov    0xc(%di),%si
    961e:	67 66 8b 55 10       	mov    0x10(%di),%dx
    9623:	67 66 89 55 f0       	mov    %dx,-0x10(%di)
    auto len_fmt = strlen(format);
    9628:	66 56                	push   %si
    962a:	66 e8 20 f6          	callw  8c4e <_Z6memsetPvim+0x23>
    962e:	ff                   	(bad)  
    962f:	ff 67 66             	jmp    *0x66(%edi)
    9632:	89 45 ec             	mov    %eax,-0x14(%ebp)
    9635:	66 58                	pop    %ax
    auto p_buf = buffer;
    9637:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    963c:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    while(len_fmt--)
    9641:	67 66 ff 4d ec       	decw   -0x14(%di)
    9646:	67 66 83 7d ec ff    	cmpw   $0xffff,-0x14(%di)
    964c:	0f 84 4a 01 67 8a    	je     8a67979c <_data_end+0x8a66d1f8>
        if(*p_fmt != '%')
    9652:	06                   	push   %es
    9653:	3c 25                	cmp    $0x25,%al
    9655:	74 07                	je     965e <_Z8vsprintfPcPKcS_+0x54>
            *(p_buf++) = *(p_fmt++);    //非控制字符
    9657:	66 46                	inc    %si
    9659:	67 88 03             	mov    %al,(%bp,%di)
    965c:	eb 5f                	jmp    96bd <_Z8vsprintfPcPKcS_+0xb3>
            char specifier = *(++p_fmt); //%后面一个字符是specifier
    965e:	67 8a 46 01          	mov    0x1(%bp),%al
            ++p_fmt;                     //记录specifier并跳过
    9662:	66 83 c6 02          	add    $0x2,%si
            switch (specifier)
    9666:	3c 69                	cmp    $0x69,%al
    9668:	0f 84 81 00 7f 17    	je     177f96ef <_data_end+0x177ed14b>
    966e:	3c 63                	cmp    $0x63,%al
    9670:	74 40                	je     96b2 <_Z8vsprintfPcPKcS_+0xa8>
    9672:	3c 64                	cmp    $0x64,%al
    9674:	74 77                	je     96ed <_Z8vsprintfPcPKcS_+0xe3>
    9676:	3c 58                	cmp    $0x58,%al
    9678:	75 c7                	jne    9641 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    967a:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16, true);
    967f:	66 6a 01             	pushw  $0x1
    9682:	e9 e2 00 3c 73       	jmp    733c9769 <_data_end+0x733bd1c5>
            switch (specifier)
    9687:	74 38                	je     96c1 <_Z8vsprintfPcPKcS_+0xb7>
    9689:	7f 12                	jg     969d <_Z8vsprintfPcPKcS_+0x93>
    968b:	3c 6f                	cmp    $0x6f,%al
    968d:	75 b2                	jne    9641 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    968f:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 8);
    9694:	66 6a 00             	pushw  $0x0
    9697:	66 6a 08             	pushw  $0x8
    969a:	e9 da 00 3c 75       	jmp    753c9779 <_data_end+0x753bd1d5>
            switch (specifier)
    969f:	0f 84 c9 00 3c 78    	je     783c976e <_data_end+0x783bd1ca>
    96a5:	75 9a                	jne    9641 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    96a7:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16);
    96ac:	66 6a 00             	pushw  $0x0
    96af:	e9 b5 00 67 66       	jmp    66679769 <_data_end+0x6666d1c5>
                    *(p_buf++) = va_arg(vlist, int); 
    96b4:	8b 02                	mov    (%edx),%eax
    96b6:	67 88 03             	mov    %al,(%bp,%di)
    96b9:	66 83 c2 04          	add    $0x4,%dx
    96bd:	66 43                	inc    %bx
                    break;
    96bf:	eb 80                	jmp    9641 <_Z8vsprintfPcPKcS_+0x37>
                    const char * str = va_arg(vlist, char*);
    96c1:	67 66 8d 42 04       	lea    0x4(%bp,%si),%ax
    96c6:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    96cb:	67 66 8b 3a          	mov    (%bp,%si),%di
                    strcpy(p_buf, str);
    96cf:	66 57                	push   %di
    96d1:	66 53                	push   %bx
    96d3:	66 e8 93 f5          	callw  8c6a <_Z6strlenPKc+0x1a>
    96d7:	ff                   	(bad)  
    96d8:	ff 66 59             	jmp    *0x59(%esi)
                    p_buf += strlen(str);               //p应当永远指向有意义的字符后面一位
    96db:	66 58                	pop    %ax
    96dd:	66 57                	push   %di
    96df:	66 e8 6b f5          	callw  8c4e <_Z6memsetPvim+0x23>
    96e3:	ff                   	(bad)  
    96e4:	ff 66 01             	jmp    *0x1(%esi)
    96e7:	c3                   	ret    
                    break;
    96e8:	66 58                	pop    %ax
    96ea:	e9 4f ff 67 66       	jmp    6668963e <_data_end+0x6667d09a>
                    int num = va_arg(vlist, int);
    96ef:	8d 42 04             	lea    0x4(%edx),%eax
    96f2:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    96f7:	67 66 8b 02          	mov    (%bp,%si),%ax
template<typename T>
void itoa(char* buffer, T num, int base, bool captial = false)
{
    const char* num_char_upper = "0123456789ABCDEF";
    const char* num_char_lower = "0123456789abcdef";
    if(num < 0)
    96fb:	66 89 df             	mov    %bx,%di
    96fe:	66 85 c0             	test   %ax,%ax
    9701:	79 0c                	jns    970f <_Z8vsprintfPcPKcS_+0x105>
    9703:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
    {
        *(buffer++) = '-';
    9708:	67 c6 03 2d          	movb   $0x2d,(%bp,%di)
        num = -num;
    970c:	66 f7 d8             	neg    %ax
    }
    char *p = buffer;
    970f:	67 66 89 7d f0       	mov    %di,-0x10(%di)
    int mod = 0;
    while(true)
    {
        mod = num % base;
        num /= base;
    9714:	66 b9 0a 00          	mov    $0xa,%cx
    9718:	00 00                	add    %al,(%eax)
    971a:	66 99                	cwtd   
    971c:	66 f7 f9             	idiv   %cx
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    971f:	67 66 8b 4d f0       	mov    -0x10(%di),%cx
    9724:	66 41                	inc    %cx
    9726:	67 8a 92 55 c5       	mov    -0x3aab(%bp,%si),%dl
    972b:	00 00                	add    %al,(%eax)
    972d:	67 88 51 ff          	mov    %dl,-0x1(%bx,%di)
        if(num == 0) break;
    9731:	66 85 c0             	test   %ax,%ax
    9734:	74 07                	je     973d <_Z8vsprintfPcPKcS_+0x133>
    9736:	67 66 89 4d f0       	mov    %cx,-0x10(%di)
    973b:	eb d7                	jmp    9714 <_Z8vsprintfPcPKcS_+0x10a>
    }
    *p = '\0';
    973d:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    9742:	67 c6 40 01 00       	movb   $0x0,0x1(%bx,%si)
    reverse(buffer);
    9747:	66 57                	push   %di
    9749:	66 e8 cc f5          	callw  8d19 <_Z6strcmpPKcS0_+0x6b>
    974d:	ff                   	(bad)  
    974e:	ff 67 66             	jmp    *0x66(%edi)
                    p_buf += strlen(p_buf);             //同理
    9751:	89 1c 24             	mov    %ebx,(%esp)
    9754:	66 e8 f6 f4          	callw  8c4e <_Z6memsetPvim+0x23>
    9758:	ff                   	(bad)  
    9759:	ff 66 01             	jmp    *0x1(%esi)
    975c:	c3                   	ret    
                    break;
    975d:	66 5a                	pop    %dx
                    int num = va_arg(vlist, int);
    975f:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
                    break;
    9764:	e9 da fe 66 6a       	jmp    6a679643 <_data_end+0x6a66d09f>
                    itoa(p_buf, num, 16, true);
    9769:	10 eb                	adc    %ch,%bl
    976b:	0b 67 66             	or     0x66(%edi),%esp
                    unsigned int num = va_arg(vlist, int);
    976e:	8d 7a 04             	lea    0x4(%edx),%edi
                    itoa(p_buf, num, 10);
    9771:	66 6a 00             	pushw  $0x0
    9774:	66 6a 0a             	pushw  $0xa
    9777:	67 66 ff 32          	pushw  (%bp,%si)
    977b:	66 53                	push   %bx
    977d:	66 e8 df 09          	callw  a160 <_ZN2sh3runEv+0x37e>
    9781:	00 00                	add    %al,(%eax)
                    p_buf += strlen(p_buf);             //同理
    9783:	66 83 c4 10          	add    $0x10,%sp
    9787:	66 53                	push   %bx
    9789:	66 e8 c1 f4          	callw  8c4e <_Z6memsetPvim+0x23>
    978d:	ff                   	(bad)  
    978e:	ff 66 01             	jmp    *0x1(%esi)
    9791:	c3                   	ret    
                    break;
    9792:	66 58                	pop    %ax
                    unsigned int num = va_arg(vlist, int);
    9794:	66 89 fa             	mov    %di,%dx
                    break;
    9797:	e9 a7 fe 67 c6       	jmp    c6689643 <_data_end+0xc667d09f>
    *p_buf = '\0';
    979c:	03 00                	add    (%eax),%eax
    return p_buf - buffer;
    979e:	66 89 d8             	mov    %bx,%ax
    97a1:	67 66 2b 45 08       	sub    0x8(%di),%ax
}
    97a6:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    97ab:	66 5b                	pop    %bx
    97ad:	66 5e                	pop    %si
    97af:	66 5f                	pop    %di
    97b1:	66 5d                	pop    %bp
    97b3:	66 c3                	retw   

000097b5 <_Z7sprintfPcPKcz>:
{
    97b5:	66 55                	push   %bp
    97b7:	66 89 e5             	mov    %sp,%bp
	va_start(va, format);
    97ba:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsprintf(buffer, format, va);
    97bf:	66 50                	push   %ax
    97c1:	67 66 ff 75 0c       	pushw  0xc(%di)
    97c6:	67 66 ff 75 08       	pushw  0x8(%di)
    97cb:	66 e8 39 fe          	callw  9608 <_Z5scanfPKcz+0x3d>
    97cf:	ff                   	(bad)  
    97d0:	ff 66 c9             	jmp    *-0x37(%esi)
}
    97d3:	66 c3                	retw   

000097d5 <_Z6printfPKcz>:
{
    97d5:	66 55                	push   %bp
    97d7:	66 89 e5             	mov    %sp,%bp
    97da:	66 53                	push   %bx
	va_start(va, format);
    97dc:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsprintf(printbuf, format, va);
    97e1:	66 50                	push   %ax
    97e3:	67 66 ff 75 08       	pushw  0x8(%di)
    97e8:	66 68 a0 b4          	pushw  $0xb4a0
    97ec:	00 00                	add    %al,(%eax)
    97ee:	66 e8 16 fe          	callw  9608 <_Z5scanfPKcz+0x3d>
    97f2:	ff                   	(bad)  
    97f3:	ff 66 89             	jmp    *-0x77(%esi)
    97f6:	c3                   	ret    
    puts(printbuf);
    97f7:	66 83 c4 0c          	add    $0xc,%sp
    97fb:	66 68 a0 b4          	pushw  $0xb4a0
    97ff:	00 00                	add    %al,(%eax)
    9801:	66 e8 41 fb          	callw  9346 <_Z7putchari+0x18>
    9805:	ff                   	(bad)  
    9806:	ff 66 89             	jmp    *-0x77(%esi)
}
    9809:	d8 67 66             	fsubs  0x66(%edi)
    980c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    980f:	66 c9                	leavew 
    9811:	66 c3                	retw   

Disassembly of section .text._ZN2sh2bfEPKcS1_.isra.4:

00009814 <_ZN2sh2bfEPKcS1_.isra.4>:
    int bf(const char* Pattern, const char * Text) {
    9814:	66 55                	push   %bp
    9816:	66 89 e5             	mov    %sp,%bp
    9819:	66 57                	push   %di
    981b:	66 56                	push   %si
    981d:	66 53                	push   %bx
    981f:	66 51                	push   %cx
    9821:	66 89 c3             	mov    %ax,%bx
    9824:	66 89 d7             	mov    %dx,%di
        ss_t m = strlen(Pattern);
    9827:	66 50                	push   %ax
    9829:	66 e8 21 f4          	callw  8c4e <_Z6memsetPvim+0x23>
    982d:	ff                   	(bad)  
    982e:	ff 66 89             	jmp    *-0x77(%esi)
    9831:	c6                   	(bad)  
        ss_t n = strlen(Text);
    9832:	67 66 89 3c          	mov    %di,(%si)
    9836:	24 66                	and    $0x66,%al
    9838:	e8 13 f4 ff ff       	call   8c50 <_Z6strlenPKc>
    983d:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    9842:	66 58                	pop    %ax
        ss_t i = 0, k = 0;
    9844:	66 31 d2             	xor    %dx,%dx
    9847:	66 31 c9             	xor    %cx,%cx
        while(k < m && i < n) {
    984a:	66 39 d6             	cmp    %dx,%si
    984d:	7e 21                	jle    9870 <_ZN2sh2bfEPKcS1_.isra.4+0x5c>
    984f:	67 66 39 4d f0       	cmp    %cx,-0x10(%di)
    9854:	7e 22                	jle    9878 <_ZN2sh2bfEPKcS1_.isra.4+0x64>
            if(Pattern[k] == Text[i]) {
    9856:	67 8a 04             	mov    (%si),%al
    9859:	0f 67 38             	packuswb (%eax),%mm7
    985c:	04 13                	add    $0x13,%al
    985e:	75 06                	jne    9866 <_ZN2sh2bfEPKcS1_.isra.4+0x52>
                ++k;
    9860:	66 42                	inc    %dx
                ++i;
    9862:	66 41                	inc    %cx
    9864:	eb e4                	jmp    984a <_ZN2sh2bfEPKcS1_.isra.4+0x36>
                i = i - k + 1;
    9866:	66 29 d1             	sub    %dx,%cx
    9869:	66 41                	inc    %cx
                k = 0;
    986b:	66 31 d2             	xor    %dx,%dx
    986e:	eb da                	jmp    984a <_ZN2sh2bfEPKcS1_.isra.4+0x36>
            return i - k;
    9870:	66 89 c8             	mov    %cx,%ax
    9873:	66 29 d0             	sub    %dx,%ax
    9876:	eb 04                	jmp    987c <_ZN2sh2bfEPKcS1_.isra.4+0x68>
        return -1;
    9878:	66 83 c8 ff          	or     $0xffff,%ax
    }
    987c:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    9881:	66 5b                	pop    %bx
    9883:	66 5e                	pop    %si
    9885:	66 5f                	pop    %di
    9887:	66 5d                	pop    %bp
    9889:	66 c3                	retw   

Disassembly of section .text._ZN3tty8tty_initEv:

0000988c <_ZN3tty8tty_initEv>:
    void tty_init()
    988c:	66 55                	push   %bp
    988e:	66 89 e5             	mov    %sp,%bp
    9891:	66 53                	push   %bx
    9893:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        cur_x = 0;
    9898:	67 66 c7 03 00 00    	movw   $0x0,(%bp,%di)
    989e:	00 00                	add    %al,(%eax)
        cur_y = 0;
    98a0:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    98a7:	00 00                	add    %al,(%eax)
        move_cursor(0, 0);
    98a9:	66 31 d2             	xor    %dx,%dx
    98ac:	66 31 c0             	xor    %ax,%ax
    98af:	66 e8 69 e7          	callw  801c <_ZL8print_okPc+0x50>
    98b3:	ff                   	(bad)  
    98b4:	ff 67 66             	jmp    *0x66(%edi)
        color = MAKE_COLOR(VGA_BLACK, VGA_WHITE);
    98b7:	c7 43 08 07 00 00 00 	movl   $0x7,0x8(%ebx)
    }
    98be:	66 5b                	pop    %bx
    98c0:	66 5d                	pop    %bp
    98c2:	66 c3                	retw   

Disassembly of section .text._ZN3tty7putcharEi:

000098c4 <_ZN3tty7putcharEi>:
        tty_mem[y + 80 * x] = c;
        tty_mem[y + 80 * x + 1] = color;
#endif
        sys_putchar(c, color, x, y);
    }
    void putchar(int c)
    98c4:	66 55                	push   %bp
    98c6:	66 89 e5             	mov    %sp,%bp
    98c9:	66 56                	push   %si
    98cb:	66 53                	push   %bx
    98cd:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    98d2:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    {
        switch(c)
    98d7:	66 83 f8 0d          	cmp    $0xd,%ax
    98db:	77 79                	ja     9956 <_ZN3tty7putcharEi+0x92>
    98dd:	67 ff 24             	jmp    *(%si)
    98e0:	85 04 c2             	test   %eax,(%edx,%eax,8)
    98e3:	00 00                	add    %al,(%eax)
    98e5:	66 be 04 00          	mov    $0x4,%si
    98e9:	00 00                	add    %al,(%eax)
        {
            case '\t':
            {
                for(int i = 0; i < 4; ++i) putchar(' ');
    98eb:	66 6a 20             	pushw  $0x20
    98ee:	66 53                	push   %bx
    98f0:	66 e8 ce ff          	callw  98c2 <_ZN3tty8tty_initEv+0x36>
    98f4:	ff                   	(bad)  
    98f5:	ff 66 5a             	jmp    *0x5a(%esi)
    98f8:	66 59                	pop    %cx
    98fa:	66 4e                	dec    %si
    98fc:	75 ed                	jne    98eb <_ZN3tty7putcharEi+0x27>
    98fe:	e9 96 00 67 66       	jmp    66679999 <_data_end+0x6666d3f5>
            }
            case 0:
                break;
            case '\b':
            {
                if(cur_y == 0 && cur_x == 0) 
    9903:	8b 53 04             	mov    0x4(%ebx),%edx
    9906:	67 66 8b 03          	mov    (%bp,%di),%ax
    990a:	66 85 d2             	test   %dx,%dx
    990d:	75 1b                	jne    992a <_ZN3tty7putcharEi+0x66>
    990f:	66 85 c0             	test   %ax,%ax
    9912:	0f 84 99 00 67 66    	je     666799b1 <_data_end+0x6666d40d>
                {
                    break;
                }
                else if (cur_y == 0 && cur_x != 0)
                {
                    cur_y = 80 - 1;
    9918:	c7 43 04 4f 00 00 00 	movl   $0x4f,0x4(%ebx)
                    cur_x--;
    991f:	66 48                	dec    %ax
    9921:	67 66 89 03          	mov    %ax,(%bp,%di)
        sys_putchar(c, color, x, y);
    9925:	66 6a 4f             	pushw  $0x4f
    9928:	eb 09                	jmp    9933 <_ZN3tty7putcharEi+0x6f>
                    putchar_worker(' ', MAKE_COLOR(VGA_BLACK, VGA_WHITE) , cur_x, cur_y);
                    break;
                }
                else
                {
                    cur_y--;
    992a:	66 4a                	dec    %dx
    992c:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        sys_putchar(c, color, x, y);
    9931:	66 52                	push   %dx
    9933:	66 50                	push   %ax
    9935:	66 6a 07             	pushw  $0x7
    9938:	66 6a 20             	pushw  $0x20
    993b:	66 e8 20 eb          	callw  845f <sys_bios_print_int+0xa4>
    993f:	ff                   	(bad)  
    9940:	ff 66 83             	jmp    *-0x7d(%esi)
    9943:	c4 10                	les    (%eax),%edx
    9945:	eb 50                	jmp    9997 <_ZN3tty7putcharEi+0xd3>
                    break;
                }
            }
            case '\n':
            {
                cur_x++;
    9947:	67 66 ff 03          	incw   (%bp,%di)
                cur_y = 0;
    994b:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    9952:	00 00                	add    %al,(%eax)
                break;
    9954:	eb 41                	jmp    9997 <_ZN3tty7putcharEi+0xd3>
        sys_putchar(c, color, x, y);
    9956:	67 66 ff 73 04       	pushw  0x4(%bp,%di)
    995b:	67 66 ff 33          	pushw  (%bp,%di)
    995f:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    9964:	66 50                	push   %ax
    9966:	66 e8 f5 ea          	callw  845f <sys_bios_print_int+0xa4>
    996a:	ff                   	(bad)  
    996b:	ff 67 66             	jmp    *0x66(%edi)
            }
            default:
            {
                putchar_worker(c, color, cur_x, cur_y);
                cur_x = (cur_y == 79) ? cur_x + 1 : cur_x;
    996e:	8b 43 04             	mov    0x4(%ebx),%eax
    9971:	66 83 c4 10          	add    $0x10,%sp
    9975:	66 83 f8 4f          	cmp    $0x4f,%ax
    9979:	67 66 8b 13          	mov    (%bp,%di),%dx
    997d:	75 02                	jne    9981 <_ZN3tty7putcharEi+0xbd>
    997f:	66 42                	inc    %dx
    9981:	67 66 89 13          	mov    %dx,(%bp,%di)
                cur_y = (cur_y + 1) % 80;
    9985:	66 40                	inc    %ax
    9987:	66 b9 50 00          	mov    $0x50,%cx
    998b:	00 00                	add    %al,(%eax)
    998d:	66 99                	cwtd   
    998f:	66 f7 f9             	idiv   %cx
    9992:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        if (cur_x >= 25)
    9997:	67 66 83 3b 18       	cmpw   $0x18,(%bp,%di)
    999c:	7e 11                	jle    99af <_ZN3tty7putcharEi+0xeb>
            sys_bios_scroll_up(color);
    999e:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    99a3:	66 e8 e9 eb          	callw  8590 <sys_print_int+0xa4>
    99a7:	ff                   	(bad)  
    99a8:	ff 67 66             	jmp    *0x66(%edi)
            --cur_x;
    99ab:	ff 0b                	decl   (%ebx)
    99ad:	66 58                	pop    %ax
                break;
            }
        }
        scroll_up();
        move_cursor(cur_x, cur_y);
    99af:	67 66 8b 53 04       	mov    0x4(%bp,%di),%dx
    99b4:	67 66 8b 03          	mov    (%bp,%di),%ax
    }
    99b8:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    99bd:	66 5b                	pop    %bx
    99bf:	66 5e                	pop    %si
    99c1:	66 5d                	pop    %bp
        move_cursor(cur_x, cur_y);
    99c3:	e9                   	.byte 0xe9
    99c4:	58                   	pop    %eax
    99c5:	e6                   	.byte 0xe6

Disassembly of section .text._ZN2sh4execERKNS_3cmdE:

000099c6 <_ZN2sh4execERKNS_3cmdE>:
    int exec(const cmd & input_cmd)
    99c6:	66 55                	push   %bp
    99c8:	66 89 e5             	mov    %sp,%bp
    99cb:	66 57                	push   %di
    99cd:	66 56                	push   %si
    99cf:	66 53                	push   %bx
    99d1:	66 83 ec 08          	sub    $0x8,%sp
    99d5:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    99da:	67 66 8b 75 0c       	mov    0xc(%di),%si
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    99df:	66 68 83 c2          	pushw  $0xc283
    99e3:	00 00                	add    %al,(%eax)
    99e5:	67 66 8b 06 67 66    	mov    0x6667,%ax
    99eb:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    99ef:	66 e8 b9 f2          	callw  8cac <_Z6strcpyPcPKc+0x40>
    99f3:	ff                   	(bad)  
    99f4:	ff 66 5a             	jmp    *0x5a(%esi)
        if (is_command(input_cmd, "ls") || is_command(input_cmd, "dir")) {
    99f7:	66 59                	pop    %cx
    99f9:	66 85 c0             	test   %ax,%ax
    99fc:	75 33                	jne    9a31 <_ZN2sh4execERKNS_3cmdE+0x6b>
            printf("You have %d user programs intalled\n", prog_cnt);
    99fe:	67 66 ff b3 84 0b    	pushw  0xb84(%bp,%di)
    9a04:	00 00                	add    %al,(%eax)
    9a06:	66 68 3c c2          	pushw  $0xc23c
    9a0a:	00 00                	add    %al,(%eax)
    9a0c:	66 e8 c3 fd          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    9a10:	ff                   	(bad)  
    9a11:	ff 66 5e             	jmp    *0x5e(%esi)
            printf("Program Name\t\t\tSector Number\n");
    9a14:	66 5f                	pop    %di
    9a16:	66 68 60 c2          	pushw  $0xc260
    9a1a:	00 00                	add    %al,(%eax)
    9a1c:	66 e8 b3 fd          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    9a20:	ff                   	(bad)  
    9a21:	ff 67 66             	jmp    *0x66(%edi)
    9a24:	8d b3 8c 0b 00 00    	lea    0xb8c(%ebx),%esi
    9a2a:	66 58                	pop    %ax
            for (size_t i = 0; i < prog_cnt; ++i) {
    9a2c:	66 31 ff             	xor    %di,%di
    9a2f:	eb 41                	jmp    9a72 <_ZN2sh4execERKNS_3cmdE+0xac>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    9a31:	66 68 7e c2          	pushw  $0xc27e
    9a35:	00 00                	add    %al,(%eax)
    9a37:	67 66 8b 06 67 66    	mov    0x6667,%ax
    9a3d:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    9a41:	66 e8 67 f2          	callw  8cac <_Z6strcpyPcPKc+0x40>
    9a45:	ff                   	(bad)  
    9a46:	ff 66 5a             	jmp    *0x5a(%esi)
        if (is_command(input_cmd, "ls") || is_command(input_cmd, "dir")) {
    9a49:	66 59                	pop    %cx
    9a4b:	66 85 c0             	test   %ax,%ax
    9a4e:	74 ae                	je     99fe <_ZN2sh4execERKNS_3cmdE+0x38>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    9a50:	66 68 82 c2          	pushw  $0xc282
    9a54:	00 00                	add    %al,(%eax)
    9a56:	67 66 8b 06 67 66    	mov    0x6667,%ax
    9a5c:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    9a60:	66 e8 48 f2          	callw  8cac <_Z6strcpyPcPKc+0x40>
    9a64:	ff                   	(bad)  
    9a65:	ff 66 59             	jmp    *0x59(%esi)
        else if (is_command(input_cmd, "cls") || is_command(input_cmd, "clear"))
    9a68:	66 5f                	pop    %di
    9a6a:	66 85 c0             	test   %ax,%ax
    9a6d:	75 2e                	jne    9a9d <_ZN2sh4execERKNS_3cmdE+0xd7>
    9a6f:	e9 dc 01 67 66       	jmp    66679c50 <_data_end+0x6666d6ac>
            for (size_t i = 0; i < prog_cnt; ++i) {
    9a74:	39 bb 84 0b 00 00    	cmp    %edi,0xb84(%ebx)
    9a7a:	0f 86 14 02 67 66    	jbe    66679c94 <_data_end+0x6666d6f0>
                printf("%s\t\t\t\t\t%d\n", progs[i].name, progs[i].lba);
    9a80:	ff 76 20             	pushl  0x20(%esi)
    9a83:	66 56                	push   %si
    9a85:	66 68 86 c2          	pushw  $0xc286
    9a89:	00 00                	add    %al,(%eax)
    9a8b:	66 e8 44 fd          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    9a8f:	ff                   	(bad)  
    9a90:	ff 66 47             	jmp    *0x47(%esi)
            for (size_t i = 0; i < prog_cnt; ++i) {
    9a93:	66 83 c6 24          	add    $0x24,%si
    9a97:	66 83 c4 0c          	add    $0xc,%sp
    9a9b:	eb d5                	jmp    9a72 <_ZN2sh4execERKNS_3cmdE+0xac>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    9a9d:	66 68 91 c2          	pushw  $0xc291
    9aa1:	00 00                	add    %al,(%eax)
    9aa3:	67 66 8b 06 67 66    	mov    0x6667,%ax
    9aa9:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    9aad:	66 e8 fb f1          	callw  8cac <_Z6strcpyPcPKc+0x40>
    9ab1:	ff                   	(bad)  
    9ab2:	ff 66 5f             	jmp    *0x5f(%esi)
        else if (is_command(input_cmd, "cls") || is_command(input_cmd, "clear"))
    9ab5:	66 5a                	pop    %dx
    9ab7:	66 85 c0             	test   %ax,%ax
    9aba:	0f 84 90 01 66 68    	je     68669c50 <_data_end+0x6865d6ac>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    9ac0:	97                   	xchg   %eax,%edi
    9ac1:	c2 00 00             	ret    $0x0
    9ac4:	67 66 8b 06 67 66    	mov    0x6667,%ax
    9aca:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    9ace:	66 e8 da f1          	callw  8cac <_Z6strcpyPcPKc+0x40>
    9ad2:	ff                   	(bad)  
    9ad3:	ff 66 5a             	jmp    *0x5a(%esi)
        else if (is_command(input_cmd, "help"))
    9ad6:	66 59                	pop    %cx
    9ad8:	66 85 c0             	test   %ax,%ax
    9adb:	75 0c                	jne    9ae9 <_ZN2sh4execERKNS_3cmdE+0x123>
            printf("%s\n", help);
    9add:	66 81 c3 84 09       	add    $0x984,%bx
    9ae2:	00 00                	add    %al,(%eax)
    9ae4:	66 53                	push   %bx
    9ae6:	e9 85 01 66 68       	jmp    68669c70 <_data_end+0x6865d6cc>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    9aeb:	a0 c2 00 00 67       	mov    0x670000c2,%al
    9af0:	66 8b 06             	mov    (%esi),%ax
    9af3:	67 66 ff 74 83       	pushw  -0x7d(%si)
    9af8:	04 66                	add    $0x66,%al
    9afa:	e8 af f1 ff ff       	call   8cae <_Z6strcmpPKcS0_>
        else if (is_command(input_cmd, "echo"))
    9aff:	66 59                	pop    %cx
    9b01:	66 5f                	pop    %di
    9b03:	66 85 c0             	test   %ax,%ax
    9b06:	75 3d                	jne    9b45 <_ZN2sh4execERKNS_3cmdE+0x17f>
            for(int i = 1; i < input_cmd.cnt; ++i)
    9b08:	66 bf 01 00          	mov    $0x1,%di
    9b0c:	00 00                	add    %al,(%eax)
    9b0e:	67 66 39 7e 04       	cmp    %di,0x4(%bp)
    9b13:	7e 21                	jle    9b36 <_ZN2sh4execERKNS_3cmdE+0x170>
                printf("%s ", inputs[input_cmd.start + i]);
    9b15:	67 66 8b 06 66 01    	mov    0x166,%ax
    9b1b:	f8                   	clc    
    9b1c:	67 66 ff 74 83       	pushw  -0x7d(%si)
    9b21:	04 66                	add    $0x66,%al
    9b23:	68 a5 c2 00 00       	push   $0xc2a5
    9b28:	66 e8 a7 fc          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    9b2c:	ff                   	(bad)  
    9b2d:	ff 66 47             	jmp    *0x47(%esi)
            for(int i = 1; i < input_cmd.cnt; ++i)
    9b30:	66 58                	pop    %ax
    9b32:	66 5a                	pop    %dx
    9b34:	eb d8                	jmp    9b0e <_ZN2sh4execERKNS_3cmdE+0x148>
            printf("\n");
    9b36:	66 68 ae c1          	pushw  $0xc1ae
    9b3a:	00 00                	add    %al,(%eax)
    9b3c:	66 e8 93 fc          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    9b40:	ff                   	(bad)  
    9b41:	ff                   	(bad)  
    9b42:	e9 1a 01 66 68       	jmp    68669c61 <_data_end+0x6865d6bd>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    9b47:	a9 c2 00 00 67       	test   $0x670000c2,%eax
    9b4c:	66 8b 06             	mov    (%esi),%ax
    9b4f:	67 66 ff 74 83       	pushw  -0x7d(%si)
    9b54:	04 66                	add    $0x66,%al
    9b56:	e8 53 f1 ff ff       	call   8cae <_Z6strcmpPKcS0_>
        else if (is_command(input_cmd, "history"))
    9b5b:	66 5a                	pop    %dx
    9b5d:	66 59                	pop    %cx
    9b5f:	66 85 c0             	test   %ax,%ax
    9b62:	75 2d                	jne    9b91 <_ZN2sh4execERKNS_3cmdE+0x1cb>
    9b64:	67 66 8d b3 04 03    	lea    0x304(%bp,%di),%si
    9b6a:	00 00                	add    %al,(%eax)
    9b6c:	66 81 c3 84 07       	add    $0x784,%bx
    9b71:	00 00                	add    %al,(%eax)
                printf("%s\n", histroy[i]);
    9b73:	66 56                	push   %si
    9b75:	66 68 9c c2          	pushw  $0xc29c
    9b79:	00 00                	add    %al,(%eax)
    9b7b:	66 e8 54 fc          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    9b7f:	ff                   	(bad)  
    9b80:	ff 66 83             	jmp    *-0x7d(%esi)
    9b83:	ee                   	out    %al,(%dx)
    9b84:	80 66 59 66          	andb   $0x66,0x59(%esi)
            for(int i = 1; i < history_term; ++i)
    9b88:	5f                   	pop    %edi
    9b89:	66 39 de             	cmp    %bx,%si
    9b8c:	75 e5                	jne    9b73 <_ZN2sh4execERKNS_3cmdE+0x1ad>
    9b8e:	e9 01 01 66 68       	jmp    68669c94 <_data_end+0x6865d6f0>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    9b93:	b1 c2                	mov    $0xc2,%cl
    9b95:	00 00                	add    %al,(%eax)
    9b97:	67 66 8b 06 67 66    	mov    0x6667,%ax
    9b9d:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    9ba1:	66 e8 07 f1          	callw  8cac <_Z6strcpyPcPKc+0x40>
    9ba5:	ff                   	(bad)  
    9ba6:	ff 66 5f             	jmp    *0x5f(%esi)
        else if (is_command(input_cmd, "date"))
    9ba9:	66 5a                	pop    %dx
    9bab:	66 85 c0             	test   %ax,%ax
    9bae:	0f 84 c4 00 66 31    	je     31669c78 <_data_end+0x3165d6d4>
            for(size_t i = 0; i < prog_cnt; ++i)
    9bb4:	c9                   	leave  
    9bb5:	67 66 39 8b 84 0b    	cmp    %cx,0xb84(%bp,%di)
    9bbb:	00 00                	add    %al,(%eax)
    9bbd:	0f 86 a7 00 66 6b    	jbe    6b669c6a <_data_end+0x6b65d6c6>
    9bc3:	d1 24 67             	shll   (%edi,%eiz,2)
    9bc6:	66 89 4d ec          	mov    %cx,-0x14(%ebp)
    9bca:	67 66 8d bc 13 8c    	lea    -0x73ed(%si),%di
    9bd0:	0b 00                	or     (%eax),%eax
    9bd2:	00 67 66             	add    %ah,0x66(%edi)
    9bd5:	89 55 f0             	mov    %edx,-0x10(%ebp)
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    9bd8:	66 57                	push   %di
    9bda:	67 66 8b 06 67 66    	mov    0x6667,%ax
    9be0:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    9be4:	66 e8 c4 f0          	callw  8cac <_Z6strcpyPcPKc+0x40>
    9be8:	ff                   	(bad)  
    9be9:	ff 66 5a             	jmp    *0x5a(%esi)
                if (is_command(input_cmd, progs[i].name))
    9bec:	66 59                	pop    %cx
    9bee:	66 85 c0             	test   %ax,%ax
    9bf1:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    9bf6:	67 66 8b 4d ec       	mov    -0x14(%di),%cx
    9bfb:	75 66                	jne    9c63 <_ZN2sh4execERKNS_3cmdE+0x29d>
class bin_loader
{
public:
    static void load_binary_from_floppy(int n)
    {
        sys_read_disk(user_prog_segment, user_prog_load_addr, n, 20);
    9bfd:	66 6a 14             	pushw  $0x14
                    bin_loader::load_binary_from_floppy(progs[i].lba);
    9c00:	66 01 d3             	add    %dx,%bx
    9c03:	67 66 0f b7 83 ac 0b 	movzww 0xbac(%bp,%di),%ax
    9c0a:	00 00                	add    %al,(%eax)
    9c0c:	66 50                	push   %ax
    9c0e:	66 68 00 a1          	pushw  $0xa100
    9c12:	00 00                	add    %al,(%eax)
    9c14:	66 68 00 10          	pushw  $0x1000
    9c18:	00 00                	add    %al,(%eax)
    9c1a:	66 e8 16 ea          	callw  8634 <sys_get_scancode+0xf>
    9c1e:	ff                   	(bad)  
    9c1f:	ff 66 83             	jmp    *-0x7d(%esi)
        sys_execve_bin();
    9c22:	c4 10                	les    (%eax),%edx
    9c24:	66 e8 26 e7          	callw  834e <sys_bios_getchar+0x5>
    9c28:	ff                   	(bad)  
    9c29:	ff 66 57             	jmp    *0x57(%esi)
                    if(!(strlen(progs[i].name) > 2 && progs[i].name[0] == 'c' && progs[i].name[1] == '_'))
    9c2c:	66 e8 1e f0          	callw  8c4e <_Z6memsetPvim+0x23>
    9c30:	ff                   	(bad)  
    9c31:	ff 66 5e             	jmp    *0x5e(%esi)
    9c34:	66 83 f8 02          	cmp    $0x2,%ax
    9c38:	76 14                	jbe    9c4e <_ZN2sh4execERKNS_3cmdE+0x288>
    9c3a:	67 80 bb 8c 0b 00    	cmpb   $0x0,0xb8c(%bp,%di)
    9c40:	00 63 75             	add    %ah,0x75(%ebx)
    9c43:	0a 67 80             	or     -0x80(%edi),%ah
    9c46:	bb 8d 0b 00 00       	mov    $0xb8d,%ebx
    9c4b:	5f                   	pop    %edi
    9c4c:	74 44                	je     9c92 <_ZN2sh4execERKNS_3cmdE+0x2cc>
                        sys_bios_clear_screen();
    9c4e:	66 e8 df e6          	callw  8331 <sys_bios_print_string+0x21>
    9c52:	ff                   	(bad)  
    9c53:	ff 66 ff             	jmp    *-0x1(%esi)
                        sys_get_current_tty()->tty_init();
    9c56:	36 80 ac 66 e8 2d fc 	subb   $0xff,%ss:-0x3d218(%esi,%eiz,2)
    9c5d:	ff ff 
    9c5f:	66 59                	pop    %cx
    9c61:	eb 2f                	jmp    9c92 <_ZN2sh4execERKNS_3cmdE+0x2cc>
            for(size_t i = 0; i < prog_cnt; ++i)
    9c63:	66 41                	inc    %cx
    9c65:	e9 4d ff 66 68       	jmp    68679bb7 <_data_end+0x6866d613>
                printf("%s\n", "No such command or file");
    9c6a:	b6 c2                	mov    $0xc2,%dh
    9c6c:	00 00                	add    %al,(%eax)
    9c6e:	66 68 9c c2          	pushw  $0xc29c
    9c72:	00 00                	add    %al,(%eax)
    9c74:	eb 12                	jmp    9c88 <_ZN2sh4execERKNS_3cmdE+0x2c2>
            read_rtc();
    9c76:	66 e8 4f ec          	callw  88c9 <_Z16get_RTC_registeri+0x26>
    9c7a:	ff                   	(bad)  
    9c7b:	ff 66 68             	jmp    *0x68(%esi)
            printf("%s", sys_internal_time_str);
    9c7e:	8c ac 00 00 66 68 d0 	mov    %gs,-0x2f979a00(%eax,%eax,1)
    9c85:	c2 00 00             	ret    $0x0
    9c88:	66 e8 47 fb          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    9c8c:	ff                   	(bad)  
    9c8d:	ff 66 58             	jmp    *0x58(%esi)
    9c90:	66 5a                	pop    %dx
    }
    9c92:	66 31 c0             	xor    %ax,%ax
    9c95:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    9c9a:	66 5b                	pop    %bx
    9c9c:	66 5e                	pop    %si
    9c9e:	66 5f                	pop    %di
    9ca0:	66 5d                	pop    %bp
    9ca2:	66 c3                	retw   

Disassembly of section .text._ZN2sh16read_prog_recordEv:

00009ca4 <_ZN2sh16read_prog_recordEv>:
    void read_prog_record()
    9ca4:	66 55                	push   %bp
    9ca6:	66 89 e5             	mov    %sp,%bp
    9ca9:	66 57                	push   %di
    9cab:	66 56                	push   %si
    9cad:	66 53                	push   %bx
    9caf:	66 83 ec 6c          	sub    $0x6c,%sp
    9cb3:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        sys_read_disk(0, (uint32_t)record_buf, REC_FILE_SECTOR, 1);
    9cb8:	67 66 8d bb 84 07    	lea    0x784(%bp,%di),%di
    9cbe:	00 00                	add    %al,(%eax)
    9cc0:	66 6a 01             	pushw  $0x1
    9cc3:	66 6a 54             	pushw  $0x54
    9cc6:	66 57                	push   %di
    9cc8:	66 6a 00             	pushw  $0x0
    9ccb:	66 e8 65 e9          	callw  8634 <sys_get_scancode+0xf>
    9ccf:	ff                   	(bad)  
    9cd0:	ff 66 83             	jmp    *-0x7d(%esi)
        sscanf(p, "%s", buf1);
    9cd3:	c4 10                	les    (%eax),%edx
    9cd5:	67 66 8d 75 94       	lea    -0x6c(%di),%si
    9cda:	66 56                	push   %si
    9cdc:	66 68 d0 c2          	pushw  $0xc2d0
    9ce0:	00 00                	add    %al,(%eax)
    9ce2:	66 57                	push   %di
    9ce4:	66 e8 c1 f8          	callw  95a9 <_Z7vsscanfPKcS0_Pc+0x1bf>
    9ce8:	ff                   	(bad)  
    9ce9:	ff 66 83             	jmp    *-0x7d(%esi)
        p += (strlen(buf1) + 1);
    9cec:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    9cef:	56                   	push   %esi
    9cf0:	66 e8 5a ef          	callw  8c4e <_Z6memsetPvim+0x23>
    9cf4:	ff                   	(bad)  
    9cf5:	ff 67 66             	jmp    *0x66(%edi)
    9cf8:	8d 44 07 01          	lea    0x1(%edi,%eax,1),%eax
    9cfc:	67 66 89 45 8c       	mov    %ax,-0x74(%di)
        prog_cnt = strtol(buf1, nullptr, 10);
    9d01:	67 66 c7 04 24 0a    	movw   $0xa24,(%si)
    9d07:	00 00                	add    %al,(%eax)
    9d09:	00 66 6a             	add    %ah,0x6a(%esi)
    9d0c:	00 66 56             	add    %ah,0x56(%esi)
    9d0f:	66 e8 e8 f3          	callw  90fb <_Z4ldivll+0xa9>
    9d13:	ff                   	(bad)  
    9d14:	ff 67 66             	jmp    *0x66(%edi)
    9d17:	89 83 84 0b 00 00    	mov    %eax,0xb84(%ebx)
    9d1d:	66 83 c4 0c          	add    $0xc,%sp
        for(size_t i = 0; i < prog_cnt; ++i)
    9d21:	67 66 c7 45 90 00 00 	movw   $0x0,-0x70(%di)
    9d28:	00 00                	add    %al,(%eax)
    9d2a:	67 66 8b 45 90       	mov    -0x70(%di),%ax
    9d2f:	67 66 39 83 84 0b    	cmp    %ax,0xb84(%bp,%di)
    9d35:	00 00                	add    %al,(%eax)
    9d37:	0f 86 97 00 67 66    	jbe    66679dd4 <_data_end+0x6666d830>
            sscanf(p, "%s%s", buf2, buf3);
    9d3d:	8d 7d d4             	lea    -0x2c(%ebp),%edi
    9d40:	66 57                	push   %di
    9d42:	67 66 8d 75 b4       	lea    -0x4c(%di),%si
    9d47:	66 56                	push   %si
    9d49:	66 68 ce c2          	pushw  $0xc2ce
    9d4d:	00 00                	add    %al,(%eax)
    9d4f:	67 66 ff 75 8c       	pushw  -0x74(%di)
    9d54:	66 e8 51 f8          	callw  95a9 <_Z7vsscanfPKcS0_Pc+0x1bf>
    9d58:	ff                   	(bad)  
    9d59:	ff 67 66             	jmp    *0x66(%edi)
    9d5c:	6b 4d 90 24          	imul   $0x24,-0x70(%ebp),%ecx
            strcpy(progs[i].name, buf2);
    9d60:	66 83 c4 10          	add    $0x10,%sp
    9d64:	66 56                	push   %si
    9d66:	67 66 8d 84 0b 8c    	lea    -0x73f5(%si),%ax
    9d6c:	0b 00                	or     (%eax),%eax
    9d6e:	00 67 66             	add    %ah,0x66(%edi)
    9d71:	89 4d 88             	mov    %ecx,-0x78(%ebp)
    9d74:	66 50                	push   %ax
    9d76:	66 e8 f0 ee          	callw  8c6a <_Z6strlenPKc+0x1a>
    9d7a:	ff                   	(bad)  
    9d7b:	ff 66 58             	jmp    *0x58(%esi)
            progs[i].lba = strtol(buf3, nullptr, 10);
    9d7e:	66 5a                	pop    %dx
    9d80:	66 6a 0a             	pushw  $0xa
    9d83:	66 6a 00             	pushw  $0x0
    9d86:	66 57                	push   %di
    9d88:	66 e8 6f f3          	callw  90fb <_Z4ldivll+0xa9>
    9d8c:	ff                   	(bad)  
    9d8d:	ff 67 66             	jmp    *0x66(%edi)
    9d90:	8b 4d 88             	mov    -0x78(%ebp),%ecx
    9d93:	67 66 89 84 0b ac    	mov    %ax,-0x53f5(%si)
    9d99:	0b 00                	or     (%eax),%eax
    9d9b:	00 66 83             	add    %ah,-0x7d(%esi)
            p += (strlen(buf2) + strlen(buf3) + 2);
    9d9e:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    9da1:	56                   	push   %esi
    9da2:	66 e8 a8 ee          	callw  8c4e <_Z6memsetPvim+0x23>
    9da6:	ff                   	(bad)  
    9da7:	ff 67 66             	jmp    *0x66(%edi)
    9daa:	89 45 88             	mov    %eax,-0x78(%ebp)
    9dad:	67 66 89 3c          	mov    %di,(%si)
    9db1:	24 66                	and    $0x66,%al
    9db3:	e8 98 ee ff ff       	call   8c50 <_Z6strlenPKc>
    9db8:	67 66 8b 55 88       	mov    -0x78(%di),%dx
    9dbd:	67 66 8d 44 02       	lea    0x2(%si),%ax
    9dc2:	02 67 66             	add    0x66(%edi),%ah
    9dc5:	01 45 8c             	add    %eax,-0x74(%ebp)
        for(size_t i = 0; i < prog_cnt; ++i)
    9dc8:	67 66 ff 45 90       	incw   -0x70(%di)
    9dcd:	66 59                	pop    %cx
    9dcf:	e9 58 ff 67 66       	jmp    66689d2c <_data_end+0x6667d788>
    }
    9dd4:	8d 65 f4             	lea    -0xc(%ebp),%esp
    9dd7:	66 5b                	pop    %bx
    9dd9:	66 5e                	pop    %si
    9ddb:	66 5f                	pop    %di
    9ddd:	66 5d                	pop    %bp
    9ddf:	66 c3                	retw   

Disassembly of section .text._ZN2sh3runEv:

00009de2 <_ZN2sh3runEv>:
        read_help_file();
    }
    void run () {
    9de2:	66 55                	push   %bp
    9de4:	66 89 e5             	mov    %sp,%bp
    9de7:	66 57                	push   %di
    9de9:	66 56                	push   %si
    9deb:	66 53                	push   %bx
    9ded:	66 83 ec 14          	sub    $0x14,%sp
    9df1:	67 66 8b 7d 08       	mov    0x8(%di),%di
        printf("%s", prompt);
    9df6:	66 68 d3 c2          	pushw  $0xc2d3
    9dfa:	00 00                	add    %al,(%eax)
    9dfc:	66 68 d0 c2          	pushw  $0xc2d0
    9e00:	00 00                	add    %al,(%eax)
    9e02:	66 e8 cd f9          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    9e06:	ff                   	(bad)  
    9e07:	ff 66 59             	jmp    *0x59(%esi)
    9e0a:	66 5b                	pop    %bx
        while(true)
        {
            char in = getchar();
    9e0c:	66 e8 74 f5          	callw  9384 <_Z4putsPKc+0x3c>
    9e10:	ff                   	(bad)  
    9e11:	ff 66 89             	jmp    *-0x77(%esi)
    9e14:	c2 3c 08             	ret    $0x83c
            if (in == '\b')
    9e17:	75 35                	jne    9e4e <_ZN2sh3runEv+0x6c>
            {
                if(pos != 0){
    9e19:	67 66 83 bf 88 0b 00 	cmpw   $0x0,0xb88(%bx)
    9e20:	00 00                	add    %al,(%eax)
    9e22:	74 e8                	je     9e0c <_ZN2sh3runEv+0x2a>
                    putchar('\b');
    9e24:	66 6a 08             	pushw  $0x8
    9e27:	66 e8 01 f5          	callw  932c <_ZL19system_call_putchari+0x29>
    9e2b:	ff                   	(bad)  
    9e2c:	ff 67 66             	jmp    *0x66(%edi)
                    buf[pos--] = '\0';
    9e2f:	8b 87 88 0b 00 00    	mov    0xb88(%edi),%eax
    9e35:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    9e3a:	67 66 89 97 88 0b    	mov    %dx,0xb88(%bx)
    9e40:	00 00                	add    %al,(%eax)
    9e42:	67 c6 84 07 04 02    	movb   $0x2,0x407(%si)
    9e48:	00 00                	add    %al,(%eax)
    9e4a:	00 e9                	add    %ch,%cl
    9e4c:	0f 03 3c 0a          	lsl    (%edx,%ecx,1),%edi
                }
            }
            else if (in == 13 || in == 10)
    9e50:	0f 94 c1             	sete   %cl
    9e53:	3c 0d                	cmp    $0xd,%al
    9e55:	0f 94 c0             	sete   %al
    9e58:	08 c1                	or     %al,%cl
    9e5a:	67 88 4d f0          	mov    %cl,-0x10(%di)
    9e5e:	0f 84 dc 01 66 6a    	je     6a66a040 <_data_end+0x6a65da9c>
            {
                putchar('\n');
    9e64:	0a 66 e8             	or     -0x18(%esi),%ah
    9e67:	c3                   	ret    
    9e68:	f4                   	hlt    
    9e69:	ff                   	(bad)  
    9e6a:	ff 67 66             	jmp    *0x66(%edi)
                if(strlen(buf) == 0)
    9e6d:	8d 87 04 02 00 00    	lea    0x204(%edi),%eax
    9e73:	67 66 89 45 ec       	mov    %ax,-0x14(%di)
    9e78:	67 66 89 04          	mov    %ax,(%si)
    9e7c:	24 66                	and    $0x66,%al
    9e7e:	e8 cd ed ff ff       	call   8c50 <_Z6strlenPKc>
    9e83:	66 5a                	pop    %dx
    9e85:	66 85 c0             	test   %ax,%ax
    9e88:	0f 84 6a ff 67 66    	je     66689df8 <_data_end+0x6667d854>
        memmove(histroy[1], histroy[0], buf_size * history_term * sizeof(char));
    9e8e:	8d 9f 84 02 00 00    	lea    0x284(%edi),%ebx
    9e94:	66 68 00 05          	pushw  $0x500
    9e98:	00 00                	add    %al,(%eax)
    9e9a:	66 53                	push   %bx
    9e9c:	67 66 8d 87 04 03    	lea    0x304(%bx),%ax
    9ea2:	00 00                	add    %al,(%eax)
    9ea4:	66 50                	push   %ax
    9ea6:	66 e8 32 ed          	callw  8bdc <_Z6memcpyPvPKvm+0x2b>
    9eaa:	ff                   	(bad)  
    9eab:	ff 66 83             	jmp    *-0x7d(%esi)
        strcpy(histroy[0], buf);
    9eae:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    9eb1:	66 ff 75 ec          	pushw  -0x14(%ebp)
    9eb5:	66 53                	push   %bx
    9eb7:	66 e8 af ed          	callw  8c6a <_Z6strlenPKc+0x1a>
    9ebb:	ff                   	(bad)  
    9ebc:	ff 66 5b             	jmp    *0x5b(%esi)
    9ebf:	66 5e                	pop    %si
        char * p = buf;
    9ec1:	67 66 8d 9f 04 02    	lea    0x204(%bx),%bx
    9ec7:	00 00                	add    %al,(%eax)
        while(*p && isspace(*p)){
    9ec9:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    9ece:	84 c0                	test   %al,%al
    9ed0:	75 08                	jne    9eda <_ZN2sh3runEv+0xf8>
        char * p = buf;
    9ed2:	66 31 d2             	xor    %dx,%dx
    9ed5:	66 31 f6             	xor    %si,%si
    9ed8:	eb 39                	jmp    9f13 <_ZN2sh3runEv+0x131>
        while(*p && isspace(*p)){
    9eda:	66 50                	push   %ax
    9edc:	66 e8 85 ee          	callw  8d65 <_Z7reversePc+0x4a>
    9ee0:	ff                   	(bad)  
    9ee1:	ff 66 59             	jmp    *0x59(%esi)
    9ee4:	66 85 c0             	test   %ax,%ax
    9ee7:	74 e9                	je     9ed2 <_ZN2sh3runEv+0xf0>
            ++p;
    9ee9:	66 43                	inc    %bx
    9eeb:	eb dc                	jmp    9ec9 <_ZN2sh3runEv+0xe7>
    9eed:	67 88 55 e8          	mov    %dl,-0x18(%di)
            if(isspace(*p))
    9ef1:	66 50                	push   %ax
    9ef3:	66 e8 6e ee          	callw  8d65 <_Z7reversePc+0x4a>
    9ef7:	ff                   	(bad)  
    9ef8:	ff 66 5a             	jmp    *0x5a(%esi)
    9efb:	66 85 c0             	test   %ax,%ax
    9efe:	67 8a 55 e8          	mov    -0x18(%di),%dl
    9f02:	74 1a                	je     9f1e <_ZN2sh3runEv+0x13c>
                *p = '\0';
    9f04:	67 c6 03 00          	movb   $0x0,(%bp,%di)
                if(con)
    9f08:	84 d2                	test   %dl,%dl
    9f0a:	74 05                	je     9f11 <_ZN2sh3runEv+0x12f>
                    ++i;
    9f0c:	66 46                	inc    %si
                    con = false;
    9f0e:	66 31 d2             	xor    %dx,%dx
            ++p;
    9f11:	66 43                	inc    %bx
        while (*p)
    9f13:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    9f18:	84 c0                	test   %al,%al
    9f1a:	75 d1                	jne    9eed <_ZN2sh3runEv+0x10b>
    9f1c:	eb 10                	jmp    9f2e <_ZN2sh3runEv+0x14c>
                if(!con)
    9f1e:	84 d2                	test   %dl,%dl
    9f20:	75 ef                	jne    9f11 <_ZN2sh3runEv+0x12f>
                    inputs[i] = p;
    9f22:	67 66 89 5c b7       	mov    %bx,-0x49(%si)
    9f27:	04 67                	add    $0x67,%al
                    con = true;
    9f29:	8a 55 f0             	mov    -0x10(%ebp),%dl
    9f2c:	eb e3                	jmp    9f11 <_ZN2sh3runEv+0x12f>
        if(con) ++i;
    9f2e:	84 d2                	test   %dl,%dl
    9f30:	74 04                	je     9f36 <_ZN2sh3runEv+0x154>
    9f32:	66 46                	inc    %si
    9f34:	eb 07                	jmp    9f3d <_ZN2sh3runEv+0x15b>
                    printf("%s", prompt);
                    continue;
                }
                history_push(buf);
                int input_cnt = split_input(buf);
                if (input_cnt == 0)
    9f36:	66 85 f6             	test   %si,%si
    9f39:	0f 84 cf fe 67 66    	je     66689e0e <_data_end+0x6667d86a>
                    continue;
                int cmd_cnt = split_batch(inputs, input_cnt);
    9f3f:	8d 47 04             	lea    0x4(%edi),%eax
    9f42:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
        int p = 0;
    9f47:	66 31 c9             	xor    %cx,%cx
        while(strcmp(inputs[p], ";") == 0){
    9f4a:	66 68 da c2          	pushw  $0xc2da
    9f4e:	00 00                	add    %al,(%eax)
    9f50:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    9f55:	67 66 ff 34          	pushw  (%si)
    9f59:	88 67 66             	mov    %ah,0x66(%edi)
    9f5c:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
    9f5f:	66 e8 49 ed          	callw  8cac <_Z6strcpyPcPKc+0x40>
    9f63:	ff                   	(bad)  
    9f64:	ff 66 59             	jmp    *0x59(%esi)
    9f67:	66 5b                	pop    %bx
    9f69:	66 85 c0             	test   %ax,%ax
    9f6c:	67 66 8b 4d e4       	mov    -0x1c(%di),%cx
    9f71:	75 04                	jne    9f77 <_ZN2sh3runEv+0x195>
            ++p;
    9f73:	66 41                	inc    %cx
    9f75:	eb d3                	jmp    9f4a <_ZN2sh3runEv+0x168>
        bool con = false;
    9f77:	66 31 d2             	xor    %dx,%dx
        int i = 0;
    9f7a:	66 31 db             	xor    %bx,%bx
        while (p < input_cnt)
    9f7d:	66 39 f1             	cmp    %si,%cx
    9f80:	7d 6c                	jge    9fee <_ZN2sh3runEv+0x20c>
    9f82:	67 88 55 e3          	mov    %dl,-0x1d(%di)
            if(strcmp(inputs[p], ";") == 0)
    9f86:	66 68 da c2          	pushw  $0xc2da
    9f8a:	00 00                	add    %al,(%eax)
    9f8c:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    9f91:	67 66 ff 34          	pushw  (%si)
    9f95:	88 67 66             	mov    %ah,0x66(%edi)
    9f98:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
    9f9b:	66 e8 0d ed          	callw  8cac <_Z6strcpyPcPKc+0x40>
    9f9f:	ff                   	(bad)  
    9fa0:	ff 66 59             	jmp    *0x59(%esi)
    9fa3:	66 5a                	pop    %dx
    9fa5:	66 85 c0             	test   %ax,%ax
    9fa8:	67 66 8b 4d e4       	mov    -0x1c(%di),%cx
    9fad:	67 8a 55 e3          	mov    -0x1d(%di),%dl
    9fb1:	75 0b                	jne    9fbe <_ZN2sh3runEv+0x1dc>
                if(con)
    9fb3:	84 d2                	test   %dl,%dl
    9fb5:	74 33                	je     9fea <_ZN2sh3runEv+0x208>
                    ++i;
    9fb7:	66 43                	inc    %bx
                    con = false;
    9fb9:	66 31 d2             	xor    %dx,%dx
    9fbc:	eb 2c                	jmp    9fea <_ZN2sh3runEv+0x208>
                if(!con)
    9fbe:	84 d2                	test   %dl,%dl
    9fc0:	75 1f                	jne    9fe1 <_ZN2sh3runEv+0x1ff>
    9fc2:	67 66 8d 04          	lea    (%si),%ax
    9fc6:	df 67 66             	fbld   0x66(%edi)
                    cmds[i].start = p;
    9fc9:	89 88 04 01 00 00    	mov    %ecx,0x104(%eax)
                    cmds[i].cnt = 1;
    9fcf:	67 66 c7 80 08 01 00 	movw   $0x0,0x108(%bx,%si)
    9fd6:	00 
    9fd7:	01 00                	add    %eax,(%eax)
    9fd9:	00 00                	add    %al,(%eax)
                    con = true;
    9fdb:	67 8a 55 f0          	mov    -0x10(%di),%dl
    9fdf:	eb 09                	jmp    9fea <_ZN2sh3runEv+0x208>
                    cmds[i].cnt++;
    9fe1:	67 66 ff 84 df 08    	incw   0x8df(%si)
    9fe7:	01 00                	add    %eax,(%eax)
    9fe9:	00 66 41             	add    %ah,0x41(%esi)
            ++p;
    9fec:	eb 8f                	jmp    9f7d <_ZN2sh3runEv+0x19b>
        if(con) ++i;
    9fee:	84 d2                	test   %dl,%dl
    9ff0:	74 02                	je     9ff4 <_ZN2sh3runEv+0x212>
    9ff2:	66 43                	inc    %bx
                for(int cmd_num = 0; cmd_num < cmd_cnt; ++ cmd_num)
    9ff4:	66 31 f6             	xor    %si,%si
    9ff7:	66 39 de             	cmp    %bx,%si
    9ffa:	74 1b                	je     a017 <_ZN2sh3runEv+0x235>
                {
                    exec(cmds[cmd_num]);
    9ffc:	67 66 8d 84 f7 04    	lea    0x4f7(%si),%ax
    a002:	01 00                	add    %eax,(%eax)
    a004:	00 66 50             	add    %ah,0x50(%esi)
    a007:	66 57                	push   %di
    a009:	66 e8 b7 f9          	callw  99c4 <_ZN3tty7putcharEi+0x100>
    a00d:	ff                   	(bad)  
    a00e:	ff 66 46             	jmp    *0x46(%esi)
                for(int cmd_num = 0; cmd_num < cmd_cnt; ++ cmd_num)
    a011:	66 58                	pop    %ax
    a013:	66 5a                	pop    %dx
    a015:	eb e0                	jmp    9ff7 <_ZN2sh3runEv+0x215>
                }
                memset(buf, 0, buf_size);
    a017:	66 68 80 00          	pushw  $0x80
    a01b:	00 00                	add    %al,(%eax)
    a01d:	66 6a 00             	pushw  $0x0
    a020:	67 66 ff 75 ec       	pushw  -0x14(%di)
    a025:	66 e8 00 ec          	callw  8c29 <_Z7memmovePvPKvm+0x4b>
    a029:	ff                   	(bad)  
    a02a:	ff 67 66             	jmp    *0x66(%edi)
                pos = 0;
    a02d:	c7 87 88 0b 00 00 00 	movl   $0x0,0xb88(%edi)
    a034:	00 00 00 
                printf("%s", prompt);
    a037:	66 83 c4 0c          	add    $0xc,%sp
    a03b:	e9 b8 fd 84 d2       	jmp    d2859df8 <_data_end+0xd284d854>
            }
            else if (in == 0)
    a040:	0f 84 c8 fd 80 fa    	je     fa819e0e <_data_end+0xfa80d86a>
            {
                continue;
            }
            else if( in == '\t')
    a046:	09 0f                	or     %ecx,(%edi)
    a048:	85 df                	test   %ebx,%edi
    a04a:	00 66 31             	add    %ah,0x31(%esi)
            {
                bool first_matching = false;
                for(int i = 0; i < supported_cmd_num; ++i){
    a04d:	db 67 66             	(bad)  0x66(%edi)
    a050:	8d b7 04 02 00 00    	lea    0x204(%edi),%esi
    a056:	67 66 39 1f          	cmp    %bx,(%bx)
    a05a:	7e 51                	jle    a0ad <_ZN2sh3runEv+0x2cb>
                    if(bf(buf, cmd_list[i]) != -1)
    a05c:	67 66 8b 04          	mov    (%si),%ax
    a060:	9d                   	popf   
    a061:	e0 c2                	loopne a025 <_ZN2sh3runEv+0x243>
    a063:	00 00                	add    %al,(%eax)
    a065:	67 66 89 45 ec       	mov    %ax,-0x14(%di)
    a06a:	66 89 c2             	mov    %ax,%dx
    a06d:	66 89 f0             	mov    %si,%ax
    a070:	66 e8 9e f7          	callw  9812 <_Z6printfPKcz+0x3d>
    a074:	ff                   	(bad)  
    a075:	ff 66 40             	jmp    *0x40(%esi)
    a078:	74 2f                	je     a0a9 <_ZN2sh3runEv+0x2c7>
                    {
                        if(!first_matching){
    a07a:	67 80 7d f0 00       	cmpb   $0x0,-0x10(%di)
    a07f:	75 0e                	jne    a08f <_ZN2sh3runEv+0x2ad>
                            printf("\n");
    a081:	66 68 ae c1          	pushw  $0xc1ae
    a085:	00 00                	add    %al,(%eax)
    a087:	66 e8 48 f7          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    a08b:	ff                   	(bad)  
    a08c:	ff 66 58             	jmp    *0x58(%esi)
                            first_matching = true;
                        }
                        printf("%s\n", cmd_list[i]);
    a08f:	67 66 ff 75 ec       	pushw  -0x14(%di)
    a094:	66 68 9c c2          	pushw  $0xc29c
    a098:	00 00                	add    %al,(%eax)
    a09a:	66 e8 35 f7          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    a09e:	ff                   	(bad)  
    a09f:	ff 66 5e             	jmp    *0x5e(%esi)
    a0a2:	66 58                	pop    %ax
    a0a4:	67 c6 45 f0 01       	movb   $0x1,-0x10(%di)
                for(int i = 0; i < supported_cmd_num; ++i){
    a0a9:	66 43                	inc    %bx
    a0ab:	eb a1                	jmp    a04e <_ZN2sh3runEv+0x26c>
                    }
                }
                for(size_t i = 0; i < prog_cnt; ++i)
    a0ad:	66 31 db             	xor    %bx,%bx
    a0b0:	67 66 39 9f 84 0b    	cmp    %bx,0xb84(%bx)
    a0b6:	00 00                	add    %al,(%eax)
    a0b8:	76 55                	jbe    a10f <_ZN2sh3runEv+0x32d>
    a0ba:	66 6b c3 24          	imul   $0x24,%bx,%ax
    a0be:	67 66 8d 84 07 8c    	lea    -0x73f9(%si),%ax
    a0c4:	0b 00                	or     (%eax),%eax
    a0c6:	00 67 66             	add    %ah,0x66(%edi)
    a0c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    if(bf(buf, progs[i].name) != -1)
    a0cc:	66 89 c2             	mov    %ax,%dx
    a0cf:	66 89 f0             	mov    %si,%ax
    a0d2:	66 e8 3c f7          	callw  9812 <_Z6printfPKcz+0x3d>
    a0d6:	ff                   	(bad)  
    a0d7:	ff 66 40             	jmp    *0x40(%esi)
    a0da:	74 2f                	je     a10b <_ZN2sh3runEv+0x329>
                    {
                        if(!first_matching){
    a0dc:	67 80 7d f0 00       	cmpb   $0x0,-0x10(%di)
    a0e1:	75 0e                	jne    a0f1 <_ZN2sh3runEv+0x30f>
                            printf("\n");
    a0e3:	66 68 ae c1          	pushw  $0xc1ae
    a0e7:	00 00                	add    %al,(%eax)
    a0e9:	66 e8 e6 f6          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    a0ed:	ff                   	(bad)  
    a0ee:	ff 66 59             	jmp    *0x59(%esi)
                            first_matching = true;
                        }
                        printf("%s\n", progs[i].name);
    a0f1:	67 66 ff 75 ec       	pushw  -0x14(%di)
    a0f6:	66 68 9c c2          	pushw  $0xc29c
    a0fa:	00 00                	add    %al,(%eax)
    a0fc:	66 e8 d3 f6          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    a100:	ff                   	(bad)  
    a101:	ff 66 58             	jmp    *0x58(%esi)
    a104:	66 5a                	pop    %dx
    a106:	67 c6 45 f0 01       	movb   $0x1,-0x10(%di)
                for(size_t i = 0; i < prog_cnt; ++i)
    a10b:	66 43                	inc    %bx
    a10d:	eb a1                	jmp    a0b0 <_ZN2sh3runEv+0x2ce>
                    }
                printf("%s", prompt);
    a10f:	66 68 d3 c2          	pushw  $0xc2d3
    a113:	00 00                	add    %al,(%eax)
    a115:	66 68 d0 c2          	pushw  $0xc2d0
    a119:	00 00                	add    %al,(%eax)
    a11b:	66 e8 b4 f6          	callw  97d3 <_Z7sprintfPcPKcz+0x1e>
    a11f:	ff                   	(bad)  
    a120:	ff 66 5a             	jmp    *0x5a(%esi)
                printf("%s", buf);
    a123:	66 59                	pop    %cx
    a125:	66 56                	push   %si
    a127:	e9 d2 fc 66 0f       	jmp    f679dfe <_data_end+0xf66d85a>
            }
            else {
                putchar(in);
    a12c:	be c2 67 66 89       	mov    $0x896667c2,%esi
    a131:	55                   	push   %ebp
    a132:	f0 66 50             	lock push %ax
    a135:	66 e8 f3 f1          	callw  932c <_ZL19system_call_putchari+0x29>
    a139:	ff                   	(bad)  
    a13a:	ff 67 66             	jmp    *0x66(%edi)
                buf[pos++] = in;
    a13d:	8b 87 88 0b 00 00    	mov    0xb88(%edi),%eax
    a143:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    a148:	67 66 89 8f 88 0b    	mov    %cx,0xb88(%bx)
    a14e:	00 00                	add    %al,(%eax)
    a150:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    a155:	67 88 94 07 04       	mov    %dl,0x407(%si)
    a15a:	02 00                	add    (%eax),%al
    a15c:	00 66 58             	add    %ah,0x58(%esi)
    a15f:	e9                   	.byte 0xe9
    a160:	aa                   	stos   %al,%es:(%edi)
    a161:	fc                   	cld    

Disassembly of section .text._Z4itoaIjEvPcT_ib:

0000a162 <_Z4itoaIjEvPcT_ib>:
void itoa(char* buffer, T num, int base, bool captial = false)
    a162:	66 55                	push   %bp
    a164:	66 89 e5             	mov    %sp,%bp
    a167:	66 57                	push   %di
    a169:	66 56                	push   %si
    a16b:	66 53                	push   %bx
    a16d:	66 83 ec 08          	sub    $0x8,%sp
    a171:	67 66 8b 75 08       	mov    0x8(%di),%si
    a176:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a17b:	67 66 8b 7d 10       	mov    0x10(%di),%di
    a180:	67 8a 5d 14          	mov    0x14(%di),%bl
    a184:	67 88 5d ef          	mov    %bl,-0x11(%di)
    char *p = buffer;
    a188:	66 89 f1             	mov    %si,%cx
    a18b:	66 31 d2             	xor    %dx,%dx
    a18e:	66 f7 f7             	div    %di
    a191:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    a196:	67 80 7d ef 00       	cmpb   $0x0,-0x11(%di)
    a19b:	74 09                	je     a1a6 <_Z4itoaIjEvPcT_ib+0x44>
    a19d:	67 8a 9a 44 c5       	mov    -0x3abc(%bp,%si),%bl
    a1a2:	00 00                	add    %al,(%eax)
    a1a4:	eb 07                	jmp    a1ad <_Z4itoaIjEvPcT_ib+0x4b>
    a1a6:	67 8a 9a 55 c5       	mov    -0x3aab(%bp,%si),%bl
    a1ab:	00 00                	add    %al,(%eax)
    a1ad:	67 66 8d 51 01       	lea    0x1(%bx,%di),%dx
    a1b2:	67 88 5a ff          	mov    %bl,-0x1(%bp,%si)
        if(num == 0) break;
    a1b6:	67 66 83 7d f0 00    	cmpw   $0x0,-0x10(%di)
    a1bc:	74 05                	je     a1c3 <_Z4itoaIjEvPcT_ib+0x61>
    a1be:	66 89 d1             	mov    %dx,%cx
    a1c1:	eb c8                	jmp    a18b <_Z4itoaIjEvPcT_ib+0x29>
    *p = '\0';
    a1c3:	67 c6 41 01 00       	movb   $0x0,0x1(%bx,%di)
    reverse(buffer);
    a1c8:	67 66 89 75 08       	mov    %si,0x8(%di)
}
    a1cd:	66 58                	pop    %ax
    a1cf:	66 5a                	pop    %dx
    a1d1:	66 5b                	pop    %bx
    a1d3:	66 5e                	pop    %si
    a1d5:	66 5f                	pop    %di
    a1d7:	66 5d                	pop    %bp
    reverse(buffer);
    a1d9:	e9                   	.byte 0xe9
    a1da:	3f                   	aas    
    a1db:	eb                   	.byte 0xeb
