
build/kernel/kernel.bin.elf:     file format elf32-i386


Disassembly of section .text:

00007e00 <_text>:
    7e00:	b7 03                	mov    $0x3,%bh
    7e02:	fa                   	cli    
    7e03:	b0 8a                	mov    $0x8a,%al
    7e05:	e6 70                	out    %al,$0x70
    7e07:	e4 71                	in     $0x71,%al
    7e09:	24 f0                	and    $0xf0,%al
    7e0b:	08 c7                	or     %al,%bh
    7e0d:	b0 8a                	mov    $0x8a,%al
    7e0f:	e6 70                	out    %al,$0x70
    7e11:	88 f8                	mov    %bh,%al
    7e13:	e6 71                	out    %al,$0x71
    7e15:	fb                   	sti    
    7e16:	68 81 7e 6a 20       	push   $0x206a7e81
    7e1b:	e8 44 00 83 c4       	call   c4837e64 <_GLOBAL_OFFSET_TABLE_+0xc482ce38>
    7e20:	04 a1                	add    $0xa1,%al
    7e22:	24 00                	and    $0x0,%al
    7e24:	a3 f2 7e a1 26       	mov    %eax,0x26a17ef2
    7e29:	00 a3 f4 7e 68 01    	add    %ah,0x1687ef4(%ebx)
    7e2f:	7f 6a                	jg     7e9b <test_up+0x6>
    7e31:	24 e8                	and    $0xe8,%al
    7e33:	2d 00 83 c4 04       	sub    $0x4c48300,%eax
    7e38:	68 5e 7f 68 80       	push   $0x80687f5e
    7e3d:	00 e8                	add    %ch,%al
    7e3f:	21 00                	and    %eax,(%eax)
    7e41:	83 c4 04             	add    $0x4,%esp
    7e44:	68 60 7f 68 84       	push   $0x84687f60
    7e49:	00 e8                	add    %ch,%al
    7e4b:	15 00 83 c4 04       	adc    $0x4c48300,%eax
    7e50:	68 70 7f 68 60       	push   $0x60687f70
    7e55:	02 e8                	add    %al,%ch
    7e57:	09 00                	or     %eax,(%eax)
    7e59:	83 c4 04             	add    $0x4,%esp
    7e5c:	e8 3c 02 fa eb       	call   ebfa809d <_GLOBAL_OFFSET_TABLE_+0xebf9d071>
    7e61:	fe                   	.byte 0xfe

00007e62 <install_int>:
    7e62:	55                   	push   %ebp
    7e63:	89 e5                	mov    %esp,%ebp
    7e65:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    7e6a:	8b 76 04             	mov    0x4(%esi),%esi
    7e6d:	8b 4e 06             	mov    0x6(%esi),%ecx
    7e70:	26 89 0c 26          	mov    %ecx,%es:(%esi,%eiz,1)
    7e74:	8c 4c 02 8e          	mov    %cs,-0x72(%edx,%eax,1)
    7e78:	c0                   	.byte 0xc0
    7e79:	5d                   	pop    %ebp
    7e7a:	c3                   	ret    

00007e7b <int_08_what_to_play>:
	...

00007e7d <sys_int08_arrive>:
    7e7d:	00 00                	add    %al,(%eax)
	...

00007e81 <interrupt_08h>:
    7e81:	fa                   	cli    
    7e82:	06                   	push   %es
    7e83:	60                   	pusha  
    7e84:	b0 01                	mov    $0x1,%al
    7e86:	86 06                	xchg   %al,(%esi)
    7e88:	7d 7e                	jge    7f08 <interrupt_09h+0x7>
    7e8a:	8c c8                	mov    %cs,%eax
    7e8c:	8e c0                	mov    %eax,%es
    7e8e:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    7e93:	b4 09                	mov    $0x9,%ah

00007e95 <test_up>:
    7e95:	26 81 3e 7b 7e 00 01 	cmpl   $0x1007e7b,%es:(%esi)
    7e9c:	7d 09                	jge    7ea7 <test_left>
    7e9e:	b0 7c                	mov    $0x7c,%al
    7ea0:	26 ff 06             	incl   %es:(%esi)
    7ea3:	7b 7e                	jnp    7f23 <interrupt_09h+0x22>
    7ea5:	eb 3d                	jmp    7ee4 <test_input_over>

00007ea7 <test_left>:
    7ea7:	26 81 3e 7b 7e 00 02 	cmpl   $0x2007e7b,%es:(%esi)
    7eae:	7d 09                	jge    7eb9 <test_right>
    7eb0:	b0 2f                	mov    $0x2f,%al
    7eb2:	26 ff 06             	incl   %es:(%esi)
    7eb5:	7b 7e                	jnp    7f35 <interrupt_09h+0x34>
    7eb7:	eb 2b                	jmp    7ee4 <test_input_over>

00007eb9 <test_right>:
    7eb9:	26 81 3e 7b 7e 00 03 	cmpl   $0x3007e7b,%es:(%esi)
    7ec0:	7d 09                	jge    7ecb <test_down>
    7ec2:	b0 2d                	mov    $0x2d,%al
    7ec4:	26 ff 06             	incl   %es:(%esi)
    7ec7:	7b 7e                	jnp    7f47 <interrupt_09h+0x46>
    7ec9:	eb 19                	jmp    7ee4 <test_input_over>

00007ecb <test_down>:
    7ecb:	26 81 3e 7b 7e 00 04 	cmpl   $0x4007e7b,%es:(%esi)
    7ed2:	7d 09                	jge    7edd <reset_char>
    7ed4:	b0 5c                	mov    $0x5c,%al
    7ed6:	26 ff 06             	incl   %es:(%esi)
    7ed9:	7b 7e                	jnp    7f59 <interrupt_09h+0x58>
    7edb:	eb 07                	jmp    7ee4 <test_input_over>

00007edd <reset_char>:
    7edd:	26 c7 06 7b 7e 00 00 	movl   $0x7e7b,%es:(%esi)

00007ee4 <test_input_over>:
    7ee4:	65 a3 00 05 b0 20    	mov    %eax,%gs:0x20b00500
    7eea:	e6 20                	out    %al,$0x20
    7eec:	e6 a0                	out    %al,$0xa0
    7eee:	61                   	popa   
    7eef:	07                   	pop    %es
    7ef0:	fb                   	sti    
    7ef1:	cf                   	iret   

00007ef2 <int_09_saved>:
    7ef2:	00 00                	add    %al,(%eax)
	...

00007ef6 <ouchs>:
    7ef6:	4f                   	dec    %edi
    7ef7:	55                   	push   %ebp
    7ef8:	43                   	inc    %ebx
    7ef9:	48                   	dec    %eax
    7efa:	21 4f 55             	and    %ecx,0x55(%edi)
    7efd:	43                   	inc    %ebx
    7efe:	48                   	dec    %eax
    7eff:	21                   	.byte 0x21

00007f00 <len_ouch>:
    7f00:	0a                   	.byte 0xa

00007f01 <interrupt_09h>:
    7f01:	60                   	pusha  
    7f02:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    7f07:	89 dd                	mov    %ebx,%ebp
    7f09:	b4 09                	mov    $0x9,%ah
    7f0b:	b0 4f                	mov    $0x4f,%al
    7f0d:	65 a3 00 00 b0 55    	mov    %eax,%gs:0x55b00000
    7f13:	65 a3 02 00 b0 43    	mov    %eax,%gs:0x43b00002
    7f19:	65 a3 04 00 b0 48    	mov    %eax,%gs:0x48b00004
    7f1f:	65 a3 06 00 b0 53    	mov    %eax,%gs:0x53b00006
    7f25:	65 a3 08 00 b0 21    	mov    %eax,%gs:0x21b00008
    7f2b:	65 a3 0a 00 b0 4f    	mov    %eax,%gs:0x4fb0000a
    7f31:	65 a3 0c 00 b0 55    	mov    %eax,%gs:0x55b0000c
    7f37:	65 a3 0e 00 b0 43    	mov    %eax,%gs:0x43b0000e
    7f3d:	65 a3 10 00 b0 48    	mov    %eax,%gs:0x48b00010
    7f43:	65 a3 12 00 b0 21    	mov    %eax,%gs:0x21b00012
    7f49:	65 a3 14 00 61 06    	mov    %eax,%gs:0x6610014
    7f4f:	50                   	push   %eax
    7f50:	8c c8                	mov    %cs,%eax
    7f52:	8e c0                	mov    %eax,%es
    7f54:	fb                   	sti    
    7f55:	9c                   	pushf  
    7f56:	26 ff 1e             	lcall  *%es:(%esi)
    7f59:	f2 7e 58             	bnd jle 7fb4 <_ZL8print_okPc+0x2>
    7f5c:	07                   	pop    %es
    7f5d:	cf                   	iret   

00007f5e <interrupt_20h>:
    7f5e:	b4 4c                	mov    $0x4c,%ah

00007f60 <interrupt_21h>:
    7f60:	80 fc 4c             	cmp    $0x4c,%ah
    7f63:	75 09                	jne    7f6e <panic_21h_func_not_impl>
    7f65:	83 c4 06             	add    $0x6,%esp
    7f68:	66 ff 26             	jmpw   *(%esi)
    7f6b:	0a                   	.byte 0xa
    7f6c:	a0                   	.byte 0xa0
    7f6d:	cf                   	iret   

00007f6e <panic_21h_func_not_impl>:
    7f6e:	eb fe                	jmp    7f6e <panic_21h_func_not_impl>

00007f70 <interrupt_98h>:
    7f70:	80 fc 00             	cmp    $0x0,%ah
    7f73:	75 05                	jne    7f7a <func_01>

00007f75 <func_00>:
    7f75:	e8 51 02 eb 36       	call   36eb81cb <_GLOBAL_OFFSET_TABLE_+0x36ead19f>

00007f7a <func_01>:
    7f7a:	80 fc 01             	cmp    $0x1,%ah
    7f7d:	75 0f                	jne    7f8e <func_02>
    7f7f:	60                   	pusha  
    7f80:	66 50                	push   %ax
    7f82:	66 e8 f3 00          	callw  8079 <_Z19sys_get_current_ttyv+0xb>
    7f86:	00 00                	add    %al,(%eax)
    7f88:	83 c4 04             	add    $0x4,%esp
    7f8b:	61                   	popa   
    7f8c:	eb 22                	jmp    7fb0 <func_03>

00007f8e <func_02>:
    7f8e:	80 fc 02             	cmp    $0x2,%ah
    7f91:	75 1d                	jne    7fb0 <func_03>
    7f93:	06                   	push   %es
    7f94:	60                   	pusha  
    7f95:	8c c8                	mov    %cs,%eax
    7f97:	8e c0                	mov    %eax,%es
    7f99:	fb                   	sti    

00007f9a <sleep_loop>:
    7f9a:	26 80 3e 7d          	cmpb   $0x7d,%es:(%esi)
    7f9e:	7e 00                	jle    7fa0 <sleep_loop+0x6>
    7fa0:	74 f8                	je     7f9a <sleep_loop>
    7fa2:	b8 00 00 26 86       	mov    $0x86260000,%eax
    7fa7:	06                   	push   %es
    7fa8:	7d 7e                	jge    8028 <_ZN3tty11move_cursorEii.isra.1+0x24>
    7faa:	e2 ee                	loop   7f9a <sleep_loop>
    7fac:	61                   	popa   
    7fad:	07                   	pop    %es
    7fae:	eb 00                	jmp    7fb0 <func_03>

00007fb0 <func_03>:
    7fb0:	cf                   	iret   
    7fb1:	90                   	nop

00007fb2 <_ZL8print_okPc>:
    int mask = 0x00FF;
    ch = ch & mask;
    sys_get_current_tty()->putchar(ch);
}
const char* str = "Welcome to HHOS version 1.2.0\nYou can input help to see how to use it!";
static inline void print_ok(char * mod) {
    7fb2:	66 55                	push   %bp
    7fb4:	66 89 e5             	mov    %sp,%bp
    printf("%s init [", mod);
    7fb7:	66 50                	push   %ax
    7fb9:	66 68 b4 ae          	pushw  $0xaeb4
    7fbd:	00 00                	add    %al,(%eax)
    7fbf:	66 e8 6c 0e          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    7fc3:	00 00                	add    %al,(%eax)
    {
        cur_y = y;
    }
    void set_color(int _color)
    {
        color = _color;
    7fc5:	66 a1 e0 9e 67 66    	mov    0x66679ee0,%ax
    7fcb:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
    current_tty->set_color(MAKE_COLOR(VGA_BLACK, VGA_GREEN));
    printf("OK");
    7fd2:	66 58                	pop    %ax
    7fd4:	66 5a                	pop    %dx
    7fd6:	66 68 be ae          	pushw  $0xaebe
    7fda:	00 00                	add    %al,(%eax)
    7fdc:	66 e8 4f 0e          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    7fe0:	00 00                	add    %al,(%eax)
    7fe2:	66 a1 e0 9e 67 66    	mov    0x66679ee0,%ax
    7fe8:	c7 40 08 07 00 00 00 	movl   $0x7,0x8(%eax)
    current_tty->set_color(MAKE_COLOR(VGA_BLACK, VGA_WHITE));
    printf("]\n");
    7fef:	67 66 c7 04 24 c1    	movw   $0xc124,(%si)
    7ff5:	ae                   	scas   %es:(%edi),%al
    7ff6:	00 00                	add    %al,(%eax)
    7ff8:	66 e8 33 0e          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    7ffc:	00 00                	add    %al,(%eax)
}
    7ffe:	66 59                	pop    %cx
    8000:	66 c9                	leavew 
    8002:	66 c3                	retw   

00008004 <_ZN3tty11move_cursorEii.isra.1>:
    }
    void move_cursor(int x, int y)
    8004:	66 55                	push   %bp
    8006:	66 89 e5             	mov    %sp,%bp
    8009:	66 53                	push   %bx
    {
        uint16_t pos = x * 80 + y;
    800b:	6b c0 50             	imul   $0x50,%eax,%eax
    800e:	67 66 8d 1c          	lea    (%si),%bx
    8012:	10 66 6a             	adc    %ah,0x6a(%esi)
        sys_outb(0x3D4, 0x0F);
    8015:	0f 66 68 d4          	pcmpgtd -0x2c(%eax),%mm5
    8019:	03 00                	add    (%eax),%eax
    801b:	00 66 e8             	add    %ah,-0x18(%esi)
    801e:	4c                   	dec    %esp
    801f:	04 00                	add    $0x0,%al
    8021:	00 66 58             	add    %ah,0x58(%esi)
        sys_outb(0x3D5, (uint8_t) (pos & 0xFF));
    8024:	66 5a                	pop    %dx
    8026:	66 0f b6 c3          	movzbw %bl,%ax
    802a:	66 50                	push   %ax
    802c:	66 68 d5 03          	pushw  $0x3d5
    8030:	00 00                	add    %al,(%eax)
    8032:	66 e8 36 04          	callw  846c <sys_inb+0xd>
    8036:	00 00                	add    %al,(%eax)
        sys_outb(0x3D4, 0x0E);
    8038:	66 59                	pop    %cx
    803a:	66 58                	pop    %ax
    803c:	66 6a 0e             	pushw  $0xe
    803f:	66 68 d4 03          	pushw  $0x3d4
    8043:	00 00                	add    %al,(%eax)
    8045:	66 e8 23 04          	callw  846c <sys_inb+0xd>
    8049:	00 00                	add    %al,(%eax)
        sys_outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
    804b:	66 58                	pop    %ax
    804d:	66 5a                	pop    %dx
    804f:	66 0f b6 df          	movzbw %bh,%bx
    8053:	66 53                	push   %bx
    8055:	66 68 d5 03          	pushw  $0x3d5
    8059:	00 00                	add    %al,(%eax)
    805b:	66 e8 0d 04          	callw  846c <sys_inb+0xd>
    805f:	00 00                	add    %al,(%eax)
    8061:	66 59                	pop    %cx
    8063:	66 5b                	pop    %bx
    }
    8065:	67 66 8b 5d fc       	mov    -0x4(%di),%bx
    806a:	66 c9                	leavew 
    806c:	66 c3                	retw   

0000806e <_Z19sys_get_current_ttyv>:
tty* sys_get_current_tty(){return current_tty;}
    806e:	66 55                	push   %bp
    8070:	66 89 e5             	mov    %sp,%bp
    8073:	66 a1 e0 9e 66 5d    	mov    0x5d669ee0,%ax
    8079:	66 c3                	retw   

0000807b <sys_current_tty_putchar>:
{
    807b:	66 55                	push   %bp
    807d:	66 89 e5             	mov    %sp,%bp
    ch = ch & mask;
    8080:	67 66 0f b6 45 08    	movzbw 0x8(%di),%ax
    sys_get_current_tty()->putchar(ch);
    8086:	66 50                	push   %ax
    8088:	66 ff 36             	pushw  (%esi)
    808b:	e0 9e                	loopne 802b <_ZN3tty11move_cursorEii.isra.1+0x27>
    808d:	66 e8 8d 0e          	callw  8f1e <_ZN3tty8tty_initEv+0x36>
    8091:	00 00                	add    %al,(%eax)
}
    8093:	66 58                	pop    %ax
    8095:	66 5a                	pop    %dx
    8097:	66 c9                	leavew 
    8099:	66 c3                	retw   

0000809b <kernel_main>:
extern "C" void kernel_main()
{
    809b:	66 55                	push   %bp
    809d:	66 89 e5             	mov    %sp,%bp
    80a0:	66 53                	push   %bx
    80a2:	66 81 ec d8 0d       	sub    $0xdd8,%sp
    80a7:	00 00                	add    %al,(%eax)
        sys_bios_clear_screen();
    80a9:	66 e8 04 01          	callw  81b1 <sys_bios_print_string+0x21>
    80ad:	00 00                	add    %al,(%eax)
        tty_init();
    80af:	67 66 8d 9d 24 f2    	lea    -0xddc(%di),%bx
    80b5:	ff                   	(bad)  
    80b6:	ff 66 53             	jmp    *0x53(%esi)
    80b9:	66 e8 29 0e          	callw  8ee6 <_ZN2sh2bfEPKcS1_.isra.4+0x76>
    80bd:	00 00                	add    %al,(%eax)
    tty tty1;
    current_tty = &tty1;
    80bf:	66 89 1e             	mov    %bx,(%esi)
    80c2:	e0 9e                	loopne 8062 <_ZN3tty11move_cursorEii.isra.1+0x5e>
    print_ok("TTY");
    80c4:	66 59                	pop    %cx
    80c6:	66 b8 c4 ae          	mov    $0xaec4,%ax
    80ca:	00 00                	add    %al,(%eax)
    80cc:	66 e8 e0 fe          	callw  7fb0 <func_03>
    80d0:	ff                   	(bad)  
    80d1:	ff 67 66             	jmp    *0x66(%edi)
        return -1;
    }


public:
    sh(){
    80d4:	c7 85 30 f2 ff ff 07 	movl   $0x7,-0xdd0(%ebp)
    80db:	00 00 00 
    80de:	66 31 c0             	xor    %ax,%ax
    struct cmd{
    80e1:	67 66 8d 9d 30 f2    	lea    -0xdd0(%di),%bx
    80e7:	ff                   	(bad)  
    80e8:	ff 67 66             	jmp    *0x66(%edi)
    80eb:	c7 84 05 38 f3 ff ff 	movl   $0x0,-0xcc8(%ebp,%eax,1)
    80f2:	00 00 00 00 
    80f6:	66 83 c0 08          	add    $0x8,%ax
    sh(){
    80fa:	66 3d 00 01          	cmp    $0x100,%ax
    80fe:	00 00                	add    %al,(%eax)
    8100:	75 e7                	jne    80e9 <kernel_main+0x4e>
    8102:	67 66 c7 85 b4 fd ff 	movw   $0xffff,-0x24c(%di)
    8109:	ff 
    810a:	00 00                	add    %al,(%eax)
    810c:	00 00                	add    %al,(%eax)
    810e:	67 66 c7 85 b8 fd ff 	movw   $0xffff,-0x248(%di)
    8115:	ff 
    8116:	00 00                	add    %al,(%eax)
    8118:	00 00                	add    %al,(%eax)
        memset(buf, 0, buf_size);
    811a:	66 68 80 00          	pushw  $0x80
    811e:	00 00                	add    %al,(%eax)
    8120:	66 6a 00             	pushw  $0x0
    8123:	67 66 8d 85 34 f4    	lea    -0xbcc(%di),%ax
    8129:	ff                   	(bad)  
    812a:	ff 66 50             	jmp    *0x50(%esi)
    812d:	66 e8 85 04          	callw  85b6 <_Z7memmovePvPKvm+0x4b>
    8131:	00 00                	add    %al,(%eax)
        read_prog_record();
    8133:	66 83 c4 0c          	add    $0xc,%sp
    8137:	66 53                	push   %bx
    8139:	66 e8 8d 11          	callw  92ca <_ZN2sh4execERKNS_3cmdE+0x2a8>
    813d:	00 00                	add    %al,(%eax)
        sys_read_disk(0, (uint32_t)help, HELP_FILE_SECTOR, 1);
    813f:	67 66 c7 04 24 01    	movw   $0x124,(%si)
    8145:	00 00                	add    %al,(%eax)
    8147:	00 66 6a             	add    %ah,0x6a(%esi)
    814a:	20 67 66             	and    %ah,0x66(%edi)
    814d:	8d 85 b4 fb ff ff    	lea    -0x44c(%ebp),%eax
    8153:	66 50                	push   %ax
    8155:	66 6a 00             	pushw  $0x0
    8158:	66 e8 45 03          	callw  84a1 <sys_get_scancode+0xf>
    815c:	00 00                	add    %al,(%eax)
    sh sh1;
    print_ok("Shell");
    815e:	66 83 c4 10          	add    $0x10,%sp
    8162:	66 b8 c8 ae          	mov    $0xaec8,%ax
    8166:	00 00                	add    %al,(%eax)
    8168:	66 e8 44 fe          	callw  7fb0 <func_03>
    816c:	ff                   	(bad)  
    816d:	ff 66 ff             	jmp    *-0x1(%esi)
    printf("%s\n", str);
    8170:	36 b0 ae             	ss mov $0xae,%al
    8173:	66 68 b0 af          	pushw  $0xafb0
    8177:	00 00                	add    %al,(%eax)
    8179:	66 e8 b2 0c          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    817d:	00 00                	add    %al,(%eax)
    sh1.run();
    817f:	66 58                	pop    %ax
    8181:	66 5a                	pop    %dx
    8183:	66 53                	push   %bx
    8185:	66 e8 7f 12          	callw  9408 <_ZN2sh16read_prog_recordEv+0x13c>
    8189:	00 00                	add    %al,(%eax)
    818b:	66 90                	xchg   %ax,%ax
    818d:	66 90                	xchg   %ax,%ax
    818f:	90                   	nop

00008190 <sys_bios_print_string>:
    8190:	55                   	push   %ebp
    8191:	89 e5                	mov    %esp,%ebp
    8193:	8b 4e 0a             	mov    0xa(%esi),%ecx
    8196:	8b 5e 0e             	mov    0xe(%esi),%ebx
    8199:	b7 00                	mov    $0x0,%bh
    819b:	8b 56 12             	mov    0x12(%esi),%edx
    819e:	8c d8                	mov    %ds,%eax
    81a0:	8e c0                	mov    %eax,%es
    81a2:	b8 01 13 8e ed       	mov    $0xed8e1301,%eax
    81a7:	8b 6e 06             	mov    0x6(%esi),%ebp
    81aa:	cd 10                	int    $0x10
    81ac:	8c ed                	mov    %gs,%ebp
    81ae:	5d                   	pop    %ebp
    81af:	66 59                	pop    %cx
    81b1:	ff e1                	jmp    *%ecx

000081b3 <sys_bios_clear_screen>:
    81b3:	60                   	pusha  
    81b4:	b4 06                	mov    $0x6,%ah
    81b6:	b0 00                	mov    $0x0,%al
    81b8:	b7 07                	mov    $0x7,%bh
    81ba:	b5 00                	mov    $0x0,%ch
    81bc:	b1 00                	mov    $0x0,%cl
    81be:	b6 18                	mov    $0x18,%dh
    81c0:	b2 4f                	mov    $0x4f,%dl
    81c2:	cd 10                	int    $0x10
    81c4:	61                   	popa   
    81c5:	66 59                	pop    %cx
    81c7:	ff e1                	jmp    *%ecx

000081c9 <sys_bios_getchar>:
    81c9:	b4 00                	mov    $0x0,%ah
    81cb:	cd 16                	int    $0x16
    81cd:	b4 00                	mov    $0x0,%ah
    81cf:	c3                   	ret    

000081d0 <sys_execve_bin>:
    81d0:	55                   	push   %ebp
    81d1:	89 e5                	mov    %esp,%ebp
    81d3:	60                   	pusha  
    81d4:	1e                   	push   %ds
    81d5:	06                   	push   %es
    81d6:	b8 00 10 8e d8       	mov    $0xd88e1000,%eax
    81db:	8e c0                	mov    %eax,%es
    81dd:	8e d0                	mov    %eax,%ss
    81df:	c7 06 00 a0 cd 00    	movl   $0xcda000,(%esi)
    81e5:	c7 06 02 a0 20 00    	movl   $0x20a002,(%esi)
    81eb:	c7 06 0a a0 fa 81    	movl   $0x81faa00a,(%esi)
    81f1:	8c 0e                	mov    %cs,(%esi)
    81f3:	0c a0                	or     $0xa0,%al
    81f5:	ea                   	.byte 0xea
    81f6:	00                   	.byte 0x0
    81f7:	a1                   	.byte 0xa1
    81f8:	00 10                	add    %dl,(%eax)

000081fa <return_point>:
    81fa:	b8 00 00 8e d0       	mov    $0xd08e0000,%eax
    81ff:	58                   	pop    %eax
    8200:	8e c0                	mov    %eax,%es
    8202:	58                   	pop    %eax
    8203:	8e d8                	mov    %eax,%ds
    8205:	61                   	popa   
    8206:	5d                   	pop    %ebp
    8207:	66 59                	pop    %cx
    8209:	ff e1                	jmp    *%ecx

0000820b <sys_sleep>:
    820b:	55                   	push   %ebp
    820c:	89 e5                	mov    %esp,%ebp
    820e:	60                   	pusha  
    820f:	8b 4e 0a             	mov    0xa(%esi),%ecx

00008212 <sleep_loop>:
    8212:	80 3e 7d             	cmpb   $0x7d,(%esi)
    8215:	7e 00                	jle    8217 <sleep_loop+0x5>
    8217:	74 f9                	je     8212 <sleep_loop>
    8219:	b8 00 00 86 06       	mov    $0x6860000,%eax
    821e:	7d 7e                	jge    829e <sys_bios_print_int+0x76>
    8220:	e2 f0                	loop   8212 <sleep_loop>
    8222:	61                   	popa   
    8223:	5d                   	pop    %ebp
    8224:	66 59                	pop    %cx
    8226:	ff e1                	jmp    *%ecx

00008228 <sys_bios_print_int>:
#include "sys_lib.h"
void sys_bios_print_int(int num, int color, int pos)
{
    8228:	66 55                	push   %bp
    822a:	66 89 e5             	mov    %sp,%bp
    822d:	66 57                	push   %di
    822f:	66 56                	push   %si
    8231:	66 53                	push   %bx
    8233:	66 50                	push   %ax
    int num_ = num;
    8235:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    823a:	66 b9 01 00          	mov    $0x1,%cx
    823e:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    8240:	66 bb 0a 00          	mov    $0xa,%bx
    8244:	00 00                	add    %al,(%eax)
    8246:	66 99                	cwtd   
    8248:	66 f7 fb             	idiv   %bx
    824b:	66 85 c0             	test   %ax,%ax
    824e:	74 04                	je     8254 <sys_bios_print_int+0x2c>
    8250:	66 41                	inc    %cx
    8252:	eb f2                	jmp    8246 <sys_bios_print_int+0x1e>
    char arr[len + 1];
    8254:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    8259:	66 83 e0 fc          	and    $0xfffc,%ax
    825d:	66 29 c4             	sub    %ax,%sp
    8260:	66 89 e7             	mov    %sp,%di
    8263:	67 66 8d 1c          	lea    (%si),%bx
    8267:	0c 67                	or     $0x67,%al
    int power = 1;
    8269:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    826f:	00 00                	add    %al,(%eax)
    for(int i = 0; i < len; ++i, power *= 10)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    8271:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8276:	66 99                	cwtd   
    8278:	67 66 f7 7d f0       	idivw  -0x10(%di)
    827d:	66 be 0a 00          	mov    $0xa,%si
    8281:	00 00                	add    %al,(%eax)
    8283:	66 99                	cwtd   
    8285:	66 f7 fe             	idiv   %si
    8288:	66 83 c2 30          	add    $0x30,%dx
    828c:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    8290:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    8296:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    829b:	66 4b                	dec    %bx
    829d:	66 39 df             	cmp    %bx,%di
    82a0:	75 cf                	jne    8271 <sys_bios_print_int+0x49>
    arr[len] = '\0';
    82a2:	67 c6 04 0f          	movb   $0xf,(%si)
    82a6:	00 67 66             	add    %ah,0x66(%edi)
    sys_bios_print_string(arr, len, color, pos);
    82a9:	ff 75 10             	pushl  0x10(%ebp)
    82ac:	67 66 ff 75 0c       	pushw  0xc(%di)
    82b1:	66 51                	push   %cx
    82b3:	66 57                	push   %di
    82b5:	66 e8 d5 fe          	callw  818e <kernel_main+0xf3>
    82b9:	ff                   	(bad)  
    82ba:	ff 66 83             	jmp    *-0x7d(%esi)
}
    82bd:	c4 10                	les    (%eax),%edx
    82bf:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    82c4:	66 5b                	pop    %bx
    82c6:	66 5e                	pop    %si
    82c8:	66 5f                	pop    %di
    82ca:	66 5d                	pop    %bp
    82cc:	66 c3                	retw   

000082ce <sys_putchar>:
    //"mov word ptr gs:[bp],ax\n\t"
                   //".att_syntax noprefix\n\t");
//}

void sys_putchar(int c, int color, int x, int y)
{
    82ce:	66 55                	push   %bp
    82d0:	66 89 e5             	mov    %sp,%bp
    82d3:	66 53                	push   %bx
    int offset = (x * 80 + y)*2;
    uint16_t ch = c | (color << 8);
    82d5:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    82da:	66 c1 e0 08          	shl    $0x8,%ax
    82de:	67 66 0b 45 08       	or     0x8(%di),%ax
    int offset = (x * 80 + y)*2;
    82e3:	67 66 6b 5d 10 50    	imul   $0x50,0x10(%di),%bx
    82e9:	67 66 03 5d 14       	add    0x14(%di),%bx
    82ee:	66 01 db             	add    %bx,%bx
    "mov word ptr gs:[bp],ax\n\t"
    "popa\n\t"
    ".att_syntax noprefix\n\t"
    :
    :"a"(ch),"b"(offset)
    :"%ecx");
    82f1:	66 60                	pushaw 
    82f3:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    82f8:	89 dd                	mov    %ebx,%ebp
    82fa:	65 89 46 00          	mov    %eax,%gs:0x0(%esi)
    82fe:	66 61                	popaw  
}
    8300:	66 5b                	pop    %bx
    8302:	66 5d                	pop    %bp
    8304:	66 c3                	retw   

00008306 <sys_print_string>:
{
    8306:	66 55                	push   %bp
    8308:	66 89 e5             	mov    %sp,%bp
    830b:	66 56                	push   %si
    830d:	66 53                	push   %bx
    830f:	67 66 8b 5d 14       	mov    0x14(%di),%bx
    8314:	67 66 8b 75 0c       	mov    0xc(%di),%si
    8319:	66 01 de             	add    %bx,%si
    831c:	66 89 da             	mov    %bx,%dx
    for(unsigned int i = 0; i < len; ++i)
    831f:	66 39 f2             	cmp    %si,%dx
    8322:	74 28                	je     834c <sys_print_string+0x46>
        sys_putchar(str[i], color, x, y + i);
    8324:	66 52                	push   %dx
    8326:	67 66 ff 75 10       	pushw  0x10(%di)
    832b:	66 6a 07             	pushw  $0x7
    832e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8333:	66 29 d8             	sub    %bx,%ax
    8336:	67 66 0f be 04       	movsbw (%si),%ax
    833b:	10 66 50             	adc    %ah,0x50(%esi)
    833e:	66 e8 8a ff          	callw  82cc <sys_bios_print_int+0xa4>
    8342:	ff                   	(bad)  
    8343:	ff 66 42             	jmp    *0x42(%esi)
    for(unsigned int i = 0; i < len; ++i)
    8346:	66 83 c4 10          	add    $0x10,%sp
    834a:	eb d3                	jmp    831f <sys_print_string+0x19>
}
    834c:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    8351:	66 5b                	pop    %bx
    8353:	66 5e                	pop    %si
    8355:	66 5d                	pop    %bp
    8357:	66 c3                	retw   

00008359 <sys_print_int>:
{
    8359:	66 55                	push   %bp
    835b:	66 89 e5             	mov    %sp,%bp
    835e:	66 57                	push   %di
    8360:	66 56                	push   %si
    8362:	66 53                	push   %bx
    8364:	66 50                	push   %ax
    int num_ = num;
    8366:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    836b:	66 b9 01 00          	mov    $0x1,%cx
    836f:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    8371:	66 bb 0a 00          	mov    $0xa,%bx
    8375:	00 00                	add    %al,(%eax)
    8377:	66 99                	cwtd   
    8379:	66 f7 fb             	idiv   %bx
    837c:	66 85 c0             	test   %ax,%ax
    837f:	74 04                	je     8385 <sys_print_int+0x2c>
    8381:	66 41                	inc    %cx
    8383:	eb f2                	jmp    8377 <sys_print_int+0x1e>
    char arr[len + 1];
    8385:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    838a:	66 83 e0 fc          	and    $0xfffc,%ax
    838e:	66 29 c4             	sub    %ax,%sp
    8391:	66 89 e7             	mov    %sp,%di
    8394:	67 66 8d 1c          	lea    (%si),%bx
    8398:	0c 67                	or     $0x67,%al
    int power = 1;
    839a:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    83a0:	00 00                	add    %al,(%eax)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    83a2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    83a7:	66 99                	cwtd   
    83a9:	67 66 f7 7d f0       	idivw  -0x10(%di)
    83ae:	66 be 0a 00          	mov    $0xa,%si
    83b2:	00 00                	add    %al,(%eax)
    83b4:	66 99                	cwtd   
    83b6:	66 f7 fe             	idiv   %si
    83b9:	66 83 c2 30          	add    $0x30,%dx
    83bd:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    83c1:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    83c7:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    83cc:	66 4b                	dec    %bx
    83ce:	66 39 df             	cmp    %bx,%di
    83d1:	75 cf                	jne    83a2 <sys_print_int+0x49>
    arr[len] = '\0';
    83d3:	67 c6 04 0f          	movb   $0xf,(%si)
    83d7:	00 67 66             	add    %ah,0x66(%edi)
    sys_print_string(arr, len, x, y); 
    83da:	ff 75 10             	pushl  0x10(%ebp)
    83dd:	67 66 ff 75 0c       	pushw  0xc(%di)
    83e2:	66 51                	push   %cx
    83e4:	66 57                	push   %di
    83e6:	66 e8 1a ff          	callw  8304 <sys_putchar+0x36>
    83ea:	ff                   	(bad)  
    83eb:	ff 66 83             	jmp    *-0x7d(%esi)
}
    83ee:	c4 10                	les    (%eax),%edx
    83f0:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    83f5:	66 5b                	pop    %bx
    83f7:	66 5e                	pop    %si
    83f9:	66 5f                	pop    %di
    83fb:	66 5d                	pop    %bp
    83fd:	66 c3                	retw   

000083ff <sys_bios_scroll_up>:

void sys_bios_scroll_up(int color)
{
    83ff:	66 55                	push   %bp
    8401:	66 89 e5             	mov    %sp,%bp
    "movb $79, %%dl\n\t"
    "movb $0x06, %%ah\n\t"
    "int $0x10\n\t"
    "popa\n\t"
    :
    : "g"(color));
    8404:	66 60                	pushaw 
    8406:	b0 01                	mov    $0x1,%al
    8408:	67 8a 7d 08          	mov    0x8(%di),%bh
    840c:	b5 00                	mov    $0x0,%ch
    840e:	b1 00                	mov    $0x0,%cl
    8410:	b6 18                	mov    $0x18,%dh
    8412:	b2 4f                	mov    $0x4f,%dl
    8414:	b4 06                	mov    $0x6,%ah
    8416:	cd 10                	int    $0x10
    8418:	66 61                	popaw  
}
    841a:	66 5d                	pop    %bp
    841c:	66 c3                	retw   

0000841e <sys_bios_putchar>:

void sys_bios_putchar(char c, int color, int x, int y)
{
    841e:	66 55                	push   %bp
    8420:	66 89 e5             	mov    %sp,%bp
    8423:	66 50                	push   %ax
    8425:	67 66 8b 45 08       	mov    0x8(%di),%ax
    842a:	67 88 45 fc          	mov    %al,-0x4(%di)
    sys_bios_print_string(&c, 1, color, MAKE_POS(x, y));
    842e:	67 66 8b 45 10       	mov    0x10(%di),%ax
    8433:	66 c1 e0 08          	shl    $0x8,%ax
    8437:	67 66 0f b6 55 14    	movzbw 0x14(%di),%dx
    843d:	66 09 d0             	or     %dx,%ax
    8440:	66 50                	push   %ax
    8442:	67 66 ff 75 0c       	pushw  0xc(%di)
    8447:	66 6a 01             	pushw  $0x1
    844a:	67 66 8d 45 fc       	lea    -0x4(%di),%ax
    844f:	66 50                	push   %ax
    8451:	66 e8 39 fd          	callw  818e <kernel_main+0xf3>
    8455:	ff                   	(bad)  
    8456:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8459:	c4 10                	les    (%eax),%edx
    845b:	66 c9                	leavew 
    845d:	66 c3                	retw   

0000845f <sys_inb>:

uint8_t sys_inb(uint16_t port)
{
    845f:	66 55                	push   %bp
    8461:	66 89 e5             	mov    %sp,%bp
    uint8_t ret;
    asm volatile ( "inb %1, %0"
                   : "=a"(ret)
                   : "Nd"(port) );
    8464:	67 66 8b 55 08       	mov    0x8(%di),%dx
    8469:	ec                   	in     (%dx),%al
    return ret;
}
    846a:	66 5d                	pop    %bp
    846c:	66 c3                	retw   

0000846e <sys_outb>:
//    asm(".att_syntax noprefix\n");
//    return ret;
//}

void sys_outb(uint16_t port, uint8_t data)
{
    846e:	66 55                	push   %bp
    8470:	66 89 e5             	mov    %sp,%bp
    asm volatile ( "outb %0, %1"
                   : 
                   : "a"(data), "Nd"(port) );
    8473:	67 66 8b 55 08       	mov    0x8(%di),%dx
    8478:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    847d:	ee                   	out    %al,(%dx)
}
    847e:	66 5d                	pop    %bp
    8480:	66 c3                	retw   

00008482 <sys_dbg_bochs_putc>:
//                    : "=a"(ret)
//                    : "Nd"(port) );
//     return ret;
// }

void sys_dbg_bochs_putc(char c){
    8482:	66 55                	push   %bp
    8484:	66 89 e5             	mov    %sp,%bp
                   : "a"(data), "Nd"(port) );
    8487:	67 66 8b 45 08       	mov    0x8(%di),%ax
    848c:	e6 e9                	out    %al,$0xe9
    sys_outb(0xe9, (uint8_t)c);
}
    848e:	66 5d                	pop    %bp
    8490:	66 c3                	retw   

00008492 <sys_get_scancode>:

char sys_get_scancode()
{
    8492:	66 55                	push   %bp
    8494:	66 89 e5             	mov    %sp,%bp
                   : "Nd"(port) );
    8497:	e4 64                	in     $0x64,%al
    while (!(sys_inb(0x64) & 1));
    8499:	a8 01                	test   $0x1,%al
    849b:	74 fa                	je     8497 <sys_get_scancode+0x5>
                   : "Nd"(port) );
    849d:	e4 60                	in     $0x60,%al
    return sys_inb(0x60);
}
    849f:	66 5d                	pop    %bp
    84a1:	66 c3                	retw   

000084a3 <sys_read_disk>:

void sys_read_disk(uint32_t segment, uint32_t address, uint16_t logical_start_sector, uint8_t secotr_cnt)
{
    84a3:	66 55                	push   %bp
    84a5:	66 89 e5             	mov    %sp,%bp
    84a8:	66 53                	push   %bx
    uint8_t head = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) / FLOPPY_SECTOR_PER_TRACK;
    84aa:	67 66 0f b7 45 10    	movzww 0x10(%di),%ax
    84b0:	66 b9 24 00          	mov    $0x24,%cx
    84b4:	00 00                	add    %al,(%eax)
    84b6:	66 99                	cwtd   
    84b8:	66 f7 f9             	idiv   %cx
    84bb:	66 89 c1             	mov    %ax,%cx
    84be:	66 bb 12 00          	mov    $0x12,%bx
    84c2:	00 00                	add    %al,(%eax)
    84c4:	66 89 d0             	mov    %dx,%ax
    84c7:	66 99                	cwtd   
    84c9:	66 f7 fb             	idiv   %bx
    uint16_t cylinder = logical_start_sector / (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK);
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    //位操作一定要注意类型匹配（两小时）
    uint16_t mask1 = 255;
    uint16_t mask2 = 768;
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    84cc:	66 89 cb             	mov    %cx,%bx
    84cf:	66 c1 e3 08          	shl    $0x8,%bx
    84d3:	66 81 e1 00 03       	and    $0x300,%cx
    84d8:	00 00                	add    %al,(%eax)
    84da:	66 c1 f9 02          	sar    $0x2,%cx
    84de:	66 09 d9             	or     %bx,%cx
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    84e1:	66 42                	inc    %dx
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    84e3:	66 09 d1             	or     %dx,%cx
     "movb %4, %%al\n\t"    //扇区数
     "movb $0, %%dl\n\t"    //驱动器号
     "movb $2, %%ah\n\t"    //功能号
     "int $0x13\n\t"
     "pop %%es\n\t"
     : :"g"(segment), "g"(address), "g"(head), "g"(_cx), "g" (secotr_cnt));
    84e6:	06                   	push   %es
    84e7:	67 8b 5d 08          	mov    0x8(%di),%ebx
    84eb:	8e c3                	mov    %ebx,%es
    84ed:	67 8b 5d 0c          	mov    0xc(%di),%ebx
    84f1:	88 c6                	mov    %al,%dh
    84f3:	89 c9                	mov    %ecx,%ecx
    84f5:	67 8a 45 14          	mov    0x14(%di),%al
    84f9:	b2 00                	mov    $0x0,%dl
    84fb:	b4 02                	mov    $0x2,%ah
    84fd:	cd 13                	int    $0x13
    84ff:	07                   	pop    %es
}
    8500:	66 5b                	pop    %bx
    8502:	66 5d                	pop    %bp
    8504:	66 c3                	retw   

00008506 <_Z6memcmpPKvS0_m>:
namespace hhlibc {

#endif

int memcmp(const void * _s1, const void* _s2, size_t n)
{
    8506:	66 55                	push   %bp
    8508:	66 89 e5             	mov    %sp,%bp
    850b:	66 31 d2             	xor    %dx,%dx
    auto s1 = reinterpret_cast<const unsigned char*>(_s1);
    auto s2 = reinterpret_cast<const unsigned char*>(_s2);
    while(n--)
    850e:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    8513:	74 22                	je     8537 <_Z6memcmpPKvS0_m+0x31>
    {
        if(*s1 != *s2)          //**不能**让!=时跳出然后返回*s1 - *s2
    8515:	67 66 8b 45 08       	mov    0x8(%di),%ax
    851a:	67 66 0f b6 04       	movzbw (%si),%ax
    851f:	10 66 42             	adc    %ah,0x42(%esi)
    8522:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    8527:	67 66 0f b6 4c 11    	movzbw 0x11(%si),%cx
    852d:	ff                   	(bad)  
    852e:	38 c8                	cmp    %cl,%al
    8530:	74 dc                	je     850e <_Z6memcmpPKvS0_m+0x8>
        {                       //因为那样在实际上==的时候，会比较错误
            return *s1 - *s2;
    8532:	66 29 c8             	sub    %cx,%ax
    8535:	eb 03                	jmp    853a <_Z6memcmpPKvS0_m+0x34>
        }
        ++s1;
        ++s2;
    }
    return 0;
    8537:	66 31 c0             	xor    %ax,%ax
}
    853a:	66 5d                	pop    %bp
    853c:	66 c3                	retw   

0000853e <_Z6memcpyPvPKvm>:

void* memcpy(void* _dst, const void* _src, size_t n)
{
    853e:	66 55                	push   %bp
    8540:	66 89 e5             	mov    %sp,%bp
    8543:	66 53                	push   %bx
    8545:	67 66 8b 45 08       	mov    0x8(%di),%ax
    854a:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    854f:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    while (n--)
    8552:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    8557:	74 0c                	je     8565 <_Z6memcpyPvPKvm+0x27>
    {
        *(dst++) = *(src++);
    8559:	67 8a 0c             	mov    (%si),%cl
    855c:	13 67 88             	adc    -0x78(%edi),%esp
    855f:	0c 10                	or     $0x10,%al
    8561:	66 42                	inc    %dx
    while (n--)
    8563:	eb ed                	jmp    8552 <_Z6memcpyPvPKvm+0x14>
    }
    return _dst;
}
    8565:	66 5b                	pop    %bx
    8567:	66 5d                	pop    %bp
    8569:	66 c3                	retw   

0000856b <_Z7memmovePvPKvm>:
void* memmove(void* _dst, const void* _src, size_t n)
{
    856b:	66 55                	push   %bp
    856d:	66 89 e5             	mov    %sp,%bp
    8570:	66 56                	push   %si
    8572:	66 53                	push   %bx
    8574:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8579:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    857e:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    if(dst < src)
    8583:	66 39 d8             	cmp    %bx,%ax
    8586:	73 14                	jae    859c <_Z7memmovePvPKvm+0x31>
    8588:	66 31 c9             	xor    %cx,%cx
    {
        while(n--)
    858b:	66 39 f1             	cmp    %si,%cx
    858e:	74 20                	je     85b0 <_Z7memmovePvPKvm+0x45>
        {
            *(dst++) = *(src++);
    8590:	67 8a 14             	mov    (%si),%dl
    8593:	0b 67 88             	or     -0x78(%edi),%esp
    8596:	14 08                	adc    $0x8,%al
    8598:	66 41                	inc    %cx
        while(n--)
    859a:	eb ef                	jmp    858b <_Z7memmovePvPKvm+0x20>
        }
    }
    else if(dst > src)
    859c:	76 12                	jbe    85b0 <_Z7memmovePvPKvm+0x45>
    {
        src += n;
        dst += n;
        while(n--)
    859e:	66 4e                	dec    %si
    85a0:	66 83 fe ff          	cmp    $0xffff,%si
    85a4:	74 0a                	je     85b0 <_Z7memmovePvPKvm+0x45>
        {
            *(--dst) = *(--src);
    85a6:	67 8a 0c             	mov    (%si),%cl
    85a9:	33 67 88             	xor    -0x78(%edi),%esp
    85ac:	0c 30                	or     $0x30,%al
        while(n--)
    85ae:	eb ee                	jmp    859e <_Z7memmovePvPKvm+0x33>
        }
    }
    return _dst;
}
    85b0:	66 5b                	pop    %bx
    85b2:	66 5e                	pop    %si
    85b4:	66 5d                	pop    %bp
    85b6:	66 c3                	retw   

000085b8 <_Z6memsetPvim>:
void* memset(void* _dst, int c, size_t n)
{
    85b8:	66 55                	push   %bp
    85ba:	66 89 e5             	mov    %sp,%bp
    85bd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    85c2:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    85c7:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    while(n--)
    85ca:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    85cf:	74 08                	je     85d9 <_Z6memsetPvim+0x21>
    {
        *(dst++) = static_cast<unsigned char>(c);
    85d1:	67 88 0c             	mov    %cl,(%si)
    85d4:	10 66 42             	adc    %ah,0x42(%esi)
    while(n--)
    85d7:	eb f1                	jmp    85ca <_Z6memsetPvim+0x12>
    }
    return _dst;
}
    85d9:	66 5d                	pop    %bp
    85db:	66 c3                	retw   

000085dd <_Z6strlenPKc>:
size_t strlen(const char* _str)
{
    85dd:	66 55                	push   %bp
    85df:	66 89 e5             	mov    %sp,%bp
    85e2:	67 66 8b 55 08       	mov    0x8(%di),%dx
    auto str = _str;
    size_t len = 0;
    85e7:	66 31 c0             	xor    %ax,%ax
    while(*(_str++))
    85ea:	67 80 3c 02          	cmpb   $0x2,(%si)
    85ee:	00 74 04 66          	add    %dh,0x66(%esp,%eax,1)
    {
        len++;
    85f2:	40                   	inc    %eax
    while(*(_str++))
    85f3:	eb f5                	jmp    85ea <_Z6strlenPKc+0xd>
    }
    return len;
}
    85f5:	66 5d                	pop    %bp
    85f7:	66 c3                	retw   

000085f9 <_Z6strcpyPcPKc>:
char *strcpy(char* _dst, const char* _src)
{
    85f9:	66 55                	push   %bp
    85fb:	66 89 e5             	mov    %sp,%bp
    85fe:	66 56                	push   %si
    8600:	66 53                	push   %bx
    8602:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8607:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    auto len = strlen(_src);
    860c:	66 51                	push   %cx
    860e:	66 e8 c9 ff          	callw  85db <_Z6memsetPvim+0x23>
    8612:	ff                   	(bad)  
    8613:	ff 66 89             	jmp    *-0x77(%esi)
    8616:	c6                   	(bad)  
    memcpy(reinterpret_cast<void*>(_dst), reinterpret_cast<const void *>(_src), len);
    8617:	67 66 89 04          	mov    %ax,(%si)
    861b:	24 66                	and    $0x66,%al
    861d:	51                   	push   %ecx
    861e:	66 53                	push   %bx
    8620:	66 e8 18 ff          	callw  853c <_Z6memcmpPKvS0_m+0x36>
    8624:	ff                   	(bad)  
    8625:	ff 67 c6             	jmp    *-0x3a(%edi)
    _dst[len] = '\0';
    8628:	04 33                	add    $0x33,%al
    862a:	00 66 89             	add    %ah,-0x77(%esi)
    return _dst;
}
    862d:	d8 67 66             	fsubs  0x66(%edi)
    8630:	8d 65 f8             	lea    -0x8(%ebp),%esp
    8633:	66 5b                	pop    %bx
    8635:	66 5e                	pop    %si
    8637:	66 5d                	pop    %bp
    8639:	66 c3                	retw   

0000863b <_Z6strcmpPKcS0_>:
int strcmp(const char* _s1, const char* _s2)
{
    863b:	66 55                	push   %bp
    863d:	66 89 e5             	mov    %sp,%bp
    8640:	66 57                	push   %di
    8642:	66 56                	push   %si
    8644:	66 53                	push   %bx
    8646:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    864b:	67 66 8b 7d 0c       	mov    0xc(%di),%di
    auto len1 = strlen(_s1);
    8650:	66 51                	push   %cx
    8652:	66 e8 85 ff          	callw  85db <_Z6memsetPvim+0x23>
    8656:	ff                   	(bad)  
    8657:	ff 66 89             	jmp    *-0x77(%esi)
    865a:	c3                   	ret    
    auto len2 = strlen(_s2);
    865b:	67 66 89 3c          	mov    %di,(%si)
    865f:	24 66                	and    $0x66,%al
    8661:	e8 77 ff ff ff       	call   85dd <_Z6strlenPKc>
    8666:	66 5a                	pop    %dx
    8668:	66 89 c6             	mov    %ax,%si
    auto len = len1 < len2 ? len1 : len2;
    auto ret = memcmp(reinterpret_cast<const void*>(_s1), reinterpret_cast<const void *>(_s2), len);
    866b:	66 39 c3             	cmp    %ax,%bx
    866e:	77 03                	ja     8673 <_Z6strcmpPKcS0_+0x38>
    8670:	66 89 d8             	mov    %bx,%ax
    8673:	66 50                	push   %ax
    8675:	66 57                	push   %di
    8677:	66 51                	push   %cx
    8679:	66 e8 87 fe          	callw  8504 <sys_read_disk+0x61>
    867d:	ff                   	(bad)  
    867e:	ff 66 83             	jmp    *-0x7d(%esi)
    8681:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    if(ret == 0)
    8684:	85 c0                	test   %eax,%eax
    8686:	75 11                	jne    8699 <_Z6strcmpPKcS0_+0x5e>
    {
        if(len1 == len2)
    8688:	66 39 f3             	cmp    %si,%bx
    868b:	74 0c                	je     8699 <_Z6strcmpPKcS0_+0x5e>
        {
            return -1;
        }
        else
        {
            return 1;
    868d:	66 39 de             	cmp    %bx,%si
    8690:	66 19 c0             	sbb    %ax,%ax
    8693:	66 83 e0 02          	and    $0x2,%ax
    8697:	66 48                	dec    %ax
        }
    }
    return ret;
}
    8699:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    869e:	66 5b                	pop    %bx
    86a0:	66 5e                	pop    %si
    86a2:	66 5f                	pop    %di
    86a4:	66 5d                	pop    %bp
    86a6:	66 c3                	retw   

000086a8 <_Z7reversePc>:

void reverse(char* buffer)
{
    86a8:	66 55                	push   %bp
    86aa:	66 89 e5             	mov    %sp,%bp
    86ad:	66 56                	push   %si
    86af:	66 53                	push   %bx
    86b1:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    char ch;
    size_t len = strlen(buffer);
    86b6:	66 51                	push   %cx
    86b8:	66 e8 1f ff          	callw  85db <_Z6memsetPvim+0x23>
    86bc:	ff                   	(bad)  
    86bd:	ff 66 5a             	jmp    *0x5a(%esi)
    86c0:	66 89 ca             	mov    %cx,%dx
    86c3:	67 66 8d 0c          	lea    (%si),%cx
    86c7:	01 66 d1             	add    %esp,-0x2f(%esi)
    for(size_t i = 0; i < len / 2; ++i)
    86ca:	e8 67 66 8d 34       	call   348ded36 <_GLOBAL_OFFSET_TABLE_+0x348d3d0a>
    86cf:	10 66 49             	adc    %ah,0x49(%esi)
    86d2:	66 39 f2             	cmp    %si,%dx
    86d5:	74 10                	je     86e7 <_Z7reversePc+0x3f>
    {
        ch = *(buffer + i);
    86d7:	67 8a 1a             	mov    (%bp,%si),%bl
        *(buffer + i) = *(buffer + len - 1 - i);
    86da:	67 8a 01             	mov    (%bx,%di),%al
    86dd:	67 88 02             	mov    %al,(%bp,%si)
        *(buffer + len - 1 - i)  = ch;
    86e0:	67 88 19             	mov    %bl,(%bx,%di)
    86e3:	66 42                	inc    %dx
    for(size_t i = 0; i < len / 2; ++i)
    86e5:	eb e9                	jmp    86d0 <_Z7reversePc+0x28>
    }
}
    86e7:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    86ec:	66 5b                	pop    %bx
    86ee:	66 5e                	pop    %si
    86f0:	66 5d                	pop    %bp
    86f2:	66 c3                	retw   

000086f4 <_Z7isspacei>:
namespace hhlibc {

#endif

int isspace( int ch )
{
    86f4:	66 55                	push   %bp
    86f6:	66 89 e5             	mov    %sp,%bp
    86f9:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return (ch == 9 || ch == 32 || (ch >= 10 && ch <= 13));
    86fe:	67 66 8d 42 f7       	lea    -0x9(%bp,%si),%ax
    8703:	66 83 f8 04          	cmp    $0x4,%ax
    8707:	0f 96 c0             	setbe  %al
    870a:	66 83 fa 20          	cmp    $0x20,%dx
    870e:	0f 94 c2             	sete   %dl
    8711:	66 09 d0             	or     %dx,%ax
    8714:	66 0f b6 c0          	movzbw %al,%ax
}
    8718:	66 5d                	pop    %bp
    871a:	66 c3                	retw   

0000871c <_Z7isalnumi>:

int isalnum(int ch)
{
    871c:	66 55                	push   %bp
    871e:	66 89 e5             	mov    %sp,%bp
    8721:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return ((ch >= 48 && ch <= 57) || (ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122));
    8726:	67 66 8d 4a d0       	lea    -0x30(%bp,%si),%cx
    872b:	b0 01                	mov    $0x1,%al
    872d:	66 83 f9 09          	cmp    $0x9,%cx
    8731:	76 0f                	jbe    8742 <_Z7isalnumi+0x26>
    8733:	66 83 e2 df          	and    $0xffdf,%dx
    8737:	66 83 ea 41          	sub    $0x41,%dx
    873b:	66 83 fa 19          	cmp    $0x19,%dx
    873f:	0f 96 c0             	setbe  %al
    8742:	66 0f b6 c0          	movzbw %al,%ax
}
    8746:	66 5d                	pop    %bp
    8748:	66 c3                	retw   

0000874a <_Z7isdigiti>:

int isdigit(int ch)
{
    874a:	66 55                	push   %bp
    874c:	66 89 e5             	mov    %sp,%bp
    return (ch >= 48 && ch <= 57);
    874f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8754:	66 83 e8 30          	sub    $0x30,%ax
    8758:	66 83 f8 09          	cmp    $0x9,%ax
    875c:	0f 96 c0             	setbe  %al
    875f:	66 0f b6 c0          	movzbw %al,%ax
}
    8763:	66 5d                	pop    %bp
    8765:	66 c3                	retw   
    8767:	90                   	nop

00008768 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0>:
    if(base == 0 && !auto_detected)
    {
        base = 10;
        auto_detected = true;
    }
    auto char_to_digit = [](auto ch){
    8768:	66 55                	push   %bp
    876a:	66 89 e5             	mov    %sp,%bp
    876d:	66 89 c2             	mov    %ax,%dx
        int digit;
        if(ch >= '0' && ch <= '9')
    8770:	66 83 e8 30          	sub    $0x30,%ax
    8774:	3c 09                	cmp    $0x9,%al
    8776:	77 0b                	ja     8783 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x1b>
            digit = ch - '0';
    8778:	66 0f be d2          	movsbw %dl,%dx
    877c:	67 66 8d 42 d0       	lea    -0x30(%bp,%si),%ax
    8781:	eb 2b                	jmp    87ae <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='A' && ch <= 'F')
    8783:	67 66 8d 42 bf       	lea    -0x41(%bp,%si),%ax
    8788:	3c 05                	cmp    $0x5,%al
    878a:	77 0b                	ja     8797 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x2f>
            digit = ch - 'A' + 10;
    878c:	66 0f be d2          	movsbw %dl,%dx
    8790:	67 66 8d 42 c9       	lea    -0x37(%bp,%si),%ax
    8795:	eb 17                	jmp    87ae <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='a' && ch <= 'f')
    8797:	67 66 8d 4a 9f       	lea    -0x61(%bp,%si),%cx
            digit = ch - 'a' + 10;
        else
            digit = -1;
    879c:	66 83 c8 ff          	or     $0xffff,%ax
        else if(ch >='a' && ch <= 'f')
    87a0:	80 f9 05             	cmp    $0x5,%cl
    87a3:	77 09                	ja     87ae <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
            digit = ch - 'a' + 10;
    87a5:	66 0f be d2          	movsbw %dl,%dx
    87a9:	67 66 8d 42 a9       	lea    -0x57(%bp,%si),%ax
        return digit;
    };
    87ae:	66 5d                	pop    %bp
    87b0:	66 c3                	retw   

000087b2 <_Z6strtolPKcPPci>:
{
    87b2:	66 55                	push   %bp
    87b4:	66 89 e5             	mov    %sp,%bp
    87b7:	66 57                	push   %di
    87b9:	66 56                	push   %si
    87bb:	66 53                	push   %bx
    87bd:	66 83 ec 0c          	sub    $0xc,%sp
    87c1:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto start = str;   
    87c6:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    while(isspace(*start))
    87cb:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    87d0:	66 50                	push   %ax
    87d2:	66 e8 1c ff          	callw  86f2 <_Z7reversePc+0x4a>
    87d6:	ff                   	(bad)  
    87d7:	ff 66 5f             	jmp    *0x5f(%esi)
    87da:	66 85 c0             	test   %ax,%ax
    87dd:	74 04                	je     87e3 <_Z6strtolPKcPPci+0x31>
        ++start;
    87df:	66 43                	inc    %bx
    while(isspace(*start))
    87e1:	eb e8                	jmp    87cb <_Z6strtolPKcPPci+0x19>
    size_t len_num = strlen(start);//非白空格数字串长度
    87e3:	66 53                	push   %bx
    87e5:	66 e8 f2 fd          	callw  85db <_Z6memsetPvim+0x23>
    87e9:	ff                   	(bad)  
    87ea:	ff 66 59             	jmp    *0x59(%esi)
    if(len_num == 0)
    87ed:	66 85 c0             	test   %ax,%ax
    87f0:	75 1e                	jne    8810 <_Z6strtolPKcPPci+0x5e>
        return 0;
    87f2:	66 31 c0             	xor    %ax,%ax
        if(str_end) *str_end = const_cast<char*>(str);
    87f5:	67 66 83 7d 0c 00    	cmpw   $0x0,0xc(%di)
    87fb:	0f 84 4d 01 67 66    	je     6667894e <_GLOBAL_OFFSET_TABLE_+0x6666d922>
    8801:	8b 7d 0c             	mov    0xc(%ebp),%edi
    8804:	67 66 8b 75 08       	mov    0x8(%di),%si
    8809:	67 66 89 37          	mov    %si,(%bx)
    880d:	e9 3c 01 67 8a       	jmp    8a67894e <_GLOBAL_OFFSET_TABLE_+0x8a66d922>
    if(*high == '+' || *high == '-')
    8812:	13 80 fa 2b 74 10    	adc    0x10742bfa(%eax),%eax
    8818:	80 fa 2d             	cmp    $0x2d,%dl
    881b:	75 21                	jne    883e <_Z6strtolPKcPPci+0x8c>
        sign = (*high == '+') ? 1 : -1;
    881d:	67 66 c7 45 f0 ff ff 	movw   $0xffff,-0x10(%di)
    8824:	ff                   	(bad)  
    8825:	ff                   	(bad)  
    8826:	eb 09                	jmp    8831 <_Z6strtolPKcPPci+0x7f>
    8828:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    882f:	00 00                	add    %al,(%eax)
        ++high;
    8831:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
        sign_char_bit = 1;
    8836:	66 ba 01 00          	mov    $0x1,%dx
    883a:	00 00                	add    %al,(%eax)
    883c:	eb 0f                	jmp    884d <_Z6strtolPKcPPci+0x9b>
    883e:	66 89 df             	mov    %bx,%di
    size_t sign_char_bit = 0;
    8841:	66 31 d2             	xor    %dx,%dx
    int sign = 1;
    8844:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    884b:	00 00                	add    %al,(%eax)
    if(base == 16 || (base == 0 && !auto_detected))
    884d:	66 f7 c6 ef ff       	test   $0xffef,%si
    8852:	ff                   	(bad)  
    8853:	ff 75 29             	pushl  0x29(%ebp)
        if(len_num > 1 + sign_char_bit && 
    8856:	67 66 8d 4a 01       	lea    0x1(%bp,%si),%cx
    885b:	66 39 c1             	cmp    %ax,%cx
    885e:	73 1f                	jae    887f <_Z6strtolPKcPPci+0xcd>
    8860:	67 80 3f 30          	cmpb   $0x30,(%bx)
    8864:	75 19                	jne    887f <_Z6strtolPKcPPci+0xcd>
           (*(high + 1) == 'x' || *(high + 1) == 'X'))
    8866:	67 8a 4f 01          	mov    0x1(%bx),%cl
    886a:	66 83 e1 df          	and    $0xffdf,%cx
    886e:	80 f9 58             	cmp    $0x58,%cl
    8871:	75 0c                	jne    887f <_Z6strtolPKcPPci+0xcd>
             high += 2;
    8873:	66 83 c7 02          	add    $0x2,%di
             base = 16;
    8877:	66 be 10 00          	mov    $0x10,%si
    887b:	00 00                	add    %al,(%eax)
    887d:	eb 2b                	jmp    88aa <_Z6strtolPKcPPci+0xf8>
    if(base == 8 || (base == 0 && !auto_detected))
    887f:	66 83 fe 08          	cmp    $0x8,%si
    8883:	74 05                	je     888a <_Z6strtolPKcPPci+0xd8>
    8885:	66 85 f6             	test   %si,%si
    8888:	75 20                	jne    88aa <_Z6strtolPKcPPci+0xf8>
        if(len_num > sign_char_bit && *high == 0)   //存在八进制前缀0
    888a:	66 39 c2             	cmp    %ax,%dx
    888d:	73 10                	jae    889f <_Z6strtolPKcPPci+0xed>
    888f:	67 80 3f 00          	cmpb   $0x0,(%bx)
    8893:	75 0a                	jne    889f <_Z6strtolPKcPPci+0xed>
            high += 1;
    8895:	66 47                	inc    %di
            base = 8;
    8897:	66 be 08 00          	mov    $0x8,%si
    889b:	00 00                	add    %al,(%eax)
    889d:	eb 0b                	jmp    88aa <_Z6strtolPKcPPci+0xf8>
    if(base == 0 && !auto_detected)
    889f:	66 85 f6             	test   %si,%si
    88a2:	75 06                	jne    88aa <_Z6strtolPKcPPci+0xf8>
        base = 10;
    88a4:	66 be 0a 00          	mov    $0xa,%si
    88a8:	00 00                	add    %al,(%eax)
    bool has_vaild_char = false;
    88aa:	67 c6 45 ec 00       	movb   $0x0,-0x14(%di)
    auto low = start;   
    //使low指向数字低位后的一个位置
    while(!isspace(*low) &&             //判断是否是白空格
    88af:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    88b4:	66 50                	push   %ax
    88b6:	66 e8 38 fe          	callw  86f2 <_Z7reversePc+0x4a>
    88ba:	ff                   	(bad)  
    88bb:	ff 66 5a             	jmp    *0x5a(%esi)
          (*low != '\0') &&             //判断是否字符串结束
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    88be:	66 85 c0             	test   %ax,%ax
    88c1:	75 28                	jne    88eb <_Z6strtolPKcPPci+0x139>
          (*low != '\0') &&             //判断是否字符串结束
    88c3:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    while(!isspace(*low) &&             //判断是否是白空格
    88c8:	84 c0                	test   %al,%al
    88ca:	74 1f                	je     88eb <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    88cc:	66 e8 96 fe          	callw  8766 <_Z7isdigiti+0x1c>
    88d0:	ff                   	(bad)  
    88d1:	ff 66 83             	jmp    *-0x7d(%esi)
          (*low != '\0') &&             //判断是否字符串结束
    88d4:	f8                   	clc    
    88d5:	ff 0f                	decl   (%edi)
    88d7:	95                   	xchg   %eax,%ebp
    88d8:	c2 66 39             	ret    $0x3966
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    88db:	f0 0f 9c c0          	lock setl %al
    88df:	20 c2                	and    %al,%dl
    88e1:	74 08                	je     88eb <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) < base    //判断是否是该进制
          )
    {
        ++low;
    88e3:	66 43                	inc    %bx
        has_vaild_char = true;
    88e5:	67 88 55 ec          	mov    %dl,-0x14(%di)
    while(!isspace(*low) &&             //判断是否是白空格
    88e9:	eb c4                	jmp    88af <_Z6strtolPKcPPci+0xfd>
    }
    if(!has_vaild_char)
    88eb:	67 80 7d ec 00       	cmpb   $0x0,-0x14(%di)
    88f0:	0f 84 fe fe 67 66    	je     666887f4 <_GLOBAL_OFFSET_TABLE_+0x6667d7c8>
        if (str_end) *str_end = const_cast<char*>(str);
        return 0;
    }
    long power = 1;
    long ret = 0;
    if(str_end) *str_end = const_cast<char*>(low);
    88f6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
    88fa:	74 09                	je     8905 <_Z6strtolPKcPPci+0x153>
    88fc:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8901:	67 66 89 18          	mov    %bx,(%bx,%si)
    for(auto p = low - 1; p >= high; --p)
    8905:	66 4b                	dec    %bx
    long ret = 0;
    8907:	66 31 c9             	xor    %cx,%cx
    long power = 1;
    890a:	66 ba 01 00          	mov    $0x1,%dx
    890e:	00 00                	add    %al,(%eax)
    8910:	67 66 89 55 e8       	mov    %dx,-0x18(%di)
    for(auto p = low - 1; p >= high; --p)
    8915:	66 39 fb             	cmp    %di,%bx
    8918:	72 29                	jb     8943 <_Z6strtolPKcPPci+0x191>
    891a:	67 66 89 4d ec       	mov    %cx,-0x14(%di)
    {
        int digit = char_to_digit(*p);
    891f:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    8924:	66 e8 3e fe          	callw  8766 <_Z7isdigiti+0x1c>
    8928:	ff                   	(bad)  
    8929:	ff 67 66             	jmp    *0x66(%edi)
        ret += power * digit;
    892c:	8b 55 e8             	mov    -0x18(%ebp),%edx
    892f:	66 0f af c2          	imul   %dx,%ax
    8933:	67 66 8b 4d ec       	mov    -0x14(%di),%cx
    8938:	66 01 c1             	add    %ax,%cx
        
        power *= base;
    893b:	66 0f af d6          	imul   %si,%dx
    for(auto p = low - 1; p >= high; --p)
    893f:	66 4b                	dec    %bx
    8941:	eb cd                	jmp    8910 <_Z6strtolPKcPPci+0x15e>
    }
    ret *= sign;
    8943:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8948:	66 0f af c1          	imul   %cx,%ax
    return ret;
}
    894c:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8951:	66 5b                	pop    %bx
    8953:	66 5e                	pop    %si
    8955:	66 5f                	pop    %di
    8957:	66 5d                	pop    %bp
    8959:	66 c3                	retw   

0000895b <_ZL19system_call_putchari>:
    int mask = 0x00FF;
    ret = ret & mask;
    return ret;
}
static inline void system_call_putchar(int ch)
{
    895b:	66 55                	push   %bp
    895d:	66 89 e5             	mov    %sp,%bp
    8960:	66 53                	push   %bx
    8962:	66 89 c2             	mov    %ax,%dx
            "movw %%bx, %%es\n\t"

    :
    :"r"(c)
    :"%eax", "ebx"
    );
    8965:	88 d0                	mov    %dl,%al
    8967:	b4 01                	mov    $0x1,%ah
    8969:	8c d3                	mov    %ss,%ebx
    896b:	8e e3                	mov    %ebx,%fs
    896d:	bb 00 00 8e d3       	mov    $0xd38e0000,%ebx
    8972:	8e db                	mov    %ebx,%ds
    8974:	8e c3                	mov    %ebx,%es
    8976:	cd 98                	int    $0x98
    8978:	8c e3                	mov    %fs,%ebx
    897a:	8e d3                	mov    %ebx,%ss
    897c:	8e db                	mov    %ebx,%ds
    897e:	8e c3                	mov    %ebx,%es
    //TODO
}
    8980:	66 5b                	pop    %bx
    8982:	66 5d                	pop    %bp
    8984:	66 c3                	retw   

00008986 <_Z7putchari>:
namespace hhlibc {

#endif
#ifndef _HHOS_LIBC_TEST
int putchar( int ch )
{
    8986:	66 55                	push   %bp
    8988:	66 89 e5             	mov    %sp,%bp
    898b:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    //sys_get_current_tty()->putchar(ch);
    system_call_putchar(ch);
    8990:	66 89 c8             	mov    %cx,%ax
    8993:	66 e8 c2 ff          	callw  8959 <_Z6strtolPKcPPci+0x1a7>
    8997:	ff                   	(bad)  
    8998:	ff 66 89             	jmp    *-0x77(%esi)
    //sys_tty_putchar(ch);
    return ch;
}
    899b:	c8 66 5d 66          	enter  $0x5d66,$0x66
    899f:	c3                   	ret    

000089a0 <_Z4putsPKc>:

int puts(const char* string)
{
    89a0:	66 55                	push   %bp
    89a2:	66 89 e5             	mov    %sp,%bp
    89a5:	66 53                	push   %bx
    89a7:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    auto len = strlen(string);
    89ac:	66 53                	push   %bx
    89ae:	66 e8 29 fc          	callw  85db <_Z6memsetPvim+0x23>
    89b2:	ff                   	(bad)  
    89b3:	ff 66 89             	jmp    *-0x77(%esi)
    89b6:	d9 67 66             	fldenv 0x66(%edi)
    89b9:	8d 1c 03             	lea    (%ebx,%eax,1),%ebx
    89bc:	66 58                	pop    %ax
    for(size_t i = 0; i < len; ++i)
    89be:	66 39 d9             	cmp    %bx,%cx
    89c1:	74 0f                	je     89d2 <_Z4putsPKc+0x32>
    {
        putchar(*(string + i));
    89c3:	67 66 0f be 01       	movsbw (%bx,%di),%ax
    system_call_putchar(ch);
    89c8:	66 e8 8d ff          	callw  8959 <_Z6strtolPKcPPci+0x1a7>
    89cc:	ff                   	(bad)  
    89cd:	ff 66 41             	jmp    *0x41(%esi)
    for(size_t i = 0; i < len; ++i)
    89d0:	eb ec                	jmp    89be <_Z4putsPKc+0x1e>
    }
    return 0;
}
    89d2:	66 31 c0             	xor    %ax,%ax
    89d5:	67 66 8b 5d fc       	mov    -0x4(%di),%bx
    89da:	66 c9                	leavew 
    89dc:	66 c3                	retw   

000089de <_Z7getcharv>:
#endif


#ifndef _HHOS_LIBC_TEST
int getchar(void)
{
    89de:	66 55                	push   %bp
    89e0:	66 89 e5             	mov    %sp,%bp
    );
    89e3:	b4 00                	mov    $0x0,%ah
    89e5:	cd 98                	int    $0x98
    89e7:	66 89 c2             	mov    %ax,%dx
    ret = ret & mask;
    89ea:	66 0f b6 c2          	movzbw %dl,%ax
    return system_call_getchar();
}
    89ee:	66 5d                	pop    %bp
    89f0:	66 c3                	retw   

000089f2 <_Z4getsPc>:
char *gets( char *str )
{
    89f2:	66 55                	push   %bp
    89f4:	66 89 e5             	mov    %sp,%bp
    89f7:	66 53                	push   %bx
    89f9:	66 51                	push   %cx
    89fb:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    );
    8a00:	b4 00                	mov    $0x0,%ah
    8a02:	cd 98                	int    $0x98
    8a04:	66 89 c3             	mov    %ax,%bx
    int cnt = 0;
    char ch;
    while(true)
    {
        ch = getchar();
        if (ch == '\b')
    8a07:	80 fb 08             	cmp    $0x8,%bl
    8a0a:	74 f4                	je     8a00 <_Z4getsPc+0xe>
        {
            if (cnt > 0)
                putchar(ch);
            continue;
        }
        putchar(ch);
    8a0c:	66 0f be c3          	movsbw %bl,%ax
    8a10:	67 88 5d fb          	mov    %bl,-0x5(%di)
    system_call_putchar(ch);
    8a14:	66 e8 41 ff          	callw  8959 <_Z6strtolPKcPPci+0x1a7>
    8a18:	ff                   	(bad)  
    8a19:	ff 67 8a             	jmp    *-0x76(%edi)
        if(ch == 13) {
    8a1c:	55                   	push   %ebp
    8a1d:	fb                   	sti    
    8a1e:	80 fa 0d             	cmp    $0xd,%dl
    8a21:	74 08                	je     8a2b <_Z4getsPc+0x39>
            putchar('\n');
            break;
        }
        *(str++) = ch;
    8a23:	66 41                	inc    %cx
    8a25:	67 88 59 ff          	mov    %bl,-0x1(%bx,%di)
    8a29:	eb d5                	jmp    8a00 <_Z4getsPc+0xe>
    system_call_putchar(ch);
    8a2b:	66 b8 0a 00          	mov    $0xa,%ax
    8a2f:	00 00                	add    %al,(%eax)
    8a31:	66 e8 24 ff          	callw  8959 <_Z6strtolPKcPPci+0x1a7>
    8a35:	ff                   	(bad)  
    8a36:	ff 67 c6             	jmp    *-0x3a(%edi)
    }
    *str = '\0';
    8a39:	01 00                	add    %eax,(%eax)
    return str;
}
    8a3b:	66 89 c8             	mov    %cx,%ax
    8a3e:	66 5a                	pop    %dx
    8a40:	66 5b                	pop    %bx
    8a42:	66 5d                	pop    %bp
    8a44:	66 c3                	retw   

00008a46 <_Z7vsscanfPKcS0_Pc>:
#endif

int vsscanf( const char* buffer, const char* format, va_list vlist )
{
    8a46:	66 55                	push   %bp
    8a48:	66 89 e5             	mov    %sp,%bp
    8a4b:	66 57                	push   %di
    8a4d:	66 56                	push   %si
    8a4f:	66 53                	push   %bx
    8a51:	66 83 ec 14          	sub    $0x14,%sp
    8a55:	67 66 8b 75 08       	mov    0x8(%di),%si
    8a5a:	67 66 8b 7d 10       	mov    0x10(%di),%di
    auto len_fmt = strlen(format);
    8a5f:	67 66 ff 75 0c       	pushw  0xc(%di)
    8a64:	66 e8 73 fb          	callw  85db <_Z6memsetPvim+0x23>
    8a68:	ff                   	(bad)  
    8a69:	ff 67 66             	jmp    *0x66(%edi)
    8a6c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    8a6f:	66 59                	pop    %cx
    auto p_fmt = format; 
    8a71:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8a76:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    auto p_buf = buffer;
    bool error = false;
    int ret = 0;
    8a7b:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    8a82:	00 00                	add    %al,(%eax)
    bool error = false;
    8a84:	67 c6 45 e7 00       	movb   $0x0,-0x19(%di)
    while(static_cast<size_t>(p_fmt - format) < len_fmt)
    8a89:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    8a8e:	67 66 2b 45 0c       	sub    0xc(%di),%ax
    8a93:	67 66 3b 45 e0       	cmp    -0x20(%di),%ax
    8a98:	0f 93 c0             	setae  %al
    {
        if(error) break;
    8a9b:	67 08 45 e7          	or     %al,-0x19(%di)
    8a9f:	0f 85 50 01 67 66    	jne    66678bf5 <_GLOBAL_OFFSET_TABLE_+0x6666dbc9>
        if(isspace(*p_fmt)) //略过白空格
    8aa5:	8b 45 e8             	mov    -0x18(%ebp),%eax
    8aa8:	67 66 0f be 00       	movsbw (%bx,%si),%ax
    8aad:	66 50                	push   %ax
    8aaf:	66 e8 3f fc          	callw  86f2 <_Z7reversePc+0x4a>
    8ab3:	ff                   	(bad)  
    8ab4:	ff 66 5a             	jmp    *0x5a(%esi)
    8ab7:	66 85 c0             	test   %ax,%ax
    8aba:	74 1d                	je     8ad9 <_Z7vsscanfPKcS0_Pc+0x93>
        {
            p_fmt++;
    8abc:	67 66 ff 45 e8       	incw   -0x18(%di)
            while(isspace(*buffer)) buffer++;
    8ac1:	67 66 0f be 06 66 50 	movsbw 0x5066,%ax
    8ac8:	66 e8 26 fc          	callw  86f2 <_Z7reversePc+0x4a>
    8acc:	ff                   	(bad)  
    8acd:	ff 66 5b             	jmp    *0x5b(%esi)
    8ad0:	66 85 c0             	test   %ax,%ax
    8ad3:	74 b4                	je     8a89 <_Z7vsscanfPKcS0_Pc+0x43>
    8ad5:	66 46                	inc    %si
    8ad7:	eb e8                	jmp    8ac1 <_Z7vsscanfPKcS0_Pc+0x7b>
            continue;
        }
        else if(*p_fmt == '%') //格式控制符
    8ad9:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    8ade:	67 80 38 25          	cmpb   $0x25,(%bx,%si)
    8ae2:	75 a5                	jne    8a89 <_Z7vsscanfPKcS0_Pc+0x43>
        {
            p_fmt++;
            char specifier = *p_fmt;
    8ae4:	67 8a 40 01          	mov    0x1(%bx,%si),%al
            p_fmt++;
    8ae8:	67 66 83 45 e8 02    	addw   $0x2,-0x18(%di)
            switch(specifier)
    8aee:	3c 69                	cmp    $0x69,%al
    8af0:	0f 84 b0 00 7f 25    	je     257f8ba6 <_GLOBAL_OFFSET_TABLE_+0x257edb7a>
    8af6:	3c 58                	cmp    $0x58,%al
    8af8:	0f 84 c4 00 7f 10    	je     107f8bc2 <_GLOBAL_OFFSET_TABLE_+0x107edb96>
    8afe:	3c 25                	cmp    $0x25,%al
    8b00:	75 87                	jne    8a89 <_Z7vsscanfPKcS0_Pc+0x43>
            {
                case '%':
                {
                    if(*buffer == '%') 
    8b02:	67 80 3e 25 67 0f    	cmpb   $0xf,0x6725
    8b08:	95                   	xchg   %eax,%ebp
    8b09:	45                   	inc    %ebp
    8b0a:	e7 e9                	out    %eax,$0xe9
    8b0c:	7b ff                	jnp    8b0d <_Z7vsscanfPKcS0_Pc+0xc7>
            switch(specifier)
    8b0e:	3c 63                	cmp    $0x63,%al
    8b10:	74 31                	je     8b43 <_Z7vsscanfPKcS0_Pc+0xfd>
    8b12:	3c 64                	cmp    $0x64,%al
    8b14:	0f 84 9a 00 e9 6e    	je     6ee98bb4 <_GLOBAL_OFFSET_TABLE_+0x6ee8db88>
    8b1a:	ff                   	(bad)  
    8b1b:	3c 73                	cmp    $0x73,%al
    8b1d:	74 4d                	je     8b6c <_Z7vsscanfPKcS0_Pc+0x126>
    8b1f:	7f 15                	jg     8b36 <_Z7vsscanfPKcS0_Pc+0xf0>
    8b21:	3c 6f                	cmp    $0x6f,%al
    8b23:	0f 85 62 ff 67 66    	jne    66688a8b <_GLOBAL_OFFSET_TABLE_+0x6667da5f>
                    ++ret;
                    break;
                }
                case 'o':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8b29:	8d 5f 04             	lea    0x4(%edi),%ebx
    8b2c:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 8);
    8b30:	66 6a 08             	pushw  $0x8
    8b33:	e9 96 00 3c 75       	jmp    753c8bce <_GLOBAL_OFFSET_TABLE_+0x753bdba2>
            switch(specifier)
    8b38:	74 78                	je     8bb2 <_Z7vsscanfPKcS0_Pc+0x16c>
    8b3a:	3c 78                	cmp    $0x78,%al
    8b3c:	0f 84 80 00 e9 46    	je     46e98bc2 <_GLOBAL_OFFSET_TABLE_+0x46e8db96>
    8b42:	ff 67 66             	jmp    *0x66(%edi)
                    char* p = va_arg(vlist, char*);
    8b45:	8b 17                	mov    (%edi),%edx
                    *p = *buffer;
    8b47:	67 8a 06 67 88       	mov    -0x7799,%al
    8b4c:	02 66 46             	add    0x46(%esi),%ah
                    ++ret;
    8b4f:	67 66 ff 45 ec       	incw   -0x14(%di)
                    char* p = va_arg(vlist, char*);
    8b54:	66 83 c7 04          	add    $0x4,%di
                    break;
    8b58:	e9 2e ff 66 50       	jmp    50678a8b <_GLOBAL_OFFSET_TABLE_+0x5066da5f>
                    while (*buffer && isspace(*buffer)) buffer++;
    8b5d:	66 e8 91 fb          	callw  86f2 <_Z7reversePc+0x4a>
    8b61:	ff                   	(bad)  
    8b62:	ff 66 59             	jmp    *0x59(%esi)
    8b65:	66 85 c0             	test   %ax,%ax
    8b68:	74 0b                	je     8b75 <_Z7vsscanfPKcS0_Pc+0x12f>
    8b6a:	66 46                	inc    %si
    8b6c:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    8b73:	75 e6                	jne    8b5b <_Z7vsscanfPKcS0_Pc+0x115>
                    char* p = va_arg(vlist, char*);
    8b75:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8b7a:	67 66 8b 3f          	mov    (%bx),%di
                    while(*buffer && !isspace(*buffer))
    8b7e:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    8b85:	75 0b                	jne    8b92 <_Z7vsscanfPKcS0_Pc+0x14c>
                    *p = '\0';
    8b87:	67 c6 07 00          	movb   $0x0,(%bx)
                    ++ret;
    8b8b:	67 66 ff 45 ec       	incw   -0x14(%di)
    8b90:	eb 5b                	jmp    8bed <_Z7vsscanfPKcS0_Pc+0x1a7>
                    while(*buffer && !isspace(*buffer))
    8b92:	66 50                	push   %ax
    8b94:	66 e8 5a fb          	callw  86f2 <_Z7reversePc+0x4a>
    8b98:	ff                   	(bad)  
    8b99:	ff 66 5a             	jmp    *0x5a(%esi)
    8b9c:	66 85 c0             	test   %ax,%ax
    8b9f:	75 e6                	jne    8b87 <_Z7vsscanfPKcS0_Pc+0x141>
                        *(p++) = *(buffer++);
    8ba1:	a4                   	movsb  %ds:(%esi),%es:(%edi)
                    while(*buffer && !isspace(*buffer))
    8ba2:	eb da                	jmp    8b7e <_Z7vsscanfPKcS0_Pc+0x138>
                    int* p = va_arg(vlist, int*);
    8ba4:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8ba9:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 0);
    8bad:	66 6a 00             	pushw  $0x0
    8bb0:	eb 1a                	jmp    8bcc <_Z7vsscanfPKcS0_Pc+0x186>
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8bb2:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8bb7:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 10);
    8bbb:	66 6a 0a             	pushw  $0xa
    8bbe:	eb 0c                	jmp    8bcc <_Z7vsscanfPKcS0_Pc+0x186>
                    break;
                }
                case 'x':
                case 'X':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8bc0:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8bc5:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 16);
    8bc9:	66 6a 10             	pushw  $0x10
    8bcc:	67 66 8d 45 f0       	lea    -0x10(%di),%ax
    8bd1:	66 50                	push   %ax
    8bd3:	66 56                	push   %si
    8bd5:	66 e8 d7 fb          	callw  87b0 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    8bd9:	ff                   	(bad)  
    8bda:	ff 67 66             	jmp    *0x66(%edi)
                    *p = static_cast<unsigned int>(num);
    8bdd:	89 07                	mov    %eax,(%edi)
                    buffer = end;
    8bdf:	67 66 8b 75 f0       	mov    -0x10(%di),%si
                    ++ret;
    8be4:	67 66 ff 45 ec       	incw   -0x14(%di)
    8be9:	66 83 c4 0c          	add    $0xc,%sp
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8bed:	66 89 df             	mov    %bx,%di
    8bf0:	e9 96 fe 67 66       	jmp    66688a8b <_GLOBAL_OFFSET_TABLE_+0x6667da5f>
                    break;
            }
        }
    }
    return ret;
}
    8bf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
    8bf8:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8bfd:	66 5b                	pop    %bx
    8bff:	66 5e                	pop    %si
    8c01:	66 5f                	pop    %di
    8c03:	66 5d                	pop    %bp
    8c05:	66 c3                	retw   

00008c07 <_Z6sscanfPKcS0_z>:
int sscanf( const char* buffer, const char* format, ... )
{
    8c07:	66 55                	push   %bp
    8c09:	66 89 e5             	mov    %sp,%bp
   	int ret;
	va_list va;
	va_start(va, format);
    8c0c:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsscanf(buffer, format, va);
    8c11:	66 50                	push   %ax
    8c13:	67 66 ff 75 0c       	pushw  0xc(%di)
    8c18:	67 66 ff 75 08       	pushw  0x8(%di)
    8c1d:	66 e8 23 fe          	callw  8a44 <_Z4getsPc+0x52>
    8c21:	ff                   	(bad)  
    8c22:	ff 66 c9             	jmp    *-0x37(%esi)
	va_end(va);
    return ret; 
}
    8c25:	66 c3                	retw   

00008c27 <_Z5scanfPKcz>:
#ifndef _HHOS_LIBC_TEST
static char scanfbuf[80*25];
//TODO 关于这个返回值
int scanf( const char* format, ... )
{
    8c27:	66 55                	push   %bp
    8c29:	66 89 e5             	mov    %sp,%bp
    if (!gets(scanfbuf)) return EOF;
    8c2c:	66 68 00 9f          	pushw  $0x9f00
    8c30:	00 00                	add    %al,(%eax)
    8c32:	66 e8 ba fd          	callw  89f0 <_Z7getcharv+0x12>
    8c36:	ff                   	(bad)  
    8c37:	ff 66 89             	jmp    *-0x77(%esi)
    8c3a:	c2 66 58             	ret    $0x5866
    8c3d:	66 83 c8 ff          	or     $0xffff,%ax
    8c41:	66 85 d2             	test   %dx,%dx
    8c44:	74 1c                	je     8c62 <_Z5scanfPKcz+0x3b>
	int ret;
	va_list va;
	va_start(va, format);
    8c46:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsscanf(scanfbuf, format, va);
    8c4b:	66 50                	push   %ax
    8c4d:	67 66 ff 75 08       	pushw  0x8(%di)
    8c52:	66 68 00 9f          	pushw  $0x9f00
    8c56:	00 00                	add    %al,(%eax)
    8c58:	66 e8 e8 fd          	callw  8a44 <_Z4getsPc+0x52>
    8c5c:	ff                   	(bad)  
    8c5d:	ff 66 83             	jmp    *-0x7d(%esi)
	va_end(va);
    return ret;
    8c60:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    8c63:	c9                   	leave  
    8c64:	66 c3                	retw   

00008c66 <_Z8vsprintfPcPKcS_>:
{
    8c66:	66 55                	push   %bp
    8c68:	66 89 e5             	mov    %sp,%bp
    8c6b:	66 57                	push   %di
    8c6d:	66 56                	push   %si
    8c6f:	66 53                	push   %bx
    8c71:	66 83 ec 0c          	sub    $0xc,%sp
    8c75:	67 66 8b 75 0c       	mov    0xc(%di),%si
    8c7a:	67 66 8b 55 10       	mov    0x10(%di),%dx
    8c7f:	67 66 89 55 f0       	mov    %dx,-0x10(%di)
    auto len_fmt = strlen(format);
    8c84:	66 56                	push   %si
    8c86:	66 e8 51 f9          	callw  85db <_Z6memsetPvim+0x23>
    8c8a:	ff                   	(bad)  
    8c8b:	ff 67 66             	jmp    *0x66(%edi)
    8c8e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    8c91:	66 58                	pop    %ax
    auto p_buf = buffer;
    8c93:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8c98:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    while(len_fmt--)
    8c9d:	67 66 ff 4d ec       	decw   -0x14(%di)
    8ca2:	67 66 83 7d ec ff    	cmpw   $0xffff,-0x14(%di)
    8ca8:	0f 84 4a 01 67 8a    	je     8a678df8 <_GLOBAL_OFFSET_TABLE_+0x8a66ddcc>
        if(*p_fmt != '%')
    8cae:	06                   	push   %es
    8caf:	3c 25                	cmp    $0x25,%al
    8cb1:	74 07                	je     8cba <_Z8vsprintfPcPKcS_+0x54>
            *(p_buf++) = *(p_fmt++);    //非控制字符
    8cb3:	66 46                	inc    %si
    8cb5:	67 88 03             	mov    %al,(%bp,%di)
    8cb8:	eb 5f                	jmp    8d19 <_Z8vsprintfPcPKcS_+0xb3>
            char specifier = *(++p_fmt); //%后面一个字符是specifier
    8cba:	67 8a 46 01          	mov    0x1(%bp),%al
            ++p_fmt;                     //记录specifier并跳过
    8cbe:	66 83 c6 02          	add    $0x2,%si
            switch (specifier)
    8cc2:	3c 69                	cmp    $0x69,%al
    8cc4:	0f 84 81 00 7f 17    	je     177f8d4b <_GLOBAL_OFFSET_TABLE_+0x177edd1f>
    8cca:	3c 63                	cmp    $0x63,%al
    8ccc:	74 40                	je     8d0e <_Z8vsprintfPcPKcS_+0xa8>
    8cce:	3c 64                	cmp    $0x64,%al
    8cd0:	74 77                	je     8d49 <_Z8vsprintfPcPKcS_+0xe3>
    8cd2:	3c 58                	cmp    $0x58,%al
    8cd4:	75 c7                	jne    8c9d <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8cd6:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16, true);
    8cdb:	66 6a 01             	pushw  $0x1
    8cde:	e9 e2 00 3c 73       	jmp    733c8dc5 <_GLOBAL_OFFSET_TABLE_+0x733bdd99>
            switch (specifier)
    8ce3:	74 38                	je     8d1d <_Z8vsprintfPcPKcS_+0xb7>
    8ce5:	7f 12                	jg     8cf9 <_Z8vsprintfPcPKcS_+0x93>
    8ce7:	3c 6f                	cmp    $0x6f,%al
    8ce9:	75 b2                	jne    8c9d <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8ceb:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 8);
    8cf0:	66 6a 00             	pushw  $0x0
    8cf3:	66 6a 08             	pushw  $0x8
    8cf6:	e9 da 00 3c 75       	jmp    753c8dd5 <_GLOBAL_OFFSET_TABLE_+0x753bdda9>
            switch (specifier)
    8cfb:	0f 84 c9 00 3c 78    	je     783c8dca <_GLOBAL_OFFSET_TABLE_+0x783bdd9e>
    8d01:	75 9a                	jne    8c9d <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8d03:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16);
    8d08:	66 6a 00             	pushw  $0x0
    8d0b:	e9 b5 00 67 66       	jmp    66678dc5 <_GLOBAL_OFFSET_TABLE_+0x6666dd99>
                    *(p_buf++) = va_arg(vlist, int); 
    8d10:	8b 02                	mov    (%edx),%eax
    8d12:	67 88 03             	mov    %al,(%bp,%di)
    8d15:	66 83 c2 04          	add    $0x4,%dx
    8d19:	66 43                	inc    %bx
                    break;
    8d1b:	eb 80                	jmp    8c9d <_Z8vsprintfPcPKcS_+0x37>
                    const char * str = va_arg(vlist, char*);
    8d1d:	67 66 8d 42 04       	lea    0x4(%bp,%si),%ax
    8d22:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8d27:	67 66 8b 3a          	mov    (%bp,%si),%di
                    strcpy(p_buf, str);
    8d2b:	66 57                	push   %di
    8d2d:	66 53                	push   %bx
    8d2f:	66 e8 c4 f8          	callw  85f7 <_Z6strlenPKc+0x1a>
    8d33:	ff                   	(bad)  
    8d34:	ff 66 59             	jmp    *0x59(%esi)
                    p_buf += strlen(str);               //p应当永远指向有意义的字符后面一位
    8d37:	66 58                	pop    %ax
    8d39:	66 57                	push   %di
    8d3b:	66 e8 9c f8          	callw  85db <_Z6memsetPvim+0x23>
    8d3f:	ff                   	(bad)  
    8d40:	ff 66 01             	jmp    *0x1(%esi)
    8d43:	c3                   	ret    
                    break;
    8d44:	66 58                	pop    %ax
    8d46:	e9 4f ff 67 66       	jmp    66688c9a <_GLOBAL_OFFSET_TABLE_+0x6667dc6e>
                    int num = va_arg(vlist, int);
    8d4b:	8d 42 04             	lea    0x4(%edx),%eax
    8d4e:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    8d53:	67 66 8b 02          	mov    (%bp,%si),%ax
template<typename T>
void itoa(char* buffer, T num, int base, bool captial = false)
{
    const char* num_char_upper = "0123456789ABCDEF";
    const char* num_char_lower = "0123456789abcdef";
    if(num < 0)
    8d57:	66 89 df             	mov    %bx,%di
    8d5a:	66 85 c0             	test   %ax,%ax
    8d5d:	79 0c                	jns    8d6b <_Z8vsprintfPcPKcS_+0x105>
    8d5f:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
    {
        *(buffer++) = '-';
    8d64:	67 c6 03 2d          	movb   $0x2d,(%bp,%di)
        num = -num;
    8d68:	66 f7 d8             	neg    %ax
    }
    char *p = buffer;
    8d6b:	67 66 89 7d f0       	mov    %di,-0x10(%di)
    int mod = 0;
    while(true)
    {
        mod = num % base;
        num /= base;
    8d70:	66 b9 0a 00          	mov    $0xa,%cx
    8d74:	00 00                	add    %al,(%eax)
    8d76:	66 99                	cwtd   
    8d78:	66 f7 f9             	idiv   %cx
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    8d7b:	67 66 8b 4d f0       	mov    -0x10(%di),%cx
    8d80:	66 41                	inc    %cx
    8d82:	67 8a 92 19 b0       	mov    -0x4fe7(%bp,%si),%dl
    8d87:	00 00                	add    %al,(%eax)
    8d89:	67 88 51 ff          	mov    %dl,-0x1(%bx,%di)
        if(num == 0) break;
    8d8d:	66 85 c0             	test   %ax,%ax
    8d90:	74 07                	je     8d99 <_Z8vsprintfPcPKcS_+0x133>
    8d92:	67 66 89 4d f0       	mov    %cx,-0x10(%di)
    8d97:	eb d7                	jmp    8d70 <_Z8vsprintfPcPKcS_+0x10a>
    }
    *p = '\0';
    8d99:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8d9e:	67 c6 40 01 00       	movb   $0x0,0x1(%bx,%si)
    reverse(buffer);
    8da3:	66 57                	push   %di
    8da5:	66 e8 fd f8          	callw  86a6 <_Z6strcmpPKcS0_+0x6b>
    8da9:	ff                   	(bad)  
    8daa:	ff 67 66             	jmp    *0x66(%edi)
                    p_buf += strlen(p_buf);             //同理
    8dad:	89 1c 24             	mov    %ebx,(%esp)
    8db0:	66 e8 27 f8          	callw  85db <_Z6memsetPvim+0x23>
    8db4:	ff                   	(bad)  
    8db5:	ff 66 01             	jmp    *0x1(%esi)
    8db8:	c3                   	ret    
                    break;
    8db9:	66 5a                	pop    %dx
                    int num = va_arg(vlist, int);
    8dbb:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
                    break;
    8dc0:	e9 da fe 66 6a       	jmp    6a678c9f <_GLOBAL_OFFSET_TABLE_+0x6a66dc73>
                    itoa(p_buf, num, 16, true);
    8dc5:	10 eb                	adc    %ch,%bl
    8dc7:	0b 67 66             	or     0x66(%edi),%esp
                    unsigned int num = va_arg(vlist, int);
    8dca:	8d 7a 04             	lea    0x4(%edx),%edi
                    itoa(p_buf, num, 10);
    8dcd:	66 6a 00             	pushw  $0x0
    8dd0:	66 6a 0a             	pushw  $0xa
    8dd3:	67 66 ff 32          	pushw  (%bp,%si)
    8dd7:	66 53                	push   %bx
    8dd9:	66 e8 9f 09          	callw  977c <_ZN2sh3runEv+0x372>
    8ddd:	00 00                	add    %al,(%eax)
                    p_buf += strlen(p_buf);             //同理
    8ddf:	66 83 c4 10          	add    $0x10,%sp
    8de3:	66 53                	push   %bx
    8de5:	66 e8 f2 f7          	callw  85db <_Z6memsetPvim+0x23>
    8de9:	ff                   	(bad)  
    8dea:	ff 66 01             	jmp    *0x1(%esi)
    8ded:	c3                   	ret    
                    break;
    8dee:	66 58                	pop    %ax
                    unsigned int num = va_arg(vlist, int);
    8df0:	66 89 fa             	mov    %di,%dx
                    break;
    8df3:	e9 a7 fe 67 c6       	jmp    c6688c9f <_GLOBAL_OFFSET_TABLE_+0xc667dc73>
    *p_buf = '\0';
    8df8:	03 00                	add    (%eax),%eax
    return p_buf - buffer;
    8dfa:	66 89 d8             	mov    %bx,%ax
    8dfd:	67 66 2b 45 08       	sub    0x8(%di),%ax
}
    8e02:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8e07:	66 5b                	pop    %bx
    8e09:	66 5e                	pop    %si
    8e0b:	66 5f                	pop    %di
    8e0d:	66 5d                	pop    %bp
    8e0f:	66 c3                	retw   

00008e11 <_Z7sprintfPcPKcz>:
{
    8e11:	66 55                	push   %bp
    8e13:	66 89 e5             	mov    %sp,%bp
	va_start(va, format);
    8e16:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsprintf(buffer, format, va);
    8e1b:	66 50                	push   %ax
    8e1d:	67 66 ff 75 0c       	pushw  0xc(%di)
    8e22:	67 66 ff 75 08       	pushw  0x8(%di)
    8e27:	66 e8 39 fe          	callw  8c64 <_Z5scanfPKcz+0x3d>
    8e2b:	ff                   	(bad)  
    8e2c:	ff 66 c9             	jmp    *-0x37(%esi)
}
    8e2f:	66 c3                	retw   

00008e31 <_Z6printfPKcz>:
{
    8e31:	66 55                	push   %bp
    8e33:	66 89 e5             	mov    %sp,%bp
    8e36:	66 53                	push   %bx
	va_start(va, format);
    8e38:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsprintf(printbuf, format, va);
    8e3d:	66 50                	push   %ax
    8e3f:	67 66 ff 75 08       	pushw  0x8(%di)
    8e44:	66 68 e0 a6          	pushw  $0xa6e0
    8e48:	00 00                	add    %al,(%eax)
    8e4a:	66 e8 16 fe          	callw  8c64 <_Z5scanfPKcz+0x3d>
    8e4e:	ff                   	(bad)  
    8e4f:	ff 66 89             	jmp    *-0x77(%esi)
    8e52:	c3                   	ret    
    puts(printbuf);
    8e53:	66 83 c4 0c          	add    $0xc,%sp
    8e57:	66 68 e0 a6          	pushw  $0xa6e0
    8e5b:	00 00                	add    %al,(%eax)
    8e5d:	66 e8 3d fb          	callw  899e <_Z7putchari+0x18>
    8e61:	ff                   	(bad)  
    8e62:	ff 66 89             	jmp    *-0x77(%esi)
}
    8e65:	d8 67 66             	fsubs  0x66(%edi)
    8e68:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    8e6b:	66 c9                	leavew 
    8e6d:	66 c3                	retw   

Disassembly of section .text._ZN2sh2bfEPKcS1_.isra.4:

00008e70 <_ZN2sh2bfEPKcS1_.isra.4>:
    int bf(const char* Pattern, const char * Text) {
    8e70:	66 55                	push   %bp
    8e72:	66 89 e5             	mov    %sp,%bp
    8e75:	66 57                	push   %di
    8e77:	66 56                	push   %si
    8e79:	66 53                	push   %bx
    8e7b:	66 51                	push   %cx
    8e7d:	66 89 c3             	mov    %ax,%bx
    8e80:	66 89 d7             	mov    %dx,%di
        ss_t m = strlen(Pattern);
    8e83:	66 50                	push   %ax
    8e85:	66 e8 52 f7          	callw  85db <_Z6memsetPvim+0x23>
    8e89:	ff                   	(bad)  
    8e8a:	ff 66 89             	jmp    *-0x77(%esi)
    8e8d:	c6                   	(bad)  
        ss_t n = strlen(Text);
    8e8e:	67 66 89 3c          	mov    %di,(%si)
    8e92:	24 66                	and    $0x66,%al
    8e94:	e8 44 f7 ff ff       	call   85dd <_Z6strlenPKc>
    8e99:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8e9e:	66 58                	pop    %ax
        ss_t i = 0, k = 0;
    8ea0:	66 31 d2             	xor    %dx,%dx
    8ea3:	66 31 c9             	xor    %cx,%cx
        while(k < m && i < n) {
    8ea6:	66 39 d6             	cmp    %dx,%si
    8ea9:	7e 21                	jle    8ecc <_ZN2sh2bfEPKcS1_.isra.4+0x5c>
    8eab:	67 66 39 4d f0       	cmp    %cx,-0x10(%di)
    8eb0:	7e 22                	jle    8ed4 <_ZN2sh2bfEPKcS1_.isra.4+0x64>
            if(Pattern[k] == Text[i]) {
    8eb2:	67 8a 04             	mov    (%si),%al
    8eb5:	0f 67 38             	packuswb (%eax),%mm7
    8eb8:	04 13                	add    $0x13,%al
    8eba:	75 06                	jne    8ec2 <_ZN2sh2bfEPKcS1_.isra.4+0x52>
                ++k;
    8ebc:	66 42                	inc    %dx
                ++i;
    8ebe:	66 41                	inc    %cx
    8ec0:	eb e4                	jmp    8ea6 <_ZN2sh2bfEPKcS1_.isra.4+0x36>
                i = i - k + 1;
    8ec2:	66 29 d1             	sub    %dx,%cx
    8ec5:	66 41                	inc    %cx
                k = 0;
    8ec7:	66 31 d2             	xor    %dx,%dx
    8eca:	eb da                	jmp    8ea6 <_ZN2sh2bfEPKcS1_.isra.4+0x36>
            return i - k;
    8ecc:	66 89 c8             	mov    %cx,%ax
    8ecf:	66 29 d0             	sub    %dx,%ax
    8ed2:	eb 04                	jmp    8ed8 <_ZN2sh2bfEPKcS1_.isra.4+0x68>
        return -1;
    8ed4:	66 83 c8 ff          	or     $0xffff,%ax
    }
    8ed8:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8edd:	66 5b                	pop    %bx
    8edf:	66 5e                	pop    %si
    8ee1:	66 5f                	pop    %di
    8ee3:	66 5d                	pop    %bp
    8ee5:	66 c3                	retw   

Disassembly of section .text._ZN3tty8tty_initEv:

00008ee8 <_ZN3tty8tty_initEv>:
    void tty_init()
    8ee8:	66 55                	push   %bp
    8eea:	66 89 e5             	mov    %sp,%bp
    8eed:	66 53                	push   %bx
    8eef:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        cur_x = 0;
    8ef4:	67 66 c7 03 00 00    	movw   $0x0,(%bp,%di)
    8efa:	00 00                	add    %al,(%eax)
        cur_y = 0;
    8efc:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    8f03:	00 00                	add    %al,(%eax)
        move_cursor(0, 0);
    8f05:	66 31 d2             	xor    %dx,%dx
    8f08:	66 31 c0             	xor    %ax,%ax
    8f0b:	66 e8 f3 f0          	callw  8002 <_ZL8print_okPc+0x50>
    8f0f:	ff                   	(bad)  
    8f10:	ff 67 66             	jmp    *0x66(%edi)
        color = MAKE_COLOR(VGA_BLACK, VGA_WHITE);
    8f13:	c7 43 08 07 00 00 00 	movl   $0x7,0x8(%ebx)
    }
    8f1a:	66 5b                	pop    %bx
    8f1c:	66 5d                	pop    %bp
    8f1e:	66 c3                	retw   

Disassembly of section .text._ZN3tty7putcharEi:

00008f20 <_ZN3tty7putcharEi>:
        tty_mem[y + 80 * x] = c;
        tty_mem[y + 80 * x + 1] = color;
#endif
        sys_putchar(c, color, x, y);
    }
    void putchar(int c)
    8f20:	66 55                	push   %bp
    8f22:	66 89 e5             	mov    %sp,%bp
    8f25:	66 56                	push   %si
    8f27:	66 53                	push   %bx
    8f29:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8f2e:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    {
        switch(c)
    8f33:	66 83 f8 0d          	cmp    $0xd,%ax
    8f37:	77 79                	ja     8fb2 <_ZN3tty7putcharEi+0x92>
    8f39:	67 ff 24             	jmp    *(%si)
    8f3c:	85 18                	test   %ebx,(%eax)
    8f3e:	af                   	scas   %es:(%edi),%eax
    8f3f:	00 00                	add    %al,(%eax)
    8f41:	66 be 04 00          	mov    $0x4,%si
    8f45:	00 00                	add    %al,(%eax)
        {
            case '\t':
            {
                for(int i = 0; i < 4; ++i) putchar(' ');
    8f47:	66 6a 20             	pushw  $0x20
    8f4a:	66 53                	push   %bx
    8f4c:	66 e8 ce ff          	callw  8f1e <_ZN3tty8tty_initEv+0x36>
    8f50:	ff                   	(bad)  
    8f51:	ff 66 5a             	jmp    *0x5a(%esi)
    8f54:	66 59                	pop    %cx
    8f56:	66 4e                	dec    %si
    8f58:	75 ed                	jne    8f47 <_ZN3tty7putcharEi+0x27>
    8f5a:	e9 96 00 67 66       	jmp    66678ff5 <_GLOBAL_OFFSET_TABLE_+0x6666dfc9>
            }
            case 0:
                break;
            case '\b':
            {
                if(cur_y == 0 && cur_x == 0) 
    8f5f:	8b 53 04             	mov    0x4(%ebx),%edx
    8f62:	67 66 8b 03          	mov    (%bp,%di),%ax
    8f66:	66 85 d2             	test   %dx,%dx
    8f69:	75 1b                	jne    8f86 <_ZN3tty7putcharEi+0x66>
    8f6b:	66 85 c0             	test   %ax,%ax
    8f6e:	0f 84 99 00 67 66    	je     6667900d <_GLOBAL_OFFSET_TABLE_+0x6666dfe1>
                {
                    break;
                }
                else if (cur_y == 0 && cur_x != 0)
                {
                    cur_y = 80 - 1;
    8f74:	c7 43 04 4f 00 00 00 	movl   $0x4f,0x4(%ebx)
                    cur_x--;
    8f7b:	66 48                	dec    %ax
    8f7d:	67 66 89 03          	mov    %ax,(%bp,%di)
        sys_putchar(c, color, x, y);
    8f81:	66 6a 4f             	pushw  $0x4f
    8f84:	eb 09                	jmp    8f8f <_ZN3tty7putcharEi+0x6f>
                    putchar_worker(' ', MAKE_COLOR(VGA_BLACK, VGA_WHITE) , cur_x, cur_y);
                    break;
                }
                else
                {
                    cur_y--;
    8f86:	66 4a                	dec    %dx
    8f88:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        sys_putchar(c, color, x, y);
    8f8d:	66 52                	push   %dx
    8f8f:	66 50                	push   %ax
    8f91:	66 6a 07             	pushw  $0x7
    8f94:	66 6a 20             	pushw  $0x20
    8f97:	66 e8 31 f3          	callw  82cc <sys_bios_print_int+0xa4>
    8f9b:	ff                   	(bad)  
    8f9c:	ff 66 83             	jmp    *-0x7d(%esi)
    8f9f:	c4 10                	les    (%eax),%edx
    8fa1:	eb 50                	jmp    8ff3 <_ZN3tty7putcharEi+0xd3>
                    break;
                }
            }
            case '\n':
            {
                cur_x++;
    8fa3:	67 66 ff 03          	incw   (%bp,%di)
                cur_y = 0;
    8fa7:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    8fae:	00 00                	add    %al,(%eax)
                break;
    8fb0:	eb 41                	jmp    8ff3 <_ZN3tty7putcharEi+0xd3>
        sys_putchar(c, color, x, y);
    8fb2:	67 66 ff 73 04       	pushw  0x4(%bp,%di)
    8fb7:	67 66 ff 33          	pushw  (%bp,%di)
    8fbb:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    8fc0:	66 50                	push   %ax
    8fc2:	66 e8 06 f3          	callw  82cc <sys_bios_print_int+0xa4>
    8fc6:	ff                   	(bad)  
    8fc7:	ff 67 66             	jmp    *0x66(%edi)
            }
            default:
            {
                putchar_worker(c, color, cur_x, cur_y);
                cur_x = (cur_y == 79) ? cur_x + 1 : cur_x;
    8fca:	8b 43 04             	mov    0x4(%ebx),%eax
    8fcd:	66 83 c4 10          	add    $0x10,%sp
    8fd1:	66 83 f8 4f          	cmp    $0x4f,%ax
    8fd5:	67 66 8b 13          	mov    (%bp,%di),%dx
    8fd9:	75 02                	jne    8fdd <_ZN3tty7putcharEi+0xbd>
    8fdb:	66 42                	inc    %dx
    8fdd:	67 66 89 13          	mov    %dx,(%bp,%di)
                cur_y = (cur_y + 1) % 80;
    8fe1:	66 40                	inc    %ax
    8fe3:	66 b9 50 00          	mov    $0x50,%cx
    8fe7:	00 00                	add    %al,(%eax)
    8fe9:	66 99                	cwtd   
    8feb:	66 f7 f9             	idiv   %cx
    8fee:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        if (cur_x >= 25)
    8ff3:	67 66 83 3b 18       	cmpw   $0x18,(%bp,%di)
    8ff8:	7e 11                	jle    900b <_ZN3tty7putcharEi+0xeb>
            sys_bios_scroll_up(color);
    8ffa:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    8fff:	66 e8 fa f3          	callw  83fd <sys_print_int+0xa4>
    9003:	ff                   	(bad)  
    9004:	ff 67 66             	jmp    *0x66(%edi)
            --cur_x;
    9007:	ff 0b                	decl   (%ebx)
    9009:	66 58                	pop    %ax
                break;
            }
        }
        scroll_up();
        move_cursor(cur_x, cur_y);
    900b:	67 66 8b 53 04       	mov    0x4(%bp,%di),%dx
    9010:	67 66 8b 03          	mov    (%bp,%di),%ax
    }
    9014:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    9019:	66 5b                	pop    %bx
    901b:	66 5e                	pop    %si
    901d:	66 5d                	pop    %bp
        move_cursor(cur_x, cur_y);
    901f:	e9                   	.byte 0xe9
    9020:	e2 ef                	loop   9011 <_ZN3tty7putcharEi+0xf1>

Disassembly of section .text._ZN2sh4execERKNS_3cmdE:

00009022 <_ZN2sh4execERKNS_3cmdE>:
    int exec(const cmd & input_cmd)
    9022:	66 55                	push   %bp
    9024:	66 89 e5             	mov    %sp,%bp
    9027:	66 57                	push   %di
    9029:	66 56                	push   %si
    902b:	66 53                	push   %bx
    902d:	66 83 ec 08          	sub    $0x8,%sp
    9031:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    9036:	67 66 8b 75 0c       	mov    0xc(%di),%si
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    903b:	66 68 97 af          	pushw  $0xaf97
    903f:	00 00                	add    %al,(%eax)
    9041:	67 66 8b 06 67 66    	mov    0x6667,%ax
    9047:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    904b:	66 e8 ea f5          	callw  8639 <_Z6strcpyPcPKc+0x40>
    904f:	ff                   	(bad)  
    9050:	ff 66 5a             	jmp    *0x5a(%esi)
        if (is_command(input_cmd, "ls") || is_command(input_cmd, "dir")) {
    9053:	66 59                	pop    %cx
    9055:	66 85 c0             	test   %ax,%ax
    9058:	75 33                	jne    908d <_ZN2sh4execERKNS_3cmdE+0x6b>
            printf("You have %d user programs intalled\n", prog_cnt);
    905a:	67 66 ff b3 84 0b    	pushw  0xb84(%bp,%di)
    9060:	00 00                	add    %al,(%eax)
    9062:	66 68 50 af          	pushw  $0xaf50
    9066:	00 00                	add    %al,(%eax)
    9068:	66 e8 c3 fd          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    906c:	ff                   	(bad)  
    906d:	ff 66 59             	jmp    *0x59(%esi)
            printf("Program Name\t\t\tSector Number\n");
    9070:	66 5e                	pop    %si
    9072:	66 68 74 af          	pushw  $0xaf74
    9076:	00 00                	add    %al,(%eax)
    9078:	66 e8 b3 fd          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    907c:	ff                   	(bad)  
    907d:	ff 67 66             	jmp    *0x66(%edi)
    9080:	8d b3 8c 0b 00 00    	lea    0xb8c(%ebx),%esi
    9086:	66 5f                	pop    %di
            for (size_t i = 0; i < prog_cnt; ++i) {
    9088:	66 31 ff             	xor    %di,%di
    908b:	eb 41                	jmp    90ce <_ZN2sh4execERKNS_3cmdE+0xac>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    908d:	66 68 92 af          	pushw  $0xaf92
    9091:	00 00                	add    %al,(%eax)
    9093:	67 66 8b 06 67 66    	mov    0x6667,%ax
    9099:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    909d:	66 e8 98 f5          	callw  8639 <_Z6strcpyPcPKc+0x40>
    90a1:	ff                   	(bad)  
    90a2:	ff 66 5f             	jmp    *0x5f(%esi)
        if (is_command(input_cmd, "ls") || is_command(input_cmd, "dir")) {
    90a5:	66 5a                	pop    %dx
    90a7:	66 85 c0             	test   %ax,%ax
    90aa:	74 ae                	je     905a <_ZN2sh4execERKNS_3cmdE+0x38>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    90ac:	66 68 96 af          	pushw  $0xaf96
    90b0:	00 00                	add    %al,(%eax)
    90b2:	67 66 8b 06 67 66    	mov    0x6667,%ax
    90b8:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    90bc:	66 e8 79 f5          	callw  8639 <_Z6strcpyPcPKc+0x40>
    90c0:	ff                   	(bad)  
    90c1:	ff 66 5a             	jmp    *0x5a(%esi)
        else if (is_command(input_cmd, "cls") || is_command(input_cmd, "clear"))
    90c4:	66 59                	pop    %cx
    90c6:	66 85 c0             	test   %ax,%ax
    90c9:	75 2e                	jne    90f9 <_ZN2sh4execERKNS_3cmdE+0xd7>
    90cb:	e9 90 01 67 66       	jmp    66679260 <_GLOBAL_OFFSET_TABLE_+0x6666e234>
            for (size_t i = 0; i < prog_cnt; ++i) {
    90d0:	39 bb 84 0b 00 00    	cmp    %edi,0xb84(%ebx)
    90d6:	0f 86 e0 01 67 66    	jbe    666792bc <_GLOBAL_OFFSET_TABLE_+0x6666e290>
                printf("%s\t\t\t\t\t%d\n", progs[i].name, progs[i].lba);
    90dc:	ff 76 20             	pushl  0x20(%esi)
    90df:	66 56                	push   %si
    90e1:	66 68 9a af          	pushw  $0xaf9a
    90e5:	00 00                	add    %al,(%eax)
    90e7:	66 e8 44 fd          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    90eb:	ff                   	(bad)  
    90ec:	ff 66 47             	jmp    *0x47(%esi)
            for (size_t i = 0; i < prog_cnt; ++i) {
    90ef:	66 83 c6 24          	add    $0x24,%si
    90f3:	66 83 c4 0c          	add    $0xc,%sp
    90f7:	eb d5                	jmp    90ce <_ZN2sh4execERKNS_3cmdE+0xac>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    90f9:	66 68 a5 af          	pushw  $0xafa5
    90fd:	00 00                	add    %al,(%eax)
    90ff:	67 66 8b 06 67 66    	mov    0x6667,%ax
    9105:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    9109:	66 e8 2c f5          	callw  8639 <_Z6strcpyPcPKc+0x40>
    910d:	ff                   	(bad)  
    910e:	ff 66 59             	jmp    *0x59(%esi)
        else if (is_command(input_cmd, "cls") || is_command(input_cmd, "clear"))
    9111:	66 5f                	pop    %di
    9113:	66 85 c0             	test   %ax,%ax
    9116:	0f 84 44 01 66 68    	je     68669260 <_GLOBAL_OFFSET_TABLE_+0x6865e234>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    911c:	ab                   	stos   %eax,%es:(%edi)
    911d:	af                   	scas   %es:(%edi),%eax
    911e:	00 00                	add    %al,(%eax)
    9120:	67 66 8b 06 67 66    	mov    0x6667,%ax
    9126:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    912a:	66 e8 0b f5          	callw  8639 <_Z6strcpyPcPKc+0x40>
    912e:	ff                   	(bad)  
    912f:	ff 66 5f             	jmp    *0x5f(%esi)
        else if (is_command(input_cmd, "help"))
    9132:	66 5a                	pop    %dx
    9134:	66 85 c0             	test   %ax,%ax
    9137:	75 0c                	jne    9145 <_ZN2sh4execERKNS_3cmdE+0x123>
            printf("%s\n", help);
    9139:	66 81 c3 84 09       	add    $0x984,%bx
    913e:	00 00                	add    %al,(%eax)
    9140:	66 53                	push   %bx
    9142:	e9 39 01 66 68       	jmp    68669280 <_GLOBAL_OFFSET_TABLE_+0x6865e254>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    9147:	b4 af                	mov    $0xaf,%ah
    9149:	00 00                	add    %al,(%eax)
    914b:	67 66 8b 06 67 66    	mov    0x6667,%ax
    9151:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    9155:	66 e8 e0 f4          	callw  8639 <_Z6strcpyPcPKc+0x40>
    9159:	ff                   	(bad)  
    915a:	ff 66 5a             	jmp    *0x5a(%esi)
        else if (is_command(input_cmd, "echo"))
    915d:	66 59                	pop    %cx
    915f:	66 85 c0             	test   %ax,%ax
    9162:	75 3d                	jne    91a1 <_ZN2sh4execERKNS_3cmdE+0x17f>
            for(int i = 1; i < input_cmd.cnt; ++i)
    9164:	66 bf 01 00          	mov    $0x1,%di
    9168:	00 00                	add    %al,(%eax)
    916a:	67 66 39 7e 04       	cmp    %di,0x4(%bp)
    916f:	7e 21                	jle    9192 <_ZN2sh4execERKNS_3cmdE+0x170>
                printf("%s ", inputs[input_cmd.start + i]);
    9171:	67 66 8b 06 66 01    	mov    0x166,%ax
    9177:	f8                   	clc    
    9178:	67 66 ff 74 83       	pushw  -0x7d(%si)
    917d:	04 66                	add    $0x66,%al
    917f:	68 b9 af 00 00       	push   $0xafb9
    9184:	66 e8 a7 fc          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    9188:	ff                   	(bad)  
    9189:	ff 66 47             	jmp    *0x47(%esi)
            for(int i = 1; i < input_cmd.cnt; ++i)
    918c:	66 59                	pop    %cx
    918e:	66 58                	pop    %ax
    9190:	eb d8                	jmp    916a <_ZN2sh4execERKNS_3cmdE+0x148>
            printf("\n");
    9192:	66 68 c2 ae          	pushw  $0xaec2
    9196:	00 00                	add    %al,(%eax)
    9198:	66 e8 93 fc          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    919c:	ff                   	(bad)  
    919d:	ff                   	(bad)  
    919e:	e9 ce 00 66 68       	jmp    68669271 <_GLOBAL_OFFSET_TABLE_+0x6865e245>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    91a3:	bd af 00 00 67       	mov    $0x670000af,%ebp
    91a8:	66 8b 06             	mov    (%esi),%ax
    91ab:	67 66 ff 74 83       	pushw  -0x7d(%si)
    91b0:	04 66                	add    $0x66,%al
    91b2:	e8 84 f4 ff ff       	call   863b <_Z6strcmpPKcS0_>
        else if (is_command(input_cmd, "history"))
    91b7:	66 5f                	pop    %di
    91b9:	66 5a                	pop    %dx
    91bb:	66 85 c0             	test   %ax,%ax
    91be:	0f 84 ce 00 66 31    	je     31669292 <_GLOBAL_OFFSET_TABLE_+0x3165e266>
            for(size_t i = 0; i < prog_cnt; ++i)
    91c4:	c9                   	leave  
    91c5:	67 66 39 8b 84 0b    	cmp    %cx,0xb84(%bp,%di)
    91cb:	00 00                	add    %al,(%eax)
    91cd:	0f 86 a7 00 66 6b    	jbe    6b66927a <_GLOBAL_OFFSET_TABLE_+0x6b65e24e>
    91d3:	d1 24 67             	shll   (%edi,%eiz,2)
    91d6:	66 89 4d ec          	mov    %cx,-0x14(%ebp)
    91da:	67 66 8d bc 13 8c    	lea    -0x73ed(%si),%di
    91e0:	0b 00                	or     (%eax),%eax
    91e2:	00 67 66             	add    %ah,0x66(%edi)
    91e5:	89 55 f0             	mov    %edx,-0x10(%ebp)
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    91e8:	66 57                	push   %di
    91ea:	67 66 8b 06 67 66    	mov    0x6667,%ax
    91f0:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    91f4:	66 e8 41 f4          	callw  8639 <_Z6strcpyPcPKc+0x40>
    91f8:	ff                   	(bad)  
    91f9:	ff 66 5a             	jmp    *0x5a(%esi)
                if (is_command(input_cmd, progs[i].name))
    91fc:	66 59                	pop    %cx
    91fe:	66 85 c0             	test   %ax,%ax
    9201:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    9206:	67 66 8b 4d ec       	mov    -0x14(%di),%cx
    920b:	75 66                	jne    9273 <_ZN2sh4execERKNS_3cmdE+0x251>
class bin_loader
{
public:
    static void load_binary_from_floppy(int n)
    {
        sys_read_disk(user_prog_segment, user_prog_load_addr, n, 20);
    920d:	66 6a 14             	pushw  $0x14
                    bin_loader::load_binary_from_floppy(progs[i].lba);
    9210:	66 01 d3             	add    %dx,%bx
    9213:	67 66 0f b7 83 ac 0b 	movzww 0xbac(%bp,%di),%ax
    921a:	00 00                	add    %al,(%eax)
    921c:	66 50                	push   %ax
    921e:	66 68 00 a1          	pushw  $0xa100
    9222:	00 00                	add    %al,(%eax)
    9224:	66 68 00 10          	pushw  $0x1000
    9228:	00 00                	add    %al,(%eax)
    922a:	66 e8 73 f2          	callw  84a1 <sys_get_scancode+0xf>
    922e:	ff                   	(bad)  
    922f:	ff 66 83             	jmp    *-0x7d(%esi)
        sys_execve_bin();
    9232:	c4 10                	les    (%eax),%edx
    9234:	66 e8 96 ef          	callw  81ce <sys_bios_getchar+0x5>
    9238:	ff                   	(bad)  
    9239:	ff 66 57             	jmp    *0x57(%esi)
                    if(!(strlen(progs[i].name) > 2 && progs[i].name[0] == 'c' && progs[i].name[1] == '_'))
    923c:	66 e8 9b f3          	callw  85db <_Z6memsetPvim+0x23>
    9240:	ff                   	(bad)  
    9241:	ff 66 5f             	jmp    *0x5f(%esi)
    9244:	66 83 f8 02          	cmp    $0x2,%ax
    9248:	76 14                	jbe    925e <_ZN2sh4execERKNS_3cmdE+0x23c>
    924a:	67 80 bb 8c 0b 00    	cmpb   $0x0,0xb8c(%bp,%di)
    9250:	00 63 75             	add    %ah,0x75(%ebx)
    9253:	0a 67 80             	or     -0x80(%edi),%ah
    9256:	bb 8d 0b 00 00       	mov    $0xb8d,%ebx
    925b:	5f                   	pop    %edi
    925c:	74 5c                	je     92ba <_ZN2sh4execERKNS_3cmdE+0x298>
                        sys_bios_clear_screen();
    925e:	66 e8 4f ef          	callw  81b1 <sys_bios_print_string+0x21>
    9262:	ff                   	(bad)  
    9263:	ff 66 ff             	jmp    *-0x1(%esi)
                        sys_get_current_tty()->tty_init();
    9266:	36 e0 9e             	ss loopne 9207 <_ZN2sh4execERKNS_3cmdE+0x1e5>
    9269:	66 e8 79 fc          	callw  8ee6 <_ZN2sh2bfEPKcS1_.isra.4+0x76>
    926d:	ff                   	(bad)  
    926e:	ff 66 5e             	jmp    *0x5e(%esi)
    9271:	eb 47                	jmp    92ba <_ZN2sh4execERKNS_3cmdE+0x298>
            for(size_t i = 0; i < prog_cnt; ++i)
    9273:	66 41                	inc    %cx
    9275:	e9 4d ff 66 68       	jmp    686791c7 <_GLOBAL_OFFSET_TABLE_+0x6866e19b>
                printf("%s\n", "No such command or file");
    927a:	c5 af 00 00 66 68    	lds    0x68660000(%edi),%ebp
    9280:	b0 af                	mov    $0xaf,%al
    9282:	00 00                	add    %al,(%eax)
    9284:	66 e8 a7 fb          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    9288:	ff                   	(bad)  
    9289:	ff 66 59             	jmp    *0x59(%esi)
    928c:	66 5b                	pop    %bx
    928e:	eb 2a                	jmp    92ba <_ZN2sh4execERKNS_3cmdE+0x298>
    9290:	67 66 8d b3 04 03    	lea    0x304(%bp,%di),%si
    9296:	00 00                	add    %al,(%eax)
    9298:	66 81 c3 84 07       	add    $0x784,%bx
    929d:	00 00                	add    %al,(%eax)
                printf("%s\n", histroy[i]);
    929f:	66 56                	push   %si
    92a1:	66 68 b0 af          	pushw  $0xafb0
    92a5:	00 00                	add    %al,(%eax)
    92a7:	66 e8 84 fb          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    92ab:	ff                   	(bad)  
    92ac:	ff 66 83             	jmp    *-0x7d(%esi)
    92af:	ee                   	out    %al,(%dx)
    92b0:	80 66 58 66          	andb   $0x66,0x58(%esi)
            for(int i = 1; i < history_term; ++i)
    92b4:	5a                   	pop    %edx
    92b5:	66 39 f3             	cmp    %si,%bx
    92b8:	75 e5                	jne    929f <_ZN2sh4execERKNS_3cmdE+0x27d>
    }
    92ba:	66 31 c0             	xor    %ax,%ax
    92bd:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    92c2:	66 5b                	pop    %bx
    92c4:	66 5e                	pop    %si
    92c6:	66 5f                	pop    %di
    92c8:	66 5d                	pop    %bp
    92ca:	66 c3                	retw   

Disassembly of section .text._ZN2sh16read_prog_recordEv:

000092cc <_ZN2sh16read_prog_recordEv>:
    void read_prog_record()
    92cc:	66 55                	push   %bp
    92ce:	66 89 e5             	mov    %sp,%bp
    92d1:	66 57                	push   %di
    92d3:	66 56                	push   %si
    92d5:	66 53                	push   %bx
    92d7:	66 83 ec 6c          	sub    $0x6c,%sp
    92db:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        sys_read_disk(0, (uint32_t)record_buf, REC_FILE_SECTOR, 1);
    92e0:	67 66 8d bb 84 07    	lea    0x784(%bp,%di),%di
    92e6:	00 00                	add    %al,(%eax)
    92e8:	66 6a 01             	pushw  $0x1
    92eb:	66 6a 34             	pushw  $0x34
    92ee:	66 57                	push   %di
    92f0:	66 6a 00             	pushw  $0x0
    92f3:	66 e8 aa f1          	callw  84a1 <sys_get_scancode+0xf>
    92f7:	ff                   	(bad)  
    92f8:	ff 66 83             	jmp    *-0x7d(%esi)
        sscanf(p, "%s", buf1);
    92fb:	c4 10                	les    (%eax),%edx
    92fd:	67 66 8d 75 94       	lea    -0x6c(%di),%si
    9302:	66 56                	push   %si
    9304:	66 68 df af          	pushw  $0xafdf
    9308:	00 00                	add    %al,(%eax)
    930a:	66 57                	push   %di
    930c:	66 e8 f5 f8          	callw  8c05 <_Z7vsscanfPKcS0_Pc+0x1bf>
    9310:	ff                   	(bad)  
    9311:	ff 66 83             	jmp    *-0x7d(%esi)
        p += (strlen(buf1) + 1);
    9314:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    9317:	56                   	push   %esi
    9318:	66 e8 bf f2          	callw  85db <_Z6memsetPvim+0x23>
    931c:	ff                   	(bad)  
    931d:	ff 67 66             	jmp    *0x66(%edi)
    9320:	8d 44 07 01          	lea    0x1(%edi,%eax,1),%eax
    9324:	67 66 89 45 8c       	mov    %ax,-0x74(%di)
        prog_cnt = strtol(buf1, nullptr, 10);
    9329:	67 66 c7 04 24 0a    	movw   $0xa24,(%si)
    932f:	00 00                	add    %al,(%eax)
    9331:	00 66 6a             	add    %ah,0x6a(%esi)
    9334:	00 66 56             	add    %ah,0x56(%esi)
    9337:	66 e8 75 f4          	callw  87b0 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    933b:	ff                   	(bad)  
    933c:	ff 67 66             	jmp    *0x66(%edi)
    933f:	89 83 84 0b 00 00    	mov    %eax,0xb84(%ebx)
    9345:	66 83 c4 0c          	add    $0xc,%sp
        for(size_t i = 0; i < prog_cnt; ++i)
    9349:	67 66 c7 45 90 00 00 	movw   $0x0,-0x70(%di)
    9350:	00 00                	add    %al,(%eax)
    9352:	67 66 8b 45 90       	mov    -0x70(%di),%ax
    9357:	67 66 39 83 84 0b    	cmp    %ax,0xb84(%bp,%di)
    935d:	00 00                	add    %al,(%eax)
    935f:	0f 86 97 00 67 66    	jbe    666793fc <_GLOBAL_OFFSET_TABLE_+0x6666e3d0>
            sscanf(p, "%s%s", buf2, buf3);
    9365:	8d 7d d4             	lea    -0x2c(%ebp),%edi
    9368:	66 57                	push   %di
    936a:	67 66 8d 75 b4       	lea    -0x4c(%di),%si
    936f:	66 56                	push   %si
    9371:	66 68 dd af          	pushw  $0xafdd
    9375:	00 00                	add    %al,(%eax)
    9377:	67 66 ff 75 8c       	pushw  -0x74(%di)
    937c:	66 e8 85 f8          	callw  8c05 <_Z7vsscanfPKcS0_Pc+0x1bf>
    9380:	ff                   	(bad)  
    9381:	ff 67 66             	jmp    *0x66(%edi)
    9384:	6b 4d 90 24          	imul   $0x24,-0x70(%ebp),%ecx
            strcpy(progs[i].name, buf2);
    9388:	66 83 c4 10          	add    $0x10,%sp
    938c:	66 56                	push   %si
    938e:	67 66 8d 84 0b 8c    	lea    -0x73f5(%si),%ax
    9394:	0b 00                	or     (%eax),%eax
    9396:	00 67 66             	add    %ah,0x66(%edi)
    9399:	89 4d 88             	mov    %ecx,-0x78(%ebp)
    939c:	66 50                	push   %ax
    939e:	66 e8 55 f2          	callw  85f7 <_Z6strlenPKc+0x1a>
    93a2:	ff                   	(bad)  
    93a3:	ff 66 58             	jmp    *0x58(%esi)
            progs[i].lba = strtol(buf3, nullptr, 10);
    93a6:	66 5a                	pop    %dx
    93a8:	66 6a 0a             	pushw  $0xa
    93ab:	66 6a 00             	pushw  $0x0
    93ae:	66 57                	push   %di
    93b0:	66 e8 fc f3          	callw  87b0 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    93b4:	ff                   	(bad)  
    93b5:	ff 67 66             	jmp    *0x66(%edi)
    93b8:	8b 4d 88             	mov    -0x78(%ebp),%ecx
    93bb:	67 66 89 84 0b ac    	mov    %ax,-0x53f5(%si)
    93c1:	0b 00                	or     (%eax),%eax
    93c3:	00 66 83             	add    %ah,-0x7d(%esi)
            p += (strlen(buf2) + strlen(buf3) + 2);
    93c6:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    93c9:	56                   	push   %esi
    93ca:	66 e8 0d f2          	callw  85db <_Z6memsetPvim+0x23>
    93ce:	ff                   	(bad)  
    93cf:	ff 67 66             	jmp    *0x66(%edi)
    93d2:	89 45 88             	mov    %eax,-0x78(%ebp)
    93d5:	67 66 89 3c          	mov    %di,(%si)
    93d9:	24 66                	and    $0x66,%al
    93db:	e8 fd f1 ff ff       	call   85dd <_Z6strlenPKc>
    93e0:	67 66 8b 55 88       	mov    -0x78(%di),%dx
    93e5:	67 66 8d 44 02       	lea    0x2(%si),%ax
    93ea:	02 67 66             	add    0x66(%edi),%ah
    93ed:	01 45 8c             	add    %eax,-0x74(%ebp)
        for(size_t i = 0; i < prog_cnt; ++i)
    93f0:	67 66 ff 45 90       	incw   -0x70(%di)
    93f5:	66 59                	pop    %cx
    93f7:	e9 58 ff 67 66       	jmp    66689354 <_GLOBAL_OFFSET_TABLE_+0x6667e328>
    }
    93fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
    93ff:	66 5b                	pop    %bx
    9401:	66 5e                	pop    %si
    9403:	66 5f                	pop    %di
    9405:	66 5d                	pop    %bp
    9407:	66 c3                	retw   

Disassembly of section .text._ZN2sh3runEv:

0000940a <_ZN2sh3runEv>:
        read_help_file();
    }
    void run () {
    940a:	66 55                	push   %bp
    940c:	66 89 e5             	mov    %sp,%bp
    940f:	66 57                	push   %di
    9411:	66 56                	push   %si
    9413:	66 53                	push   %bx
    9415:	66 83 ec 10          	sub    $0x10,%sp
    9419:	67 66 8b 7d 08       	mov    0x8(%di),%di
        printf("%s", prompt);
    941e:	66 68 e2 af          	pushw  $0xafe2
    9422:	00 00                	add    %al,(%eax)
    9424:	66 68 df af          	pushw  $0xafdf
    9428:	00 00                	add    %al,(%eax)
    942a:	66 e8 01 fa          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    942e:	ff                   	(bad)  
    942f:	ff 66 59             	jmp    *0x59(%esi)
    9432:	66 5b                	pop    %bx
        while(true)
        {
            char in = getchar();
    9434:	66 e8 a4 f5          	callw  89dc <_Z4putsPKc+0x3c>
    9438:	ff                   	(bad)  
    9439:	ff 66 89             	jmp    *-0x77(%esi)
    943c:	c2 3c 08             	ret    $0x83c
            if (in == '\b')
    943f:	75 35                	jne    9476 <_ZN2sh3runEv+0x6c>
            {
                if(pos != 0){
    9441:	67 66 83 bf 88 0b 00 	cmpw   $0x0,0xb88(%bx)
    9448:	00 00                	add    %al,(%eax)
    944a:	74 e8                	je     9434 <_ZN2sh3runEv+0x2a>
                    putchar('\b');
    944c:	66 6a 08             	pushw  $0x8
    944f:	66 e8 31 f5          	callw  8984 <_ZL19system_call_putchari+0x29>
    9453:	ff                   	(bad)  
    9454:	ff 67 66             	jmp    *0x66(%edi)
                    buf[pos--] = '\0';
    9457:	8b 87 88 0b 00 00    	mov    0xb88(%edi),%eax
    945d:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    9462:	67 66 89 97 88 0b    	mov    %dx,0xb88(%bx)
    9468:	00 00                	add    %al,(%eax)
    946a:	67 c6 84 07 04 02    	movb   $0x2,0x407(%si)
    9470:	00 00                	add    %al,(%eax)
    9472:	00 e9                	add    %ch,%cl
    9474:	03 03                	add    (%ebx),%eax
                }
            }
            else if (in == 13)
    9476:	3c 0d                	cmp    $0xd,%al
    9478:	0f 85 d8 01 66 6a    	jne    6a669656 <_GLOBAL_OFFSET_TABLE_+0x6a65e62a>
            {
                putchar('\n');
    947e:	0a 66 e8             	or     -0x18(%esi),%ah
    9481:	01 f5                	add    %esi,%ebp
    9483:	ff                   	(bad)  
    9484:	ff 67 66             	jmp    *0x66(%edi)
                if(strlen(buf) == 0)
    9487:	8d 87 04 02 00 00    	lea    0x204(%edi),%eax
    948d:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    9492:	67 66 89 04          	mov    %ax,(%si)
    9496:	24 66                	and    $0x66,%al
    9498:	e8 40 f1 ff ff       	call   85dd <_Z6strlenPKc>
    949d:	66 5a                	pop    %dx
    949f:	66 85 c0             	test   %ax,%ax
    94a2:	0f 84 78 ff 67 66    	je     66689420 <_GLOBAL_OFFSET_TABLE_+0x6667e3f4>
        memmove(histroy[1], histroy[0], buf_size * history_term * sizeof(char));
    94a8:	8d 9f 84 02 00 00    	lea    0x284(%edi),%ebx
    94ae:	66 68 00 05          	pushw  $0x500
    94b2:	00 00                	add    %al,(%eax)
    94b4:	66 53                	push   %bx
    94b6:	67 66 8d 87 04 03    	lea    0x304(%bx),%ax
    94bc:	00 00                	add    %al,(%eax)
    94be:	66 50                	push   %ax
    94c0:	66 e8 a5 f0          	callw  8569 <_Z6memcpyPvPKvm+0x2b>
    94c4:	ff                   	(bad)  
    94c5:	ff 66 83             	jmp    *-0x7d(%esi)
        strcpy(histroy[0], buf);
    94c8:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    94cb:	66 ff 75 f0          	pushw  -0x10(%ebp)
    94cf:	66 53                	push   %bx
    94d1:	66 e8 22 f1          	callw  85f7 <_Z6strlenPKc+0x1a>
    94d5:	ff                   	(bad)  
    94d6:	ff 66 5b             	jmp    *0x5b(%esi)
    94d9:	66 5e                	pop    %si
        char * p = buf;
    94db:	67 66 8d 9f 04 02    	lea    0x204(%bx),%bx
    94e1:	00 00                	add    %al,(%eax)
        while(*p && isspace(*p)){
    94e3:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    94e8:	84 c0                	test   %al,%al
    94ea:	75 08                	jne    94f4 <_ZN2sh3runEv+0xea>
        char * p = buf;
    94ec:	66 31 d2             	xor    %dx,%dx
    94ef:	66 31 f6             	xor    %si,%si
    94f2:	eb 39                	jmp    952d <_ZN2sh3runEv+0x123>
        while(*p && isspace(*p)){
    94f4:	66 50                	push   %ax
    94f6:	66 e8 f8 f1          	callw  86f2 <_Z7reversePc+0x4a>
    94fa:	ff                   	(bad)  
    94fb:	ff 66 59             	jmp    *0x59(%esi)
    94fe:	66 85 c0             	test   %ax,%ax
    9501:	74 e9                	je     94ec <_ZN2sh3runEv+0xe2>
            ++p;
    9503:	66 43                	inc    %bx
    9505:	eb dc                	jmp    94e3 <_ZN2sh3runEv+0xd9>
    9507:	67 88 55 ec          	mov    %dl,-0x14(%di)
            if(isspace(*p))
    950b:	66 50                	push   %ax
    950d:	66 e8 e1 f1          	callw  86f2 <_Z7reversePc+0x4a>
    9511:	ff                   	(bad)  
    9512:	ff 66 5a             	jmp    *0x5a(%esi)
    9515:	66 85 c0             	test   %ax,%ax
    9518:	67 8a 55 ec          	mov    -0x14(%di),%dl
    951c:	74 1a                	je     9538 <_ZN2sh3runEv+0x12e>
                *p = '\0';
    951e:	67 c6 03 00          	movb   $0x0,(%bp,%di)
                if(con)
    9522:	84 d2                	test   %dl,%dl
    9524:	74 05                	je     952b <_ZN2sh3runEv+0x121>
                    ++i;
    9526:	66 46                	inc    %si
                    con = false;
    9528:	66 31 d2             	xor    %dx,%dx
            ++p;
    952b:	66 43                	inc    %bx
        while (*p)
    952d:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    9532:	84 c0                	test   %al,%al
    9534:	75 d1                	jne    9507 <_ZN2sh3runEv+0xfd>
    9536:	eb 0e                	jmp    9546 <_ZN2sh3runEv+0x13c>
                if(!con)
    9538:	84 d2                	test   %dl,%dl
    953a:	75 ef                	jne    952b <_ZN2sh3runEv+0x121>
                    inputs[i] = p;
    953c:	67 66 89 5c b7       	mov    %bx,-0x49(%si)
    9541:	04 b2                	add    $0xb2,%al
                    con = true;
    9543:	01 eb                	add    %ebp,%ebx
    9545:	e5 84                	in     $0x84,%eax
        if(con) ++i;
    9547:	d2 74 04 66          	shlb   %cl,0x66(%esp,%eax,1)
    954b:	46                   	inc    %esi
    954c:	eb 07                	jmp    9555 <_ZN2sh3runEv+0x14b>
                    printf("%s", prompt);
                    continue;
                }
                history_push(buf);
                int input_cnt = split_input(buf);
                if (input_cnt == 0)
    954e:	66 85 f6             	test   %si,%si
    9551:	0f 84 df fe 67 66    	je     66689436 <_GLOBAL_OFFSET_TABLE_+0x6667e40a>
                    continue;
                int cmd_cnt = split_batch(inputs, input_cnt);
    9557:	8d 47 04             	lea    0x4(%edi),%eax
    955a:	67 66 89 45 ec       	mov    %ax,-0x14(%di)
        int p = 0;
    955f:	66 31 c9             	xor    %cx,%cx
        while(strcmp(inputs[p], ";") == 0){
    9562:	66 68 e9 af          	pushw  $0xafe9
    9566:	00 00                	add    %al,(%eax)
    9568:	67 66 8b 45 ec       	mov    -0x14(%di),%ax
    956d:	67 66 ff 34          	pushw  (%si)
    9571:	88 67 66             	mov    %ah,0x66(%edi)
    9574:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    9577:	66 e8 be f0          	callw  8639 <_Z6strcpyPcPKc+0x40>
    957b:	ff                   	(bad)  
    957c:	ff 66 59             	jmp    *0x59(%esi)
    957f:	66 5b                	pop    %bx
    9581:	66 85 c0             	test   %ax,%ax
    9584:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    9589:	75 04                	jne    958f <_ZN2sh3runEv+0x185>
            ++p;
    958b:	66 41                	inc    %cx
    958d:	eb d3                	jmp    9562 <_ZN2sh3runEv+0x158>
        bool con = false;
    958f:	66 31 d2             	xor    %dx,%dx
        int i = 0;
    9592:	66 31 db             	xor    %bx,%bx
        while (p < input_cnt)
    9595:	66 39 f1             	cmp    %si,%cx
    9598:	7d 6a                	jge    9604 <_ZN2sh3runEv+0x1fa>
    959a:	67 88 55 e7          	mov    %dl,-0x19(%di)
            if(strcmp(inputs[p], ";") == 0)
    959e:	66 68 e9 af          	pushw  $0xafe9
    95a2:	00 00                	add    %al,(%eax)
    95a4:	67 66 8b 45 ec       	mov    -0x14(%di),%ax
    95a9:	67 66 ff 34          	pushw  (%si)
    95ad:	88 67 66             	mov    %ah,0x66(%edi)
    95b0:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    95b3:	66 e8 82 f0          	callw  8639 <_Z6strcpyPcPKc+0x40>
    95b7:	ff                   	(bad)  
    95b8:	ff 66 59             	jmp    *0x59(%esi)
    95bb:	66 5a                	pop    %dx
    95bd:	66 85 c0             	test   %ax,%ax
    95c0:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    95c5:	67 8a 55 e7          	mov    -0x19(%di),%dl
    95c9:	75 0b                	jne    95d6 <_ZN2sh3runEv+0x1cc>
                if(con)
    95cb:	84 d2                	test   %dl,%dl
    95cd:	74 31                	je     9600 <_ZN2sh3runEv+0x1f6>
                    ++i;
    95cf:	66 43                	inc    %bx
                    con = false;
    95d1:	66 31 d2             	xor    %dx,%dx
    95d4:	eb 2a                	jmp    9600 <_ZN2sh3runEv+0x1f6>
                if(!con)
    95d6:	84 d2                	test   %dl,%dl
    95d8:	75 1d                	jne    95f7 <_ZN2sh3runEv+0x1ed>
    95da:	67 66 8d 04          	lea    (%si),%ax
    95de:	df 67 66             	fbld   0x66(%edi)
                    cmds[i].start = p;
    95e1:	89 88 04 01 00 00    	mov    %ecx,0x104(%eax)
                    cmds[i].cnt = 1;
    95e7:	67 66 c7 80 08 01 00 	movw   $0x0,0x108(%bx,%si)
    95ee:	00 
    95ef:	01 00                	add    %eax,(%eax)
    95f1:	00 00                	add    %al,(%eax)
                    con = true;
    95f3:	b2 01                	mov    $0x1,%dl
    95f5:	eb 09                	jmp    9600 <_ZN2sh3runEv+0x1f6>
                    cmds[i].cnt++;
    95f7:	67 66 ff 84 df 08    	incw   0x8df(%si)
    95fd:	01 00                	add    %eax,(%eax)
    95ff:	00 66 41             	add    %ah,0x41(%esi)
            ++p;
    9602:	eb 91                	jmp    9595 <_ZN2sh3runEv+0x18b>
        if(con) ++i;
    9604:	84 d2                	test   %dl,%dl
    9606:	74 02                	je     960a <_ZN2sh3runEv+0x200>
    9608:	66 43                	inc    %bx
                for(int cmd_num = 0; cmd_num < cmd_cnt; ++ cmd_num)
    960a:	66 31 f6             	xor    %si,%si
    960d:	66 39 de             	cmp    %bx,%si
    9610:	74 1b                	je     962d <_ZN2sh3runEv+0x223>
                {
                    exec(cmds[cmd_num]);
    9612:	67 66 8d 84 f7 04    	lea    0x4f7(%si),%ax
    9618:	01 00                	add    %eax,(%eax)
    961a:	00 66 50             	add    %ah,0x50(%esi)
    961d:	66 57                	push   %di
    961f:	66 e8 fd f9          	callw  9020 <_ZN3tty7putcharEi+0x100>
    9623:	ff                   	(bad)  
    9624:	ff 66 46             	jmp    *0x46(%esi)
                for(int cmd_num = 0; cmd_num < cmd_cnt; ++ cmd_num)
    9627:	66 58                	pop    %ax
    9629:	66 5a                	pop    %dx
    962b:	eb e0                	jmp    960d <_ZN2sh3runEv+0x203>
                }
                memset(buf, 0, buf_size);
    962d:	66 68 80 00          	pushw  $0x80
    9631:	00 00                	add    %al,(%eax)
    9633:	66 6a 00             	pushw  $0x0
    9636:	67 66 ff 75 f0       	pushw  -0x10(%di)
    963b:	66 e8 77 ef          	callw  85b6 <_Z7memmovePvPKvm+0x4b>
    963f:	ff                   	(bad)  
    9640:	ff 67 66             	jmp    *0x66(%edi)
                pos = 0;
    9643:	c7 87 88 0b 00 00 00 	movl   $0x0,0xb88(%edi)
    964a:	00 00 00 
                printf("%s", prompt);
    964d:	66 83 c4 0c          	add    $0xc,%sp
    9651:	e9 ca fd 84 c0       	jmp    c0859420 <_GLOBAL_OFFSET_TABLE_+0xc084e3f4>
            }
            else if (in == 0)
    9656:	0f 84 da fd 3c 09    	je     93d9436 <_GLOBAL_OFFSET_TABLE_+0x93ce40a>
            {
                continue;
            }
            else if( in == '\t')
    965c:	0f 85 e6 00 66 31    	jne    31669748 <_GLOBAL_OFFSET_TABLE_+0x3165e71c>
            {
                bool first_matching = false;
                for(int i = 0; i < supported_cmd_num; ++i){
    9662:	db 66 31             	(bad)  0x31(%esi)
                bool first_matching = false;
    9665:	c9                   	leave  
    9666:	67 66 8d b7 04 02    	lea    0x204(%bx),%si
    966c:	00 00                	add    %al,(%eax)
                for(int i = 0; i < supported_cmd_num; ++i){
    966e:	67 66 39 1f          	cmp    %bx,(%bx)
    9672:	7e 53                	jle    96c7 <_ZN2sh3runEv+0x2bd>
    9674:	67 88 4d ec          	mov    %cl,-0x14(%di)
                    if(bf(buf, cmd_list[i]) != -1)
    9678:	67 66 8b 04          	mov    (%si),%ax
    967c:	9d                   	popf   
    967d:	ec                   	in     (%dx),%al
    967e:	af                   	scas   %es:(%edi),%eax
    967f:	00 00                	add    %al,(%eax)
    9681:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    9686:	66 89 c2             	mov    %ax,%dx
    9689:	66 89 f0             	mov    %si,%ax
    968c:	66 e8 de f7          	callw  8e6e <_Z6printfPKcz+0x3d>
    9690:	ff                   	(bad)  
    9691:	ff 66 40             	jmp    *0x40(%esi)
    9694:	67 8a 4d ec          	mov    -0x14(%di),%cl
    9698:	74 29                	je     96c3 <_ZN2sh3runEv+0x2b9>
                    {
                        if(!first_matching){
    969a:	84 c9                	test   %cl,%cl
    969c:	75 0e                	jne    96ac <_ZN2sh3runEv+0x2a2>
                            printf("\n");
    969e:	66 68 c2 ae          	pushw  $0xaec2
    96a2:	00 00                	add    %al,(%eax)
    96a4:	66 e8 87 f7          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    96a8:	ff                   	(bad)  
    96a9:	ff 66 58             	jmp    *0x58(%esi)
                            first_matching = true;
                        }
                        printf("%s\n", cmd_list[i]);
    96ac:	67 66 ff 75 f0       	pushw  -0x10(%di)
    96b1:	66 68 b0 af          	pushw  $0xafb0
    96b5:	00 00                	add    %al,(%eax)
    96b7:	66 e8 74 f7          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    96bb:	ff                   	(bad)  
    96bc:	ff 66 5e             	jmp    *0x5e(%esi)
    96bf:	66 58                	pop    %ax
    96c1:	b1 01                	mov    $0x1,%cl
                for(int i = 0; i < supported_cmd_num; ++i){
    96c3:	66 43                	inc    %bx
    96c5:	eb 9f                	jmp    9666 <_ZN2sh3runEv+0x25c>
                    }
                }
                for(size_t i = 0; i < prog_cnt; ++i)
    96c7:	66 31 db             	xor    %bx,%bx
    96ca:	67 88 4d ec          	mov    %cl,-0x14(%di)
    96ce:	67 66 39 9f 84 0b    	cmp    %bx,0xb84(%bx)
    96d4:	00 00                	add    %al,(%eax)
    96d6:	76 53                	jbe    972b <_ZN2sh3runEv+0x321>
    96d8:	66 6b c3 24          	imul   $0x24,%bx,%ax
    96dc:	67 66 8d 84 07 8c    	lea    -0x73f9(%si),%ax
    96e2:	0b 00                	or     (%eax),%eax
    96e4:	00 67 66             	add    %ah,0x66(%edi)
    96e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    if(bf(buf, progs[i].name) != -1)
    96ea:	66 89 c2             	mov    %ax,%dx
    96ed:	66 89 f0             	mov    %si,%ax
    96f0:	66 e8 7a f7          	callw  8e6e <_Z6printfPKcz+0x3d>
    96f4:	ff                   	(bad)  
    96f5:	ff 66 40             	jmp    *0x40(%esi)
    96f8:	67 8a 4d ec          	mov    -0x14(%di),%cl
    96fc:	74 29                	je     9727 <_ZN2sh3runEv+0x31d>
                    {
                        if(!first_matching){
    96fe:	84 c9                	test   %cl,%cl
    9700:	75 0e                	jne    9710 <_ZN2sh3runEv+0x306>
                            printf("\n");
    9702:	66 68 c2 ae          	pushw  $0xaec2
    9706:	00 00                	add    %al,(%eax)
    9708:	66 e8 23 f7          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    970c:	ff                   	(bad)  
    970d:	ff 66 59             	jmp    *0x59(%esi)
                            first_matching = true;
                        }
                        printf("%s\n", progs[i].name);
    9710:	67 66 ff 75 f0       	pushw  -0x10(%di)
    9715:	66 68 b0 af          	pushw  $0xafb0
    9719:	00 00                	add    %al,(%eax)
    971b:	66 e8 10 f7          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    971f:	ff                   	(bad)  
    9720:	ff 66 58             	jmp    *0x58(%esi)
    9723:	66 5a                	pop    %dx
    9725:	b1 01                	mov    $0x1,%cl
                for(size_t i = 0; i < prog_cnt; ++i)
    9727:	66 43                	inc    %bx
    9729:	eb 9f                	jmp    96ca <_ZN2sh3runEv+0x2c0>
                    }
                printf("%s", prompt);
    972b:	66 68 e2 af          	pushw  $0xafe2
    972f:	00 00                	add    %al,(%eax)
    9731:	66 68 df af          	pushw  $0xafdf
    9735:	00 00                	add    %al,(%eax)
    9737:	66 e8 f4 f6          	callw  8e2f <_Z7sprintfPcPKcz+0x1e>
    973b:	ff                   	(bad)  
    973c:	ff 66 5a             	jmp    *0x5a(%esi)
                printf("%s", buf);
    973f:	66 59                	pop    %cx
    9741:	66 56                	push   %si
    9743:	e9 de fc 66 0f       	jmp    f679426 <_GLOBAL_OFFSET_TABLE_+0xf66e3fa>
            }
            else {
                putchar(in);
    9748:	be c0 67 66 89       	mov    $0x896667c0,%esi
    974d:	55                   	push   %ebp
    974e:	f0 66 50             	lock push %ax
    9751:	66 e8 2f f2          	callw  8984 <_ZL19system_call_putchari+0x29>
    9755:	ff                   	(bad)  
    9756:	ff 67 66             	jmp    *0x66(%edi)
                buf[pos++] = in;
    9759:	8b 87 88 0b 00 00    	mov    0xb88(%edi),%eax
    975f:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    9764:	67 66 89 8f 88 0b    	mov    %cx,0xb88(%bx)
    976a:	00 00                	add    %al,(%eax)
    976c:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    9771:	67 88 94 07 04       	mov    %dl,0x407(%si)
    9776:	02 00                	add    (%eax),%al
    9778:	00 66 58             	add    %ah,0x58(%esi)
    977b:	e9                   	.byte 0xe9
    977c:	b6 fc                	mov    $0xfc,%dh

Disassembly of section .text._Z4itoaIjEvPcT_ib:

0000977e <_Z4itoaIjEvPcT_ib>:
void itoa(char* buffer, T num, int base, bool captial = false)
    977e:	66 55                	push   %bp
    9780:	66 89 e5             	mov    %sp,%bp
    9783:	66 57                	push   %di
    9785:	66 56                	push   %si
    9787:	66 53                	push   %bx
    9789:	66 83 ec 08          	sub    $0x8,%sp
    978d:	67 66 8b 75 08       	mov    0x8(%di),%si
    9792:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9797:	67 66 8b 7d 10       	mov    0x10(%di),%di
    979c:	67 8a 5d 14          	mov    0x14(%di),%bl
    97a0:	67 88 5d ef          	mov    %bl,-0x11(%di)
    char *p = buffer;
    97a4:	66 89 f1             	mov    %si,%cx
    97a7:	66 31 d2             	xor    %dx,%dx
    97aa:	66 f7 f7             	div    %di
    97ad:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    97b2:	67 80 7d ef 00       	cmpb   $0x0,-0x11(%di)
    97b7:	74 09                	je     97c2 <_Z4itoaIjEvPcT_ib+0x44>
    97b9:	67 8a 9a 08 b0       	mov    -0x4ff8(%bp,%si),%bl
    97be:	00 00                	add    %al,(%eax)
    97c0:	eb 07                	jmp    97c9 <_Z4itoaIjEvPcT_ib+0x4b>
    97c2:	67 8a 9a 19 b0       	mov    -0x4fe7(%bp,%si),%bl
    97c7:	00 00                	add    %al,(%eax)
    97c9:	67 66 8d 51 01       	lea    0x1(%bx,%di),%dx
    97ce:	67 88 5a ff          	mov    %bl,-0x1(%bp,%si)
        if(num == 0) break;
    97d2:	67 66 83 7d f0 00    	cmpw   $0x0,-0x10(%di)
    97d8:	74 05                	je     97df <_Z4itoaIjEvPcT_ib+0x61>
    97da:	66 89 d1             	mov    %dx,%cx
    97dd:	eb c8                	jmp    97a7 <_Z4itoaIjEvPcT_ib+0x29>
    *p = '\0';
    97df:	67 c6 41 01 00       	movb   $0x0,0x1(%bx,%di)
    reverse(buffer);
    97e4:	67 66 89 75 08       	mov    %si,0x8(%di)
}
    97e9:	66 58                	pop    %ax
    97eb:	66 5a                	pop    %dx
    97ed:	66 5b                	pop    %bx
    97ef:	66 5e                	pop    %si
    97f1:	66 5f                	pop    %di
    97f3:	66 5d                	pop    %bp
    reverse(buffer);
    97f5:	e9                   	.byte 0xe9
    97f6:	b0 ee                	mov    $0xee,%al
