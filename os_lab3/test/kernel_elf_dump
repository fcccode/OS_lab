
build/kernel/kernel.bin.elf:     file format elf32-i386


Disassembly of section .text:

00007e00 <_text>:
    7e00:	68 43 7e 68 80       	push   $0x80687e43
    7e05:	00 e8                	add    %ch,%al
    7e07:	21 00                	and    %eax,(%eax)
    7e09:	83 c4 04             	add    $0x4,%esp
    7e0c:	68 45 7e 68 84       	push   $0x84687e45
    7e11:	00 e8                	add    %ch,%al
    7e13:	15 00 83 c4 04       	adc    $0x4c48300,%eax
    7e18:	68 55 7e 68 60       	push   $0x60687e55
    7e1d:	02 e8                	add    %al,%ch
    7e1f:	09 00                	or     %eax,(%eax)
    7e21:	83 c4 04             	add    $0x4,%esp
    7e24:	e8 36 01 fa eb       	call   ebfa7f5f <_GLOBAL_OFFSET_TABLE_+0xebf9d707>
    7e29:	fe                   	.byte 0xfe

00007e2a <install_int>:
    7e2a:	55                   	push   %ebp
    7e2b:	89 e5                	mov    %esp,%ebp
    7e2d:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    7e32:	8b 76 04             	mov    0x4(%esi),%esi
    7e35:	8b 4e 06             	mov    0x6(%esi),%ecx
    7e38:	26 89 0c 26          	mov    %ecx,%es:(%esi,%eiz,1)
    7e3c:	8c 4c 02 8e          	mov    %cs,-0x72(%edx,%eax,1)
    7e40:	c0                   	.byte 0xc0
    7e41:	5d                   	pop    %ebp
    7e42:	c3                   	ret    

00007e43 <interrupt_20h>:
    7e43:	b4 4c                	mov    $0x4c,%ah

00007e45 <interrupt_21h>:
    7e45:	80 fc 4c             	cmp    $0x4c,%ah
    7e48:	75 09                	jne    7e53 <panic_21h_func_not_impl>
    7e4a:	83 c4 06             	add    $0x6,%esp
    7e4d:	66 ff 26             	jmpw   *(%esi)
    7e50:	0a                   	.byte 0xa
    7e51:	a0                   	.byte 0xa0
    7e52:	cf                   	iret   

00007e53 <panic_21h_func_not_impl>:
    7e53:	eb fe                	jmp    7e53 <panic_21h_func_not_impl>

00007e55 <interrupt_98h>:
    7e55:	80 fc 00             	cmp    $0x0,%ah
    7e58:	75 05                	jne    7e5f <func_01>

00007e5a <func_00>:
    7e5a:	e8 b6 02 eb 14       	call   14eb8115 <_GLOBAL_OFFSET_TABLE_+0x14ead8bd>

00007e5f <func_01>:
    7e5f:	60                   	pusha  
    7e60:	80 fc 01             	cmp    $0x1,%ah
    7e63:	75 0e                	jne    7e73 <func_02>
    7e65:	66 50                	push   %ax
    7e67:	66 e8 d0 00          	callw  7f3b <_Z19sys_get_current_ttyv+0xb>
    7e6b:	00 00                	add    %al,(%eax)
    7e6d:	83 c4 04             	add    $0x4,%esp
    7e70:	61                   	popa   
    7e71:	eb 00                	jmp    7e73 <func_02>

00007e73 <func_02>:
    7e73:	cf                   	iret   

00007e74 <_ZL8print_okPc>:
    int mask = 0x00FF;
    ch = ch & mask;
    sys_get_current_tty()->putchar(ch);
}
const char* str = "Welcome to HHOS version 1.2.0\nYou can input help to see how to use it!";
static inline void print_ok(char * mod) {
    7e74:	66 55                	push   %bp
    7e76:	66 89 e5             	mov    %sp,%bp
    printf("%s init [", mod);
    7e79:	66 50                	push   %ax
    7e7b:	66 68 74 a7          	pushw  $0xa774
    7e7f:	00 00                	add    %al,(%eax)
    7e81:	66 e8 02 0e          	callw  8c87 <_Z7sprintfPcPKcz+0x1e>
    7e85:	00 00                	add    %al,(%eax)
    {
        cur_y = y;
    }
    void set_color(int _color)
    {
        color = _color;
    7e87:	66 a1 a0 97 67 66    	mov    0x666797a0,%ax
    7e8d:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
    current_tty->set_color(MAKE_COLOR(VGA_BLACK, VGA_GREEN));
    printf("OK");
    7e94:	66 58                	pop    %ax
    7e96:	66 5a                	pop    %dx
    7e98:	66 68 7e a7          	pushw  $0xa77e
    7e9c:	00 00                	add    %al,(%eax)
    7e9e:	66 e8 e5 0d          	callw  8c87 <_Z7sprintfPcPKcz+0x1e>
    7ea2:	00 00                	add    %al,(%eax)
    7ea4:	66 a1 a0 97 67 66    	mov    0x666797a0,%ax
    7eaa:	c7 40 08 07 00 00 00 	movl   $0x7,0x8(%eax)
    current_tty->set_color(MAKE_COLOR(VGA_BLACK, VGA_WHITE));
    printf("]\n");
    7eb1:	67 66 c7 04 24 81    	movw   $0x8124,(%si)
    7eb7:	a7                   	cmpsl  %es:(%edi),%ds:(%esi)
    7eb8:	00 00                	add    %al,(%eax)
    7eba:	66 e8 c9 0d          	callw  8c87 <_Z7sprintfPcPKcz+0x1e>
    7ebe:	00 00                	add    %al,(%eax)
}
    7ec0:	66 59                	pop    %cx
    7ec2:	66 c9                	leavew 
    7ec4:	66 c3                	retw   

00007ec6 <_ZN3tty11move_cursorEii.isra.1>:
    }
    void move_cursor(int x, int y)
    7ec6:	66 55                	push   %bp
    7ec8:	66 89 e5             	mov    %sp,%bp
    7ecb:	66 53                	push   %bx
    {
        uint16_t pos = x * 80 + y;
    7ecd:	6b c0 50             	imul   $0x50,%eax,%eax
    7ed0:	67 66 8d 1c          	lea    (%si),%bx
    7ed4:	10 66 6a             	adc    %ah,0x6a(%esi)
        sys_outb(0x3D4, 0x0F);
    7ed7:	0f 66 68 d4          	pcmpgtd -0x2c(%eax),%mm5
    7edb:	03 00                	add    (%eax),%eax
    7edd:	00 66 e8             	add    %ah,-0x18(%esi)
    7ee0:	b4 04                	mov    $0x4,%ah
    7ee2:	00 00                	add    %al,(%eax)
        sys_outb(0x3D5, (uint8_t) (pos & 0xFF));
    7ee4:	66 58                	pop    %ax
    7ee6:	66 5a                	pop    %dx
    7ee8:	66 0f b6 c3          	movzbw %bl,%ax
    7eec:	66 50                	push   %ax
    7eee:	66 68 d5 03          	pushw  $0x3d5
    7ef2:	00 00                	add    %al,(%eax)
    7ef4:	66 e8 9e 04          	callw  8396 <sys_inb+0xd>
    7ef8:	00 00                	add    %al,(%eax)
        sys_outb(0x3D4, 0x0E);
    7efa:	66 59                	pop    %cx
    7efc:	66 58                	pop    %ax
    7efe:	66 6a 0e             	pushw  $0xe
    7f01:	66 68 d4 03          	pushw  $0x3d4
    7f05:	00 00                	add    %al,(%eax)
    7f07:	66 e8 8b 04          	callw  8396 <sys_inb+0xd>
    7f0b:	00 00                	add    %al,(%eax)
        sys_outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
    7f0d:	66 58                	pop    %ax
    7f0f:	66 5a                	pop    %dx
    7f11:	66 0f b6 df          	movzbw %bh,%bx
    7f15:	66 53                	push   %bx
    7f17:	66 68 d5 03          	pushw  $0x3d5
    7f1b:	00 00                	add    %al,(%eax)
    7f1d:	66 e8 75 04          	callw  8396 <sys_inb+0xd>
    7f21:	00 00                	add    %al,(%eax)
    7f23:	66 59                	pop    %cx
    7f25:	66 5b                	pop    %bx
    }
    7f27:	67 66 8b 5d fc       	mov    -0x4(%di),%bx
    7f2c:	66 c9                	leavew 
    7f2e:	66 c3                	retw   

00007f30 <_Z19sys_get_current_ttyv>:
tty* sys_get_current_tty(){return current_tty;}
    7f30:	66 55                	push   %bp
    7f32:	66 89 e5             	mov    %sp,%bp
    7f35:	66 a1 a0 97 66 5d    	mov    0x5d6697a0,%ax
    7f3b:	66 c3                	retw   

00007f3d <sys_current_tty_putchar>:
{
    7f3d:	66 55                	push   %bp
    7f3f:	66 89 e5             	mov    %sp,%bp
    ch = ch & mask;
    7f42:	67 66 0f b6 45 08    	movzbw 0x8(%di),%ax
    sys_get_current_tty()->putchar(ch);
    7f48:	66 50                	push   %ax
    7f4a:	66 ff 36             	pushw  (%esi)
    7f4d:	a0 97 66 e8 d3       	mov    0xd3e86697,%al
    7f52:	0d 00 00 66 58       	or     $0x58660000,%eax
}
    7f57:	66 5a                	pop    %dx
    7f59:	66 c9                	leavew 
    7f5b:	66 c3                	retw   

00007f5d <kernel_main>:
//extern "C" void fun_in_c(int ch)
//{
//    int volatile c = ch;
//}
extern "C" void kernel_main()
{
    7f5d:	66 55                	push   %bp
    7f5f:	66 89 e5             	mov    %sp,%bp
    7f62:	66 53                	push   %bx
    7f64:	66 81 ec 58 08       	sub    $0x858,%sp
    7f69:	00 00                	add    %al,(%eax)
        sys_bios_clear_screen();
    7f6b:	66 e8 8f 01          	callw  80fe <sys_bios_print_string+0x1e>
    7f6f:	00 00                	add    %al,(%eax)
        tty_init();
    7f71:	67 66 8d 9d a8 f7    	lea    -0x858(%di),%bx
    7f77:	ff                   	(bad)  
    7f78:	ff 66 53             	jmp    *0x53(%esi)
    7f7b:	66 e8 6f 0d          	callw  8cee <_Z7isspacei+0x27>
    7f7f:	00 00                	add    %al,(%eax)
    tty tty1;
    current_tty = &tty1;
    7f81:	66 89 1e             	mov    %bx,(%esi)
    7f84:	a0 97 66 5b 66       	mov    0x665b6697,%al
    //        "int $0x98\n\t"
    //:
    //:"r"(ch)
    //:"%eax"
    //);
    print_ok("TTY");
    7f89:	b8 84 a7 00 00       	mov    $0xa784,%eax
    7f8e:	66 e8 e0 fe          	callw  7e72 <func_01+0x13>
    7f92:	ff                   	(bad)  
    7f93:	ff 67 66             	jmp    *0x66(%edi)
    void read_help_file()
    {
        sys_read_disk(0, (uint32_t)help, 32, 1);
    }
public:
    sh(){
    7f96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    7f9d:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    7fa4:	00 00                	add    %al,(%eax)
        memset(buf, 0, buf_size);
    7fa6:	66 68 00 02          	pushw  $0x200
    7faa:	00 00                	add    %al,(%eax)
    7fac:	66 6a 00             	pushw  $0x0
    7faf:	67 66 8d 9d b4 f7    	lea    -0x84c(%di),%bx
    7fb5:	ff                   	(bad)  
    7fb6:	ff 66 53             	jmp    *0x53(%esi)
    7fb9:	66 e8 23 05          	callw  84e0 <_Z7memmovePvPKvm+0x4b>
    7fbd:	00 00                	add    %al,(%eax)
        read_prog_record();
    7fbf:	66 83 c4 0c          	add    $0xc,%sp
    7fc3:	66 53                	push   %bx
    7fc5:	66 e8 ed 0f          	callw  8fb6 <_ZN2sh4execEv+0x172>
    7fc9:	00 00                	add    %al,(%eax)
        sys_read_disk(0, (uint32_t)help, 32, 1);
    7fcb:	67 66 c7 04 24 01    	movw   $0x124,(%si)
    7fd1:	00 00                	add    %al,(%eax)
    7fd3:	00 66 6a             	add    %ah,0x6a(%esi)
    7fd6:	20 67 66             	and    %ah,0x66(%edi)
    7fd9:	8d 85 b4 fb ff ff    	lea    -0x44c(%ebp),%eax
    7fdf:	66 50                	push   %ax
    7fe1:	66 6a 00             	pushw  $0x0
    7fe4:	66 e8 e3 03          	callw  83cb <sys_get_scancode+0xf>
    7fe8:	00 00                	add    %al,(%eax)
    sh sh1;
    print_ok("Shell");
    7fea:	66 83 c4 10          	add    $0x10,%sp
    7fee:	66 b8 88 a7          	mov    $0xa788,%ax
    7ff2:	00 00                	add    %al,(%eax)
    7ff4:	66 e8 7a fe          	callw  7e72 <func_01+0x13>
    7ff8:	ff                   	(bad)  
    7ff9:	ff 66 ff             	jmp    *-0x1(%esi)
    printf("%s\n", str);
    7ffc:	36 70 a7             	ss jo  7fa6 <kernel_main+0x49>
    7fff:	66 68 09 a8          	pushw  $0xa809
    8003:	00 00                	add    %al,(%eax)
    8005:	66 e8 7e 0c          	callw  8c87 <_Z7sprintfPcPKcz+0x1e>
    8009:	00 00                	add    %al,(%eax)
        read_help_file();
    }
    void run () {
        printf("%s", prompt);
    800b:	66 58                	pop    %ax
    800d:	66 5a                	pop    %dx
    800f:	66 68 8e a7          	pushw  $0xa78e
    8013:	00 00                	add    %al,(%eax)
    8015:	66 68 32 a8          	pushw  $0xa832
    8019:	00 00                	add    %al,(%eax)
    801b:	66 e8 68 0c          	callw  8c87 <_Z7sprintfPcPKcz+0x1e>
    801f:	00 00                	add    %al,(%eax)
    8021:	66 5a                	pop    %dx
    8023:	66 59                	pop    %cx
        while(true)
        {
            char in = getchar();
    8025:	66 e8 3e 08          	callw  8867 <_Z4putsPKc+0x3f>
    8029:	00 00                	add    %al,(%eax)
    802b:	66 89 c2             	mov    %ax,%dx
            if (in == '\b')
    802e:	3c 08                	cmp    $0x8,%al
    8030:	75 2b                	jne    805d <kernel_main+0x100>
            {
                if(pos != 0){
    8032:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    8038:	74 eb                	je     8025 <kernel_main+0xc8>
                    putchar('\b');
    803a:	66 6a 08             	pushw  $0x8
    803d:	66 e8 ce 07          	callw  880f <_Z6strtolPKcPPci+0x1a7>
    8041:	00 00                	add    %al,(%eax)
                    buf[pos--] = '\0';
    8043:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    8048:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    804d:	67 66 89 55 f8       	mov    %dx,-0x8(%di)
    8052:	67 c6 84 05 b4 f7    	movb   $0xf7,-0x4bfb(%si)
    8058:	ff                   	(bad)  
    8059:	ff 00                	incl   (%eax)
    805b:	eb 6f                	jmp    80cc <kernel_main+0x16f>
                }
            }
            else if (in == 13)
    805d:	3c 0d                	cmp    $0xd,%al
    805f:	75 38                	jne    8099 <kernel_main+0x13c>
            {
                putchar('\n');
    8061:	66 6a 0a             	pushw  $0xa
    8064:	66 e8 a7 07          	callw  880f <_Z6strtolPKcPPci+0x1a7>
    8068:	00 00                	add    %al,(%eax)
                exec();
    806a:	67 66 89 1c          	mov    %bx,(%si)
    806e:	24 66                	and    $0x66,%al
    8070:	e8 cf 0d 00 00       	call   8e44 <_ZN2sh4execEv>
                memset(buf, 0, buf_size);
    8075:	67 66 c7 04 24 00    	movw   $0x24,(%si)
    807b:	02 00                	add    (%eax),%al
    807d:	00 66 6a             	add    %ah,0x6a(%esi)
    8080:	00 66 53             	add    %ah,0x53(%esi)
    8083:	66 e8 59 04          	callw  84e0 <_Z7memmovePvPKvm+0x4b>
    8087:	00 00                	add    %al,(%eax)
                pos = 0;
    8089:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    8090:	00 00                	add    %al,(%eax)
                printf("%s", prompt);
    8092:	66 83 c4 0c          	add    $0xc,%sp
    8096:	e9 76 ff 66 0f       	jmp    f678011 <_GLOBAL_OFFSET_TABLE_+0xf66d7b9>
            }
            else {
                putchar(in);
    809b:	be c0 67 66 89       	mov    $0x896667c0,%esi
    80a0:	95                   	xchg   %eax,%ebp
    80a1:	a4                   	movsb  %ds:(%esi),%es:(%edi)
    80a2:	f7 ff                	idiv   %edi
    80a4:	ff 66 50             	jmp    *0x50(%esi)
    80a7:	66 e8 64 07          	callw  880f <_Z6strtolPKcPPci+0x1a7>
    80ab:	00 00                	add    %al,(%eax)
                buf[pos++] = in;
    80ad:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    80b2:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    80b7:	67 66 89 4d f8       	mov    %cx,-0x8(%di)
    80bc:	67 66 8b 95 a4 f7    	mov    -0x85c(%di),%dx
    80c2:	ff                   	(bad)  
    80c3:	ff 67 88             	jmp    *-0x78(%edi)
    80c6:	94                   	xchg   %eax,%esp
    80c7:	05 b4 f7 ff ff       	add    $0xfffff7b4,%eax
    80cc:	66 58                	pop    %ax
    80ce:	e9 54 ff 66 90       	jmp    90678027 <_GLOBAL_OFFSET_TABLE_+0x9066d7cf>
    80d3:	66 90                	xchg   %ax,%ax
    80d5:	66 90                	xchg   %ax,%ax
    80d7:	66 90                	xchg   %ax,%ax
    80d9:	66 90                	xchg   %ax,%ax
    80db:	66 90                	xchg   %ax,%ax
    80dd:	66 90                	xchg   %ax,%ax
    80df:	90                   	nop

000080e0 <sys_bios_print_string>:
    80e0:	55                   	push   %ebp
    80e1:	89 e5                	mov    %esp,%ebp
    80e3:	8b 4e 0a             	mov    0xa(%esi),%ecx
    80e6:	8b 5e 0e             	mov    0xe(%esi),%ebx
    80e9:	b7 00                	mov    $0x0,%bh
    80eb:	8b 56 12             	mov    0x12(%esi),%edx
    80ee:	8c d8                	mov    %ds,%eax
    80f0:	8e c0                	mov    %eax,%es
    80f2:	b8 01 13 8e ed       	mov    $0xed8e1301,%eax
    80f7:	8b 6e 06             	mov    0x6(%esi),%ebp
    80fa:	cd 10                	int    $0x10
    80fc:	8c ed                	mov    %gs,%ebp
    80fe:	5d                   	pop    %ebp
    80ff:	c3                   	ret    

00008100 <sys_bios_clear_screen>:
    8100:	60                   	pusha  
    8101:	b4 06                	mov    $0x6,%ah
    8103:	b0 00                	mov    $0x0,%al
    8105:	b7 07                	mov    $0x7,%bh
    8107:	b5 00                	mov    $0x0,%ch
    8109:	b1 00                	mov    $0x0,%cl
    810b:	b6 18                	mov    $0x18,%dh
    810d:	b2 4f                	mov    $0x4f,%dl
    810f:	cd 10                	int    $0x10
    8111:	61                   	popa   
    8112:	c3                   	ret    

00008113 <sys_bios_getchar>:
    8113:	b4 00                	mov    $0x0,%ah
    8115:	cd 16                	int    $0x16
    8117:	b4 00                	mov    $0x0,%ah
    8119:	c3                   	ret    

0000811a <sys_execve_bin>:
    811a:	55                   	push   %ebp
    811b:	89 e5                	mov    %esp,%ebp
    811d:	60                   	pusha  
    811e:	1e                   	push   %ds
    811f:	06                   	push   %es
    8120:	b8 00 10 8e d8       	mov    $0xd88e1000,%eax
    8125:	8e c0                	mov    %eax,%es
    8127:	8e d0                	mov    %eax,%ss
    8129:	c7 06 00 a0 cd 00    	movl   $0xcda000,(%esi)
    812f:	c7 06 02 a0 20 00    	movl   $0x20a002,(%esi)
    8135:	c7 06 0a a0 44 81    	movl   $0x8144a00a,(%esi)
    813b:	8c 0e                	mov    %cs,(%esi)
    813d:	0c a0                	or     $0xa0,%al
    813f:	ea                   	.byte 0xea
    8140:	00                   	.byte 0x0
    8141:	a1                   	.byte 0xa1
    8142:	00 10                	add    %dl,(%eax)

00008144 <return_point>:
    8144:	b8 00 00 8e d0       	mov    $0xd08e0000,%eax
    8149:	58                   	pop    %eax
    814a:	8e c0                	mov    %eax,%es
    814c:	58                   	pop    %eax
    814d:	8e d8                	mov    %eax,%ds
    814f:	61                   	popa   
    8150:	5d                   	pop    %ebp
    8151:	c3                   	ret    

00008152 <sys_bios_print_int>:
#include "sys_lib.h"
void sys_bios_print_int(int num, int color, int pos)
{
    8152:	66 55                	push   %bp
    8154:	66 89 e5             	mov    %sp,%bp
    8157:	66 57                	push   %di
    8159:	66 56                	push   %si
    815b:	66 53                	push   %bx
    815d:	66 50                	push   %ax
    int num_ = num;
    815f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    8164:	66 b9 01 00          	mov    $0x1,%cx
    8168:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    816a:	66 bb 0a 00          	mov    $0xa,%bx
    816e:	00 00                	add    %al,(%eax)
    8170:	66 99                	cwtd   
    8172:	66 f7 fb             	idiv   %bx
    8175:	66 85 c0             	test   %ax,%ax
    8178:	74 04                	je     817e <sys_bios_print_int+0x2c>
    817a:	66 41                	inc    %cx
    817c:	eb f2                	jmp    8170 <sys_bios_print_int+0x1e>
    char arr[len + 1];
    817e:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    8183:	66 83 e0 fc          	and    $0xfffc,%ax
    8187:	66 29 c4             	sub    %ax,%sp
    818a:	66 89 e7             	mov    %sp,%di
    818d:	67 66 8d 1c          	lea    (%si),%bx
    8191:	0c 67                	or     $0x67,%al
    int power = 1;
    8193:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    8199:	00 00                	add    %al,(%eax)
    for(int i = 0; i < len; ++i, power *= 10)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    819b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    81a0:	66 99                	cwtd   
    81a2:	67 66 f7 7d f0       	idivw  -0x10(%di)
    81a7:	66 be 0a 00          	mov    $0xa,%si
    81ab:	00 00                	add    %al,(%eax)
    81ad:	66 99                	cwtd   
    81af:	66 f7 fe             	idiv   %si
    81b2:	66 83 c2 30          	add    $0x30,%dx
    81b6:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    81ba:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    81c0:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    81c5:	66 4b                	dec    %bx
    81c7:	66 39 df             	cmp    %bx,%di
    81ca:	75 cf                	jne    819b <sys_bios_print_int+0x49>
    arr[len] = '\0';
    81cc:	67 c6 04 0f          	movb   $0xf,(%si)
    81d0:	00 67 66             	add    %ah,0x66(%edi)
    sys_bios_print_string(arr, len, color, pos);
    81d3:	ff 75 10             	pushl  0x10(%ebp)
    81d6:	67 66 ff 75 0c       	pushw  0xc(%di)
    81db:	66 51                	push   %cx
    81dd:	66 57                	push   %di
    81df:	66 e8 fb fe          	callw  80de <kernel_main+0x181>
    81e3:	ff                   	(bad)  
    81e4:	ff 66 83             	jmp    *-0x7d(%esi)
}
    81e7:	c4 10                	les    (%eax),%edx
    81e9:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    81ee:	66 5b                	pop    %bx
    81f0:	66 5e                	pop    %si
    81f2:	66 5f                	pop    %di
    81f4:	66 5d                	pop    %bp
    81f6:	66 c3                	retw   

000081f8 <sys_putchar>:
    //"mov word ptr gs:[bp],ax\n\t"
                   //".att_syntax noprefix\n\t");
//}

void sys_putchar(int c, int color, int x, int y)
{
    81f8:	66 55                	push   %bp
    81fa:	66 89 e5             	mov    %sp,%bp
    81fd:	66 53                	push   %bx
    int offset = (x * 80 + y)*2;
    uint16_t ch = c | (color << 8);
    81ff:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8204:	66 c1 e0 08          	shl    $0x8,%ax
    8208:	67 66 0b 45 08       	or     0x8(%di),%ax
    int offset = (x * 80 + y)*2;
    820d:	67 66 6b 5d 10 50    	imul   $0x50,0x10(%di),%bx
    8213:	67 66 03 5d 14       	add    0x14(%di),%bx
    8218:	66 01 db             	add    %bx,%bx
    "mov word ptr gs:[bp],ax\n\t"
    "popa\n\t"
    ".att_syntax noprefix\n\t"
    :
    :"a"(ch),"b"(offset)
    :"%ecx");
    821b:	66 60                	pushaw 
    821d:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    8222:	89 dd                	mov    %ebx,%ebp
    8224:	65 89 46 00          	mov    %eax,%gs:0x0(%esi)
    8228:	66 61                	popaw  
}
    822a:	66 5b                	pop    %bx
    822c:	66 5d                	pop    %bp
    822e:	66 c3                	retw   

00008230 <sys_print_string>:
{
    8230:	66 55                	push   %bp
    8232:	66 89 e5             	mov    %sp,%bp
    8235:	66 56                	push   %si
    8237:	66 53                	push   %bx
    8239:	67 66 8b 5d 14       	mov    0x14(%di),%bx
    823e:	67 66 8b 75 0c       	mov    0xc(%di),%si
    8243:	66 01 de             	add    %bx,%si
    8246:	66 89 da             	mov    %bx,%dx
    for(unsigned int i = 0; i < len; ++i)
    8249:	66 39 f2             	cmp    %si,%dx
    824c:	74 28                	je     8276 <sys_print_string+0x46>
        sys_putchar(str[i], color, x, y + i);
    824e:	66 52                	push   %dx
    8250:	67 66 ff 75 10       	pushw  0x10(%di)
    8255:	66 6a 07             	pushw  $0x7
    8258:	67 66 8b 45 08       	mov    0x8(%di),%ax
    825d:	66 29 d8             	sub    %bx,%ax
    8260:	67 66 0f be 04       	movsbw (%si),%ax
    8265:	10 66 50             	adc    %ah,0x50(%esi)
    8268:	66 e8 8a ff          	callw  81f6 <sys_bios_print_int+0xa4>
    826c:	ff                   	(bad)  
    826d:	ff 66 42             	jmp    *0x42(%esi)
    for(unsigned int i = 0; i < len; ++i)
    8270:	66 83 c4 10          	add    $0x10,%sp
    8274:	eb d3                	jmp    8249 <sys_print_string+0x19>
}
    8276:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    827b:	66 5b                	pop    %bx
    827d:	66 5e                	pop    %si
    827f:	66 5d                	pop    %bp
    8281:	66 c3                	retw   

00008283 <sys_print_int>:
{
    8283:	66 55                	push   %bp
    8285:	66 89 e5             	mov    %sp,%bp
    8288:	66 57                	push   %di
    828a:	66 56                	push   %si
    828c:	66 53                	push   %bx
    828e:	66 50                	push   %ax
    int num_ = num;
    8290:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    8295:	66 b9 01 00          	mov    $0x1,%cx
    8299:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    829b:	66 bb 0a 00          	mov    $0xa,%bx
    829f:	00 00                	add    %al,(%eax)
    82a1:	66 99                	cwtd   
    82a3:	66 f7 fb             	idiv   %bx
    82a6:	66 85 c0             	test   %ax,%ax
    82a9:	74 04                	je     82af <sys_print_int+0x2c>
    82ab:	66 41                	inc    %cx
    82ad:	eb f2                	jmp    82a1 <sys_print_int+0x1e>
    char arr[len + 1];
    82af:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    82b4:	66 83 e0 fc          	and    $0xfffc,%ax
    82b8:	66 29 c4             	sub    %ax,%sp
    82bb:	66 89 e7             	mov    %sp,%di
    82be:	67 66 8d 1c          	lea    (%si),%bx
    82c2:	0c 67                	or     $0x67,%al
    int power = 1;
    82c4:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    82ca:	00 00                	add    %al,(%eax)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    82cc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    82d1:	66 99                	cwtd   
    82d3:	67 66 f7 7d f0       	idivw  -0x10(%di)
    82d8:	66 be 0a 00          	mov    $0xa,%si
    82dc:	00 00                	add    %al,(%eax)
    82de:	66 99                	cwtd   
    82e0:	66 f7 fe             	idiv   %si
    82e3:	66 83 c2 30          	add    $0x30,%dx
    82e7:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    82eb:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    82f1:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    82f6:	66 4b                	dec    %bx
    82f8:	66 39 df             	cmp    %bx,%di
    82fb:	75 cf                	jne    82cc <sys_print_int+0x49>
    arr[len] = '\0';
    82fd:	67 c6 04 0f          	movb   $0xf,(%si)
    8301:	00 67 66             	add    %ah,0x66(%edi)
    sys_print_string(arr, len, x, y); 
    8304:	ff 75 10             	pushl  0x10(%ebp)
    8307:	67 66 ff 75 0c       	pushw  0xc(%di)
    830c:	66 51                	push   %cx
    830e:	66 57                	push   %di
    8310:	66 e8 1a ff          	callw  822e <sys_putchar+0x36>
    8314:	ff                   	(bad)  
    8315:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8318:	c4 10                	les    (%eax),%edx
    831a:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    831f:	66 5b                	pop    %bx
    8321:	66 5e                	pop    %si
    8323:	66 5f                	pop    %di
    8325:	66 5d                	pop    %bp
    8327:	66 c3                	retw   

00008329 <sys_bios_scroll_up>:

void sys_bios_scroll_up(int color)
{
    8329:	66 55                	push   %bp
    832b:	66 89 e5             	mov    %sp,%bp
    "movb $79, %%dl\n\t"
    "movb $0x06, %%ah\n\t"
    "int $0x10\n\t"
    "popa\n\t"
    :
    : "g"(color));
    832e:	66 60                	pushaw 
    8330:	b0 01                	mov    $0x1,%al
    8332:	67 8a 7d 08          	mov    0x8(%di),%bh
    8336:	b5 00                	mov    $0x0,%ch
    8338:	b1 00                	mov    $0x0,%cl
    833a:	b6 18                	mov    $0x18,%dh
    833c:	b2 4f                	mov    $0x4f,%dl
    833e:	b4 06                	mov    $0x6,%ah
    8340:	cd 10                	int    $0x10
    8342:	66 61                	popaw  
}
    8344:	66 5d                	pop    %bp
    8346:	66 c3                	retw   

00008348 <sys_bios_putchar>:

void sys_bios_putchar(char c, int color, int x, int y)
{
    8348:	66 55                	push   %bp
    834a:	66 89 e5             	mov    %sp,%bp
    834d:	66 50                	push   %ax
    834f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8354:	67 88 45 fc          	mov    %al,-0x4(%di)
    sys_bios_print_string(&c, 1, color, MAKE_POS(x, y));
    8358:	67 66 8b 45 10       	mov    0x10(%di),%ax
    835d:	66 c1 e0 08          	shl    $0x8,%ax
    8361:	67 66 0f b6 55 14    	movzbw 0x14(%di),%dx
    8367:	66 09 d0             	or     %dx,%ax
    836a:	66 50                	push   %ax
    836c:	67 66 ff 75 0c       	pushw  0xc(%di)
    8371:	66 6a 01             	pushw  $0x1
    8374:	67 66 8d 45 fc       	lea    -0x4(%di),%ax
    8379:	66 50                	push   %ax
    837b:	66 e8 5f fd          	callw  80de <kernel_main+0x181>
    837f:	ff                   	(bad)  
    8380:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8383:	c4 10                	les    (%eax),%edx
    8385:	66 c9                	leavew 
    8387:	66 c3                	retw   

00008389 <sys_inb>:

uint8_t sys_inb(uint16_t port)
{
    8389:	66 55                	push   %bp
    838b:	66 89 e5             	mov    %sp,%bp
    uint8_t ret;
    asm volatile ( "inb %1, %0"
                   : "=a"(ret)
                   : "Nd"(port) );
    838e:	67 66 8b 55 08       	mov    0x8(%di),%dx
    8393:	ec                   	in     (%dx),%al
    return ret;
}
    8394:	66 5d                	pop    %bp
    8396:	66 c3                	retw   

00008398 <sys_outb>:
//    asm(".att_syntax noprefix\n");
//    return ret;
//}

void sys_outb(uint16_t port, uint8_t data)
{
    8398:	66 55                	push   %bp
    839a:	66 89 e5             	mov    %sp,%bp
    asm volatile ( "outb %0, %1"
                   : 
                   : "a"(data), "Nd"(port) );
    839d:	67 66 8b 55 08       	mov    0x8(%di),%dx
    83a2:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    83a7:	ee                   	out    %al,(%dx)
}
    83a8:	66 5d                	pop    %bp
    83aa:	66 c3                	retw   

000083ac <sys_dbg_bochs_putc>:
//                    : "=a"(ret)
//                    : "Nd"(port) );
//     return ret;
// }

void sys_dbg_bochs_putc(char c){
    83ac:	66 55                	push   %bp
    83ae:	66 89 e5             	mov    %sp,%bp
                   : "a"(data), "Nd"(port) );
    83b1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    83b6:	e6 e9                	out    %al,$0xe9
    sys_outb(0xe9, (uint8_t)c);
}
    83b8:	66 5d                	pop    %bp
    83ba:	66 c3                	retw   

000083bc <sys_get_scancode>:

char sys_get_scancode()
{
    83bc:	66 55                	push   %bp
    83be:	66 89 e5             	mov    %sp,%bp
                   : "Nd"(port) );
    83c1:	e4 64                	in     $0x64,%al
    while (!(sys_inb(0x64) & 1));
    83c3:	a8 01                	test   $0x1,%al
    83c5:	74 fa                	je     83c1 <sys_get_scancode+0x5>
                   : "Nd"(port) );
    83c7:	e4 60                	in     $0x60,%al
    return sys_inb(0x60);
}
    83c9:	66 5d                	pop    %bp
    83cb:	66 c3                	retw   

000083cd <sys_read_disk>:

void sys_read_disk(uint32_t segment, uint32_t address, uint16_t logical_start_sector, uint8_t secotr_cnt)
{
    83cd:	66 55                	push   %bp
    83cf:	66 89 e5             	mov    %sp,%bp
    83d2:	66 53                	push   %bx
    uint8_t head = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) / FLOPPY_SECTOR_PER_TRACK;
    83d4:	67 66 0f b7 45 10    	movzww 0x10(%di),%ax
    83da:	66 b9 24 00          	mov    $0x24,%cx
    83de:	00 00                	add    %al,(%eax)
    83e0:	66 99                	cwtd   
    83e2:	66 f7 f9             	idiv   %cx
    83e5:	66 89 c1             	mov    %ax,%cx
    83e8:	66 bb 12 00          	mov    $0x12,%bx
    83ec:	00 00                	add    %al,(%eax)
    83ee:	66 89 d0             	mov    %dx,%ax
    83f1:	66 99                	cwtd   
    83f3:	66 f7 fb             	idiv   %bx
    uint16_t cylinder = logical_start_sector / (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK);
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    //位操作一定要注意类型匹配（两小时）
    uint16_t mask1 = 255;
    uint16_t mask2 = 768;
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    83f6:	66 89 cb             	mov    %cx,%bx
    83f9:	66 c1 e3 08          	shl    $0x8,%bx
    83fd:	66 81 e1 00 03       	and    $0x300,%cx
    8402:	00 00                	add    %al,(%eax)
    8404:	66 c1 f9 02          	sar    $0x2,%cx
    8408:	66 09 d9             	or     %bx,%cx
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    840b:	66 42                	inc    %dx
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    840d:	66 09 d1             	or     %dx,%cx
     "movb %4, %%al\n\t"    //扇区数
     "movb $0, %%dl\n\t"    //驱动器号
     "movb $2, %%ah\n\t"    //功能号
     "int $0x13\n\t"
     "pop %%es\n\t"
     : :"g"(segment), "g"(address), "g"(head), "g"(_cx), "g" (secotr_cnt));
    8410:	06                   	push   %es
    8411:	67 8b 5d 08          	mov    0x8(%di),%ebx
    8415:	8e c3                	mov    %ebx,%es
    8417:	67 8b 5d 0c          	mov    0xc(%di),%ebx
    841b:	88 c6                	mov    %al,%dh
    841d:	89 c9                	mov    %ecx,%ecx
    841f:	67 8a 45 14          	mov    0x14(%di),%al
    8423:	b2 00                	mov    $0x0,%dl
    8425:	b4 02                	mov    $0x2,%ah
    8427:	cd 13                	int    $0x13
    8429:	07                   	pop    %es
}
    842a:	66 5b                	pop    %bx
    842c:	66 5d                	pop    %bp
    842e:	66 c3                	retw   

00008430 <_Z6memcmpPKvS0_m>:
namespace hhlibc {

#endif

int memcmp(const void * _s1, const void* _s2, size_t n)
{
    8430:	66 55                	push   %bp
    8432:	66 89 e5             	mov    %sp,%bp
    8435:	66 31 d2             	xor    %dx,%dx
    auto s1 = reinterpret_cast<const unsigned char*>(_s1);
    auto s2 = reinterpret_cast<const unsigned char*>(_s2);
    while(n--)
    8438:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    843d:	74 22                	je     8461 <_Z6memcmpPKvS0_m+0x31>
    {
        if(*s1 != *s2)          //**不能**让!=时跳出然后返回*s1 - *s2
    843f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8444:	67 66 0f b6 04       	movzbw (%si),%ax
    8449:	10 66 42             	adc    %ah,0x42(%esi)
    844c:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    8451:	67 66 0f b6 4c 11    	movzbw 0x11(%si),%cx
    8457:	ff                   	(bad)  
    8458:	38 c8                	cmp    %cl,%al
    845a:	74 dc                	je     8438 <_Z6memcmpPKvS0_m+0x8>
        {                       //因为那样在实际上==的时候，会比较错误
            return *s1 - *s2;
    845c:	66 29 c8             	sub    %cx,%ax
    845f:	eb 03                	jmp    8464 <_Z6memcmpPKvS0_m+0x34>
        }
        ++s1;
        ++s2;
    }
    return 0;
    8461:	66 31 c0             	xor    %ax,%ax
}
    8464:	66 5d                	pop    %bp
    8466:	66 c3                	retw   

00008468 <_Z6memcpyPvPKvm>:

void* memcpy(void* _dst, const void* _src, size_t n)
{
    8468:	66 55                	push   %bp
    846a:	66 89 e5             	mov    %sp,%bp
    846d:	66 53                	push   %bx
    846f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8474:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    8479:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    while (n--)
    847c:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    8481:	74 0c                	je     848f <_Z6memcpyPvPKvm+0x27>
    {
        *(dst++) = *(src++);
    8483:	67 8a 0c             	mov    (%si),%cl
    8486:	13 67 88             	adc    -0x78(%edi),%esp
    8489:	0c 10                	or     $0x10,%al
    848b:	66 42                	inc    %dx
    while (n--)
    848d:	eb ed                	jmp    847c <_Z6memcpyPvPKvm+0x14>
    }
    return _dst;
}
    848f:	66 5b                	pop    %bx
    8491:	66 5d                	pop    %bp
    8493:	66 c3                	retw   

00008495 <_Z7memmovePvPKvm>:
void* memmove(void* _dst, const void* _src, size_t n)
{
    8495:	66 55                	push   %bp
    8497:	66 89 e5             	mov    %sp,%bp
    849a:	66 56                	push   %si
    849c:	66 53                	push   %bx
    849e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    84a3:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    84a8:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    if(dst < src)
    84ad:	66 39 d8             	cmp    %bx,%ax
    84b0:	73 14                	jae    84c6 <_Z7memmovePvPKvm+0x31>
    84b2:	66 31 c9             	xor    %cx,%cx
    {
        while(n--)
    84b5:	66 39 f1             	cmp    %si,%cx
    84b8:	74 20                	je     84da <_Z7memmovePvPKvm+0x45>
        {
            *(dst++) = *(src++);
    84ba:	67 8a 14             	mov    (%si),%dl
    84bd:	0b 67 88             	or     -0x78(%edi),%esp
    84c0:	14 08                	adc    $0x8,%al
    84c2:	66 41                	inc    %cx
        while(n--)
    84c4:	eb ef                	jmp    84b5 <_Z7memmovePvPKvm+0x20>
        }
    }
    else if(dst > src)
    84c6:	76 12                	jbe    84da <_Z7memmovePvPKvm+0x45>
    {
        src += n;
        dst += n;
        while(n--)
    84c8:	66 4e                	dec    %si
    84ca:	66 83 fe ff          	cmp    $0xffff,%si
    84ce:	74 0a                	je     84da <_Z7memmovePvPKvm+0x45>
        {
            *(--dst) = *(--src);
    84d0:	67 8a 0c             	mov    (%si),%cl
    84d3:	33 67 88             	xor    -0x78(%edi),%esp
    84d6:	0c 30                	or     $0x30,%al
        while(n--)
    84d8:	eb ee                	jmp    84c8 <_Z7memmovePvPKvm+0x33>
        }
    }
    return _dst;
}
    84da:	66 5b                	pop    %bx
    84dc:	66 5e                	pop    %si
    84de:	66 5d                	pop    %bp
    84e0:	66 c3                	retw   

000084e2 <_Z6memsetPvim>:
void* memset(void* _dst, int c, size_t n)
{
    84e2:	66 55                	push   %bp
    84e4:	66 89 e5             	mov    %sp,%bp
    84e7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    84ec:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    84f1:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    while(n--)
    84f4:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    84f9:	74 08                	je     8503 <_Z6memsetPvim+0x21>
    {
        *(dst++) = static_cast<unsigned char>(c);
    84fb:	67 88 0c             	mov    %cl,(%si)
    84fe:	10 66 42             	adc    %ah,0x42(%esi)
    while(n--)
    8501:	eb f1                	jmp    84f4 <_Z6memsetPvim+0x12>
    }
    return _dst;
}
    8503:	66 5d                	pop    %bp
    8505:	66 c3                	retw   

00008507 <_Z6strlenPKc>:
size_t strlen(const char* _str)
{
    8507:	66 55                	push   %bp
    8509:	66 89 e5             	mov    %sp,%bp
    850c:	67 66 8b 55 08       	mov    0x8(%di),%dx
    auto str = _str;
    size_t len = 0;
    8511:	66 31 c0             	xor    %ax,%ax
    while(*(_str++))
    8514:	67 80 3c 02          	cmpb   $0x2,(%si)
    8518:	00 74 04 66          	add    %dh,0x66(%esp,%eax,1)
    {
        len++;
    851c:	40                   	inc    %eax
    while(*(_str++))
    851d:	eb f5                	jmp    8514 <_Z6strlenPKc+0xd>
    }
    return len;
}
    851f:	66 5d                	pop    %bp
    8521:	66 c3                	retw   

00008523 <_Z6strcpyPcPKc>:
char *strcpy(char* _dst, const char* _src)
{
    8523:	66 55                	push   %bp
    8525:	66 89 e5             	mov    %sp,%bp
    8528:	66 56                	push   %si
    852a:	66 53                	push   %bx
    852c:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8531:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    auto len = strlen(_src);
    8536:	66 51                	push   %cx
    8538:	66 e8 c9 ff          	callw  8505 <_Z6memsetPvim+0x23>
    853c:	ff                   	(bad)  
    853d:	ff 66 89             	jmp    *-0x77(%esi)
    8540:	c6                   	(bad)  
    memcpy(reinterpret_cast<void*>(_dst), reinterpret_cast<const void *>(_src), len);
    8541:	67 66 89 04          	mov    %ax,(%si)
    8545:	24 66                	and    $0x66,%al
    8547:	51                   	push   %ecx
    8548:	66 53                	push   %bx
    854a:	66 e8 18 ff          	callw  8466 <_Z6memcmpPKvS0_m+0x36>
    854e:	ff                   	(bad)  
    854f:	ff 67 c6             	jmp    *-0x3a(%edi)
    _dst[len] = '\0';
    8552:	04 33                	add    $0x33,%al
    8554:	00 66 89             	add    %ah,-0x77(%esi)
    return _dst;
}
    8557:	d8 67 66             	fsubs  0x66(%edi)
    855a:	8d 65 f8             	lea    -0x8(%ebp),%esp
    855d:	66 5b                	pop    %bx
    855f:	66 5e                	pop    %si
    8561:	66 5d                	pop    %bp
    8563:	66 c3                	retw   

00008565 <_Z6strcmpPKcS0_>:
int strcmp(const char* _s1, const char* _s2)
{
    8565:	66 55                	push   %bp
    8567:	66 89 e5             	mov    %sp,%bp
    856a:	66 57                	push   %di
    856c:	66 56                	push   %si
    856e:	66 53                	push   %bx
    8570:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    8575:	67 66 8b 7d 0c       	mov    0xc(%di),%di
    auto len1 = strlen(_s1);
    857a:	66 51                	push   %cx
    857c:	66 e8 85 ff          	callw  8505 <_Z6memsetPvim+0x23>
    8580:	ff                   	(bad)  
    8581:	ff 66 89             	jmp    *-0x77(%esi)
    8584:	c3                   	ret    
    auto len2 = strlen(_s2);
    8585:	67 66 89 3c          	mov    %di,(%si)
    8589:	24 66                	and    $0x66,%al
    858b:	e8 77 ff ff ff       	call   8507 <_Z6strlenPKc>
    8590:	66 5a                	pop    %dx
    8592:	66 89 c6             	mov    %ax,%si
    auto len = len1 < len2 ? len1 : len2;
    auto ret = memcmp(reinterpret_cast<const void*>(_s1), reinterpret_cast<const void *>(_s2), len);
    8595:	66 39 c3             	cmp    %ax,%bx
    8598:	77 03                	ja     859d <_Z6strcmpPKcS0_+0x38>
    859a:	66 89 d8             	mov    %bx,%ax
    859d:	66 50                	push   %ax
    859f:	66 57                	push   %di
    85a1:	66 51                	push   %cx
    85a3:	66 e8 87 fe          	callw  842e <sys_read_disk+0x61>
    85a7:	ff                   	(bad)  
    85a8:	ff 66 83             	jmp    *-0x7d(%esi)
    85ab:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    if(ret == 0)
    85ae:	85 c0                	test   %eax,%eax
    85b0:	75 11                	jne    85c3 <_Z6strcmpPKcS0_+0x5e>
    {
        if(len1 == len2)
    85b2:	66 39 f3             	cmp    %si,%bx
    85b5:	74 0c                	je     85c3 <_Z6strcmpPKcS0_+0x5e>
        {
            return -1;
        }
        else
        {
            return 1;
    85b7:	66 39 de             	cmp    %bx,%si
    85ba:	66 19 c0             	sbb    %ax,%ax
    85bd:	66 83 e0 02          	and    $0x2,%ax
    85c1:	66 48                	dec    %ax
        }
    }
    return ret;
}
    85c3:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    85c8:	66 5b                	pop    %bx
    85ca:	66 5e                	pop    %si
    85cc:	66 5f                	pop    %di
    85ce:	66 5d                	pop    %bp
    85d0:	66 c3                	retw   

000085d2 <_Z7reversePc>:

void reverse(char* buffer)
{
    85d2:	66 55                	push   %bp
    85d4:	66 89 e5             	mov    %sp,%bp
    85d7:	66 56                	push   %si
    85d9:	66 53                	push   %bx
    85db:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    char ch;
    size_t len = strlen(buffer);
    85e0:	66 51                	push   %cx
    85e2:	66 e8 1f ff          	callw  8505 <_Z6memsetPvim+0x23>
    85e6:	ff                   	(bad)  
    85e7:	ff 66 5a             	jmp    *0x5a(%esi)
    85ea:	66 89 ca             	mov    %cx,%dx
    85ed:	67 66 8d 0c          	lea    (%si),%cx
    85f1:	01 66 d1             	add    %esp,-0x2f(%esi)
    for(size_t i = 0; i < len / 2; ++i)
    85f4:	e8 67 66 8d 34       	call   348dec60 <_GLOBAL_OFFSET_TABLE_+0x348d4408>
    85f9:	10 66 49             	adc    %ah,0x49(%esi)
    85fc:	66 39 f2             	cmp    %si,%dx
    85ff:	74 10                	je     8611 <_Z7reversePc+0x3f>
    {
        ch = *(buffer + i);
    8601:	67 8a 1a             	mov    (%bp,%si),%bl
        *(buffer + i) = *(buffer + len - 1 - i);
    8604:	67 8a 01             	mov    (%bx,%di),%al
    8607:	67 88 02             	mov    %al,(%bp,%si)
        *(buffer + len - 1 - i)  = ch;
    860a:	67 88 19             	mov    %bl,(%bx,%di)
    860d:	66 42                	inc    %dx
    for(size_t i = 0; i < len / 2; ++i)
    860f:	eb e9                	jmp    85fa <_Z7reversePc+0x28>
    }
}
    8611:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    8616:	66 5b                	pop    %bx
    8618:	66 5e                	pop    %si
    861a:	66 5d                	pop    %bp
    861c:	66 c3                	retw   

0000861e <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0>:
    if(base == 0 && !auto_detected)
    {
        base = 10;
        auto_detected = true;
    }
    auto char_to_digit = [](auto ch){
    861e:	66 55                	push   %bp
    8620:	66 89 e5             	mov    %sp,%bp
    8623:	66 89 c2             	mov    %ax,%dx
        int digit;
        if(ch >= '0' && ch <= '9')
    8626:	66 83 e8 30          	sub    $0x30,%ax
    862a:	3c 09                	cmp    $0x9,%al
    862c:	77 0b                	ja     8639 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x1b>
            digit = ch - '0';
    862e:	66 0f be d2          	movsbw %dl,%dx
    8632:	67 66 8d 42 d0       	lea    -0x30(%bp,%si),%ax
    8637:	eb 2b                	jmp    8664 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='A' && ch <= 'F')
    8639:	67 66 8d 42 bf       	lea    -0x41(%bp,%si),%ax
    863e:	3c 05                	cmp    $0x5,%al
    8640:	77 0b                	ja     864d <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x2f>
            digit = ch - 'A' + 10;
    8642:	66 0f be d2          	movsbw %dl,%dx
    8646:	67 66 8d 42 c9       	lea    -0x37(%bp,%si),%ax
    864b:	eb 17                	jmp    8664 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='a' && ch <= 'f')
    864d:	67 66 8d 4a 9f       	lea    -0x61(%bp,%si),%cx
            digit = ch - 'a' + 10;
        else
            digit = -1;
    8652:	66 83 c8 ff          	or     $0xffff,%ax
        else if(ch >='a' && ch <= 'f')
    8656:	80 f9 05             	cmp    $0x5,%cl
    8659:	77 09                	ja     8664 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
            digit = ch - 'a' + 10;
    865b:	66 0f be d2          	movsbw %dl,%dx
    865f:	67 66 8d 42 a9       	lea    -0x57(%bp,%si),%ax
        return digit;
    };
    8664:	66 5d                	pop    %bp
    8666:	66 c3                	retw   

00008668 <_Z6strtolPKcPPci>:
{
    8668:	66 55                	push   %bp
    866a:	66 89 e5             	mov    %sp,%bp
    866d:	66 57                	push   %di
    866f:	66 56                	push   %si
    8671:	66 53                	push   %bx
    8673:	66 83 ec 0c          	sub    $0xc,%sp
    8677:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto start = str;   
    867c:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    while(isspace(*start))
    8681:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    8686:	66 50                	push   %ax
    8688:	66 e8 39 06          	callw  8cc5 <_Z6printfPKcz+0x3c>
    868c:	00 00                	add    %al,(%eax)
    868e:	66 5f                	pop    %di
    8690:	66 85 c0             	test   %ax,%ax
    8693:	74 04                	je     8699 <_Z6strtolPKcPPci+0x31>
        ++start;
    8695:	66 43                	inc    %bx
    while(isspace(*start))
    8697:	eb e8                	jmp    8681 <_Z6strtolPKcPPci+0x19>
    size_t len_num = strlen(start);//非白空格数字串长度
    8699:	66 53                	push   %bx
    869b:	66 e8 66 fe          	callw  8505 <_Z6memsetPvim+0x23>
    869f:	ff                   	(bad)  
    86a0:	ff 66 59             	jmp    *0x59(%esi)
    if(len_num == 0)
    86a3:	66 85 c0             	test   %ax,%ax
    86a6:	75 1e                	jne    86c6 <_Z6strtolPKcPPci+0x5e>
        return 0;
    86a8:	66 31 c0             	xor    %ax,%ax
        if(str_end) *str_end = const_cast<char*>(str);
    86ab:	67 66 83 7d 0c 00    	cmpw   $0x0,0xc(%di)
    86b1:	0f 84 4d 01 67 66    	je     66678804 <_GLOBAL_OFFSET_TABLE_+0x6666dfac>
    86b7:	8b 7d 0c             	mov    0xc(%ebp),%edi
    86ba:	67 66 8b 75 08       	mov    0x8(%di),%si
    86bf:	67 66 89 37          	mov    %si,(%bx)
    86c3:	e9 3c 01 67 8a       	jmp    8a678804 <_GLOBAL_OFFSET_TABLE_+0x8a66dfac>
    if(*high == '+' || *high == '-')
    86c8:	13 80 fa 2b 74 10    	adc    0x10742bfa(%eax),%eax
    86ce:	80 fa 2d             	cmp    $0x2d,%dl
    86d1:	75 21                	jne    86f4 <_Z6strtolPKcPPci+0x8c>
        sign = (*high == '+') ? 1 : -1;
    86d3:	67 66 c7 45 f0 ff ff 	movw   $0xffff,-0x10(%di)
    86da:	ff                   	(bad)  
    86db:	ff                   	(bad)  
    86dc:	eb 09                	jmp    86e7 <_Z6strtolPKcPPci+0x7f>
    86de:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    86e5:	00 00                	add    %al,(%eax)
        ++high;
    86e7:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
        sign_char_bit = 1;
    86ec:	66 ba 01 00          	mov    $0x1,%dx
    86f0:	00 00                	add    %al,(%eax)
    86f2:	eb 0f                	jmp    8703 <_Z6strtolPKcPPci+0x9b>
    86f4:	66 89 df             	mov    %bx,%di
    size_t sign_char_bit = 0;
    86f7:	66 31 d2             	xor    %dx,%dx
    int sign = 1;
    86fa:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    8701:	00 00                	add    %al,(%eax)
    if(base == 16 || (base == 0 && !auto_detected))
    8703:	66 f7 c6 ef ff       	test   $0xffef,%si
    8708:	ff                   	(bad)  
    8709:	ff 75 29             	pushl  0x29(%ebp)
        if(len_num > 1 + sign_char_bit && 
    870c:	67 66 8d 4a 01       	lea    0x1(%bp,%si),%cx
    8711:	66 39 c1             	cmp    %ax,%cx
    8714:	73 1f                	jae    8735 <_Z6strtolPKcPPci+0xcd>
    8716:	67 80 3f 30          	cmpb   $0x30,(%bx)
    871a:	75 19                	jne    8735 <_Z6strtolPKcPPci+0xcd>
           (*(high + 1) == 'x' || *(high + 1) == 'X'))
    871c:	67 8a 4f 01          	mov    0x1(%bx),%cl
    8720:	66 83 e1 df          	and    $0xffdf,%cx
    8724:	80 f9 58             	cmp    $0x58,%cl
    8727:	75 0c                	jne    8735 <_Z6strtolPKcPPci+0xcd>
             high += 2;
    8729:	66 83 c7 02          	add    $0x2,%di
             base = 16;
    872d:	66 be 10 00          	mov    $0x10,%si
    8731:	00 00                	add    %al,(%eax)
    8733:	eb 2b                	jmp    8760 <_Z6strtolPKcPPci+0xf8>
    if(base == 8 || (base == 0 && !auto_detected))
    8735:	66 83 fe 08          	cmp    $0x8,%si
    8739:	74 05                	je     8740 <_Z6strtolPKcPPci+0xd8>
    873b:	66 85 f6             	test   %si,%si
    873e:	75 20                	jne    8760 <_Z6strtolPKcPPci+0xf8>
        if(len_num > sign_char_bit && *high == 0)   //存在八进制前缀0
    8740:	66 39 c2             	cmp    %ax,%dx
    8743:	73 10                	jae    8755 <_Z6strtolPKcPPci+0xed>
    8745:	67 80 3f 00          	cmpb   $0x0,(%bx)
    8749:	75 0a                	jne    8755 <_Z6strtolPKcPPci+0xed>
            high += 1;
    874b:	66 47                	inc    %di
            base = 8;
    874d:	66 be 08 00          	mov    $0x8,%si
    8751:	00 00                	add    %al,(%eax)
    8753:	eb 0b                	jmp    8760 <_Z6strtolPKcPPci+0xf8>
    if(base == 0 && !auto_detected)
    8755:	66 85 f6             	test   %si,%si
    8758:	75 06                	jne    8760 <_Z6strtolPKcPPci+0xf8>
        base = 10;
    875a:	66 be 0a 00          	mov    $0xa,%si
    875e:	00 00                	add    %al,(%eax)
    bool has_vaild_char = false;
    8760:	67 c6 45 ec 00       	movb   $0x0,-0x14(%di)
    auto low = start;   
    //使low指向数字低位后的一个位置
    while(!isspace(*low) &&             //判断是否是白空格
    8765:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    876a:	66 50                	push   %ax
    876c:	66 e8 55 05          	callw  8cc5 <_Z6printfPKcz+0x3c>
    8770:	00 00                	add    %al,(%eax)
          (*low != '\0') &&             //判断是否字符串结束
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    8772:	66 5a                	pop    %dx
    8774:	66 85 c0             	test   %ax,%ax
    8777:	75 28                	jne    87a1 <_Z6strtolPKcPPci+0x139>
          (*low != '\0') &&             //判断是否字符串结束
    8779:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    while(!isspace(*low) &&             //判断是否是白空格
    877e:	84 c0                	test   %al,%al
    8780:	74 1f                	je     87a1 <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    8782:	66 e8 96 fe          	callw  861c <_Z7reversePc+0x4a>
    8786:	ff                   	(bad)  
    8787:	ff 66 83             	jmp    *-0x7d(%esi)
          (*low != '\0') &&             //判断是否字符串结束
    878a:	f8                   	clc    
    878b:	ff 0f                	decl   (%edi)
    878d:	95                   	xchg   %eax,%ebp
    878e:	c2 66 39             	ret    $0x3966
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    8791:	f0 0f 9c c0          	lock setl %al
    8795:	20 c2                	and    %al,%dl
    8797:	74 08                	je     87a1 <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) < base    //判断是否是该进制
          )
    {
        ++low;
    8799:	66 43                	inc    %bx
        has_vaild_char = true;
    879b:	67 88 55 ec          	mov    %dl,-0x14(%di)
    while(!isspace(*low) &&             //判断是否是白空格
    879f:	eb c4                	jmp    8765 <_Z6strtolPKcPPci+0xfd>
    }
    if(!has_vaild_char)
    87a1:	67 80 7d ec 00       	cmpb   $0x0,-0x14(%di)
    87a6:	0f 84 fe fe 67 66    	je     666886aa <_GLOBAL_OFFSET_TABLE_+0x6667de52>
        if (str_end) *str_end = const_cast<char*>(str);
        return 0;
    }
    long power = 1;
    long ret = 0;
    if(str_end) *str_end = const_cast<char*>(low);
    87ac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
    87b0:	74 09                	je     87bb <_Z6strtolPKcPPci+0x153>
    87b2:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    87b7:	67 66 89 18          	mov    %bx,(%bx,%si)
    for(auto p = low - 1; p >= high; --p)
    87bb:	66 4b                	dec    %bx
    long ret = 0;
    87bd:	66 31 c9             	xor    %cx,%cx
    long power = 1;
    87c0:	66 ba 01 00          	mov    $0x1,%dx
    87c4:	00 00                	add    %al,(%eax)
    87c6:	67 66 89 55 e8       	mov    %dx,-0x18(%di)
    for(auto p = low - 1; p >= high; --p)
    87cb:	66 39 fb             	cmp    %di,%bx
    87ce:	72 29                	jb     87f9 <_Z6strtolPKcPPci+0x191>
    87d0:	67 66 89 4d ec       	mov    %cx,-0x14(%di)
    {
        int digit = char_to_digit(*p);
    87d5:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    87da:	66 e8 3e fe          	callw  861c <_Z7reversePc+0x4a>
    87de:	ff                   	(bad)  
    87df:	ff 67 66             	jmp    *0x66(%edi)
        ret += power * digit;
    87e2:	8b 55 e8             	mov    -0x18(%ebp),%edx
    87e5:	66 0f af c2          	imul   %dx,%ax
    87e9:	67 66 8b 4d ec       	mov    -0x14(%di),%cx
    87ee:	66 01 c1             	add    %ax,%cx
        
        power *= base;
    87f1:	66 0f af d6          	imul   %si,%dx
    for(auto p = low - 1; p >= high; --p)
    87f5:	66 4b                	dec    %bx
    87f7:	eb cd                	jmp    87c6 <_Z6strtolPKcPPci+0x15e>
    }
    ret *= sign;
    87f9:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    87fe:	66 0f af c1          	imul   %cx,%ax
    return ret;
}
    8802:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8807:	66 5b                	pop    %bx
    8809:	66 5e                	pop    %si
    880b:	66 5f                	pop    %di
    880d:	66 5d                	pop    %bp
    880f:	66 c3                	retw   

00008811 <_Z7putchari>:
namespace hhlibc {

#endif
#ifndef _HHOS_LIBC_TEST
int putchar( int ch )
{
    8811:	66 55                	push   %bp
    8813:	66 89 e5             	mov    %sp,%bp
    8816:	67 66 8b 55 08       	mov    0x8(%di),%dx
    "movb $1, %%ah\n\t"
    "int $0x98\n\t"
    :
    :"r"(c)
    :"%eax"
    );
    881b:	88 d0                	mov    %dl,%al
    881d:	b4 01                	mov    $0x1,%ah
    881f:	cd 98                	int    $0x98
    //sys_get_current_tty()->putchar(ch);
    system_call_putchar(ch);
    //sys_tty_putchar(ch);
    return ch;
}
    8821:	66 89 d0             	mov    %dx,%ax
    8824:	66 5d                	pop    %bp
    8826:	66 c3                	retw   

00008828 <_Z4putsPKc>:

int puts(const char* string)
{
    8828:	66 55                	push   %bp
    882a:	66 89 e5             	mov    %sp,%bp
    882d:	66 56                	push   %si
    882f:	66 53                	push   %bx
    8831:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    auto len = strlen(string);
    8836:	66 53                	push   %bx
    8838:	66 e8 c9 fc          	callw  8505 <_Z6memsetPvim+0x23>
    883c:	ff                   	(bad)  
    883d:	ff 66 89             	jmp    *-0x77(%esi)
    8840:	c6                   	(bad)  
    8841:	66 58                	pop    %ax
    for(size_t i = 0; i < len; ++i)
    8843:	66 31 d2             	xor    %dx,%dx
    8846:	66 39 f2             	cmp    %si,%dx
    8849:	74 0e                	je     8859 <_Z4putsPKc+0x31>
    884b:	67 8a 0c             	mov    (%si),%cl
    884e:	13 88 c8 b4 01 cd    	adc    -0x32fe4b38(%eax),%ecx
    8854:	98                   	cwtl   
    8855:	66 42                	inc    %dx
    8857:	eb ed                	jmp    8846 <_Z4putsPKc+0x1e>
    {
        putchar(*(string + i));
    }
    return 0;
}
    8859:	66 31 c0             	xor    %ax,%ax
    885c:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    8861:	66 5b                	pop    %bx
    8863:	66 5e                	pop    %si
    8865:	66 5d                	pop    %bp
    8867:	66 c3                	retw   

00008869 <_Z7getcharv>:
#endif


#ifndef _HHOS_LIBC_TEST
int getchar(void)
{
    8869:	66 55                	push   %bp
    886b:	66 89 e5             	mov    %sp,%bp
    return sys_bios_getchar();
}
    886e:	66 5d                	pop    %bp
    return sys_bios_getchar();
    8870:	e9                   	.byte 0xe9
    8871:	a0                   	.byte 0xa0
    8872:	f8                   	clc    

00008873 <_Z4getsPc>:
char *gets( char *str )
{
    8873:	66 55                	push   %bp
    8875:	66 89 e5             	mov    %sp,%bp
    8878:	66 53                	push   %bx
    887a:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    return sys_bios_getchar();
    887f:	66 e8 8e f8          	callw  8111 <sys_bios_clear_screen+0x11>
    8883:	ff                   	(bad)  
    8884:	ff                   	(bad)  
    char ch;
    while(true)
    {
        ch = getchar();
        if(ch == '\n') break;
    8885:	3c 0a                	cmp    $0xa,%al
    8887:	74 08                	je     8891 <_Z4getsPc+0x1e>
        *(str++) = ch;
    8889:	66 43                	inc    %bx
    888b:	67 88 43 ff          	mov    %al,-0x1(%bp,%di)
        ch = getchar();
    888f:	eb ee                	jmp    887f <_Z4getsPc+0xc>
    }
    *str = '\0';
    8891:	67 c6 03 00          	movb   $0x0,(%bp,%di)
    return str;
}
    8895:	66 89 d8             	mov    %bx,%ax
    8898:	66 5b                	pop    %bx
    889a:	66 5d                	pop    %bp
    889c:	66 c3                	retw   

0000889e <_Z7vsscanfPKcS0_Pc>:
#endif

int vsscanf( const char* buffer, const char* format, va_list vlist )
{
    889e:	66 55                	push   %bp
    88a0:	66 89 e5             	mov    %sp,%bp
    88a3:	66 57                	push   %di
    88a5:	66 56                	push   %si
    88a7:	66 53                	push   %bx
    88a9:	66 83 ec 14          	sub    $0x14,%sp
    88ad:	67 66 8b 75 08       	mov    0x8(%di),%si
    88b2:	67 66 8b 7d 10       	mov    0x10(%di),%di
    auto len_fmt = strlen(format);
    88b7:	67 66 ff 75 0c       	pushw  0xc(%di)
    88bc:	66 e8 45 fc          	callw  8505 <_Z6memsetPvim+0x23>
    88c0:	ff                   	(bad)  
    88c1:	ff 67 66             	jmp    *0x66(%edi)
    88c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
    88c7:	66 59                	pop    %cx
    auto p_fmt = format; 
    88c9:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    88ce:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    auto p_buf = buffer;
    bool error = false;
    int ret = 0;
    88d3:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    88da:	00 00                	add    %al,(%eax)
    bool error = false;
    88dc:	67 c6 45 e7 00       	movb   $0x0,-0x19(%di)
    while(static_cast<size_t>(p_fmt - format) < len_fmt)
    88e1:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    88e6:	67 66 2b 45 0c       	sub    0xc(%di),%ax
    88eb:	67 66 3b 45 e0       	cmp    -0x20(%di),%ax
    88f0:	0f 93 c0             	setae  %al
    {
        if(error) break;
    88f3:	67 08 45 e7          	or     %al,-0x19(%di)
    88f7:	0f 85 50 01 67 66    	jne    66678a4d <_GLOBAL_OFFSET_TABLE_+0x6666e1f5>
        if(isspace(*p_fmt)) //略过白空格
    88fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
    8900:	67 66 0f be 00       	movsbw (%bx,%si),%ax
    8905:	66 50                	push   %ax
    8907:	66 e8 ba 03          	callw  8cc5 <_Z6printfPKcz+0x3c>
    890b:	00 00                	add    %al,(%eax)
    890d:	66 5a                	pop    %dx
    890f:	66 85 c0             	test   %ax,%ax
    8912:	74 1d                	je     8931 <_Z7vsscanfPKcS0_Pc+0x93>
        {
            p_fmt++;
    8914:	67 66 ff 45 e8       	incw   -0x18(%di)
            while(isspace(*buffer)) buffer++;
    8919:	67 66 0f be 06 66 50 	movsbw 0x5066,%ax
    8920:	66 e8 a1 03          	callw  8cc5 <_Z6printfPKcz+0x3c>
    8924:	00 00                	add    %al,(%eax)
    8926:	66 5b                	pop    %bx
    8928:	66 85 c0             	test   %ax,%ax
    892b:	74 b4                	je     88e1 <_Z7vsscanfPKcS0_Pc+0x43>
    892d:	66 46                	inc    %si
    892f:	eb e8                	jmp    8919 <_Z7vsscanfPKcS0_Pc+0x7b>
            continue;
        }
        else if(*p_fmt == '%') //格式控制符
    8931:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    8936:	67 80 38 25          	cmpb   $0x25,(%bx,%si)
    893a:	75 a5                	jne    88e1 <_Z7vsscanfPKcS0_Pc+0x43>
        {
            p_fmt++;
            char specifier = *p_fmt;
    893c:	67 8a 40 01          	mov    0x1(%bx,%si),%al
            p_fmt++;
    8940:	67 66 83 45 e8 02    	addw   $0x2,-0x18(%di)
            switch(specifier)
    8946:	3c 69                	cmp    $0x69,%al
    8948:	0f 84 b0 00 7f 25    	je     257f89fe <_GLOBAL_OFFSET_TABLE_+0x257ee1a6>
    894e:	3c 58                	cmp    $0x58,%al
    8950:	0f 84 c4 00 7f 10    	je     107f8a1a <_GLOBAL_OFFSET_TABLE_+0x107ee1c2>
    8956:	3c 25                	cmp    $0x25,%al
    8958:	75 87                	jne    88e1 <_Z7vsscanfPKcS0_Pc+0x43>
            {
                case '%':
                {
                    if(*buffer == '%') 
    895a:	67 80 3e 25 67 0f    	cmpb   $0xf,0x6725
    8960:	95                   	xchg   %eax,%ebp
    8961:	45                   	inc    %ebp
    8962:	e7 e9                	out    %eax,$0xe9
    8964:	7b ff                	jnp    8965 <_Z7vsscanfPKcS0_Pc+0xc7>
            switch(specifier)
    8966:	3c 63                	cmp    $0x63,%al
    8968:	74 31                	je     899b <_Z7vsscanfPKcS0_Pc+0xfd>
    896a:	3c 64                	cmp    $0x64,%al
    896c:	0f 84 9a 00 e9 6e    	je     6ee98a0c <_GLOBAL_OFFSET_TABLE_+0x6ee8e1b4>
    8972:	ff                   	(bad)  
    8973:	3c 73                	cmp    $0x73,%al
    8975:	74 4d                	je     89c4 <_Z7vsscanfPKcS0_Pc+0x126>
    8977:	7f 15                	jg     898e <_Z7vsscanfPKcS0_Pc+0xf0>
    8979:	3c 6f                	cmp    $0x6f,%al
    897b:	0f 85 62 ff 67 66    	jne    666888e3 <_GLOBAL_OFFSET_TABLE_+0x6667e08b>
                    ++ret;
                    break;
                }
                case 'o':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8981:	8d 5f 04             	lea    0x4(%edi),%ebx
    8984:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 8);
    8988:	66 6a 08             	pushw  $0x8
    898b:	e9 96 00 3c 75       	jmp    753c8a26 <_GLOBAL_OFFSET_TABLE_+0x753be1ce>
            switch(specifier)
    8990:	74 78                	je     8a0a <_Z7vsscanfPKcS0_Pc+0x16c>
    8992:	3c 78                	cmp    $0x78,%al
    8994:	0f 84 80 00 e9 46    	je     46e98a1a <_GLOBAL_OFFSET_TABLE_+0x46e8e1c2>
    899a:	ff 67 66             	jmp    *0x66(%edi)
                    char* p = va_arg(vlist, char*);
    899d:	8b 17                	mov    (%edi),%edx
                    *p = *buffer;
    899f:	67 8a 06 67 88       	mov    -0x7799,%al
    89a4:	02 66 46             	add    0x46(%esi),%ah
                    ++ret;
    89a7:	67 66 ff 45 ec       	incw   -0x14(%di)
                    char* p = va_arg(vlist, char*);
    89ac:	66 83 c7 04          	add    $0x4,%di
                    break;
    89b0:	e9 2e ff 66 50       	jmp    506788e3 <_GLOBAL_OFFSET_TABLE_+0x5066e08b>
                    while (*buffer && isspace(*buffer)) buffer++;
    89b5:	66 e8 0c 03          	callw  8cc5 <_Z6printfPKcz+0x3c>
    89b9:	00 00                	add    %al,(%eax)
    89bb:	66 59                	pop    %cx
    89bd:	66 85 c0             	test   %ax,%ax
    89c0:	74 0b                	je     89cd <_Z7vsscanfPKcS0_Pc+0x12f>
    89c2:	66 46                	inc    %si
    89c4:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    89cb:	75 e6                	jne    89b3 <_Z7vsscanfPKcS0_Pc+0x115>
                    char* p = va_arg(vlist, char*);
    89cd:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    89d2:	67 66 8b 3f          	mov    (%bx),%di
                    while(*buffer && !isspace(*buffer))
    89d6:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    89dd:	75 0b                	jne    89ea <_Z7vsscanfPKcS0_Pc+0x14c>
                    *p = '\0';
    89df:	67 c6 07 00          	movb   $0x0,(%bx)
                    ++ret;
    89e3:	67 66 ff 45 ec       	incw   -0x14(%di)
    89e8:	eb 5b                	jmp    8a45 <_Z7vsscanfPKcS0_Pc+0x1a7>
                    while(*buffer && !isspace(*buffer))
    89ea:	66 50                	push   %ax
    89ec:	66 e8 d5 02          	callw  8cc5 <_Z6printfPKcz+0x3c>
    89f0:	00 00                	add    %al,(%eax)
    89f2:	66 5a                	pop    %dx
    89f4:	66 85 c0             	test   %ax,%ax
    89f7:	75 e6                	jne    89df <_Z7vsscanfPKcS0_Pc+0x141>
                        *(p++) = *(buffer++);
    89f9:	a4                   	movsb  %ds:(%esi),%es:(%edi)
                    while(*buffer && !isspace(*buffer))
    89fa:	eb da                	jmp    89d6 <_Z7vsscanfPKcS0_Pc+0x138>
                    int* p = va_arg(vlist, int*);
    89fc:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8a01:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 0);
    8a05:	66 6a 00             	pushw  $0x0
    8a08:	eb 1a                	jmp    8a24 <_Z7vsscanfPKcS0_Pc+0x186>
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8a0a:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8a0f:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 10);
    8a13:	66 6a 0a             	pushw  $0xa
    8a16:	eb 0c                	jmp    8a24 <_Z7vsscanfPKcS0_Pc+0x186>
                    break;
                }
                case 'x':
                case 'X':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8a18:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8a1d:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 16);
    8a21:	66 6a 10             	pushw  $0x10
    8a24:	67 66 8d 45 f0       	lea    -0x10(%di),%ax
    8a29:	66 50                	push   %ax
    8a2b:	66 56                	push   %si
    8a2d:	66 e8 35 fc          	callw  8666 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    8a31:	ff                   	(bad)  
    8a32:	ff 67 66             	jmp    *0x66(%edi)
                    *p = static_cast<unsigned int>(num);
    8a35:	89 07                	mov    %eax,(%edi)
                    buffer = end;
    8a37:	67 66 8b 75 f0       	mov    -0x10(%di),%si
                    ++ret;
    8a3c:	67 66 ff 45 ec       	incw   -0x14(%di)
    8a41:	66 83 c4 0c          	add    $0xc,%sp
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8a45:	66 89 df             	mov    %bx,%di
    8a48:	e9 96 fe 67 66       	jmp    666888e3 <_GLOBAL_OFFSET_TABLE_+0x6667e08b>
                    break;
            }
        }
    }
    return ret;
}
    8a4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
    8a50:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8a55:	66 5b                	pop    %bx
    8a57:	66 5e                	pop    %si
    8a59:	66 5f                	pop    %di
    8a5b:	66 5d                	pop    %bp
    8a5d:	66 c3                	retw   

00008a5f <_Z6sscanfPKcS0_z>:
int sscanf( const char* buffer, const char* format, ... )
{
    8a5f:	66 55                	push   %bp
    8a61:	66 89 e5             	mov    %sp,%bp
   	int ret;
	va_list va;
	va_start(va, format);
    8a64:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsscanf(buffer, format, va);
    8a69:	66 50                	push   %ax
    8a6b:	67 66 ff 75 0c       	pushw  0xc(%di)
    8a70:	67 66 ff 75 08       	pushw  0x8(%di)
    8a75:	66 e8 23 fe          	callw  889c <_Z4getsPc+0x29>
    8a79:	ff                   	(bad)  
    8a7a:	ff 66 c9             	jmp    *-0x37(%esi)
	va_end(va);
    return ret; 
}
    8a7d:	66 c3                	retw   

00008a7f <_Z5scanfPKcz>:
#ifndef _HHOS_LIBC_TEST
static char scanfbuf[80*25];
//TODO 关于这个返回值
int scanf( const char* format, ... )
{
    8a7f:	66 55                	push   %bp
    8a81:	66 89 e5             	mov    %sp,%bp
    if (!gets(scanfbuf)) return EOF;
    8a84:	66 68 c0 97          	pushw  $0x97c0
    8a88:	00 00                	add    %al,(%eax)
    8a8a:	66 e8 e3 fd          	callw  8871 <_Z7getcharv+0x8>
    8a8e:	ff                   	(bad)  
    8a8f:	ff 66 89             	jmp    *-0x77(%esi)
    8a92:	c2 66 58             	ret    $0x5866
    8a95:	66 83 c8 ff          	or     $0xffff,%ax
    8a99:	66 85 d2             	test   %dx,%dx
    8a9c:	74 1c                	je     8aba <_Z5scanfPKcz+0x3b>
	int ret;
	va_list va;
	va_start(va, format);
    8a9e:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsscanf(scanfbuf, format, va);
    8aa3:	66 50                	push   %ax
    8aa5:	67 66 ff 75 08       	pushw  0x8(%di)
    8aaa:	66 68 c0 97          	pushw  $0x97c0
    8aae:	00 00                	add    %al,(%eax)
    8ab0:	66 e8 e8 fd          	callw  889c <_Z4getsPc+0x29>
    8ab4:	ff                   	(bad)  
    8ab5:	ff 66 83             	jmp    *-0x7d(%esi)
	va_end(va);
    return ret;
    8ab8:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    8abb:	c9                   	leave  
    8abc:	66 c3                	retw   

00008abe <_Z8vsprintfPcPKcS_>:
{
    8abe:	66 55                	push   %bp
    8ac0:	66 89 e5             	mov    %sp,%bp
    8ac3:	66 57                	push   %di
    8ac5:	66 56                	push   %si
    8ac7:	66 53                	push   %bx
    8ac9:	66 83 ec 0c          	sub    $0xc,%sp
    8acd:	67 66 8b 75 0c       	mov    0xc(%di),%si
    8ad2:	67 66 8b 55 10       	mov    0x10(%di),%dx
    8ad7:	67 66 89 55 f0       	mov    %dx,-0x10(%di)
    auto len_fmt = strlen(format);
    8adc:	66 56                	push   %si
    8ade:	66 e8 23 fa          	callw  8505 <_Z6memsetPvim+0x23>
    8ae2:	ff                   	(bad)  
    8ae3:	ff 67 66             	jmp    *0x66(%edi)
    8ae6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    8ae9:	66 58                	pop    %ax
    auto p_buf = buffer;
    8aeb:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8af0:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    while(len_fmt--)
    8af5:	67 66 ff 4d ec       	decw   -0x14(%di)
    8afa:	67 66 83 7d ec ff    	cmpw   $0xffff,-0x14(%di)
    8b00:	0f 84 4a 01 67 8a    	je     8a678c50 <_GLOBAL_OFFSET_TABLE_+0x8a66e3f8>
        if(*p_fmt != '%')
    8b06:	06                   	push   %es
    8b07:	3c 25                	cmp    $0x25,%al
    8b09:	74 07                	je     8b12 <_Z8vsprintfPcPKcS_+0x54>
            *(p_buf++) = *(p_fmt++);    //非控制字符
    8b0b:	66 46                	inc    %si
    8b0d:	67 88 03             	mov    %al,(%bp,%di)
    8b10:	eb 5f                	jmp    8b71 <_Z8vsprintfPcPKcS_+0xb3>
            char specifier = *(++p_fmt); //%后面一个字符是specifier
    8b12:	67 8a 46 01          	mov    0x1(%bp),%al
            ++p_fmt;                     //记录specifier并跳过
    8b16:	66 83 c6 02          	add    $0x2,%si
            switch (specifier)
    8b1a:	3c 69                	cmp    $0x69,%al
    8b1c:	0f 84 81 00 7f 17    	je     177f8ba3 <_GLOBAL_OFFSET_TABLE_+0x177ee34b>
    8b22:	3c 63                	cmp    $0x63,%al
    8b24:	74 40                	je     8b66 <_Z8vsprintfPcPKcS_+0xa8>
    8b26:	3c 64                	cmp    $0x64,%al
    8b28:	74 77                	je     8ba1 <_Z8vsprintfPcPKcS_+0xe3>
    8b2a:	3c 58                	cmp    $0x58,%al
    8b2c:	75 c7                	jne    8af5 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8b2e:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16, true);
    8b33:	66 6a 01             	pushw  $0x1
    8b36:	e9 e2 00 3c 73       	jmp    733c8c1d <_GLOBAL_OFFSET_TABLE_+0x733be3c5>
            switch (specifier)
    8b3b:	74 38                	je     8b75 <_Z8vsprintfPcPKcS_+0xb7>
    8b3d:	7f 12                	jg     8b51 <_Z8vsprintfPcPKcS_+0x93>
    8b3f:	3c 6f                	cmp    $0x6f,%al
    8b41:	75 b2                	jne    8af5 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8b43:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 8);
    8b48:	66 6a 00             	pushw  $0x0
    8b4b:	66 6a 08             	pushw  $0x8
    8b4e:	e9 da 00 3c 75       	jmp    753c8c2d <_GLOBAL_OFFSET_TABLE_+0x753be3d5>
            switch (specifier)
    8b53:	0f 84 c9 00 3c 78    	je     783c8c22 <_GLOBAL_OFFSET_TABLE_+0x783be3ca>
    8b59:	75 9a                	jne    8af5 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8b5b:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16);
    8b60:	66 6a 00             	pushw  $0x0
    8b63:	e9 b5 00 67 66       	jmp    66678c1d <_GLOBAL_OFFSET_TABLE_+0x6666e3c5>
                    *(p_buf++) = va_arg(vlist, int); 
    8b68:	8b 02                	mov    (%edx),%eax
    8b6a:	67 88 03             	mov    %al,(%bp,%di)
    8b6d:	66 83 c2 04          	add    $0x4,%dx
    8b71:	66 43                	inc    %bx
                    break;
    8b73:	eb 80                	jmp    8af5 <_Z8vsprintfPcPKcS_+0x37>
                    const char * str = va_arg(vlist, char*);
    8b75:	67 66 8d 42 04       	lea    0x4(%bp,%si),%ax
    8b7a:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8b7f:	67 66 8b 3a          	mov    (%bp,%si),%di
                    strcpy(p_buf, str);
    8b83:	66 57                	push   %di
    8b85:	66 53                	push   %bx
    8b87:	66 e8 96 f9          	callw  8521 <_Z6strlenPKc+0x1a>
    8b8b:	ff                   	(bad)  
    8b8c:	ff 66 59             	jmp    *0x59(%esi)
                    p_buf += strlen(str);               //p应当永远指向有意义的字符后面一位
    8b8f:	66 58                	pop    %ax
    8b91:	66 57                	push   %di
    8b93:	66 e8 6e f9          	callw  8505 <_Z6memsetPvim+0x23>
    8b97:	ff                   	(bad)  
    8b98:	ff 66 01             	jmp    *0x1(%esi)
    8b9b:	c3                   	ret    
                    break;
    8b9c:	66 58                	pop    %ax
    8b9e:	e9 4f ff 67 66       	jmp    66688af2 <_GLOBAL_OFFSET_TABLE_+0x6667e29a>
                    int num = va_arg(vlist, int);
    8ba3:	8d 42 04             	lea    0x4(%edx),%eax
    8ba6:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    8bab:	67 66 8b 02          	mov    (%bp,%si),%ax
template<typename T>
void itoa(char* buffer, T num, int base, bool captial = false)
{
    const char* num_char_upper = "0123456789ABCDEF";
    const char* num_char_lower = "0123456789abcdef";
    if(num < 0)
    8baf:	66 89 df             	mov    %bx,%di
    8bb2:	66 85 c0             	test   %ax,%ax
    8bb5:	79 0c                	jns    8bc3 <_Z8vsprintfPcPKcS_+0x105>
    8bb7:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
    {
        *(buffer++) = '-';
    8bbc:	67 c6 03 2d          	movb   $0x2d,(%bp,%di)
        num = -num;
    8bc0:	66 f7 d8             	neg    %ax
    }
    char *p = buffer;
    8bc3:	67 66 89 7d f0       	mov    %di,-0x10(%di)
    int mod = 0;
    while(true)
    {
        mod = num % base;
        num /= base;
    8bc8:	66 b9 0a 00          	mov    $0xa,%cx
    8bcc:	00 00                	add    %al,(%eax)
    8bce:	66 99                	cwtd   
    8bd0:	66 f7 f9             	idiv   %cx
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    8bd3:	67 66 8b 4d f0       	mov    -0x10(%di),%cx
    8bd8:	66 41                	inc    %cx
    8bda:	67 8a 92 46 a8       	mov    -0x57ba(%bp,%si),%dl
    8bdf:	00 00                	add    %al,(%eax)
    8be1:	67 88 51 ff          	mov    %dl,-0x1(%bx,%di)
        if(num == 0) break;
    8be5:	66 85 c0             	test   %ax,%ax
    8be8:	74 07                	je     8bf1 <_Z8vsprintfPcPKcS_+0x133>
    8bea:	67 66 89 4d f0       	mov    %cx,-0x10(%di)
    8bef:	eb d7                	jmp    8bc8 <_Z8vsprintfPcPKcS_+0x10a>
    }
    *p = '\0';
    8bf1:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8bf6:	67 c6 40 01 00       	movb   $0x0,0x1(%bx,%si)
    reverse(buffer);
    8bfb:	66 57                	push   %di
    8bfd:	66 e8 cf f9          	callw  85d0 <_Z6strcmpPKcS0_+0x6b>
    8c01:	ff                   	(bad)  
    8c02:	ff 67 66             	jmp    *0x66(%edi)
                    p_buf += strlen(p_buf);             //同理
    8c05:	89 1c 24             	mov    %ebx,(%esp)
    8c08:	66 e8 f9 f8          	callw  8505 <_Z6memsetPvim+0x23>
    8c0c:	ff                   	(bad)  
    8c0d:	ff 66 01             	jmp    *0x1(%esi)
    8c10:	c3                   	ret    
                    break;
    8c11:	66 5a                	pop    %dx
                    int num = va_arg(vlist, int);
    8c13:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
                    break;
    8c18:	e9 da fe 66 6a       	jmp    6a678af7 <_GLOBAL_OFFSET_TABLE_+0x6a66e29f>
                    itoa(p_buf, num, 16, true);
    8c1d:	10 eb                	adc    %ch,%bl
    8c1f:	0b 67 66             	or     0x66(%edi),%esp
                    unsigned int num = va_arg(vlist, int);
    8c22:	8d 7a 04             	lea    0x4(%edx),%edi
                    itoa(p_buf, num, 10);
    8c25:	66 6a 00             	pushw  $0x0
    8c28:	66 6a 0a             	pushw  $0xa
    8c2b:	67 66 ff 32          	pushw  (%bp,%si)
    8c2f:	66 53                	push   %bx
    8c31:	66 e8 be 04          	callw  90f3 <_ZN2sh16read_prog_recordEv+0x13b>
    8c35:	00 00                	add    %al,(%eax)
                    p_buf += strlen(p_buf);             //同理
    8c37:	66 83 c4 10          	add    $0x10,%sp
    8c3b:	66 53                	push   %bx
    8c3d:	66 e8 c4 f8          	callw  8505 <_Z6memsetPvim+0x23>
    8c41:	ff                   	(bad)  
    8c42:	ff 66 01             	jmp    *0x1(%esi)
    8c45:	c3                   	ret    
                    break;
    8c46:	66 58                	pop    %ax
                    unsigned int num = va_arg(vlist, int);
    8c48:	66 89 fa             	mov    %di,%dx
                    break;
    8c4b:	e9 a7 fe 67 c6       	jmp    c6688af7 <_GLOBAL_OFFSET_TABLE_+0xc667e29f>
    *p_buf = '\0';
    8c50:	03 00                	add    (%eax),%eax
    return p_buf - buffer;
    8c52:	66 89 d8             	mov    %bx,%ax
    8c55:	67 66 2b 45 08       	sub    0x8(%di),%ax
}
    8c5a:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8c5f:	66 5b                	pop    %bx
    8c61:	66 5e                	pop    %si
    8c63:	66 5f                	pop    %di
    8c65:	66 5d                	pop    %bp
    8c67:	66 c3                	retw   

00008c69 <_Z7sprintfPcPKcz>:
{
    8c69:	66 55                	push   %bp
    8c6b:	66 89 e5             	mov    %sp,%bp
	va_start(va, format);
    8c6e:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsprintf(buffer, format, va);
    8c73:	66 50                	push   %ax
    8c75:	67 66 ff 75 0c       	pushw  0xc(%di)
    8c7a:	67 66 ff 75 08       	pushw  0x8(%di)
    8c7f:	66 e8 39 fe          	callw  8abc <_Z5scanfPKcz+0x3d>
    8c83:	ff                   	(bad)  
    8c84:	ff 66 c9             	jmp    *-0x37(%esi)
}
    8c87:	66 c3                	retw   

00008c89 <_Z6printfPKcz>:
{
    8c89:	66 55                	push   %bp
    8c8b:	66 89 e5             	mov    %sp,%bp
    8c8e:	66 53                	push   %bx
	va_start(va, format);
    8c90:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsprintf(printbuf, format, va);
    8c95:	66 50                	push   %ax
    8c97:	67 66 ff 75 08       	pushw  0x8(%di)
    8c9c:	66 68 a0 9f          	pushw  $0x9fa0
    8ca0:	00 00                	add    %al,(%eax)
    8ca2:	66 e8 16 fe          	callw  8abc <_Z5scanfPKcz+0x3d>
    8ca6:	ff                   	(bad)  
    8ca7:	ff 66 89             	jmp    *-0x77(%esi)
    8caa:	c3                   	ret    
    puts(printbuf);
    8cab:	66 83 c4 0c          	add    $0xc,%sp
    8caf:	66 68 a0 9f          	pushw  $0x9fa0
    8cb3:	00 00                	add    %al,(%eax)
    8cb5:	66 e8 6d fb          	callw  8826 <_Z7putchari+0x15>
    8cb9:	ff                   	(bad)  
    8cba:	ff 66 89             	jmp    *-0x77(%esi)
}
    8cbd:	d8 67 66             	fsubs  0x66(%edi)
    8cc0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    8cc3:	66 c9                	leavew 
    8cc5:	66 c3                	retw   

00008cc7 <_Z7isspacei>:
namespace hhlibc {

#endif

int isspace( int ch )
{
    8cc7:	66 55                	push   %bp
    8cc9:	66 89 e5             	mov    %sp,%bp
    8ccc:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return (ch == 9 || ch == 32 || (ch >= 10 && ch <= 13));
    8cd1:	67 66 8d 42 f7       	lea    -0x9(%bp,%si),%ax
    8cd6:	66 83 f8 04          	cmp    $0x4,%ax
    8cda:	0f 96 c0             	setbe  %al
    8cdd:	66 83 fa 20          	cmp    $0x20,%dx
    8ce1:	0f 94 c2             	sete   %dl
    8ce4:	66 09 d0             	or     %dx,%ax
    8ce7:	66 0f b6 c0          	movzbw %al,%ax
}
    8ceb:	66 5d                	pop    %bp
    8ced:	66 c3                	retw   

Disassembly of section .text._ZN3tty8tty_initEv:

00008cf0 <_ZN3tty8tty_initEv>:
    void tty_init()
    8cf0:	66 55                	push   %bp
    8cf2:	66 89 e5             	mov    %sp,%bp
    8cf5:	66 53                	push   %bx
    8cf7:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        cur_x = 0;
    8cfc:	67 66 c7 03 00 00    	movw   $0x0,(%bp,%di)
    8d02:	00 00                	add    %al,(%eax)
        cur_y = 0;
    8d04:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    8d0b:	00 00                	add    %al,(%eax)
        move_cursor(0, 0);
    8d0d:	66 31 d2             	xor    %dx,%dx
    8d10:	66 31 c0             	xor    %ax,%ax
    8d13:	66 e8 ad f1          	callw  7ec4 <_ZL8print_okPc+0x50>
    8d17:	ff                   	(bad)  
    8d18:	ff 67 66             	jmp    *0x66(%edi)
        color = MAKE_COLOR(VGA_BLACK, VGA_WHITE);
    8d1b:	c7 43 08 07 00 00 00 	movl   $0x7,0x8(%ebx)
    }
    8d22:	66 5b                	pop    %bx
    8d24:	66 5d                	pop    %bp
    8d26:	66 c3                	retw   

Disassembly of section .text._ZN3tty7putcharEi:

00008d28 <_ZN3tty7putcharEi>:
        tty_mem[y + 80 * x] = c;
        tty_mem[y + 80 * x + 1] = color;
#endif
        sys_putchar(c, color, x, y);
    }
    void putchar(int c)
    8d28:	66 55                	push   %bp
    8d2a:	66 89 e5             	mov    %sp,%bp
    8d2d:	66 56                	push   %si
    8d2f:	66 53                	push   %bx
    8d31:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8d36:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    {
        switch(c)
    8d3b:	66 83 f8 09          	cmp    $0x9,%ax
    8d3f:	74 22                	je     8d63 <_ZN3tty7putcharEi+0x3b>
    8d41:	7f 09                	jg     8d4c <_ZN3tty7putcharEi+0x24>
    8d43:	66 83 f8 08          	cmp    $0x8,%ax
    8d47:	74 36                	je     8d7f <_ZN3tty7putcharEi+0x57>
    8d49:	e9 88 00 66 83       	jmp    83668dd6 <_GLOBAL_OFFSET_TABLE_+0x8365e57e>
    8d4e:	f8                   	clc    
    8d4f:	0a 74 73 66          	or     0x66(%ebx,%esi,2),%dh
    8d53:	83 f8 0d             	cmp    $0xd,%eax
    8d56:	75 7c                	jne    8dd4 <_ZN3tty7putcharEi+0xac>
                for(int i = 0; i < 4; ++i) putchar(' ');
                break;
            }
            case '\r':
            {
                cur_x = 0;
    8d58:	67 66 c7 03 00 00    	movw   $0x0,(%bp,%di)
    8d5e:	00 00                	add    %al,(%eax)
                break;
    8d60:	e9 b2 00 66 be       	jmp    be668e17 <_GLOBAL_OFFSET_TABLE_+0xbe65e5bf>
        switch(c)
    8d65:	04 00                	add    $0x0,%al
    8d67:	00 00                	add    %al,(%eax)
                for(int i = 0; i < 4; ++i) putchar(' ');
    8d69:	66 6a 20             	pushw  $0x20
    8d6c:	66 53                	push   %bx
    8d6e:	66 e8 b4 ff          	callw  8d26 <_ZN3tty8tty_initEv+0x36>
    8d72:	ff                   	(bad)  
    8d73:	ff 66 5a             	jmp    *0x5a(%esi)
    8d76:	66 59                	pop    %cx
    8d78:	66 4e                	dec    %si
    8d7a:	75 ed                	jne    8d69 <_ZN3tty7putcharEi+0x41>
    8d7c:	e9 96 00 67 66       	jmp    66678e17 <_GLOBAL_OFFSET_TABLE_+0x6666e5bf>
            }
            case '\b':
            {
                if(cur_y == 0 && cur_x == 0) 
    8d81:	8b 53 04             	mov    0x4(%ebx),%edx
    8d84:	67 66 8b 03          	mov    (%bp,%di),%ax
    8d88:	66 85 d2             	test   %dx,%dx
    8d8b:	75 1b                	jne    8da8 <_ZN3tty7putcharEi+0x80>
    8d8d:	66 85 c0             	test   %ax,%ax
    8d90:	0f 84 99 00 67 66    	je     66678e2f <_GLOBAL_OFFSET_TABLE_+0x6666e5d7>
                {
                    break;
                }
                else if (cur_y == 0 && cur_x != 0)
                {
                    cur_y = 80 - 1;
    8d96:	c7 43 04 4f 00 00 00 	movl   $0x4f,0x4(%ebx)
                    cur_x--;
    8d9d:	66 48                	dec    %ax
    8d9f:	67 66 89 03          	mov    %ax,(%bp,%di)
        sys_putchar(c, color, x, y);
    8da3:	66 6a 4f             	pushw  $0x4f
    8da6:	eb 09                	jmp    8db1 <_ZN3tty7putcharEi+0x89>
                    putchar_worker(' ', MAKE_COLOR(VGA_BLACK, VGA_WHITE) , cur_x, cur_y);
                    break;
                }
                else
                {
                    cur_y--;
    8da8:	66 4a                	dec    %dx
    8daa:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        sys_putchar(c, color, x, y);
    8daf:	66 52                	push   %dx
    8db1:	66 50                	push   %ax
    8db3:	66 6a 07             	pushw  $0x7
    8db6:	66 6a 20             	pushw  $0x20
    8db9:	66 e8 39 f4          	callw  81f6 <sys_bios_print_int+0xa4>
    8dbd:	ff                   	(bad)  
    8dbe:	ff 66 83             	jmp    *-0x7d(%esi)
    8dc1:	c4 10                	les    (%eax),%edx
    8dc3:	eb 50                	jmp    8e15 <_ZN3tty7putcharEi+0xed>
                    break;
                }
            }
            case '\n':
            {
                cur_x++;
    8dc5:	67 66 ff 03          	incw   (%bp,%di)
                cur_y = 0;
    8dc9:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    8dd0:	00 00                	add    %al,(%eax)
                break;
    8dd2:	eb 41                	jmp    8e15 <_ZN3tty7putcharEi+0xed>
        sys_putchar(c, color, x, y);
    8dd4:	67 66 ff 73 04       	pushw  0x4(%bp,%di)
    8dd9:	67 66 ff 33          	pushw  (%bp,%di)
    8ddd:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    8de2:	66 50                	push   %ax
    8de4:	66 e8 0e f4          	callw  81f6 <sys_bios_print_int+0xa4>
    8de8:	ff                   	(bad)  
    8de9:	ff 67 66             	jmp    *0x66(%edi)
            }
            default:
            {
                putchar_worker(c, color, cur_x, cur_y);
                cur_x = (cur_y == 79) ? cur_x + 1 : cur_x;
    8dec:	8b 43 04             	mov    0x4(%ebx),%eax
    8def:	66 83 c4 10          	add    $0x10,%sp
    8df3:	66 83 f8 4f          	cmp    $0x4f,%ax
    8df7:	67 66 8b 13          	mov    (%bp,%di),%dx
    8dfb:	75 02                	jne    8dff <_ZN3tty7putcharEi+0xd7>
    8dfd:	66 42                	inc    %dx
    8dff:	67 66 89 13          	mov    %dx,(%bp,%di)
                cur_y = (cur_y + 1) % 80;
    8e03:	66 40                	inc    %ax
    8e05:	66 b9 50 00          	mov    $0x50,%cx
    8e09:	00 00                	add    %al,(%eax)
    8e0b:	66 99                	cwtd   
    8e0d:	66 f7 f9             	idiv   %cx
    8e10:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        if (cur_x >= 25)
    8e15:	67 66 83 3b 18       	cmpw   $0x18,(%bp,%di)
    8e1a:	7e 11                	jle    8e2d <_ZN3tty7putcharEi+0x105>
            sys_bios_scroll_up(color);
    8e1c:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    8e21:	66 e8 02 f5          	callw  8327 <sys_print_int+0xa4>
    8e25:	ff                   	(bad)  
    8e26:	ff 67 66             	jmp    *0x66(%edi)
            --cur_x;
    8e29:	ff 0b                	decl   (%ebx)
    8e2b:	66 58                	pop    %ax
                break;
            }
        }
        scroll_up();
        move_cursor(cur_x, cur_y);
    8e2d:	67 66 8b 53 04       	mov    0x4(%bp,%di),%dx
    8e32:	67 66 8b 03          	mov    (%bp,%di),%ax
    }
    8e36:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    8e3b:	66 5b                	pop    %bx
    8e3d:	66 5e                	pop    %si
    8e3f:	66 5d                	pop    %bp
        move_cursor(cur_x, cur_y);
    8e41:	e9                   	.byte 0xe9
    8e42:	82                   	.byte 0x82
    8e43:	f0                   	lock

Disassembly of section .text._ZN2sh4execEv:

00008e44 <_ZN2sh4execEv>:
    int exec()
    8e44:	66 55                	push   %bp
    8e46:	66 89 e5             	mov    %sp,%bp
    8e49:	66 57                	push   %di
    8e4b:	66 56                	push   %si
    8e4d:	66 53                	push   %bx
    8e4f:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        if (strcmp(buf, "ls") == 0|| strcmp(buf, "dir") == 0)
    8e54:	66 68 06 a8          	pushw  $0xa806
    8e58:	00 00                	add    %al,(%eax)
    8e5a:	66 53                	push   %bx
    8e5c:	66 e8 03 f7          	callw  8563 <_Z6strcpyPcPKc+0x40>
    8e60:	ff                   	(bad)  
    8e61:	ff 66 59             	jmp    *0x59(%esi)
    8e64:	66 5e                	pop    %si
    8e66:	66 85 c0             	test   %ax,%ax
    8e69:	75 1d                	jne    8e88 <_ZN2sh4execEv+0x44>
            printf("You have %d user programs intalled\n\n", prog_cnt);
    8e6b:	67 66 ff b3 40 08    	pushw  0x840(%bp,%di)
    8e71:	00 00                	add    %al,(%eax)
    8e73:	66 68 dc a7          	pushw  $0xa7dc
    8e77:	00 00                	add    %al,(%eax)
    8e79:	66 e8 0a fe          	callw  8c87 <_Z7sprintfPcPKcz+0x1e>
    8e7d:	ff                   	(bad)  
    8e7e:	ff 66 58             	jmp    *0x58(%esi)
    8e81:	66 5a                	pop    %dx
            for(size_t i = 0; i < prog_cnt; ++i)
    8e83:	66 31 f6             	xor    %si,%si
    8e86:	eb 31                	jmp    8eb9 <_ZN2sh4execEv+0x75>
        if (strcmp(buf, "ls") == 0|| strcmp(buf, "dir") == 0)
    8e88:	66 68 01 a8          	pushw  $0xa801
    8e8c:	00 00                	add    %al,(%eax)
    8e8e:	66 53                	push   %bx
    8e90:	66 e8 cf f6          	callw  8563 <_Z6strcpyPcPKc+0x40>
    8e94:	ff                   	(bad)  
    8e95:	ff 66 5e             	jmp    *0x5e(%esi)
    8e98:	66 5f                	pop    %di
    8e9a:	66 85 c0             	test   %ax,%ax
    8e9d:	74 cc                	je     8e6b <_ZN2sh4execEv+0x27>
        } else if (strcmp(buf, "cls") == 0 || strcmp(buf, "clear") == 0)
    8e9f:	66 68 05 a8          	pushw  $0xa805
    8ea3:	00 00                	add    %al,(%eax)
    8ea5:	66 53                	push   %bx
    8ea7:	66 e8 b8 f6          	callw  8563 <_Z6strcpyPcPKc+0x40>
    8eab:	ff                   	(bad)  
    8eac:	ff 66 5a             	jmp    *0x5a(%esi)
    8eaf:	66 59                	pop    %cx
    8eb1:	66 85 c0             	test   %ax,%ax
    8eb4:	75 32                	jne    8ee8 <_ZN2sh4execEv+0xa4>
    8eb6:	e9 c2 00 67 66       	jmp    66678f7d <_GLOBAL_OFFSET_TABLE_+0x6666e725>
            for(size_t i = 0; i < prog_cnt; ++i)
    8ebb:	39 b3 40 08 00 00    	cmp    %esi,0x840(%ebx)
    8ec1:	0f 86 e1 00 66 6b    	jbe    6b668fa8 <_GLOBAL_OFFSET_TABLE_+0x6b65e750>
                printf("%s\n", progs[i].name);
    8ec7:	c6                   	(bad)  
    8ec8:	24 67                	and    $0x67,%al
    8eca:	66 8d 84 03 00 06 00 	lea    0x600(%ebx,%eax,1),%ax
    8ed1:	00 
    8ed2:	66 50                	push   %ax
    8ed4:	66 68 09 a8          	pushw  $0xa809
    8ed8:	00 00                	add    %al,(%eax)
    8eda:	66 e8 a9 fd          	callw  8c87 <_Z7sprintfPcPKcz+0x1e>
    8ede:	ff                   	(bad)  
    8edf:	ff 66 46             	jmp    *0x46(%esi)
            for(size_t i = 0; i < prog_cnt; ++i)
    8ee2:	66 5f                	pop    %di
    8ee4:	66 58                	pop    %ax
    8ee6:	eb d1                	jmp    8eb9 <_ZN2sh4execEv+0x75>
        } else if (strcmp(buf, "cls") == 0 || strcmp(buf, "clear") == 0)
    8ee8:	66 68 0d a8          	pushw  $0xa80d
    8eec:	00 00                	add    %al,(%eax)
    8eee:	66 53                	push   %bx
    8ef0:	66 e8 6f f6          	callw  8563 <_Z6strcpyPcPKc+0x40>
    8ef4:	ff                   	(bad)  
    8ef5:	ff 66 5a             	jmp    *0x5a(%esi)
    8ef8:	66 59                	pop    %cx
    8efa:	66 85 c0             	test   %ax,%ax
    8efd:	74 7c                	je     8f7b <_ZN2sh4execEv+0x137>
        } else if (strcmp(buf, "help") == 0)
    8eff:	66 68 13 a8          	pushw  $0xa813
    8f03:	00 00                	add    %al,(%eax)
    8f05:	66 53                	push   %bx
    8f07:	66 e8 58 f6          	callw  8563 <_Z6strcpyPcPKc+0x40>
    8f0b:	ff                   	(bad)  
    8f0c:	ff 66 5e             	jmp    *0x5e(%esi)
    8f0f:	66 5f                	pop    %di
            for(size_t i = 0; i < prog_cnt; ++i)
    8f11:	66 31 f6             	xor    %si,%si
        } else if (strcmp(buf, "help") == 0)
    8f14:	66 85 c0             	test   %ax,%ax
    8f17:	75 0d                	jne    8f26 <_ZN2sh4execEv+0xe2>
            printf("%s\n", help);
    8f19:	66 81 c3 00 04       	add    $0x400,%bx
    8f1e:	00 00                	add    %al,(%eax)
    8f20:	66 53                	push   %bx
    8f22:	eb 72                	jmp    8f96 <_ZN2sh4execEv+0x152>
            for(size_t i = 0; i < prog_cnt; ++i)
    8f24:	66 46                	inc    %si
    8f26:	67 66 39 b3 40 08    	cmp    %si,0x840(%bp,%di)
    8f2c:	00 00                	add    %al,(%eax)
    8f2e:	76 60                	jbe    8f90 <_ZN2sh4execEv+0x14c>
                if (strcmp(buf, progs[i].name) == 0)
    8f30:	66 6b fe 24          	imul   $0x24,%si,%di
    8f34:	67 66 8d 84 3b 00    	lea    0x3b(%si),%ax
    8f3a:	06                   	push   %es
    8f3b:	00 00                	add    %al,(%eax)
    8f3d:	66 50                	push   %ax
    8f3f:	66 53                	push   %bx
    8f41:	66 e8 1e f6          	callw  8563 <_Z6strcpyPcPKc+0x40>
    8f45:	ff                   	(bad)  
    8f46:	ff 66 5a             	jmp    *0x5a(%esi)
    8f49:	66 59                	pop    %cx
    8f4b:	66 85 c0             	test   %ax,%ax
    8f4e:	75 d4                	jne    8f24 <_ZN2sh4execEv+0xe0>
class bin_loader
{
public:
    static void load_binary_from_floppy(int n)
    {
        sys_read_disk(user_prog_segment, user_prog_load_addr, n, 2);
    8f50:	66 6a 02             	pushw  $0x2
    8f53:	67 66 0f b7 84 3b 20 	movzww 0x203b(%si),%ax
    8f5a:	06                   	push   %es
    8f5b:	00 00                	add    %al,(%eax)
    8f5d:	66 50                	push   %ax
    8f5f:	66 68 00 a1          	pushw  $0xa100
    8f63:	00 00                	add    %al,(%eax)
    8f65:	66 68 00 10          	pushw  $0x1000
    8f69:	00 00                	add    %al,(%eax)
    8f6b:	66 e8 5c f4          	callw  83cb <sys_get_scancode+0xf>
    8f6f:	ff                   	(bad)  
    8f70:	ff 66 83             	jmp    *-0x7d(%esi)
        sys_execve_bin();
    8f73:	c4 10                	les    (%eax),%edx
    8f75:	66 e8 9f f1          	callw  8118 <sys_bios_getchar+0x5>
    8f79:	ff                   	(bad)  
    8f7a:	ff 66 e8             	jmp    *-0x18(%esi)
                    sys_bios_clear_screen();
    8f7d:	7f f1                	jg     8f70 <_ZN2sh4execEv+0x12c>
    8f7f:	ff                   	(bad)  
    8f80:	ff 66 ff             	jmp    *-0x1(%esi)
                    sys_get_current_tty()->tty_init();
    8f83:	36 a0 97 66 e8 64    	mov    %ss:0x64e86697,%al
    8f89:	fd                   	std    
    8f8a:	ff                   	(bad)  
    8f8b:	ff 66 59             	jmp    *0x59(%esi)
    8f8e:	eb 16                	jmp    8fa6 <_ZN2sh4execEv+0x162>
                printf("%s\n", "No such command or file");
    8f90:	66 68 18 a8          	pushw  $0xa818
    8f94:	00 00                	add    %al,(%eax)
    8f96:	66 68 09 a8          	pushw  $0xa809
    8f9a:	00 00                	add    %al,(%eax)
    8f9c:	66 e8 e7 fc          	callw  8c87 <_Z7sprintfPcPKcz+0x1e>
    8fa0:	ff                   	(bad)  
    8fa1:	ff 66 58             	jmp    *0x58(%esi)
    8fa4:	66 5a                	pop    %dx
    }
    8fa6:	66 31 c0             	xor    %ax,%ax
    8fa9:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8fae:	66 5b                	pop    %bx
    8fb0:	66 5e                	pop    %si
    8fb2:	66 5f                	pop    %di
    8fb4:	66 5d                	pop    %bp
    8fb6:	66 c3                	retw   

Disassembly of section .text._ZN2sh16read_prog_recordEv:

00008fb8 <_ZN2sh16read_prog_recordEv>:
    void read_prog_record()
    8fb8:	66 55                	push   %bp
    8fba:	66 89 e5             	mov    %sp,%bp
    8fbd:	66 57                	push   %di
    8fbf:	66 56                	push   %si
    8fc1:	66 53                	push   %bx
    8fc3:	66 83 ec 6c          	sub    $0x6c,%sp
    8fc7:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        sys_read_disk(0, (uint32_t)record_buf, 34, 1);
    8fcc:	67 66 8d bb 00 02    	lea    0x200(%bp,%di),%di
    8fd2:	00 00                	add    %al,(%eax)
    8fd4:	66 6a 01             	pushw  $0x1
    8fd7:	66 6a 22             	pushw  $0x22
    8fda:	66 57                	push   %di
    8fdc:	66 6a 00             	pushw  $0x0
    8fdf:	66 e8 e8 f3          	callw  83cb <sys_get_scancode+0xf>
    8fe3:	ff                   	(bad)  
    8fe4:	ff 66 83             	jmp    *-0x7d(%esi)
        sscanf(p, "%s", buf1);
    8fe7:	c4 10                	les    (%eax),%edx
    8fe9:	67 66 8d 75 94       	lea    -0x6c(%di),%si
    8fee:	66 56                	push   %si
    8ff0:	66 68 32 a8          	pushw  $0xa832
    8ff4:	00 00                	add    %al,(%eax)
    8ff6:	66 57                	push   %di
    8ff8:	66 e8 61 fa          	callw  8a5d <_Z7vsscanfPKcS0_Pc+0x1bf>
    8ffc:	ff                   	(bad)  
    8ffd:	ff 66 83             	jmp    *-0x7d(%esi)
        p += (strlen(buf1) + 1);
    9000:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    9003:	56                   	push   %esi
    9004:	66 e8 fd f4          	callw  8505 <_Z6memsetPvim+0x23>
    9008:	ff                   	(bad)  
    9009:	ff 67 66             	jmp    *0x66(%edi)
    900c:	8d 44 07 01          	lea    0x1(%edi,%eax,1),%eax
    9010:	67 66 89 45 8c       	mov    %ax,-0x74(%di)
        prog_cnt = strtol(buf1, nullptr, 10);
    9015:	67 66 c7 04 24 0a    	movw   $0xa24,(%si)
    901b:	00 00                	add    %al,(%eax)
    901d:	00 66 6a             	add    %ah,0x6a(%esi)
    9020:	00 66 56             	add    %ah,0x56(%esi)
    9023:	66 e8 3f f6          	callw  8666 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    9027:	ff                   	(bad)  
    9028:	ff 67 66             	jmp    *0x66(%edi)
    902b:	89 83 40 08 00 00    	mov    %eax,0x840(%ebx)
    9031:	66 83 c4 0c          	add    $0xc,%sp
        for(size_t i = 0; i < prog_cnt; ++i)
    9035:	67 66 c7 45 90 00 00 	movw   $0x0,-0x70(%di)
    903c:	00 00                	add    %al,(%eax)
    903e:	67 66 8b 45 90       	mov    -0x70(%di),%ax
    9043:	67 66 39 83 40 08    	cmp    %ax,0x840(%bp,%di)
    9049:	00 00                	add    %al,(%eax)
    904b:	0f 86 97 00 67 66    	jbe    666790e8 <_GLOBAL_OFFSET_TABLE_+0x6666e890>
            sscanf(p, "%s%s", buf2, buf3);
    9051:	8d 7d d4             	lea    -0x2c(%ebp),%edi
    9054:	66 57                	push   %di
    9056:	67 66 8d 75 b4       	lea    -0x4c(%di),%si
    905b:	66 56                	push   %si
    905d:	66 68 30 a8          	pushw  $0xa830
    9061:	00 00                	add    %al,(%eax)
    9063:	67 66 ff 75 8c       	pushw  -0x74(%di)
    9068:	66 e8 f1 f9          	callw  8a5d <_Z7vsscanfPKcS0_Pc+0x1bf>
    906c:	ff                   	(bad)  
    906d:	ff 67 66             	jmp    *0x66(%edi)
    9070:	6b 4d 90 24          	imul   $0x24,-0x70(%ebp),%ecx
            strcpy(progs[i].name, buf2);
    9074:	66 83 c4 10          	add    $0x10,%sp
    9078:	66 56                	push   %si
    907a:	67 66 8d 84 0b 00    	lea    0xb(%si),%ax
    9080:	06                   	push   %es
    9081:	00 00                	add    %al,(%eax)
    9083:	67 66 89 4d 88       	mov    %cx,-0x78(%di)
    9088:	66 50                	push   %ax
    908a:	66 e8 93 f4          	callw  8521 <_Z6strlenPKc+0x1a>
    908e:	ff                   	(bad)  
    908f:	ff 66 58             	jmp    *0x58(%esi)
            progs[i].lba = strtol(buf3, nullptr, 10);
    9092:	66 5a                	pop    %dx
    9094:	66 6a 0a             	pushw  $0xa
    9097:	66 6a 00             	pushw  $0x0
    909a:	66 57                	push   %di
    909c:	66 e8 c6 f5          	callw  8666 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    90a0:	ff                   	(bad)  
    90a1:	ff 67 66             	jmp    *0x66(%edi)
    90a4:	8b 4d 88             	mov    -0x78(%ebp),%ecx
    90a7:	67 66 89 84 0b 20    	mov    %ax,0x200b(%si)
    90ad:	06                   	push   %es
    90ae:	00 00                	add    %al,(%eax)
            p += (strlen(buf2) + strlen(buf3) + 2);
    90b0:	66 83 c4 0c          	add    $0xc,%sp
    90b4:	66 56                	push   %si
    90b6:	66 e8 4b f4          	callw  8505 <_Z6memsetPvim+0x23>
    90ba:	ff                   	(bad)  
    90bb:	ff 67 66             	jmp    *0x66(%edi)
    90be:	89 45 88             	mov    %eax,-0x78(%ebp)
    90c1:	67 66 89 3c          	mov    %di,(%si)
    90c5:	24 66                	and    $0x66,%al
    90c7:	e8 3b f4 ff ff       	call   8507 <_Z6strlenPKc>
    90cc:	67 66 8b 55 88       	mov    -0x78(%di),%dx
    90d1:	67 66 8d 44 02       	lea    0x2(%si),%ax
    90d6:	02 67 66             	add    0x66(%edi),%ah
    90d9:	01 45 8c             	add    %eax,-0x74(%ebp)
        for(size_t i = 0; i < prog_cnt; ++i)
    90dc:	67 66 ff 45 90       	incw   -0x70(%di)
    90e1:	66 59                	pop    %cx
    90e3:	e9 58 ff 67 66       	jmp    66689040 <_GLOBAL_OFFSET_TABLE_+0x6667e7e8>
    }
    90e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
    90eb:	66 5b                	pop    %bx
    90ed:	66 5e                	pop    %si
    90ef:	66 5f                	pop    %di
    90f1:	66 5d                	pop    %bp
    90f3:	66 c3                	retw   

Disassembly of section .text._Z4itoaIjEvPcT_ib:

000090f5 <_Z4itoaIjEvPcT_ib>:
void itoa(char* buffer, T num, int base, bool captial = false)
    90f5:	66 55                	push   %bp
    90f7:	66 89 e5             	mov    %sp,%bp
    90fa:	66 57                	push   %di
    90fc:	66 56                	push   %si
    90fe:	66 53                	push   %bx
    9100:	66 83 ec 08          	sub    $0x8,%sp
    9104:	67 66 8b 75 08       	mov    0x8(%di),%si
    9109:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    910e:	67 66 8b 7d 10       	mov    0x10(%di),%di
    9113:	67 8a 5d 14          	mov    0x14(%di),%bl
    9117:	67 88 5d ef          	mov    %bl,-0x11(%di)
    char *p = buffer;
    911b:	66 89 f1             	mov    %si,%cx
    911e:	66 31 d2             	xor    %dx,%dx
    9121:	66 f7 f7             	div    %di
    9124:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    9129:	67 80 7d ef 00       	cmpb   $0x0,-0x11(%di)
    912e:	74 09                	je     9139 <_Z4itoaIjEvPcT_ib+0x44>
    9130:	67 8a 9a 35 a8       	mov    -0x57cb(%bp,%si),%bl
    9135:	00 00                	add    %al,(%eax)
    9137:	eb 07                	jmp    9140 <_Z4itoaIjEvPcT_ib+0x4b>
    9139:	67 8a 9a 46 a8       	mov    -0x57ba(%bp,%si),%bl
    913e:	00 00                	add    %al,(%eax)
    9140:	67 66 8d 51 01       	lea    0x1(%bx,%di),%dx
    9145:	67 88 5a ff          	mov    %bl,-0x1(%bp,%si)
        if(num == 0) break;
    9149:	67 66 83 7d f0 00    	cmpw   $0x0,-0x10(%di)
    914f:	74 05                	je     9156 <_Z4itoaIjEvPcT_ib+0x61>
    9151:	66 89 d1             	mov    %dx,%cx
    9154:	eb c8                	jmp    911e <_Z4itoaIjEvPcT_ib+0x29>
    *p = '\0';
    9156:	67 c6 41 01 00       	movb   $0x0,0x1(%bx,%di)
    reverse(buffer);
    915b:	67 66 89 75 08       	mov    %si,0x8(%di)
}
    9160:	66 58                	pop    %ax
    9162:	66 5a                	pop    %dx
    9164:	66 5b                	pop    %bx
    9166:	66 5e                	pop    %si
    9168:	66 5f                	pop    %di
    916a:	66 5d                	pop    %bp
    reverse(buffer);
    916c:	e9                   	.byte 0xe9
    916d:	63 f4                	arpl   %si,%sp
