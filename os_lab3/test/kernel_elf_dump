
build/kernel/kernel.bin.elf:     file format elf32-i386


Disassembly of section .text:

00007e00 <_text>:
    7e00:	68 43 7e 68 80       	push   $0x80687e43
    7e05:	00 e8                	add    %ch,%al
    7e07:	21 00                	and    %eax,(%eax)
    7e09:	83 c4 04             	add    $0x4,%esp
    7e0c:	68 45 7e 68 84       	push   $0x84687e45
    7e11:	00 e8                	add    %ch,%al
    7e13:	15 00 83 c4 04       	adc    $0x4c48300,%eax
    7e18:	68 55 7e 68 60       	push   $0x60687e55
    7e1d:	02 e8                	add    %al,%ch
    7e1f:	09 00                	or     %eax,(%eax)
    7e21:	83 c4 04             	add    $0x4,%esp
    7e24:	e8 36 01 fa eb       	call   ebfa7f5f <_GLOBAL_OFFSET_TABLE_+0xebf9d11b>
    7e29:	fe                   	.byte 0xfe

00007e2a <install_int>:
    7e2a:	55                   	push   %ebp
    7e2b:	89 e5                	mov    %esp,%ebp
    7e2d:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    7e32:	8b 76 04             	mov    0x4(%esi),%esi
    7e35:	8b 4e 06             	mov    0x6(%esi),%ecx
    7e38:	26 89 0c 26          	mov    %ecx,%es:(%esi,%eiz,1)
    7e3c:	8c 4c 02 8e          	mov    %cs,-0x72(%edx,%eax,1)
    7e40:	c0                   	.byte 0xc0
    7e41:	5d                   	pop    %ebp
    7e42:	c3                   	ret    

00007e43 <interrupt_20h>:
    7e43:	b4 4c                	mov    $0x4c,%ah

00007e45 <interrupt_21h>:
    7e45:	80 fc 4c             	cmp    $0x4c,%ah
    7e48:	75 09                	jne    7e53 <panic_21h_func_not_impl>
    7e4a:	83 c4 06             	add    $0x6,%esp
    7e4d:	66 ff 26             	jmpw   *(%esi)
    7e50:	0a                   	.byte 0xa
    7e51:	a0                   	.byte 0xa0
    7e52:	cf                   	iret   

00007e53 <panic_21h_func_not_impl>:
    7e53:	eb fe                	jmp    7e53 <panic_21h_func_not_impl>

00007e55 <interrupt_98h>:
    7e55:	80 fc 00             	cmp    $0x0,%ah
    7e58:	75 05                	jne    7e5f <func_01>

00007e5a <func_00>:
    7e5a:	e8 26 02 eb 14       	call   14eb8085 <_GLOBAL_OFFSET_TABLE_+0x14ead241>

00007e5f <func_01>:
    7e5f:	60                   	pusha  
    7e60:	80 fc 01             	cmp    $0x1,%ah
    7e63:	75 0e                	jne    7e73 <func_02>
    7e65:	66 50                	push   %ax
    7e67:	66 e8 d0 00          	callw  7f3b <_Z19sys_get_current_ttyv+0xb>
    7e6b:	00 00                	add    %al,(%eax)
    7e6d:	83 c4 04             	add    $0x4,%esp
    7e70:	61                   	popa   
    7e71:	eb 00                	jmp    7e73 <func_02>

00007e73 <func_02>:
    7e73:	cf                   	iret   

00007e74 <_ZL8print_okPc>:
    int mask = 0x00FF;
    ch = ch & mask;
    sys_get_current_tty()->putchar(ch);
}
const char* str = "Welcome to HHOS version 1.2.0\nYou can input help to see how to use it!";
static inline void print_ok(char * mod) {
    7e74:	66 55                	push   %bp
    7e76:	66 89 e5             	mov    %sp,%bp
    printf("%s init [", mod);
    7e79:	66 50                	push   %ax
    7e7b:	66 68 f4 ac          	pushw  $0xacf4
    7e7f:	00 00                	add    %al,(%eax)
    7e81:	66 e8 33 0e          	callw  8cb8 <_Z7sprintfPcPKcz+0x1e>
    7e85:	00 00                	add    %al,(%eax)
    {
        cur_y = y;
    }
    void set_color(int _color)
    {
        color = _color;
    7e87:	66 a1 20 9d 67 66    	mov    0x66679d20,%ax
    7e8d:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
    current_tty->set_color(MAKE_COLOR(VGA_BLACK, VGA_GREEN));
    printf("OK");
    7e94:	66 58                	pop    %ax
    7e96:	66 5a                	pop    %dx
    7e98:	66 68 fe ac          	pushw  $0xacfe
    7e9c:	00 00                	add    %al,(%eax)
    7e9e:	66 e8 16 0e          	callw  8cb8 <_Z7sprintfPcPKcz+0x1e>
    7ea2:	00 00                	add    %al,(%eax)
    7ea4:	66 a1 20 9d 67 66    	mov    0x66679d20,%ax
    7eaa:	c7 40 08 07 00 00 00 	movl   $0x7,0x8(%eax)
    current_tty->set_color(MAKE_COLOR(VGA_BLACK, VGA_WHITE));
    printf("]\n");
    7eb1:	67 66 c7 04 24 01    	movw   $0x124,(%si)
    7eb7:	ad                   	lods   %ds:(%esi),%eax
    7eb8:	00 00                	add    %al,(%eax)
    7eba:	66 e8 fa 0d          	callw  8cb8 <_Z7sprintfPcPKcz+0x1e>
    7ebe:	00 00                	add    %al,(%eax)
}
    7ec0:	66 59                	pop    %cx
    7ec2:	66 c9                	leavew 
    7ec4:	66 c3                	retw   

00007ec6 <_ZN3tty11move_cursorEii.isra.1>:
    }
    void move_cursor(int x, int y)
    7ec6:	66 55                	push   %bp
    7ec8:	66 89 e5             	mov    %sp,%bp
    7ecb:	66 53                	push   %bx
    {
        uint16_t pos = x * 80 + y;
    7ecd:	6b c0 50             	imul   $0x50,%eax,%eax
    7ed0:	67 66 8d 1c          	lea    (%si),%bx
    7ed4:	10 66 6a             	adc    %ah,0x6a(%esi)
        sys_outb(0x3D4, 0x0F);
    7ed7:	0f 66 68 d4          	pcmpgtd -0x2c(%eax),%mm5
    7edb:	03 00                	add    (%eax),%eax
    7edd:	00 66 e8             	add    %ah,-0x18(%esi)
    7ee0:	24 04                	and    $0x4,%al
    7ee2:	00 00                	add    %al,(%eax)
        sys_outb(0x3D5, (uint8_t) (pos & 0xFF));
    7ee4:	66 58                	pop    %ax
    7ee6:	66 5a                	pop    %dx
    7ee8:	66 0f b6 c3          	movzbw %bl,%ax
    7eec:	66 50                	push   %ax
    7eee:	66 68 d5 03          	pushw  $0x3d5
    7ef2:	00 00                	add    %al,(%eax)
    7ef4:	66 e8 0e 04          	callw  8306 <sys_inb+0xd>
    7ef8:	00 00                	add    %al,(%eax)
        sys_outb(0x3D4, 0x0E);
    7efa:	66 59                	pop    %cx
    7efc:	66 58                	pop    %ax
    7efe:	66 6a 0e             	pushw  $0xe
    7f01:	66 68 d4 03          	pushw  $0x3d4
    7f05:	00 00                	add    %al,(%eax)
    7f07:	66 e8 fb 03          	callw  8306 <sys_inb+0xd>
    7f0b:	00 00                	add    %al,(%eax)
        sys_outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
    7f0d:	66 58                	pop    %ax
    7f0f:	66 5a                	pop    %dx
    7f11:	66 0f b6 df          	movzbw %bh,%bx
    7f15:	66 53                	push   %bx
    7f17:	66 68 d5 03          	pushw  $0x3d5
    7f1b:	00 00                	add    %al,(%eax)
    7f1d:	66 e8 e5 03          	callw  8306 <sys_inb+0xd>
    7f21:	00 00                	add    %al,(%eax)
    7f23:	66 59                	pop    %cx
    7f25:	66 5b                	pop    %bx
    }
    7f27:	67 66 8b 5d fc       	mov    -0x4(%di),%bx
    7f2c:	66 c9                	leavew 
    7f2e:	66 c3                	retw   

00007f30 <_Z19sys_get_current_ttyv>:
tty* sys_get_current_tty(){return current_tty;}
    7f30:	66 55                	push   %bp
    7f32:	66 89 e5             	mov    %sp,%bp
    7f35:	66 a1 20 9d 66 5d    	mov    0x5d669d20,%ax
    7f3b:	66 c3                	retw   

00007f3d <sys_current_tty_putchar>:
{
    7f3d:	66 55                	push   %bp
    7f3f:	66 89 e5             	mov    %sp,%bp
    ch = ch & mask;
    7f42:	67 66 0f b6 45 08    	movzbw 0x8(%di),%ax
    sys_get_current_tty()->putchar(ch);
    7f48:	66 50                	push   %ax
    7f4a:	66 ff 36             	pushw  (%esi)
    7f4d:	20 9d 66 e8 53 0e    	and    %bl,0xe53e866(%ebp)
    7f53:	00 00                	add    %al,(%eax)
}
    7f55:	66 58                	pop    %ax
    7f57:	66 5a                	pop    %dx
    7f59:	66 c9                	leavew 
    7f5b:	66 c3                	retw   

00007f5d <kernel_main>:
extern "C" void kernel_main()
{
    7f5d:	66 55                	push   %bp
    7f5f:	66 89 e5             	mov    %sp,%bp
    7f62:	66 53                	push   %bx
    7f64:	66 81 ec d8 0d       	sub    $0xdd8,%sp
    7f69:	00 00                	add    %al,(%eax)
        sys_bios_clear_screen();
    7f6b:	66 e8 ff 00          	callw  806e <sys_bios_print_string+0x1e>
    7f6f:	00 00                	add    %al,(%eax)
        tty_init();
    7f71:	67 66 8d 9d 24 f2    	lea    -0xddc(%di),%bx
    7f77:	ff                   	(bad)  
    7f78:	ff 66 53             	jmp    *0x53(%esi)
    7f7b:	66 e8 ef 0d          	callw  8d6e <_text_end+0x76>
    7f7f:	00 00                	add    %al,(%eax)


    tty tty1;
    current_tty = &tty1;
    7f81:	66 89 1e             	mov    %bx,(%esi)
    7f84:	20 9d 66 59 66 b8    	and    %bl,-0x4799a69a(%ebp)
    print_ok("TTY");
    7f8a:	04 ad                	add    $0xad,%al
    7f8c:	00 00                	add    %al,(%eax)
    7f8e:	66 e8 e0 fe          	callw  7e72 <func_01+0x13>
    7f92:	ff                   	(bad)  
    7f93:	ff 67 66             	jmp    *0x66(%edi)
        return -1;
    }


public:
    sh(){
    7f96:	c7 85 30 f2 ff ff 07 	movl   $0x7,-0xdd0(%ebp)
    7f9d:	00 00 00 
    7fa0:	66 31 c0             	xor    %ax,%ax
    struct cmd{
    7fa3:	67 66 8d 9d 30 f2    	lea    -0xdd0(%di),%bx
    7fa9:	ff                   	(bad)  
    7faa:	ff 67 66             	jmp    *0x66(%edi)
    7fad:	c7 84 05 38 f3 ff ff 	movl   $0x0,-0xcc8(%ebp,%eax,1)
    7fb4:	00 00 00 00 
    7fb8:	66 83 c0 08          	add    $0x8,%ax
    sh(){
    7fbc:	66 3d 00 01          	cmp    $0x100,%ax
    7fc0:	00 00                	add    %al,(%eax)
    7fc2:	75 e7                	jne    7fab <kernel_main+0x4e>
    7fc4:	67 66 c7 85 b4 fd ff 	movw   $0xffff,-0x24c(%di)
    7fcb:	ff 
    7fcc:	00 00                	add    %al,(%eax)
    7fce:	00 00                	add    %al,(%eax)
    7fd0:	67 66 c7 85 b8 fd ff 	movw   $0xffff,-0x248(%di)
    7fd7:	ff 
    7fd8:	00 00                	add    %al,(%eax)
    7fda:	00 00                	add    %al,(%eax)
        memset(buf, 0, buf_size);
    7fdc:	66 68 80 00          	pushw  $0x80
    7fe0:	00 00                	add    %al,(%eax)
    7fe2:	66 6a 00             	pushw  $0x0
    7fe5:	67 66 8d 85 34 f4    	lea    -0xbcc(%di),%ax
    7feb:	ff                   	(bad)  
    7fec:	ff 66 50             	jmp    *0x50(%esi)
    7fef:	66 e8 5d 04          	callw  8450 <_Z7memmovePvPKvm+0x4b>
    7ff3:	00 00                	add    %al,(%eax)
        read_prog_record();
    7ff5:	66 83 c4 0c          	add    $0xc,%sp
    7ff9:	66 53                	push   %bx
    7ffb:	66 e8 41 11          	callw  9140 <_ZN2sh4execERKNS_3cmdE+0x296>
    7fff:	00 00                	add    %al,(%eax)
        sys_read_disk(0, (uint32_t)help, HELP_FILE_SECTOR, 1);
    8001:	67 66 c7 04 24 01    	movw   $0x124,(%si)
    8007:	00 00                	add    %al,(%eax)
    8009:	00 66 6a             	add    %ah,0x6a(%esi)
    800c:	20 67 66             	and    %ah,0x66(%edi)
    800f:	8d 85 b4 fb ff ff    	lea    -0x44c(%ebp),%eax
    8015:	66 50                	push   %ax
    8017:	66 6a 00             	pushw  $0x0
    801a:	66 e8 1d 03          	callw  833b <sys_get_scancode+0xf>
    801e:	00 00                	add    %al,(%eax)
    sh sh1;
    print_ok("Shell");
    8020:	66 83 c4 10          	add    $0x10,%sp
    8024:	66 b8 08 ad          	mov    $0xad08,%ax
    8028:	00 00                	add    %al,(%eax)
    802a:	66 e8 44 fe          	callw  7e72 <func_01+0x13>
    802e:	ff                   	(bad)  
    802f:	ff 66 ff             	jmp    *-0x1(%esi)
    printf("%s\n", str);
    8032:	36 f0 ac             	lock lods %ss:(%esi),%al
    8035:	66 68 bd ad          	pushw  $0xadbd
    8039:	00 00                	add    %al,(%eax)
    803b:	66 e8 79 0c          	callw  8cb8 <_Z7sprintfPcPKcz+0x1e>
    803f:	00 00                	add    %al,(%eax)
    sh1.run();
    8041:	66 58                	pop    %ax
    8043:	66 5a                	pop    %dx
    8045:	66 53                	push   %bx
    8047:	66 e8 33 12          	callw  927e <_ZN2sh16read_prog_recordEv+0x13c>
    804b:	00 00                	add    %al,(%eax)
    804d:	66 90                	xchg   %ax,%ax
    804f:	90                   	nop

00008050 <sys_bios_print_string>:
    8050:	55                   	push   %ebp
    8051:	89 e5                	mov    %esp,%ebp
    8053:	8b 4e 0a             	mov    0xa(%esi),%ecx
    8056:	8b 5e 0e             	mov    0xe(%esi),%ebx
    8059:	b7 00                	mov    $0x0,%bh
    805b:	8b 56 12             	mov    0x12(%esi),%edx
    805e:	8c d8                	mov    %ds,%eax
    8060:	8e c0                	mov    %eax,%es
    8062:	b8 01 13 8e ed       	mov    $0xed8e1301,%eax
    8067:	8b 6e 06             	mov    0x6(%esi),%ebp
    806a:	cd 10                	int    $0x10
    806c:	8c ed                	mov    %gs,%ebp
    806e:	5d                   	pop    %ebp
    806f:	c3                   	ret    

00008070 <sys_bios_clear_screen>:
    8070:	60                   	pusha  
    8071:	b4 06                	mov    $0x6,%ah
    8073:	b0 00                	mov    $0x0,%al
    8075:	b7 07                	mov    $0x7,%bh
    8077:	b5 00                	mov    $0x0,%ch
    8079:	b1 00                	mov    $0x0,%cl
    807b:	b6 18                	mov    $0x18,%dh
    807d:	b2 4f                	mov    $0x4f,%dl
    807f:	cd 10                	int    $0x10
    8081:	61                   	popa   
    8082:	c3                   	ret    

00008083 <sys_bios_getchar>:
    8083:	b4 00                	mov    $0x0,%ah
    8085:	cd 16                	int    $0x16
    8087:	b4 00                	mov    $0x0,%ah
    8089:	c3                   	ret    

0000808a <sys_execve_bin>:
    808a:	55                   	push   %ebp
    808b:	89 e5                	mov    %esp,%ebp
    808d:	60                   	pusha  
    808e:	1e                   	push   %ds
    808f:	06                   	push   %es
    8090:	b8 00 10 8e d8       	mov    $0xd88e1000,%eax
    8095:	8e c0                	mov    %eax,%es
    8097:	8e d0                	mov    %eax,%ss
    8099:	c7 06 00 a0 cd 00    	movl   $0xcda000,(%esi)
    809f:	c7 06 02 a0 20 00    	movl   $0x20a002,(%esi)
    80a5:	c7 06 0a a0 b4 80    	movl   $0x80b4a00a,(%esi)
    80ab:	8c 0e                	mov    %cs,(%esi)
    80ad:	0c a0                	or     $0xa0,%al
    80af:	ea                   	.byte 0xea
    80b0:	00                   	.byte 0x0
    80b1:	a1                   	.byte 0xa1
    80b2:	00 10                	add    %dl,(%eax)

000080b4 <return_point>:
    80b4:	b8 00 00 8e d0       	mov    $0xd08e0000,%eax
    80b9:	58                   	pop    %eax
    80ba:	8e c0                	mov    %eax,%es
    80bc:	58                   	pop    %eax
    80bd:	8e d8                	mov    %eax,%ds
    80bf:	61                   	popa   
    80c0:	5d                   	pop    %ebp
    80c1:	c3                   	ret    

000080c2 <sys_bios_print_int>:
#include "sys_lib.h"
void sys_bios_print_int(int num, int color, int pos)
{
    80c2:	66 55                	push   %bp
    80c4:	66 89 e5             	mov    %sp,%bp
    80c7:	66 57                	push   %di
    80c9:	66 56                	push   %si
    80cb:	66 53                	push   %bx
    80cd:	66 50                	push   %ax
    int num_ = num;
    80cf:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    80d4:	66 b9 01 00          	mov    $0x1,%cx
    80d8:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    80da:	66 bb 0a 00          	mov    $0xa,%bx
    80de:	00 00                	add    %al,(%eax)
    80e0:	66 99                	cwtd   
    80e2:	66 f7 fb             	idiv   %bx
    80e5:	66 85 c0             	test   %ax,%ax
    80e8:	74 04                	je     80ee <sys_bios_print_int+0x2c>
    80ea:	66 41                	inc    %cx
    80ec:	eb f2                	jmp    80e0 <sys_bios_print_int+0x1e>
    char arr[len + 1];
    80ee:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    80f3:	66 83 e0 fc          	and    $0xfffc,%ax
    80f7:	66 29 c4             	sub    %ax,%sp
    80fa:	66 89 e7             	mov    %sp,%di
    80fd:	67 66 8d 1c          	lea    (%si),%bx
    8101:	0c 67                	or     $0x67,%al
    int power = 1;
    8103:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    8109:	00 00                	add    %al,(%eax)
    for(int i = 0; i < len; ++i, power *= 10)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    810b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8110:	66 99                	cwtd   
    8112:	67 66 f7 7d f0       	idivw  -0x10(%di)
    8117:	66 be 0a 00          	mov    $0xa,%si
    811b:	00 00                	add    %al,(%eax)
    811d:	66 99                	cwtd   
    811f:	66 f7 fe             	idiv   %si
    8122:	66 83 c2 30          	add    $0x30,%dx
    8126:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    812a:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    8130:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8135:	66 4b                	dec    %bx
    8137:	66 39 df             	cmp    %bx,%di
    813a:	75 cf                	jne    810b <sys_bios_print_int+0x49>
    arr[len] = '\0';
    813c:	67 c6 04 0f          	movb   $0xf,(%si)
    8140:	00 67 66             	add    %ah,0x66(%edi)
    sys_bios_print_string(arr, len, color, pos);
    8143:	ff 75 10             	pushl  0x10(%ebp)
    8146:	67 66 ff 75 0c       	pushw  0xc(%di)
    814b:	66 51                	push   %cx
    814d:	66 57                	push   %di
    814f:	66 e8 fb fe          	callw  804e <kernel_main+0xf1>
    8153:	ff                   	(bad)  
    8154:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8157:	c4 10                	les    (%eax),%edx
    8159:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    815e:	66 5b                	pop    %bx
    8160:	66 5e                	pop    %si
    8162:	66 5f                	pop    %di
    8164:	66 5d                	pop    %bp
    8166:	66 c3                	retw   

00008168 <sys_putchar>:
    //"mov word ptr gs:[bp],ax\n\t"
                   //".att_syntax noprefix\n\t");
//}

void sys_putchar(int c, int color, int x, int y)
{
    8168:	66 55                	push   %bp
    816a:	66 89 e5             	mov    %sp,%bp
    816d:	66 53                	push   %bx
    int offset = (x * 80 + y)*2;
    uint16_t ch = c | (color << 8);
    816f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8174:	66 c1 e0 08          	shl    $0x8,%ax
    8178:	67 66 0b 45 08       	or     0x8(%di),%ax
    int offset = (x * 80 + y)*2;
    817d:	67 66 6b 5d 10 50    	imul   $0x50,0x10(%di),%bx
    8183:	67 66 03 5d 14       	add    0x14(%di),%bx
    8188:	66 01 db             	add    %bx,%bx
    "mov word ptr gs:[bp],ax\n\t"
    "popa\n\t"
    ".att_syntax noprefix\n\t"
    :
    :"a"(ch),"b"(offset)
    :"%ecx");
    818b:	66 60                	pushaw 
    818d:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    8192:	89 dd                	mov    %ebx,%ebp
    8194:	65 89 46 00          	mov    %eax,%gs:0x0(%esi)
    8198:	66 61                	popaw  
}
    819a:	66 5b                	pop    %bx
    819c:	66 5d                	pop    %bp
    819e:	66 c3                	retw   

000081a0 <sys_print_string>:
{
    81a0:	66 55                	push   %bp
    81a2:	66 89 e5             	mov    %sp,%bp
    81a5:	66 56                	push   %si
    81a7:	66 53                	push   %bx
    81a9:	67 66 8b 5d 14       	mov    0x14(%di),%bx
    81ae:	67 66 8b 75 0c       	mov    0xc(%di),%si
    81b3:	66 01 de             	add    %bx,%si
    81b6:	66 89 da             	mov    %bx,%dx
    for(unsigned int i = 0; i < len; ++i)
    81b9:	66 39 f2             	cmp    %si,%dx
    81bc:	74 28                	je     81e6 <sys_print_string+0x46>
        sys_putchar(str[i], color, x, y + i);
    81be:	66 52                	push   %dx
    81c0:	67 66 ff 75 10       	pushw  0x10(%di)
    81c5:	66 6a 07             	pushw  $0x7
    81c8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    81cd:	66 29 d8             	sub    %bx,%ax
    81d0:	67 66 0f be 04       	movsbw (%si),%ax
    81d5:	10 66 50             	adc    %ah,0x50(%esi)
    81d8:	66 e8 8a ff          	callw  8166 <sys_bios_print_int+0xa4>
    81dc:	ff                   	(bad)  
    81dd:	ff 66 42             	jmp    *0x42(%esi)
    for(unsigned int i = 0; i < len; ++i)
    81e0:	66 83 c4 10          	add    $0x10,%sp
    81e4:	eb d3                	jmp    81b9 <sys_print_string+0x19>
}
    81e6:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    81eb:	66 5b                	pop    %bx
    81ed:	66 5e                	pop    %si
    81ef:	66 5d                	pop    %bp
    81f1:	66 c3                	retw   

000081f3 <sys_print_int>:
{
    81f3:	66 55                	push   %bp
    81f5:	66 89 e5             	mov    %sp,%bp
    81f8:	66 57                	push   %di
    81fa:	66 56                	push   %si
    81fc:	66 53                	push   %bx
    81fe:	66 50                	push   %ax
    int num_ = num;
    8200:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    8205:	66 b9 01 00          	mov    $0x1,%cx
    8209:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    820b:	66 bb 0a 00          	mov    $0xa,%bx
    820f:	00 00                	add    %al,(%eax)
    8211:	66 99                	cwtd   
    8213:	66 f7 fb             	idiv   %bx
    8216:	66 85 c0             	test   %ax,%ax
    8219:	74 04                	je     821f <sys_print_int+0x2c>
    821b:	66 41                	inc    %cx
    821d:	eb f2                	jmp    8211 <sys_print_int+0x1e>
    char arr[len + 1];
    821f:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    8224:	66 83 e0 fc          	and    $0xfffc,%ax
    8228:	66 29 c4             	sub    %ax,%sp
    822b:	66 89 e7             	mov    %sp,%di
    822e:	67 66 8d 1c          	lea    (%si),%bx
    8232:	0c 67                	or     $0x67,%al
    int power = 1;
    8234:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    823a:	00 00                	add    %al,(%eax)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    823c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8241:	66 99                	cwtd   
    8243:	67 66 f7 7d f0       	idivw  -0x10(%di)
    8248:	66 be 0a 00          	mov    $0xa,%si
    824c:	00 00                	add    %al,(%eax)
    824e:	66 99                	cwtd   
    8250:	66 f7 fe             	idiv   %si
    8253:	66 83 c2 30          	add    $0x30,%dx
    8257:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    825b:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    8261:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8266:	66 4b                	dec    %bx
    8268:	66 39 df             	cmp    %bx,%di
    826b:	75 cf                	jne    823c <sys_print_int+0x49>
    arr[len] = '\0';
    826d:	67 c6 04 0f          	movb   $0xf,(%si)
    8271:	00 67 66             	add    %ah,0x66(%edi)
    sys_print_string(arr, len, x, y); 
    8274:	ff 75 10             	pushl  0x10(%ebp)
    8277:	67 66 ff 75 0c       	pushw  0xc(%di)
    827c:	66 51                	push   %cx
    827e:	66 57                	push   %di
    8280:	66 e8 1a ff          	callw  819e <sys_putchar+0x36>
    8284:	ff                   	(bad)  
    8285:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8288:	c4 10                	les    (%eax),%edx
    828a:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    828f:	66 5b                	pop    %bx
    8291:	66 5e                	pop    %si
    8293:	66 5f                	pop    %di
    8295:	66 5d                	pop    %bp
    8297:	66 c3                	retw   

00008299 <sys_bios_scroll_up>:

void sys_bios_scroll_up(int color)
{
    8299:	66 55                	push   %bp
    829b:	66 89 e5             	mov    %sp,%bp
    "movb $79, %%dl\n\t"
    "movb $0x06, %%ah\n\t"
    "int $0x10\n\t"
    "popa\n\t"
    :
    : "g"(color));
    829e:	66 60                	pushaw 
    82a0:	b0 01                	mov    $0x1,%al
    82a2:	67 8a 7d 08          	mov    0x8(%di),%bh
    82a6:	b5 00                	mov    $0x0,%ch
    82a8:	b1 00                	mov    $0x0,%cl
    82aa:	b6 18                	mov    $0x18,%dh
    82ac:	b2 4f                	mov    $0x4f,%dl
    82ae:	b4 06                	mov    $0x6,%ah
    82b0:	cd 10                	int    $0x10
    82b2:	66 61                	popaw  
}
    82b4:	66 5d                	pop    %bp
    82b6:	66 c3                	retw   

000082b8 <sys_bios_putchar>:

void sys_bios_putchar(char c, int color, int x, int y)
{
    82b8:	66 55                	push   %bp
    82ba:	66 89 e5             	mov    %sp,%bp
    82bd:	66 50                	push   %ax
    82bf:	67 66 8b 45 08       	mov    0x8(%di),%ax
    82c4:	67 88 45 fc          	mov    %al,-0x4(%di)
    sys_bios_print_string(&c, 1, color, MAKE_POS(x, y));
    82c8:	67 66 8b 45 10       	mov    0x10(%di),%ax
    82cd:	66 c1 e0 08          	shl    $0x8,%ax
    82d1:	67 66 0f b6 55 14    	movzbw 0x14(%di),%dx
    82d7:	66 09 d0             	or     %dx,%ax
    82da:	66 50                	push   %ax
    82dc:	67 66 ff 75 0c       	pushw  0xc(%di)
    82e1:	66 6a 01             	pushw  $0x1
    82e4:	67 66 8d 45 fc       	lea    -0x4(%di),%ax
    82e9:	66 50                	push   %ax
    82eb:	66 e8 5f fd          	callw  804e <kernel_main+0xf1>
    82ef:	ff                   	(bad)  
    82f0:	ff 66 83             	jmp    *-0x7d(%esi)
}
    82f3:	c4 10                	les    (%eax),%edx
    82f5:	66 c9                	leavew 
    82f7:	66 c3                	retw   

000082f9 <sys_inb>:

uint8_t sys_inb(uint16_t port)
{
    82f9:	66 55                	push   %bp
    82fb:	66 89 e5             	mov    %sp,%bp
    uint8_t ret;
    asm volatile ( "inb %1, %0"
                   : "=a"(ret)
                   : "Nd"(port) );
    82fe:	67 66 8b 55 08       	mov    0x8(%di),%dx
    8303:	ec                   	in     (%dx),%al
    return ret;
}
    8304:	66 5d                	pop    %bp
    8306:	66 c3                	retw   

00008308 <sys_outb>:
//    asm(".att_syntax noprefix\n");
//    return ret;
//}

void sys_outb(uint16_t port, uint8_t data)
{
    8308:	66 55                	push   %bp
    830a:	66 89 e5             	mov    %sp,%bp
    asm volatile ( "outb %0, %1"
                   : 
                   : "a"(data), "Nd"(port) );
    830d:	67 66 8b 55 08       	mov    0x8(%di),%dx
    8312:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8317:	ee                   	out    %al,(%dx)
}
    8318:	66 5d                	pop    %bp
    831a:	66 c3                	retw   

0000831c <sys_dbg_bochs_putc>:
//                    : "=a"(ret)
//                    : "Nd"(port) );
//     return ret;
// }

void sys_dbg_bochs_putc(char c){
    831c:	66 55                	push   %bp
    831e:	66 89 e5             	mov    %sp,%bp
                   : "a"(data), "Nd"(port) );
    8321:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8326:	e6 e9                	out    %al,$0xe9
    sys_outb(0xe9, (uint8_t)c);
}
    8328:	66 5d                	pop    %bp
    832a:	66 c3                	retw   

0000832c <sys_get_scancode>:

char sys_get_scancode()
{
    832c:	66 55                	push   %bp
    832e:	66 89 e5             	mov    %sp,%bp
                   : "Nd"(port) );
    8331:	e4 64                	in     $0x64,%al
    while (!(sys_inb(0x64) & 1));
    8333:	a8 01                	test   $0x1,%al
    8335:	74 fa                	je     8331 <sys_get_scancode+0x5>
                   : "Nd"(port) );
    8337:	e4 60                	in     $0x60,%al
    return sys_inb(0x60);
}
    8339:	66 5d                	pop    %bp
    833b:	66 c3                	retw   

0000833d <sys_read_disk>:

void sys_read_disk(uint32_t segment, uint32_t address, uint16_t logical_start_sector, uint8_t secotr_cnt)
{
    833d:	66 55                	push   %bp
    833f:	66 89 e5             	mov    %sp,%bp
    8342:	66 53                	push   %bx
    uint8_t head = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) / FLOPPY_SECTOR_PER_TRACK;
    8344:	67 66 0f b7 45 10    	movzww 0x10(%di),%ax
    834a:	66 b9 24 00          	mov    $0x24,%cx
    834e:	00 00                	add    %al,(%eax)
    8350:	66 99                	cwtd   
    8352:	66 f7 f9             	idiv   %cx
    8355:	66 89 c1             	mov    %ax,%cx
    8358:	66 bb 12 00          	mov    $0x12,%bx
    835c:	00 00                	add    %al,(%eax)
    835e:	66 89 d0             	mov    %dx,%ax
    8361:	66 99                	cwtd   
    8363:	66 f7 fb             	idiv   %bx
    uint16_t cylinder = logical_start_sector / (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK);
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    //位操作一定要注意类型匹配（两小时）
    uint16_t mask1 = 255;
    uint16_t mask2 = 768;
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    8366:	66 89 cb             	mov    %cx,%bx
    8369:	66 c1 e3 08          	shl    $0x8,%bx
    836d:	66 81 e1 00 03       	and    $0x300,%cx
    8372:	00 00                	add    %al,(%eax)
    8374:	66 c1 f9 02          	sar    $0x2,%cx
    8378:	66 09 d9             	or     %bx,%cx
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    837b:	66 42                	inc    %dx
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    837d:	66 09 d1             	or     %dx,%cx
     "movb %4, %%al\n\t"    //扇区数
     "movb $0, %%dl\n\t"    //驱动器号
     "movb $2, %%ah\n\t"    //功能号
     "int $0x13\n\t"
     "pop %%es\n\t"
     : :"g"(segment), "g"(address), "g"(head), "g"(_cx), "g" (secotr_cnt));
    8380:	06                   	push   %es
    8381:	67 8b 5d 08          	mov    0x8(%di),%ebx
    8385:	8e c3                	mov    %ebx,%es
    8387:	67 8b 5d 0c          	mov    0xc(%di),%ebx
    838b:	88 c6                	mov    %al,%dh
    838d:	89 c9                	mov    %ecx,%ecx
    838f:	67 8a 45 14          	mov    0x14(%di),%al
    8393:	b2 00                	mov    $0x0,%dl
    8395:	b4 02                	mov    $0x2,%ah
    8397:	cd 13                	int    $0x13
    8399:	07                   	pop    %es
}
    839a:	66 5b                	pop    %bx
    839c:	66 5d                	pop    %bp
    839e:	66 c3                	retw   

000083a0 <_Z6memcmpPKvS0_m>:
namespace hhlibc {

#endif

int memcmp(const void * _s1, const void* _s2, size_t n)
{
    83a0:	66 55                	push   %bp
    83a2:	66 89 e5             	mov    %sp,%bp
    83a5:	66 31 d2             	xor    %dx,%dx
    auto s1 = reinterpret_cast<const unsigned char*>(_s1);
    auto s2 = reinterpret_cast<const unsigned char*>(_s2);
    while(n--)
    83a8:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    83ad:	74 22                	je     83d1 <_Z6memcmpPKvS0_m+0x31>
    {
        if(*s1 != *s2)          //**不能**让!=时跳出然后返回*s1 - *s2
    83af:	67 66 8b 45 08       	mov    0x8(%di),%ax
    83b4:	67 66 0f b6 04       	movzbw (%si),%ax
    83b9:	10 66 42             	adc    %ah,0x42(%esi)
    83bc:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    83c1:	67 66 0f b6 4c 11    	movzbw 0x11(%si),%cx
    83c7:	ff                   	(bad)  
    83c8:	38 c8                	cmp    %cl,%al
    83ca:	74 dc                	je     83a8 <_Z6memcmpPKvS0_m+0x8>
        {                       //因为那样在实际上==的时候，会比较错误
            return *s1 - *s2;
    83cc:	66 29 c8             	sub    %cx,%ax
    83cf:	eb 03                	jmp    83d4 <_Z6memcmpPKvS0_m+0x34>
        }
        ++s1;
        ++s2;
    }
    return 0;
    83d1:	66 31 c0             	xor    %ax,%ax
}
    83d4:	66 5d                	pop    %bp
    83d6:	66 c3                	retw   

000083d8 <_Z6memcpyPvPKvm>:

void* memcpy(void* _dst, const void* _src, size_t n)
{
    83d8:	66 55                	push   %bp
    83da:	66 89 e5             	mov    %sp,%bp
    83dd:	66 53                	push   %bx
    83df:	67 66 8b 45 08       	mov    0x8(%di),%ax
    83e4:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    83e9:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    while (n--)
    83ec:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    83f1:	74 0c                	je     83ff <_Z6memcpyPvPKvm+0x27>
    {
        *(dst++) = *(src++);
    83f3:	67 8a 0c             	mov    (%si),%cl
    83f6:	13 67 88             	adc    -0x78(%edi),%esp
    83f9:	0c 10                	or     $0x10,%al
    83fb:	66 42                	inc    %dx
    while (n--)
    83fd:	eb ed                	jmp    83ec <_Z6memcpyPvPKvm+0x14>
    }
    return _dst;
}
    83ff:	66 5b                	pop    %bx
    8401:	66 5d                	pop    %bp
    8403:	66 c3                	retw   

00008405 <_Z7memmovePvPKvm>:
void* memmove(void* _dst, const void* _src, size_t n)
{
    8405:	66 55                	push   %bp
    8407:	66 89 e5             	mov    %sp,%bp
    840a:	66 56                	push   %si
    840c:	66 53                	push   %bx
    840e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8413:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    8418:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    if(dst < src)
    841d:	66 39 d8             	cmp    %bx,%ax
    8420:	73 14                	jae    8436 <_Z7memmovePvPKvm+0x31>
    8422:	66 31 c9             	xor    %cx,%cx
    {
        while(n--)
    8425:	66 39 f1             	cmp    %si,%cx
    8428:	74 20                	je     844a <_Z7memmovePvPKvm+0x45>
        {
            *(dst++) = *(src++);
    842a:	67 8a 14             	mov    (%si),%dl
    842d:	0b 67 88             	or     -0x78(%edi),%esp
    8430:	14 08                	adc    $0x8,%al
    8432:	66 41                	inc    %cx
        while(n--)
    8434:	eb ef                	jmp    8425 <_Z7memmovePvPKvm+0x20>
        }
    }
    else if(dst > src)
    8436:	76 12                	jbe    844a <_Z7memmovePvPKvm+0x45>
    {
        src += n;
        dst += n;
        while(n--)
    8438:	66 4e                	dec    %si
    843a:	66 83 fe ff          	cmp    $0xffff,%si
    843e:	74 0a                	je     844a <_Z7memmovePvPKvm+0x45>
        {
            *(--dst) = *(--src);
    8440:	67 8a 0c             	mov    (%si),%cl
    8443:	33 67 88             	xor    -0x78(%edi),%esp
    8446:	0c 30                	or     $0x30,%al
        while(n--)
    8448:	eb ee                	jmp    8438 <_Z7memmovePvPKvm+0x33>
        }
    }
    return _dst;
}
    844a:	66 5b                	pop    %bx
    844c:	66 5e                	pop    %si
    844e:	66 5d                	pop    %bp
    8450:	66 c3                	retw   

00008452 <_Z6memsetPvim>:
void* memset(void* _dst, int c, size_t n)
{
    8452:	66 55                	push   %bp
    8454:	66 89 e5             	mov    %sp,%bp
    8457:	67 66 8b 45 08       	mov    0x8(%di),%ax
    845c:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    8461:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    while(n--)
    8464:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    8469:	74 08                	je     8473 <_Z6memsetPvim+0x21>
    {
        *(dst++) = static_cast<unsigned char>(c);
    846b:	67 88 0c             	mov    %cl,(%si)
    846e:	10 66 42             	adc    %ah,0x42(%esi)
    while(n--)
    8471:	eb f1                	jmp    8464 <_Z6memsetPvim+0x12>
    }
    return _dst;
}
    8473:	66 5d                	pop    %bp
    8475:	66 c3                	retw   

00008477 <_Z6strlenPKc>:
size_t strlen(const char* _str)
{
    8477:	66 55                	push   %bp
    8479:	66 89 e5             	mov    %sp,%bp
    847c:	67 66 8b 55 08       	mov    0x8(%di),%dx
    auto str = _str;
    size_t len = 0;
    8481:	66 31 c0             	xor    %ax,%ax
    while(*(_str++))
    8484:	67 80 3c 02          	cmpb   $0x2,(%si)
    8488:	00 74 04 66          	add    %dh,0x66(%esp,%eax,1)
    {
        len++;
    848c:	40                   	inc    %eax
    while(*(_str++))
    848d:	eb f5                	jmp    8484 <_Z6strlenPKc+0xd>
    }
    return len;
}
    848f:	66 5d                	pop    %bp
    8491:	66 c3                	retw   

00008493 <_Z6strcpyPcPKc>:
char *strcpy(char* _dst, const char* _src)
{
    8493:	66 55                	push   %bp
    8495:	66 89 e5             	mov    %sp,%bp
    8498:	66 56                	push   %si
    849a:	66 53                	push   %bx
    849c:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    84a1:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    auto len = strlen(_src);
    84a6:	66 51                	push   %cx
    84a8:	66 e8 c9 ff          	callw  8475 <_Z6memsetPvim+0x23>
    84ac:	ff                   	(bad)  
    84ad:	ff 66 89             	jmp    *-0x77(%esi)
    84b0:	c6                   	(bad)  
    memcpy(reinterpret_cast<void*>(_dst), reinterpret_cast<const void *>(_src), len);
    84b1:	67 66 89 04          	mov    %ax,(%si)
    84b5:	24 66                	and    $0x66,%al
    84b7:	51                   	push   %ecx
    84b8:	66 53                	push   %bx
    84ba:	66 e8 18 ff          	callw  83d6 <_Z6memcmpPKvS0_m+0x36>
    84be:	ff                   	(bad)  
    84bf:	ff 67 c6             	jmp    *-0x3a(%edi)
    _dst[len] = '\0';
    84c2:	04 33                	add    $0x33,%al
    84c4:	00 66 89             	add    %ah,-0x77(%esi)
    return _dst;
}
    84c7:	d8 67 66             	fsubs  0x66(%edi)
    84ca:	8d 65 f8             	lea    -0x8(%ebp),%esp
    84cd:	66 5b                	pop    %bx
    84cf:	66 5e                	pop    %si
    84d1:	66 5d                	pop    %bp
    84d3:	66 c3                	retw   

000084d5 <_Z6strcmpPKcS0_>:
int strcmp(const char* _s1, const char* _s2)
{
    84d5:	66 55                	push   %bp
    84d7:	66 89 e5             	mov    %sp,%bp
    84da:	66 57                	push   %di
    84dc:	66 56                	push   %si
    84de:	66 53                	push   %bx
    84e0:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    84e5:	67 66 8b 7d 0c       	mov    0xc(%di),%di
    auto len1 = strlen(_s1);
    84ea:	66 51                	push   %cx
    84ec:	66 e8 85 ff          	callw  8475 <_Z6memsetPvim+0x23>
    84f0:	ff                   	(bad)  
    84f1:	ff 66 89             	jmp    *-0x77(%esi)
    84f4:	c3                   	ret    
    auto len2 = strlen(_s2);
    84f5:	67 66 89 3c          	mov    %di,(%si)
    84f9:	24 66                	and    $0x66,%al
    84fb:	e8 77 ff ff ff       	call   8477 <_Z6strlenPKc>
    8500:	66 5a                	pop    %dx
    8502:	66 89 c6             	mov    %ax,%si
    auto len = len1 < len2 ? len1 : len2;
    auto ret = memcmp(reinterpret_cast<const void*>(_s1), reinterpret_cast<const void *>(_s2), len);
    8505:	66 39 c3             	cmp    %ax,%bx
    8508:	77 03                	ja     850d <_Z6strcmpPKcS0_+0x38>
    850a:	66 89 d8             	mov    %bx,%ax
    850d:	66 50                	push   %ax
    850f:	66 57                	push   %di
    8511:	66 51                	push   %cx
    8513:	66 e8 87 fe          	callw  839e <sys_read_disk+0x61>
    8517:	ff                   	(bad)  
    8518:	ff 66 83             	jmp    *-0x7d(%esi)
    851b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    if(ret == 0)
    851e:	85 c0                	test   %eax,%eax
    8520:	75 11                	jne    8533 <_Z6strcmpPKcS0_+0x5e>
    {
        if(len1 == len2)
    8522:	66 39 f3             	cmp    %si,%bx
    8525:	74 0c                	je     8533 <_Z6strcmpPKcS0_+0x5e>
        {
            return -1;
        }
        else
        {
            return 1;
    8527:	66 39 de             	cmp    %bx,%si
    852a:	66 19 c0             	sbb    %ax,%ax
    852d:	66 83 e0 02          	and    $0x2,%ax
    8531:	66 48                	dec    %ax
        }
    }
    return ret;
}
    8533:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8538:	66 5b                	pop    %bx
    853a:	66 5e                	pop    %si
    853c:	66 5f                	pop    %di
    853e:	66 5d                	pop    %bp
    8540:	66 c3                	retw   

00008542 <_Z7reversePc>:

void reverse(char* buffer)
{
    8542:	66 55                	push   %bp
    8544:	66 89 e5             	mov    %sp,%bp
    8547:	66 56                	push   %si
    8549:	66 53                	push   %bx
    854b:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    char ch;
    size_t len = strlen(buffer);
    8550:	66 51                	push   %cx
    8552:	66 e8 1f ff          	callw  8475 <_Z6memsetPvim+0x23>
    8556:	ff                   	(bad)  
    8557:	ff 66 5a             	jmp    *0x5a(%esi)
    855a:	66 89 ca             	mov    %cx,%dx
    855d:	67 66 8d 0c          	lea    (%si),%cx
    8561:	01 66 d1             	add    %esp,-0x2f(%esi)
    for(size_t i = 0; i < len / 2; ++i)
    8564:	e8 67 66 8d 34       	call   348debd0 <_GLOBAL_OFFSET_TABLE_+0x348d3d8c>
    8569:	10 66 49             	adc    %ah,0x49(%esi)
    856c:	66 39 f2             	cmp    %si,%dx
    856f:	74 10                	je     8581 <_Z7reversePc+0x3f>
    {
        ch = *(buffer + i);
    8571:	67 8a 1a             	mov    (%bp,%si),%bl
        *(buffer + i) = *(buffer + len - 1 - i);
    8574:	67 8a 01             	mov    (%bx,%di),%al
    8577:	67 88 02             	mov    %al,(%bp,%si)
        *(buffer + len - 1 - i)  = ch;
    857a:	67 88 19             	mov    %bl,(%bx,%di)
    857d:	66 42                	inc    %dx
    for(size_t i = 0; i < len / 2; ++i)
    857f:	eb e9                	jmp    856a <_Z7reversePc+0x28>
    }
}
    8581:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    8586:	66 5b                	pop    %bx
    8588:	66 5e                	pop    %si
    858a:	66 5d                	pop    %bp
    858c:	66 c3                	retw   

0000858e <_Z7isspacei>:
namespace hhlibc {

#endif

int isspace( int ch )
{
    858e:	66 55                	push   %bp
    8590:	66 89 e5             	mov    %sp,%bp
    8593:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return (ch == 9 || ch == 32 || (ch >= 10 && ch <= 13));
    8598:	67 66 8d 42 f7       	lea    -0x9(%bp,%si),%ax
    859d:	66 83 f8 04          	cmp    $0x4,%ax
    85a1:	0f 96 c0             	setbe  %al
    85a4:	66 83 fa 20          	cmp    $0x20,%dx
    85a8:	0f 94 c2             	sete   %dl
    85ab:	66 09 d0             	or     %dx,%ax
    85ae:	66 0f b6 c0          	movzbw %al,%ax
}
    85b2:	66 5d                	pop    %bp
    85b4:	66 c3                	retw   

000085b6 <_Z7isalnumi>:

int isalnum(int ch)
{
    85b6:	66 55                	push   %bp
    85b8:	66 89 e5             	mov    %sp,%bp
    85bb:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return ((ch >= 48 && ch <= 57) || (ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122));
    85c0:	67 66 8d 4a d0       	lea    -0x30(%bp,%si),%cx
    85c5:	b0 01                	mov    $0x1,%al
    85c7:	66 83 f9 09          	cmp    $0x9,%cx
    85cb:	76 0f                	jbe    85dc <_Z7isalnumi+0x26>
    85cd:	66 83 e2 df          	and    $0xffdf,%dx
    85d1:	66 83 ea 41          	sub    $0x41,%dx
    85d5:	66 83 fa 19          	cmp    $0x19,%dx
    85d9:	0f 96 c0             	setbe  %al
    85dc:	66 0f b6 c0          	movzbw %al,%ax
}
    85e0:	66 5d                	pop    %bp
    85e2:	66 c3                	retw   

000085e4 <_Z7isdigiti>:

int isdigit(int ch)
{
    85e4:	66 55                	push   %bp
    85e6:	66 89 e5             	mov    %sp,%bp
    return (ch >= 48 && ch <= 57);
    85e9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    85ee:	66 83 e8 30          	sub    $0x30,%ax
    85f2:	66 83 f8 09          	cmp    $0x9,%ax
    85f6:	0f 96 c0             	setbe  %al
    85f9:	66 0f b6 c0          	movzbw %al,%ax
}
    85fd:	66 5d                	pop    %bp
    85ff:	66 c3                	retw   
    8601:	90                   	nop

00008602 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0>:
    if(base == 0 && !auto_detected)
    {
        base = 10;
        auto_detected = true;
    }
    auto char_to_digit = [](auto ch){
    8602:	66 55                	push   %bp
    8604:	66 89 e5             	mov    %sp,%bp
    8607:	66 89 c2             	mov    %ax,%dx
        int digit;
        if(ch >= '0' && ch <= '9')
    860a:	66 83 e8 30          	sub    $0x30,%ax
    860e:	3c 09                	cmp    $0x9,%al
    8610:	77 0b                	ja     861d <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x1b>
            digit = ch - '0';
    8612:	66 0f be d2          	movsbw %dl,%dx
    8616:	67 66 8d 42 d0       	lea    -0x30(%bp,%si),%ax
    861b:	eb 2b                	jmp    8648 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='A' && ch <= 'F')
    861d:	67 66 8d 42 bf       	lea    -0x41(%bp,%si),%ax
    8622:	3c 05                	cmp    $0x5,%al
    8624:	77 0b                	ja     8631 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x2f>
            digit = ch - 'A' + 10;
    8626:	66 0f be d2          	movsbw %dl,%dx
    862a:	67 66 8d 42 c9       	lea    -0x37(%bp,%si),%ax
    862f:	eb 17                	jmp    8648 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='a' && ch <= 'f')
    8631:	67 66 8d 4a 9f       	lea    -0x61(%bp,%si),%cx
            digit = ch - 'a' + 10;
        else
            digit = -1;
    8636:	66 83 c8 ff          	or     $0xffff,%ax
        else if(ch >='a' && ch <= 'f')
    863a:	80 f9 05             	cmp    $0x5,%cl
    863d:	77 09                	ja     8648 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
            digit = ch - 'a' + 10;
    863f:	66 0f be d2          	movsbw %dl,%dx
    8643:	67 66 8d 42 a9       	lea    -0x57(%bp,%si),%ax
        return digit;
    };
    8648:	66 5d                	pop    %bp
    864a:	66 c3                	retw   

0000864c <_Z6strtolPKcPPci>:
{
    864c:	66 55                	push   %bp
    864e:	66 89 e5             	mov    %sp,%bp
    8651:	66 57                	push   %di
    8653:	66 56                	push   %si
    8655:	66 53                	push   %bx
    8657:	66 83 ec 0c          	sub    $0xc,%sp
    865b:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto start = str;   
    8660:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    while(isspace(*start))
    8665:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    866a:	66 50                	push   %ax
    866c:	66 e8 1c ff          	callw  858c <_Z7reversePc+0x4a>
    8670:	ff                   	(bad)  
    8671:	ff 66 5f             	jmp    *0x5f(%esi)
    8674:	66 85 c0             	test   %ax,%ax
    8677:	74 04                	je     867d <_Z6strtolPKcPPci+0x31>
        ++start;
    8679:	66 43                	inc    %bx
    while(isspace(*start))
    867b:	eb e8                	jmp    8665 <_Z6strtolPKcPPci+0x19>
    size_t len_num = strlen(start);//非白空格数字串长度
    867d:	66 53                	push   %bx
    867f:	66 e8 f2 fd          	callw  8475 <_Z6memsetPvim+0x23>
    8683:	ff                   	(bad)  
    8684:	ff 66 59             	jmp    *0x59(%esi)
    if(len_num == 0)
    8687:	66 85 c0             	test   %ax,%ax
    868a:	75 1e                	jne    86aa <_Z6strtolPKcPPci+0x5e>
        return 0;
    868c:	66 31 c0             	xor    %ax,%ax
        if(str_end) *str_end = const_cast<char*>(str);
    868f:	67 66 83 7d 0c 00    	cmpw   $0x0,0xc(%di)
    8695:	0f 84 4d 01 67 66    	je     666787e8 <_GLOBAL_OFFSET_TABLE_+0x6666d9a4>
    869b:	8b 7d 0c             	mov    0xc(%ebp),%edi
    869e:	67 66 8b 75 08       	mov    0x8(%di),%si
    86a3:	67 66 89 37          	mov    %si,(%bx)
    86a7:	e9 3c 01 67 8a       	jmp    8a6787e8 <_GLOBAL_OFFSET_TABLE_+0x8a66d9a4>
    if(*high == '+' || *high == '-')
    86ac:	13 80 fa 2b 74 10    	adc    0x10742bfa(%eax),%eax
    86b2:	80 fa 2d             	cmp    $0x2d,%dl
    86b5:	75 21                	jne    86d8 <_Z6strtolPKcPPci+0x8c>
        sign = (*high == '+') ? 1 : -1;
    86b7:	67 66 c7 45 f0 ff ff 	movw   $0xffff,-0x10(%di)
    86be:	ff                   	(bad)  
    86bf:	ff                   	(bad)  
    86c0:	eb 09                	jmp    86cb <_Z6strtolPKcPPci+0x7f>
    86c2:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    86c9:	00 00                	add    %al,(%eax)
        ++high;
    86cb:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
        sign_char_bit = 1;
    86d0:	66 ba 01 00          	mov    $0x1,%dx
    86d4:	00 00                	add    %al,(%eax)
    86d6:	eb 0f                	jmp    86e7 <_Z6strtolPKcPPci+0x9b>
    86d8:	66 89 df             	mov    %bx,%di
    size_t sign_char_bit = 0;
    86db:	66 31 d2             	xor    %dx,%dx
    int sign = 1;
    86de:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    86e5:	00 00                	add    %al,(%eax)
    if(base == 16 || (base == 0 && !auto_detected))
    86e7:	66 f7 c6 ef ff       	test   $0xffef,%si
    86ec:	ff                   	(bad)  
    86ed:	ff 75 29             	pushl  0x29(%ebp)
        if(len_num > 1 + sign_char_bit && 
    86f0:	67 66 8d 4a 01       	lea    0x1(%bp,%si),%cx
    86f5:	66 39 c1             	cmp    %ax,%cx
    86f8:	73 1f                	jae    8719 <_Z6strtolPKcPPci+0xcd>
    86fa:	67 80 3f 30          	cmpb   $0x30,(%bx)
    86fe:	75 19                	jne    8719 <_Z6strtolPKcPPci+0xcd>
           (*(high + 1) == 'x' || *(high + 1) == 'X'))
    8700:	67 8a 4f 01          	mov    0x1(%bx),%cl
    8704:	66 83 e1 df          	and    $0xffdf,%cx
    8708:	80 f9 58             	cmp    $0x58,%cl
    870b:	75 0c                	jne    8719 <_Z6strtolPKcPPci+0xcd>
             high += 2;
    870d:	66 83 c7 02          	add    $0x2,%di
             base = 16;
    8711:	66 be 10 00          	mov    $0x10,%si
    8715:	00 00                	add    %al,(%eax)
    8717:	eb 2b                	jmp    8744 <_Z6strtolPKcPPci+0xf8>
    if(base == 8 || (base == 0 && !auto_detected))
    8719:	66 83 fe 08          	cmp    $0x8,%si
    871d:	74 05                	je     8724 <_Z6strtolPKcPPci+0xd8>
    871f:	66 85 f6             	test   %si,%si
    8722:	75 20                	jne    8744 <_Z6strtolPKcPPci+0xf8>
        if(len_num > sign_char_bit && *high == 0)   //存在八进制前缀0
    8724:	66 39 c2             	cmp    %ax,%dx
    8727:	73 10                	jae    8739 <_Z6strtolPKcPPci+0xed>
    8729:	67 80 3f 00          	cmpb   $0x0,(%bx)
    872d:	75 0a                	jne    8739 <_Z6strtolPKcPPci+0xed>
            high += 1;
    872f:	66 47                	inc    %di
            base = 8;
    8731:	66 be 08 00          	mov    $0x8,%si
    8735:	00 00                	add    %al,(%eax)
    8737:	eb 0b                	jmp    8744 <_Z6strtolPKcPPci+0xf8>
    if(base == 0 && !auto_detected)
    8739:	66 85 f6             	test   %si,%si
    873c:	75 06                	jne    8744 <_Z6strtolPKcPPci+0xf8>
        base = 10;
    873e:	66 be 0a 00          	mov    $0xa,%si
    8742:	00 00                	add    %al,(%eax)
    bool has_vaild_char = false;
    8744:	67 c6 45 ec 00       	movb   $0x0,-0x14(%di)
    auto low = start;   
    //使low指向数字低位后的一个位置
    while(!isspace(*low) &&             //判断是否是白空格
    8749:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    874e:	66 50                	push   %ax
    8750:	66 e8 38 fe          	callw  858c <_Z7reversePc+0x4a>
    8754:	ff                   	(bad)  
    8755:	ff 66 5a             	jmp    *0x5a(%esi)
          (*low != '\0') &&             //判断是否字符串结束
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    8758:	66 85 c0             	test   %ax,%ax
    875b:	75 28                	jne    8785 <_Z6strtolPKcPPci+0x139>
          (*low != '\0') &&             //判断是否字符串结束
    875d:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    while(!isspace(*low) &&             //判断是否是白空格
    8762:	84 c0                	test   %al,%al
    8764:	74 1f                	je     8785 <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    8766:	66 e8 96 fe          	callw  8600 <_Z7isdigiti+0x1c>
    876a:	ff                   	(bad)  
    876b:	ff 66 83             	jmp    *-0x7d(%esi)
          (*low != '\0') &&             //判断是否字符串结束
    876e:	f8                   	clc    
    876f:	ff 0f                	decl   (%edi)
    8771:	95                   	xchg   %eax,%ebp
    8772:	c2 66 39             	ret    $0x3966
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    8775:	f0 0f 9c c0          	lock setl %al
    8779:	20 c2                	and    %al,%dl
    877b:	74 08                	je     8785 <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) < base    //判断是否是该进制
          )
    {
        ++low;
    877d:	66 43                	inc    %bx
        has_vaild_char = true;
    877f:	67 88 55 ec          	mov    %dl,-0x14(%di)
    while(!isspace(*low) &&             //判断是否是白空格
    8783:	eb c4                	jmp    8749 <_Z6strtolPKcPPci+0xfd>
    }
    if(!has_vaild_char)
    8785:	67 80 7d ec 00       	cmpb   $0x0,-0x14(%di)
    878a:	0f 84 fe fe 67 66    	je     6668868e <_GLOBAL_OFFSET_TABLE_+0x6667d84a>
        if (str_end) *str_end = const_cast<char*>(str);
        return 0;
    }
    long power = 1;
    long ret = 0;
    if(str_end) *str_end = const_cast<char*>(low);
    8790:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
    8794:	74 09                	je     879f <_Z6strtolPKcPPci+0x153>
    8796:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    879b:	67 66 89 18          	mov    %bx,(%bx,%si)
    for(auto p = low - 1; p >= high; --p)
    879f:	66 4b                	dec    %bx
    long ret = 0;
    87a1:	66 31 c9             	xor    %cx,%cx
    long power = 1;
    87a4:	66 ba 01 00          	mov    $0x1,%dx
    87a8:	00 00                	add    %al,(%eax)
    87aa:	67 66 89 55 e8       	mov    %dx,-0x18(%di)
    for(auto p = low - 1; p >= high; --p)
    87af:	66 39 fb             	cmp    %di,%bx
    87b2:	72 29                	jb     87dd <_Z6strtolPKcPPci+0x191>
    87b4:	67 66 89 4d ec       	mov    %cx,-0x14(%di)
    {
        int digit = char_to_digit(*p);
    87b9:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    87be:	66 e8 3e fe          	callw  8600 <_Z7isdigiti+0x1c>
    87c2:	ff                   	(bad)  
    87c3:	ff 67 66             	jmp    *0x66(%edi)
        ret += power * digit;
    87c6:	8b 55 e8             	mov    -0x18(%ebp),%edx
    87c9:	66 0f af c2          	imul   %dx,%ax
    87cd:	67 66 8b 4d ec       	mov    -0x14(%di),%cx
    87d2:	66 01 c1             	add    %ax,%cx
        
        power *= base;
    87d5:	66 0f af d6          	imul   %si,%dx
    for(auto p = low - 1; p >= high; --p)
    87d9:	66 4b                	dec    %bx
    87db:	eb cd                	jmp    87aa <_Z6strtolPKcPPci+0x15e>
    }
    ret *= sign;
    87dd:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    87e2:	66 0f af c1          	imul   %cx,%ax
    return ret;
}
    87e6:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    87eb:	66 5b                	pop    %bx
    87ed:	66 5e                	pop    %si
    87ef:	66 5f                	pop    %di
    87f1:	66 5d                	pop    %bp
    87f3:	66 c3                	retw   

000087f5 <_ZL19system_call_putchari>:
    int mask = 0x00FF;
    ret = ret & mask;
    return ret;
}
static inline void system_call_putchar(int ch)
{
    87f5:	66 55                	push   %bp
    87f7:	66 89 e5             	mov    %sp,%bp
    87fa:	66 53                	push   %bx
    87fc:	66 89 c2             	mov    %ax,%dx
            "movw %%bx, %%es\n\t"

    :
    :"r"(c)
    :"%eax", "ebx"
    );
    87ff:	88 d0                	mov    %dl,%al
    8801:	b4 01                	mov    $0x1,%ah
    8803:	8c d3                	mov    %ss,%ebx
    8805:	8e e3                	mov    %ebx,%fs
    8807:	bb 00 00 8e d3       	mov    $0xd38e0000,%ebx
    880c:	8e db                	mov    %ebx,%ds
    880e:	8e c3                	mov    %ebx,%es
    8810:	cd 98                	int    $0x98
    8812:	8c e3                	mov    %fs,%ebx
    8814:	8e d3                	mov    %ebx,%ss
    8816:	8e db                	mov    %ebx,%ds
    8818:	8e c3                	mov    %ebx,%es
}
    881a:	66 5b                	pop    %bx
    881c:	66 5d                	pop    %bp
    881e:	66 c3                	retw   

00008820 <_Z7putchari>:
namespace hhlibc {

#endif
#ifndef _HHOS_LIBC_TEST
int putchar( int ch )
{
    8820:	66 55                	push   %bp
    8822:	66 89 e5             	mov    %sp,%bp
    8825:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    //sys_get_current_tty()->putchar(ch);
    system_call_putchar(ch);
    882a:	66 89 c8             	mov    %cx,%ax
    882d:	66 e8 c2 ff          	callw  87f3 <_Z6strtolPKcPPci+0x1a7>
    8831:	ff                   	(bad)  
    8832:	ff 66 89             	jmp    *-0x77(%esi)
    //sys_tty_putchar(ch);
    return ch;
}
    8835:	c8 66 5d 66          	enter  $0x5d66,$0x66
    8839:	c3                   	ret    

0000883a <_Z4putsPKc>:

int puts(const char* string)
{
    883a:	66 55                	push   %bp
    883c:	66 89 e5             	mov    %sp,%bp
    883f:	66 53                	push   %bx
    8841:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    auto len = strlen(string);
    8846:	66 53                	push   %bx
    8848:	66 e8 29 fc          	callw  8475 <_Z6memsetPvim+0x23>
    884c:	ff                   	(bad)  
    884d:	ff 66 89             	jmp    *-0x77(%esi)
    8850:	d9 67 66             	fldenv 0x66(%edi)
    8853:	8d 1c 03             	lea    (%ebx,%eax,1),%ebx
    8856:	66 58                	pop    %ax
    for(size_t i = 0; i < len; ++i)
    8858:	66 39 d9             	cmp    %bx,%cx
    885b:	74 0f                	je     886c <_Z4putsPKc+0x32>
    {
        putchar(*(string + i));
    885d:	67 66 0f be 01       	movsbw (%bx,%di),%ax
    system_call_putchar(ch);
    8862:	66 e8 8d ff          	callw  87f3 <_Z6strtolPKcPPci+0x1a7>
    8866:	ff                   	(bad)  
    8867:	ff 66 41             	jmp    *0x41(%esi)
    for(size_t i = 0; i < len; ++i)
    886a:	eb ec                	jmp    8858 <_Z4putsPKc+0x1e>
    }
    return 0;
}
    886c:	66 31 c0             	xor    %ax,%ax
    886f:	67 66 8b 5d fc       	mov    -0x4(%di),%bx
    8874:	66 c9                	leavew 
    8876:	66 c3                	retw   

00008878 <_Z7getcharv>:
#endif


#ifndef _HHOS_LIBC_TEST
int getchar(void)
{
    8878:	66 55                	push   %bp
    887a:	66 89 e5             	mov    %sp,%bp
    );
    887d:	b4 00                	mov    $0x0,%ah
    887f:	cd 98                	int    $0x98
    8881:	66 89 c2             	mov    %ax,%dx
    ret = ret & mask;
    8884:	66 0f b6 c2          	movzbw %dl,%ax
    return system_call_getchar();
}
    8888:	66 5d                	pop    %bp
    888a:	66 c3                	retw   

0000888c <_Z4getsPc>:
char *gets( char *str )
{
    888c:	66 55                	push   %bp
    888e:	66 89 e5             	mov    %sp,%bp
    8891:	66 53                	push   %bx
    8893:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    );
    8898:	b4 00                	mov    $0x0,%ah
    889a:	cd 98                	int    $0x98
    889c:	66 89 c3             	mov    %ax,%bx
    char ch;
    while(true)
    {
        ch = getchar();
        putchar(ch);
    889f:	66 0f be c3          	movsbw %bl,%ax
    system_call_putchar(ch);
    88a3:	66 e8 4c ff          	callw  87f3 <_Z6strtolPKcPPci+0x1a7>
    88a7:	ff                   	(bad)  
    88a8:	ff 80 fb 0d 74 08    	incl   0x8740dfb(%eax)
        if(ch == 13) {
            putchar('\n');
            break;
        }
        *(str++) = ch;
    88ae:	66 41                	inc    %cx
    88b0:	67 88 59 ff          	mov    %bl,-0x1(%bx,%di)
        ch = getchar();
    88b4:	eb e2                	jmp    8898 <_Z4getsPc+0xc>
    system_call_putchar(ch);
    88b6:	66 b8 0a 00          	mov    $0xa,%ax
    88ba:	00 00                	add    %al,(%eax)
    88bc:	66 e8 33 ff          	callw  87f3 <_Z6strtolPKcPPci+0x1a7>
    88c0:	ff                   	(bad)  
    88c1:	ff 67 c6             	jmp    *-0x3a(%edi)
    }
    *str = '\0';
    88c4:	01 00                	add    %eax,(%eax)
    return str;
}
    88c6:	66 89 c8             	mov    %cx,%ax
    88c9:	66 5b                	pop    %bx
    88cb:	66 5d                	pop    %bp
    88cd:	66 c3                	retw   

000088cf <_Z7vsscanfPKcS0_Pc>:
#endif

int vsscanf( const char* buffer, const char* format, va_list vlist )
{
    88cf:	66 55                	push   %bp
    88d1:	66 89 e5             	mov    %sp,%bp
    88d4:	66 57                	push   %di
    88d6:	66 56                	push   %si
    88d8:	66 53                	push   %bx
    88da:	66 83 ec 14          	sub    $0x14,%sp
    88de:	67 66 8b 75 08       	mov    0x8(%di),%si
    88e3:	67 66 8b 7d 10       	mov    0x10(%di),%di
    auto len_fmt = strlen(format);
    88e8:	67 66 ff 75 0c       	pushw  0xc(%di)
    88ed:	66 e8 84 fb          	callw  8475 <_Z6memsetPvim+0x23>
    88f1:	ff                   	(bad)  
    88f2:	ff 67 66             	jmp    *0x66(%edi)
    88f5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    88f8:	66 59                	pop    %cx
    auto p_fmt = format; 
    88fa:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    88ff:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    auto p_buf = buffer;
    bool error = false;
    int ret = 0;
    8904:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    890b:	00 00                	add    %al,(%eax)
    bool error = false;
    890d:	67 c6 45 e7 00       	movb   $0x0,-0x19(%di)
    while(static_cast<size_t>(p_fmt - format) < len_fmt)
    8912:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    8917:	67 66 2b 45 0c       	sub    0xc(%di),%ax
    891c:	67 66 3b 45 e0       	cmp    -0x20(%di),%ax
    8921:	0f 93 c0             	setae  %al
    {
        if(error) break;
    8924:	67 08 45 e7          	or     %al,-0x19(%di)
    8928:	0f 85 50 01 67 66    	jne    66678a7e <_GLOBAL_OFFSET_TABLE_+0x6666dc3a>
        if(isspace(*p_fmt)) //略过白空格
    892e:	8b 45 e8             	mov    -0x18(%ebp),%eax
    8931:	67 66 0f be 00       	movsbw (%bx,%si),%ax
    8936:	66 50                	push   %ax
    8938:	66 e8 50 fc          	callw  858c <_Z7reversePc+0x4a>
    893c:	ff                   	(bad)  
    893d:	ff 66 5a             	jmp    *0x5a(%esi)
    8940:	66 85 c0             	test   %ax,%ax
    8943:	74 1d                	je     8962 <_Z7vsscanfPKcS0_Pc+0x93>
        {
            p_fmt++;
    8945:	67 66 ff 45 e8       	incw   -0x18(%di)
            while(isspace(*buffer)) buffer++;
    894a:	67 66 0f be 06 66 50 	movsbw 0x5066,%ax
    8951:	66 e8 37 fc          	callw  858c <_Z7reversePc+0x4a>
    8955:	ff                   	(bad)  
    8956:	ff 66 5b             	jmp    *0x5b(%esi)
    8959:	66 85 c0             	test   %ax,%ax
    895c:	74 b4                	je     8912 <_Z7vsscanfPKcS0_Pc+0x43>
    895e:	66 46                	inc    %si
    8960:	eb e8                	jmp    894a <_Z7vsscanfPKcS0_Pc+0x7b>
            continue;
        }
        else if(*p_fmt == '%') //格式控制符
    8962:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    8967:	67 80 38 25          	cmpb   $0x25,(%bx,%si)
    896b:	75 a5                	jne    8912 <_Z7vsscanfPKcS0_Pc+0x43>
        {
            p_fmt++;
            char specifier = *p_fmt;
    896d:	67 8a 40 01          	mov    0x1(%bx,%si),%al
            p_fmt++;
    8971:	67 66 83 45 e8 02    	addw   $0x2,-0x18(%di)
            switch(specifier)
    8977:	3c 69                	cmp    $0x69,%al
    8979:	0f 84 b0 00 7f 25    	je     257f8a2f <_GLOBAL_OFFSET_TABLE_+0x257edbeb>
    897f:	3c 58                	cmp    $0x58,%al
    8981:	0f 84 c4 00 7f 10    	je     107f8a4b <_GLOBAL_OFFSET_TABLE_+0x107edc07>
    8987:	3c 25                	cmp    $0x25,%al
    8989:	75 87                	jne    8912 <_Z7vsscanfPKcS0_Pc+0x43>
            {
                case '%':
                {
                    if(*buffer == '%') 
    898b:	67 80 3e 25 67 0f    	cmpb   $0xf,0x6725
    8991:	95                   	xchg   %eax,%ebp
    8992:	45                   	inc    %ebp
    8993:	e7 e9                	out    %eax,$0xe9
    8995:	7b ff                	jnp    8996 <_Z7vsscanfPKcS0_Pc+0xc7>
            switch(specifier)
    8997:	3c 63                	cmp    $0x63,%al
    8999:	74 31                	je     89cc <_Z7vsscanfPKcS0_Pc+0xfd>
    899b:	3c 64                	cmp    $0x64,%al
    899d:	0f 84 9a 00 e9 6e    	je     6ee98a3d <_GLOBAL_OFFSET_TABLE_+0x6ee8dbf9>
    89a3:	ff                   	(bad)  
    89a4:	3c 73                	cmp    $0x73,%al
    89a6:	74 4d                	je     89f5 <_Z7vsscanfPKcS0_Pc+0x126>
    89a8:	7f 15                	jg     89bf <_Z7vsscanfPKcS0_Pc+0xf0>
    89aa:	3c 6f                	cmp    $0x6f,%al
    89ac:	0f 85 62 ff 67 66    	jne    66688914 <_GLOBAL_OFFSET_TABLE_+0x6667dad0>
                    ++ret;
                    break;
                }
                case 'o':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    89b2:	8d 5f 04             	lea    0x4(%edi),%ebx
    89b5:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 8);
    89b9:	66 6a 08             	pushw  $0x8
    89bc:	e9 96 00 3c 75       	jmp    753c8a57 <_GLOBAL_OFFSET_TABLE_+0x753bdc13>
            switch(specifier)
    89c1:	74 78                	je     8a3b <_Z7vsscanfPKcS0_Pc+0x16c>
    89c3:	3c 78                	cmp    $0x78,%al
    89c5:	0f 84 80 00 e9 46    	je     46e98a4b <_GLOBAL_OFFSET_TABLE_+0x46e8dc07>
    89cb:	ff 67 66             	jmp    *0x66(%edi)
                    char* p = va_arg(vlist, char*);
    89ce:	8b 17                	mov    (%edi),%edx
                    *p = *buffer;
    89d0:	67 8a 06 67 88       	mov    -0x7799,%al
    89d5:	02 66 46             	add    0x46(%esi),%ah
                    ++ret;
    89d8:	67 66 ff 45 ec       	incw   -0x14(%di)
                    char* p = va_arg(vlist, char*);
    89dd:	66 83 c7 04          	add    $0x4,%di
                    break;
    89e1:	e9 2e ff 66 50       	jmp    50678914 <_GLOBAL_OFFSET_TABLE_+0x5066dad0>
                    while (*buffer && isspace(*buffer)) buffer++;
    89e6:	66 e8 a2 fb          	callw  858c <_Z7reversePc+0x4a>
    89ea:	ff                   	(bad)  
    89eb:	ff 66 59             	jmp    *0x59(%esi)
    89ee:	66 85 c0             	test   %ax,%ax
    89f1:	74 0b                	je     89fe <_Z7vsscanfPKcS0_Pc+0x12f>
    89f3:	66 46                	inc    %si
    89f5:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    89fc:	75 e6                	jne    89e4 <_Z7vsscanfPKcS0_Pc+0x115>
                    char* p = va_arg(vlist, char*);
    89fe:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8a03:	67 66 8b 3f          	mov    (%bx),%di
                    while(*buffer && !isspace(*buffer))
    8a07:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    8a0e:	75 0b                	jne    8a1b <_Z7vsscanfPKcS0_Pc+0x14c>
                    *p = '\0';
    8a10:	67 c6 07 00          	movb   $0x0,(%bx)
                    ++ret;
    8a14:	67 66 ff 45 ec       	incw   -0x14(%di)
    8a19:	eb 5b                	jmp    8a76 <_Z7vsscanfPKcS0_Pc+0x1a7>
                    while(*buffer && !isspace(*buffer))
    8a1b:	66 50                	push   %ax
    8a1d:	66 e8 6b fb          	callw  858c <_Z7reversePc+0x4a>
    8a21:	ff                   	(bad)  
    8a22:	ff 66 5a             	jmp    *0x5a(%esi)
    8a25:	66 85 c0             	test   %ax,%ax
    8a28:	75 e6                	jne    8a10 <_Z7vsscanfPKcS0_Pc+0x141>
                        *(p++) = *(buffer++);
    8a2a:	a4                   	movsb  %ds:(%esi),%es:(%edi)
                    while(*buffer && !isspace(*buffer))
    8a2b:	eb da                	jmp    8a07 <_Z7vsscanfPKcS0_Pc+0x138>
                    int* p = va_arg(vlist, int*);
    8a2d:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8a32:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 0);
    8a36:	66 6a 00             	pushw  $0x0
    8a39:	eb 1a                	jmp    8a55 <_Z7vsscanfPKcS0_Pc+0x186>
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8a3b:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8a40:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 10);
    8a44:	66 6a 0a             	pushw  $0xa
    8a47:	eb 0c                	jmp    8a55 <_Z7vsscanfPKcS0_Pc+0x186>
                    break;
                }
                case 'x':
                case 'X':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8a49:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8a4e:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 16);
    8a52:	66 6a 10             	pushw  $0x10
    8a55:	67 66 8d 45 f0       	lea    -0x10(%di),%ax
    8a5a:	66 50                	push   %ax
    8a5c:	66 56                	push   %si
    8a5e:	66 e8 e8 fb          	callw  864a <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    8a62:	ff                   	(bad)  
    8a63:	ff 67 66             	jmp    *0x66(%edi)
                    *p = static_cast<unsigned int>(num);
    8a66:	89 07                	mov    %eax,(%edi)
                    buffer = end;
    8a68:	67 66 8b 75 f0       	mov    -0x10(%di),%si
                    ++ret;
    8a6d:	67 66 ff 45 ec       	incw   -0x14(%di)
    8a72:	66 83 c4 0c          	add    $0xc,%sp
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8a76:	66 89 df             	mov    %bx,%di
    8a79:	e9 96 fe 67 66       	jmp    66688914 <_GLOBAL_OFFSET_TABLE_+0x6667dad0>
                    break;
            }
        }
    }
    return ret;
}
    8a7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
    8a81:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8a86:	66 5b                	pop    %bx
    8a88:	66 5e                	pop    %si
    8a8a:	66 5f                	pop    %di
    8a8c:	66 5d                	pop    %bp
    8a8e:	66 c3                	retw   

00008a90 <_Z6sscanfPKcS0_z>:
int sscanf( const char* buffer, const char* format, ... )
{
    8a90:	66 55                	push   %bp
    8a92:	66 89 e5             	mov    %sp,%bp
   	int ret;
	va_list va;
	va_start(va, format);
    8a95:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsscanf(buffer, format, va);
    8a9a:	66 50                	push   %ax
    8a9c:	67 66 ff 75 0c       	pushw  0xc(%di)
    8aa1:	67 66 ff 75 08       	pushw  0x8(%di)
    8aa6:	66 e8 23 fe          	callw  88cd <_Z4getsPc+0x41>
    8aaa:	ff                   	(bad)  
    8aab:	ff 66 c9             	jmp    *-0x37(%esi)
	va_end(va);
    return ret; 
}
    8aae:	66 c3                	retw   

00008ab0 <_Z5scanfPKcz>:
#ifndef _HHOS_LIBC_TEST
static char scanfbuf[80*25];
//TODO 关于这个返回值
int scanf( const char* format, ... )
{
    8ab0:	66 55                	push   %bp
    8ab2:	66 89 e5             	mov    %sp,%bp
    if (!gets(scanfbuf)) return EOF;
    8ab5:	66 68 40 9d          	pushw  $0x9d40
    8ab9:	00 00                	add    %al,(%eax)
    8abb:	66 e8 cb fd          	callw  888a <_Z7getcharv+0x12>
    8abf:	ff                   	(bad)  
    8ac0:	ff 66 89             	jmp    *-0x77(%esi)
    8ac3:	c2 66 58             	ret    $0x5866
    8ac6:	66 83 c8 ff          	or     $0xffff,%ax
    8aca:	66 85 d2             	test   %dx,%dx
    8acd:	74 1c                	je     8aeb <_Z5scanfPKcz+0x3b>
	int ret;
	va_list va;
	va_start(va, format);
    8acf:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsscanf(scanfbuf, format, va);
    8ad4:	66 50                	push   %ax
    8ad6:	67 66 ff 75 08       	pushw  0x8(%di)
    8adb:	66 68 40 9d          	pushw  $0x9d40
    8adf:	00 00                	add    %al,(%eax)
    8ae1:	66 e8 e8 fd          	callw  88cd <_Z4getsPc+0x41>
    8ae5:	ff                   	(bad)  
    8ae6:	ff 66 83             	jmp    *-0x7d(%esi)
	va_end(va);
    return ret;
    8ae9:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    8aec:	c9                   	leave  
    8aed:	66 c3                	retw   

00008aef <_Z8vsprintfPcPKcS_>:
{
    8aef:	66 55                	push   %bp
    8af1:	66 89 e5             	mov    %sp,%bp
    8af4:	66 57                	push   %di
    8af6:	66 56                	push   %si
    8af8:	66 53                	push   %bx
    8afa:	66 83 ec 0c          	sub    $0xc,%sp
    8afe:	67 66 8b 75 0c       	mov    0xc(%di),%si
    8b03:	67 66 8b 55 10       	mov    0x10(%di),%dx
    8b08:	67 66 89 55 f0       	mov    %dx,-0x10(%di)
    auto len_fmt = strlen(format);
    8b0d:	66 56                	push   %si
    8b0f:	66 e8 62 f9          	callw  8475 <_Z6memsetPvim+0x23>
    8b13:	ff                   	(bad)  
    8b14:	ff 67 66             	jmp    *0x66(%edi)
    8b17:	89 45 ec             	mov    %eax,-0x14(%ebp)
    8b1a:	66 58                	pop    %ax
    auto p_buf = buffer;
    8b1c:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8b21:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    while(len_fmt--)
    8b26:	67 66 ff 4d ec       	decw   -0x14(%di)
    8b2b:	67 66 83 7d ec ff    	cmpw   $0xffff,-0x14(%di)
    8b31:	0f 84 4a 01 67 8a    	je     8a678c81 <_GLOBAL_OFFSET_TABLE_+0x8a66de3d>
        if(*p_fmt != '%')
    8b37:	06                   	push   %es
    8b38:	3c 25                	cmp    $0x25,%al
    8b3a:	74 07                	je     8b43 <_Z8vsprintfPcPKcS_+0x54>
            *(p_buf++) = *(p_fmt++);    //非控制字符
    8b3c:	66 46                	inc    %si
    8b3e:	67 88 03             	mov    %al,(%bp,%di)
    8b41:	eb 5f                	jmp    8ba2 <_Z8vsprintfPcPKcS_+0xb3>
            char specifier = *(++p_fmt); //%后面一个字符是specifier
    8b43:	67 8a 46 01          	mov    0x1(%bp),%al
            ++p_fmt;                     //记录specifier并跳过
    8b47:	66 83 c6 02          	add    $0x2,%si
            switch (specifier)
    8b4b:	3c 69                	cmp    $0x69,%al
    8b4d:	0f 84 81 00 7f 17    	je     177f8bd4 <_GLOBAL_OFFSET_TABLE_+0x177edd90>
    8b53:	3c 63                	cmp    $0x63,%al
    8b55:	74 40                	je     8b97 <_Z8vsprintfPcPKcS_+0xa8>
    8b57:	3c 64                	cmp    $0x64,%al
    8b59:	74 77                	je     8bd2 <_Z8vsprintfPcPKcS_+0xe3>
    8b5b:	3c 58                	cmp    $0x58,%al
    8b5d:	75 c7                	jne    8b26 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8b5f:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16, true);
    8b64:	66 6a 01             	pushw  $0x1
    8b67:	e9 e2 00 3c 73       	jmp    733c8c4e <_GLOBAL_OFFSET_TABLE_+0x733bde0a>
            switch (specifier)
    8b6c:	74 38                	je     8ba6 <_Z8vsprintfPcPKcS_+0xb7>
    8b6e:	7f 12                	jg     8b82 <_Z8vsprintfPcPKcS_+0x93>
    8b70:	3c 6f                	cmp    $0x6f,%al
    8b72:	75 b2                	jne    8b26 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8b74:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 8);
    8b79:	66 6a 00             	pushw  $0x0
    8b7c:	66 6a 08             	pushw  $0x8
    8b7f:	e9 da 00 3c 75       	jmp    753c8c5e <_GLOBAL_OFFSET_TABLE_+0x753bde1a>
            switch (specifier)
    8b84:	0f 84 c9 00 3c 78    	je     783c8c53 <_GLOBAL_OFFSET_TABLE_+0x783bde0f>
    8b8a:	75 9a                	jne    8b26 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8b8c:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16);
    8b91:	66 6a 00             	pushw  $0x0
    8b94:	e9 b5 00 67 66       	jmp    66678c4e <_GLOBAL_OFFSET_TABLE_+0x6666de0a>
                    *(p_buf++) = va_arg(vlist, int); 
    8b99:	8b 02                	mov    (%edx),%eax
    8b9b:	67 88 03             	mov    %al,(%bp,%di)
    8b9e:	66 83 c2 04          	add    $0x4,%dx
    8ba2:	66 43                	inc    %bx
                    break;
    8ba4:	eb 80                	jmp    8b26 <_Z8vsprintfPcPKcS_+0x37>
                    const char * str = va_arg(vlist, char*);
    8ba6:	67 66 8d 42 04       	lea    0x4(%bp,%si),%ax
    8bab:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8bb0:	67 66 8b 3a          	mov    (%bp,%si),%di
                    strcpy(p_buf, str);
    8bb4:	66 57                	push   %di
    8bb6:	66 53                	push   %bx
    8bb8:	66 e8 d5 f8          	callw  8491 <_Z6strlenPKc+0x1a>
    8bbc:	ff                   	(bad)  
    8bbd:	ff 66 59             	jmp    *0x59(%esi)
                    p_buf += strlen(str);               //p应当永远指向有意义的字符后面一位
    8bc0:	66 58                	pop    %ax
    8bc2:	66 57                	push   %di
    8bc4:	66 e8 ad f8          	callw  8475 <_Z6memsetPvim+0x23>
    8bc8:	ff                   	(bad)  
    8bc9:	ff 66 01             	jmp    *0x1(%esi)
    8bcc:	c3                   	ret    
                    break;
    8bcd:	66 58                	pop    %ax
    8bcf:	e9 4f ff 67 66       	jmp    66688b23 <_GLOBAL_OFFSET_TABLE_+0x6667dcdf>
                    int num = va_arg(vlist, int);
    8bd4:	8d 42 04             	lea    0x4(%edx),%eax
    8bd7:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    8bdc:	67 66 8b 02          	mov    (%bp,%si),%ax
template<typename T>
void itoa(char* buffer, T num, int base, bool captial = false)
{
    const char* num_char_upper = "0123456789ABCDEF";
    const char* num_char_lower = "0123456789abcdef";
    if(num < 0)
    8be0:	66 89 df             	mov    %bx,%di
    8be3:	66 85 c0             	test   %ax,%ax
    8be6:	79 0c                	jns    8bf4 <_Z8vsprintfPcPKcS_+0x105>
    8be8:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
    {
        *(buffer++) = '-';
    8bed:	67 c6 03 2d          	movb   $0x2d,(%bp,%di)
        num = -num;
    8bf1:	66 f7 d8             	neg    %ax
    }
    char *p = buffer;
    8bf4:	67 66 89 7d f0       	mov    %di,-0x10(%di)
    int mod = 0;
    while(true)
    {
        mod = num % base;
        num /= base;
    8bf9:	66 b9 0a 00          	mov    $0xa,%cx
    8bfd:	00 00                	add    %al,(%eax)
    8bff:	66 99                	cwtd   
    8c01:	66 f7 f9             	idiv   %cx
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    8c04:	67 66 8b 4d f0       	mov    -0x10(%di),%cx
    8c09:	66 41                	inc    %cx
    8c0b:	67 8a 92 31 ae       	mov    -0x51cf(%bp,%si),%dl
    8c10:	00 00                	add    %al,(%eax)
    8c12:	67 88 51 ff          	mov    %dl,-0x1(%bx,%di)
        if(num == 0) break;
    8c16:	66 85 c0             	test   %ax,%ax
    8c19:	74 07                	je     8c22 <_Z8vsprintfPcPKcS_+0x133>
    8c1b:	67 66 89 4d f0       	mov    %cx,-0x10(%di)
    8c20:	eb d7                	jmp    8bf9 <_Z8vsprintfPcPKcS_+0x10a>
    }
    *p = '\0';
    8c22:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8c27:	67 c6 40 01 00       	movb   $0x0,0x1(%bx,%si)
    reverse(buffer);
    8c2c:	66 57                	push   %di
    8c2e:	66 e8 0e f9          	callw  8540 <_Z6strcmpPKcS0_+0x6b>
    8c32:	ff                   	(bad)  
    8c33:	ff 67 66             	jmp    *0x66(%edi)
                    p_buf += strlen(p_buf);             //同理
    8c36:	89 1c 24             	mov    %ebx,(%esp)
    8c39:	66 e8 38 f8          	callw  8475 <_Z6memsetPvim+0x23>
    8c3d:	ff                   	(bad)  
    8c3e:	ff 66 01             	jmp    *0x1(%esi)
    8c41:	c3                   	ret    
                    break;
    8c42:	66 5a                	pop    %dx
                    int num = va_arg(vlist, int);
    8c44:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
                    break;
    8c49:	e9 da fe 66 6a       	jmp    6a678b28 <_GLOBAL_OFFSET_TABLE_+0x6a66dce4>
                    itoa(p_buf, num, 16, true);
    8c4e:	10 eb                	adc    %ch,%bl
    8c50:	0b 67 66             	or     0x66(%edi),%esp
                    unsigned int num = va_arg(vlist, int);
    8c53:	8d 7a 04             	lea    0x4(%edx),%edi
                    itoa(p_buf, num, 10);
    8c56:	66 6a 00             	pushw  $0x0
    8c59:	66 6a 0a             	pushw  $0xa
    8c5c:	67 66 ff 32          	pushw  (%bp,%si)
    8c60:	66 53                	push   %bx
    8c62:	66 e8 5d 09          	callw  95c3 <_ZN2sh3runEv+0x343>
    8c66:	00 00                	add    %al,(%eax)
                    p_buf += strlen(p_buf);             //同理
    8c68:	66 83 c4 10          	add    $0x10,%sp
    8c6c:	66 53                	push   %bx
    8c6e:	66 e8 03 f8          	callw  8475 <_Z6memsetPvim+0x23>
    8c72:	ff                   	(bad)  
    8c73:	ff 66 01             	jmp    *0x1(%esi)
    8c76:	c3                   	ret    
                    break;
    8c77:	66 58                	pop    %ax
                    unsigned int num = va_arg(vlist, int);
    8c79:	66 89 fa             	mov    %di,%dx
                    break;
    8c7c:	e9 a7 fe 67 c6       	jmp    c6688b28 <_GLOBAL_OFFSET_TABLE_+0xc667dce4>
    *p_buf = '\0';
    8c81:	03 00                	add    (%eax),%eax
    return p_buf - buffer;
    8c83:	66 89 d8             	mov    %bx,%ax
    8c86:	67 66 2b 45 08       	sub    0x8(%di),%ax
}
    8c8b:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8c90:	66 5b                	pop    %bx
    8c92:	66 5e                	pop    %si
    8c94:	66 5f                	pop    %di
    8c96:	66 5d                	pop    %bp
    8c98:	66 c3                	retw   

00008c9a <_Z7sprintfPcPKcz>:
{
    8c9a:	66 55                	push   %bp
    8c9c:	66 89 e5             	mov    %sp,%bp
	va_start(va, format);
    8c9f:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsprintf(buffer, format, va);
    8ca4:	66 50                	push   %ax
    8ca6:	67 66 ff 75 0c       	pushw  0xc(%di)
    8cab:	67 66 ff 75 08       	pushw  0x8(%di)
    8cb0:	66 e8 39 fe          	callw  8aed <_Z5scanfPKcz+0x3d>
    8cb4:	ff                   	(bad)  
    8cb5:	ff 66 c9             	jmp    *-0x37(%esi)
}
    8cb8:	66 c3                	retw   

00008cba <_Z6printfPKcz>:
{
    8cba:	66 55                	push   %bp
    8cbc:	66 89 e5             	mov    %sp,%bp
    8cbf:	66 53                	push   %bx
	va_start(va, format);
    8cc1:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsprintf(printbuf, format, va);
    8cc6:	66 50                	push   %ax
    8cc8:	67 66 ff 75 08       	pushw  0x8(%di)
    8ccd:	66 68 20 a5          	pushw  $0xa520
    8cd1:	00 00                	add    %al,(%eax)
    8cd3:	66 e8 16 fe          	callw  8aed <_Z5scanfPKcz+0x3d>
    8cd7:	ff                   	(bad)  
    8cd8:	ff 66 89             	jmp    *-0x77(%esi)
    8cdb:	c3                   	ret    
    puts(printbuf);
    8cdc:	66 83 c4 0c          	add    $0xc,%sp
    8ce0:	66 68 20 a5          	pushw  $0xa520
    8ce4:	00 00                	add    %al,(%eax)
    8ce6:	66 e8 4e fb          	callw  8838 <_Z7putchari+0x18>
    8cea:	ff                   	(bad)  
    8ceb:	ff 66 89             	jmp    *-0x77(%esi)
}
    8cee:	d8 67 66             	fsubs  0x66(%edi)
    8cf1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    8cf4:	66 c9                	leavew 
    8cf6:	66 c3                	retw   

Disassembly of section .text._ZN2sh2bfEPKcS1_.isra.4:

00008cf8 <_ZN2sh2bfEPKcS1_.isra.4>:
    int bf(const char* Pattern, const char * Text) {
    8cf8:	66 55                	push   %bp
    8cfa:	66 89 e5             	mov    %sp,%bp
    8cfd:	66 57                	push   %di
    8cff:	66 56                	push   %si
    8d01:	66 53                	push   %bx
    8d03:	66 51                	push   %cx
    8d05:	66 89 c3             	mov    %ax,%bx
    8d08:	66 89 d7             	mov    %dx,%di
        ss_t m = strlen(Pattern);
    8d0b:	66 50                	push   %ax
    8d0d:	66 e8 64 f7          	callw  8475 <_Z6memsetPvim+0x23>
    8d11:	ff                   	(bad)  
    8d12:	ff 66 89             	jmp    *-0x77(%esi)
    8d15:	c6                   	(bad)  
        ss_t n = strlen(Text);
    8d16:	67 66 89 3c          	mov    %di,(%si)
    8d1a:	24 66                	and    $0x66,%al
    8d1c:	e8 56 f7 ff ff       	call   8477 <_Z6strlenPKc>
    8d21:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8d26:	66 58                	pop    %ax
        ss_t i = 0, k = 0;
    8d28:	66 31 d2             	xor    %dx,%dx
    8d2b:	66 31 c9             	xor    %cx,%cx
        while(k < m && i < n) {
    8d2e:	66 39 d6             	cmp    %dx,%si
    8d31:	7e 21                	jle    8d54 <_ZN2sh2bfEPKcS1_.isra.4+0x5c>
    8d33:	67 66 39 4d f0       	cmp    %cx,-0x10(%di)
    8d38:	7e 22                	jle    8d5c <_ZN2sh2bfEPKcS1_.isra.4+0x64>
            if(Pattern[k] == Text[i]) {
    8d3a:	67 8a 04             	mov    (%si),%al
    8d3d:	0f 67 38             	packuswb (%eax),%mm7
    8d40:	04 13                	add    $0x13,%al
    8d42:	75 06                	jne    8d4a <_ZN2sh2bfEPKcS1_.isra.4+0x52>
                ++k;
    8d44:	66 42                	inc    %dx
                ++i;
    8d46:	66 41                	inc    %cx
    8d48:	eb e4                	jmp    8d2e <_ZN2sh2bfEPKcS1_.isra.4+0x36>
                i = i - k + 1;
    8d4a:	66 29 d1             	sub    %dx,%cx
    8d4d:	66 41                	inc    %cx
                k = 0;
    8d4f:	66 31 d2             	xor    %dx,%dx
    8d52:	eb da                	jmp    8d2e <_ZN2sh2bfEPKcS1_.isra.4+0x36>
            return i - k;
    8d54:	66 89 c8             	mov    %cx,%ax
    8d57:	66 29 d0             	sub    %dx,%ax
    8d5a:	eb 04                	jmp    8d60 <_ZN2sh2bfEPKcS1_.isra.4+0x68>
        return -1;
    8d5c:	66 83 c8 ff          	or     $0xffff,%ax
    }
    8d60:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8d65:	66 5b                	pop    %bx
    8d67:	66 5e                	pop    %si
    8d69:	66 5f                	pop    %di
    8d6b:	66 5d                	pop    %bp
    8d6d:	66 c3                	retw   

Disassembly of section .text._ZN3tty8tty_initEv:

00008d70 <_ZN3tty8tty_initEv>:
    void tty_init()
    8d70:	66 55                	push   %bp
    8d72:	66 89 e5             	mov    %sp,%bp
    8d75:	66 53                	push   %bx
    8d77:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        cur_x = 0;
    8d7c:	67 66 c7 03 00 00    	movw   $0x0,(%bp,%di)
    8d82:	00 00                	add    %al,(%eax)
        cur_y = 0;
    8d84:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    8d8b:	00 00                	add    %al,(%eax)
        move_cursor(0, 0);
    8d8d:	66 31 d2             	xor    %dx,%dx
    8d90:	66 31 c0             	xor    %ax,%ax
    8d93:	66 e8 2d f1          	callw  7ec4 <_ZL8print_okPc+0x50>
    8d97:	ff                   	(bad)  
    8d98:	ff 67 66             	jmp    *0x66(%edi)
        color = MAKE_COLOR(VGA_BLACK, VGA_WHITE);
    8d9b:	c7 43 08 07 00 00 00 	movl   $0x7,0x8(%ebx)
    }
    8da2:	66 5b                	pop    %bx
    8da4:	66 5d                	pop    %bp
    8da6:	66 c3                	retw   

Disassembly of section .text._ZN3tty7putcharEi:

00008da8 <_ZN3tty7putcharEi>:
        tty_mem[y + 80 * x] = c;
        tty_mem[y + 80 * x + 1] = color;
#endif
        sys_putchar(c, color, x, y);
    }
    void putchar(int c)
    8da8:	66 55                	push   %bp
    8daa:	66 89 e5             	mov    %sp,%bp
    8dad:	66 56                	push   %si
    8daf:	66 53                	push   %bx
    8db1:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8db6:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    {
        switch(c)
    8dbb:	66 83 f8 0d          	cmp    $0xd,%ax
    8dbf:	77 79                	ja     8e3a <_ZN3tty7putcharEi+0x92>
    8dc1:	67 ff 24             	jmp    *(%si)
    8dc4:	85 58 ad             	test   %ebx,-0x53(%eax)
    8dc7:	00 00                	add    %al,(%eax)
    8dc9:	66 be 04 00          	mov    $0x4,%si
    8dcd:	00 00                	add    %al,(%eax)
        {
            case '\t':
            {
                for(int i = 0; i < 4; ++i) putchar(' ');
    8dcf:	66 6a 20             	pushw  $0x20
    8dd2:	66 53                	push   %bx
    8dd4:	66 e8 ce ff          	callw  8da6 <_ZN3tty8tty_initEv+0x36>
    8dd8:	ff                   	(bad)  
    8dd9:	ff 66 5a             	jmp    *0x5a(%esi)
    8ddc:	66 59                	pop    %cx
    8dde:	66 4e                	dec    %si
    8de0:	75 ed                	jne    8dcf <_ZN3tty7putcharEi+0x27>
    8de2:	e9 96 00 67 66       	jmp    66678e7d <_GLOBAL_OFFSET_TABLE_+0x6666e039>
            }
            case 0:
                break;
            case '\b':
            {
                if(cur_y == 0 && cur_x == 0) 
    8de7:	8b 53 04             	mov    0x4(%ebx),%edx
    8dea:	67 66 8b 03          	mov    (%bp,%di),%ax
    8dee:	66 85 d2             	test   %dx,%dx
    8df1:	75 1b                	jne    8e0e <_ZN3tty7putcharEi+0x66>
    8df3:	66 85 c0             	test   %ax,%ax
    8df6:	0f 84 99 00 67 66    	je     66678e95 <_GLOBAL_OFFSET_TABLE_+0x6666e051>
                {
                    break;
                }
                else if (cur_y == 0 && cur_x != 0)
                {
                    cur_y = 80 - 1;
    8dfc:	c7 43 04 4f 00 00 00 	movl   $0x4f,0x4(%ebx)
                    cur_x--;
    8e03:	66 48                	dec    %ax
    8e05:	67 66 89 03          	mov    %ax,(%bp,%di)
        sys_putchar(c, color, x, y);
    8e09:	66 6a 4f             	pushw  $0x4f
    8e0c:	eb 09                	jmp    8e17 <_ZN3tty7putcharEi+0x6f>
                    putchar_worker(' ', MAKE_COLOR(VGA_BLACK, VGA_WHITE) , cur_x, cur_y);
                    break;
                }
                else
                {
                    cur_y--;
    8e0e:	66 4a                	dec    %dx
    8e10:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        sys_putchar(c, color, x, y);
    8e15:	66 52                	push   %dx
    8e17:	66 50                	push   %ax
    8e19:	66 6a 07             	pushw  $0x7
    8e1c:	66 6a 20             	pushw  $0x20
    8e1f:	66 e8 43 f3          	callw  8166 <sys_bios_print_int+0xa4>
    8e23:	ff                   	(bad)  
    8e24:	ff 66 83             	jmp    *-0x7d(%esi)
    8e27:	c4 10                	les    (%eax),%edx
    8e29:	eb 50                	jmp    8e7b <_ZN3tty7putcharEi+0xd3>
                    break;
                }
            }
            case '\n':
            {
                cur_x++;
    8e2b:	67 66 ff 03          	incw   (%bp,%di)
                cur_y = 0;
    8e2f:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    8e36:	00 00                	add    %al,(%eax)
                break;
    8e38:	eb 41                	jmp    8e7b <_ZN3tty7putcharEi+0xd3>
        sys_putchar(c, color, x, y);
    8e3a:	67 66 ff 73 04       	pushw  0x4(%bp,%di)
    8e3f:	67 66 ff 33          	pushw  (%bp,%di)
    8e43:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    8e48:	66 50                	push   %ax
    8e4a:	66 e8 18 f3          	callw  8166 <sys_bios_print_int+0xa4>
    8e4e:	ff                   	(bad)  
    8e4f:	ff 67 66             	jmp    *0x66(%edi)
            }
            default:
            {
                putchar_worker(c, color, cur_x, cur_y);
                cur_x = (cur_y == 79) ? cur_x + 1 : cur_x;
    8e52:	8b 43 04             	mov    0x4(%ebx),%eax
    8e55:	66 83 c4 10          	add    $0x10,%sp
    8e59:	66 83 f8 4f          	cmp    $0x4f,%ax
    8e5d:	67 66 8b 13          	mov    (%bp,%di),%dx
    8e61:	75 02                	jne    8e65 <_ZN3tty7putcharEi+0xbd>
    8e63:	66 42                	inc    %dx
    8e65:	67 66 89 13          	mov    %dx,(%bp,%di)
                cur_y = (cur_y + 1) % 80;
    8e69:	66 40                	inc    %ax
    8e6b:	66 b9 50 00          	mov    $0x50,%cx
    8e6f:	00 00                	add    %al,(%eax)
    8e71:	66 99                	cwtd   
    8e73:	66 f7 f9             	idiv   %cx
    8e76:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        if (cur_x >= 25)
    8e7b:	67 66 83 3b 18       	cmpw   $0x18,(%bp,%di)
    8e80:	7e 11                	jle    8e93 <_ZN3tty7putcharEi+0xeb>
            sys_bios_scroll_up(color);
    8e82:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    8e87:	66 e8 0c f4          	callw  8297 <sys_print_int+0xa4>
    8e8b:	ff                   	(bad)  
    8e8c:	ff 67 66             	jmp    *0x66(%edi)
            --cur_x;
    8e8f:	ff 0b                	decl   (%ebx)
    8e91:	66 58                	pop    %ax
                break;
            }
        }
        scroll_up();
        move_cursor(cur_x, cur_y);
    8e93:	67 66 8b 53 04       	mov    0x4(%bp,%di),%dx
    8e98:	67 66 8b 03          	mov    (%bp,%di),%ax
    }
    8e9c:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    8ea1:	66 5b                	pop    %bx
    8ea3:	66 5e                	pop    %si
    8ea5:	66 5d                	pop    %bp
        move_cursor(cur_x, cur_y);
    8ea7:	e9                   	.byte 0xe9
    8ea8:	1c f0                	sbb    $0xf0,%al

Disassembly of section .text._ZN2sh4execERKNS_3cmdE:

00008eaa <_ZN2sh4execERKNS_3cmdE>:
    int exec(const cmd & input_cmd)
    8eaa:	66 55                	push   %bp
    8eac:	66 89 e5             	mov    %sp,%bp
    8eaf:	66 57                	push   %di
    8eb1:	66 56                	push   %si
    8eb3:	66 53                	push   %bx
    8eb5:	66 83 ec 08          	sub    $0x8,%sp
    8eb9:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8ebe:	67 66 8b 75 0c       	mov    0xc(%di),%si
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8ec3:	66 68 ba ad          	pushw  $0xadba
    8ec7:	00 00                	add    %al,(%eax)
    8ec9:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8ecf:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    8ed3:	66 e8 fc f5          	callw  84d3 <_Z6strcpyPcPKc+0x40>
    8ed7:	ff                   	(bad)  
    8ed8:	ff 66 5a             	jmp    *0x5a(%esi)
        if (is_command(input_cmd, "ls") || is_command(input_cmd, "dir")) {
    8edb:	66 59                	pop    %cx
    8edd:	66 85 c0             	test   %ax,%ax
    8ee0:	75 1d                	jne    8eff <_ZN2sh4execERKNS_3cmdE+0x55>
            printf("You have %d user programs intalled\n\n", prog_cnt);
    8ee2:	67 66 ff b3 84 0b    	pushw  0xb84(%bp,%di)
    8ee8:	00 00                	add    %al,(%eax)
    8eea:	66 68 90 ad          	pushw  $0xad90
    8eee:	00 00                	add    %al,(%eax)
    8ef0:	66 e8 c4 fd          	callw  8cb8 <_Z7sprintfPcPKcz+0x1e>
    8ef4:	ff                   	(bad)  
    8ef5:	ff 66 5e             	jmp    *0x5e(%esi)
    8ef8:	66 5f                	pop    %di
            for (size_t i = 0; i < prog_cnt; ++i) {
    8efa:	66 31 f6             	xor    %si,%si
    8efd:	eb 41                	jmp    8f40 <_ZN2sh4execERKNS_3cmdE+0x96>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8eff:	66 68 b5 ad          	pushw  $0xadb5
    8f03:	00 00                	add    %al,(%eax)
    8f05:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8f0b:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    8f0f:	66 e8 c0 f5          	callw  84d3 <_Z6strcpyPcPKc+0x40>
    8f13:	ff                   	(bad)  
    8f14:	ff 66 5a             	jmp    *0x5a(%esi)
        if (is_command(input_cmd, "ls") || is_command(input_cmd, "dir")) {
    8f17:	66 59                	pop    %cx
    8f19:	66 85 c0             	test   %ax,%ax
    8f1c:	74 c4                	je     8ee2 <_ZN2sh4execERKNS_3cmdE+0x38>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8f1e:	66 68 b9 ad          	pushw  $0xadb9
    8f22:	00 00                	add    %al,(%eax)
    8f24:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8f2a:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    8f2e:	66 e8 a1 f5          	callw  84d3 <_Z6strcpyPcPKc+0x40>
    8f32:	ff                   	(bad)  
    8f33:	ff 66 59             	jmp    *0x59(%esi)
        else if (is_command(input_cmd, "cls") || is_command(input_cmd, "clear"))
    8f36:	66 5f                	pop    %di
    8f38:	66 85 c0             	test   %ax,%ax
    8f3b:	75 32                	jne    8f6f <_ZN2sh4execERKNS_3cmdE+0xc5>
    8f3d:	e9 94 01 67 66       	jmp    666790d6 <_GLOBAL_OFFSET_TABLE_+0x6666e292>
            for (size_t i = 0; i < prog_cnt; ++i) {
    8f42:	39 b3 84 0b 00 00    	cmp    %esi,0xb84(%ebx)
    8f48:	0f 86 e4 01 66 6b    	jbe    6b669132 <_GLOBAL_OFFSET_TABLE_+0x6b65e2ee>
                printf("%s\n", progs[i].name);
    8f4e:	c6                   	(bad)  
    8f4f:	24 67                	and    $0x67,%al
    8f51:	66 8d 84 03 8c 0b 00 	lea    0xb8c(%ebx,%eax,1),%ax
    8f58:	00 
    8f59:	66 50                	push   %ax
    8f5b:	66 68 bd ad          	pushw  $0xadbd
    8f5f:	00 00                	add    %al,(%eax)
    8f61:	66 e8 53 fd          	callw  8cb8 <_Z7sprintfPcPKcz+0x1e>
    8f65:	ff                   	(bad)  
    8f66:	ff 66 46             	jmp    *0x46(%esi)
            for (size_t i = 0; i < prog_cnt; ++i) {
    8f69:	66 58                	pop    %ax
    8f6b:	66 5a                	pop    %dx
    8f6d:	eb d1                	jmp    8f40 <_ZN2sh4execERKNS_3cmdE+0x96>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8f6f:	66 68 c1 ad          	pushw  $0xadc1
    8f73:	00 00                	add    %al,(%eax)
    8f75:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8f7b:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    8f7f:	66 e8 50 f5          	callw  84d3 <_Z6strcpyPcPKc+0x40>
    8f83:	ff                   	(bad)  
    8f84:	ff 66 59             	jmp    *0x59(%esi)
        else if (is_command(input_cmd, "cls") || is_command(input_cmd, "clear"))
    8f87:	66 5f                	pop    %di
    8f89:	66 85 c0             	test   %ax,%ax
    8f8c:	0f 84 44 01 66 68    	je     686690d6 <_GLOBAL_OFFSET_TABLE_+0x6865e292>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8f92:	c7                   	(bad)  
    8f93:	ad                   	lods   %ds:(%esi),%eax
    8f94:	00 00                	add    %al,(%eax)
    8f96:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8f9c:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    8fa0:	66 e8 2f f5          	callw  84d3 <_Z6strcpyPcPKc+0x40>
    8fa4:	ff                   	(bad)  
    8fa5:	ff 66 5f             	jmp    *0x5f(%esi)
        else if (is_command(input_cmd, "help"))
    8fa8:	66 5a                	pop    %dx
    8faa:	66 85 c0             	test   %ax,%ax
    8fad:	75 0c                	jne    8fbb <_ZN2sh4execERKNS_3cmdE+0x111>
            printf("%s\n", help);
    8faf:	66 81 c3 84 09       	add    $0x984,%bx
    8fb4:	00 00                	add    %al,(%eax)
    8fb6:	66 53                	push   %bx
    8fb8:	e9 39 01 66 68       	jmp    686690f6 <_GLOBAL_OFFSET_TABLE_+0x6865e2b2>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8fbd:	cc                   	int3   
    8fbe:	ad                   	lods   %ds:(%esi),%eax
    8fbf:	00 00                	add    %al,(%eax)
    8fc1:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8fc7:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    8fcb:	66 e8 04 f5          	callw  84d3 <_Z6strcpyPcPKc+0x40>
    8fcf:	ff                   	(bad)  
    8fd0:	ff 66 5a             	jmp    *0x5a(%esi)
        else if (is_command(input_cmd, "echo"))
    8fd3:	66 59                	pop    %cx
    8fd5:	66 85 c0             	test   %ax,%ax
    8fd8:	75 3d                	jne    9017 <_ZN2sh4execERKNS_3cmdE+0x16d>
            for(int i = 1; i < input_cmd.cnt; ++i)
    8fda:	66 bf 01 00          	mov    $0x1,%di
    8fde:	00 00                	add    %al,(%eax)
    8fe0:	67 66 39 7e 04       	cmp    %di,0x4(%bp)
    8fe5:	7e 21                	jle    9008 <_ZN2sh4execERKNS_3cmdE+0x15e>
                printf("%s ", inputs[input_cmd.start + i]);
    8fe7:	67 66 8b 06 66 01    	mov    0x166,%ax
    8fed:	f8                   	clc    
    8fee:	67 66 ff 74 83       	pushw  -0x7d(%si)
    8ff3:	04 66                	add    $0x66,%al
    8ff5:	68 d1 ad 00 00       	push   $0xadd1
    8ffa:	66 e8 ba fc          	callw  8cb8 <_Z7sprintfPcPKcz+0x1e>
    8ffe:	ff                   	(bad)  
    8fff:	ff 66 47             	jmp    *0x47(%esi)
            for(int i = 1; i < input_cmd.cnt; ++i)
    9002:	66 59                	pop    %cx
    9004:	66 58                	pop    %ax
    9006:	eb d8                	jmp    8fe0 <_ZN2sh4execERKNS_3cmdE+0x136>
            printf("\n");
    9008:	66 68 b3 ad          	pushw  $0xadb3
    900c:	00 00                	add    %al,(%eax)
    900e:	66 e8 a6 fc          	callw  8cb8 <_Z7sprintfPcPKcz+0x1e>
    9012:	ff                   	(bad)  
    9013:	ff                   	(bad)  
    9014:	e9 ce 00 66 68       	jmp    686690e7 <_GLOBAL_OFFSET_TABLE_+0x6865e2a3>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    9019:	d5 ad                	aad    $0xad
    901b:	00 00                	add    %al,(%eax)
    901d:	67 66 8b 06 67 66    	mov    0x6667,%ax
    9023:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    9027:	66 e8 a8 f4          	callw  84d3 <_Z6strcpyPcPKc+0x40>
    902b:	ff                   	(bad)  
    902c:	ff 66 5f             	jmp    *0x5f(%esi)
        else if (is_command(input_cmd, "history"))
    902f:	66 5a                	pop    %dx
    9031:	66 85 c0             	test   %ax,%ax
    9034:	0f 84 ce 00 66 31    	je     31669108 <_GLOBAL_OFFSET_TABLE_+0x3165e2c4>
            for(size_t i = 0; i < prog_cnt; ++i)
    903a:	c9                   	leave  
    903b:	67 66 39 8b 84 0b    	cmp    %cx,0xb84(%bp,%di)
    9041:	00 00                	add    %al,(%eax)
    9043:	0f 86 a7 00 66 6b    	jbe    6b6690f0 <_GLOBAL_OFFSET_TABLE_+0x6b65e2ac>
    9049:	d1 24 67             	shll   (%edi,%eiz,2)
    904c:	66 89 4d ec          	mov    %cx,-0x14(%ebp)
    9050:	67 66 8d bc 13 8c    	lea    -0x73ed(%si),%di
    9056:	0b 00                	or     (%eax),%eax
    9058:	00 67 66             	add    %ah,0x66(%edi)
    905b:	89 55 f0             	mov    %edx,-0x10(%ebp)
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    905e:	66 57                	push   %di
    9060:	67 66 8b 06 67 66    	mov    0x6667,%ax
    9066:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    906a:	66 e8 65 f4          	callw  84d3 <_Z6strcpyPcPKc+0x40>
    906e:	ff                   	(bad)  
    906f:	ff 66 5a             	jmp    *0x5a(%esi)
                if (is_command(input_cmd, progs[i].name))
    9072:	66 59                	pop    %cx
    9074:	66 85 c0             	test   %ax,%ax
    9077:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    907c:	67 66 8b 4d ec       	mov    -0x14(%di),%cx
    9081:	75 66                	jne    90e9 <_ZN2sh4execERKNS_3cmdE+0x23f>
class bin_loader
{
public:
    static void load_binary_from_floppy(int n)
    {
        sys_read_disk(user_prog_segment, user_prog_load_addr, n, 20);
    9083:	66 6a 14             	pushw  $0x14
                    bin_loader::load_binary_from_floppy(progs[i].lba);
    9086:	66 01 d3             	add    %dx,%bx
    9089:	67 66 0f b7 83 ac 0b 	movzww 0xbac(%bp,%di),%ax
    9090:	00 00                	add    %al,(%eax)
    9092:	66 50                	push   %ax
    9094:	66 68 00 a1          	pushw  $0xa100
    9098:	00 00                	add    %al,(%eax)
    909a:	66 68 00 10          	pushw  $0x1000
    909e:	00 00                	add    %al,(%eax)
    90a0:	66 e8 97 f2          	callw  833b <sys_get_scancode+0xf>
    90a4:	ff                   	(bad)  
    90a5:	ff 66 83             	jmp    *-0x7d(%esi)
        sys_execve_bin();
    90a8:	c4 10                	les    (%eax),%edx
    90aa:	66 e8 da ef          	callw  8088 <sys_bios_getchar+0x5>
    90ae:	ff                   	(bad)  
    90af:	ff 66 57             	jmp    *0x57(%esi)
                    if(!(strlen(progs[i].name) > 2 && progs[i].name[0] == 'c' && progs[i].name[1] == '_'))
    90b2:	66 e8 bf f3          	callw  8475 <_Z6memsetPvim+0x23>
    90b6:	ff                   	(bad)  
    90b7:	ff 66 5f             	jmp    *0x5f(%esi)
    90ba:	66 83 f8 02          	cmp    $0x2,%ax
    90be:	76 14                	jbe    90d4 <_ZN2sh4execERKNS_3cmdE+0x22a>
    90c0:	67 80 bb 8c 0b 00    	cmpb   $0x0,0xb8c(%bp,%di)
    90c6:	00 63 75             	add    %ah,0x75(%ebx)
    90c9:	0a 67 80             	or     -0x80(%edi),%ah
    90cc:	bb 8d 0b 00 00       	mov    $0xb8d,%ebx
    90d1:	5f                   	pop    %edi
    90d2:	74 5c                	je     9130 <_ZN2sh4execERKNS_3cmdE+0x286>
                        sys_bios_clear_screen();
    90d4:	66 e8 96 ef          	callw  806e <sys_bios_print_string+0x1e>
    90d8:	ff                   	(bad)  
    90d9:	ff 66 ff             	jmp    *-0x1(%esi)
                        sys_get_current_tty()->tty_init();
    90dc:	36 20 9d 66 e8 8b fc 	and    %bl,%ss:-0x374179a(%ebp)
    90e3:	ff                   	(bad)  
    90e4:	ff 66 5e             	jmp    *0x5e(%esi)
    90e7:	eb 47                	jmp    9130 <_ZN2sh4execERKNS_3cmdE+0x286>
            for(size_t i = 0; i < prog_cnt; ++i)
    90e9:	66 41                	inc    %cx
    90eb:	e9 4d ff 66 68       	jmp    6867903d <_GLOBAL_OFFSET_TABLE_+0x6866e1f9>
                printf("%s\n", "No such command or file");
    90f0:	dd ad 00 00 66 68    	(bad)  0x68660000(%ebp)
    90f6:	bd ad 00 00 66       	mov    $0x660000ad,%ebp
    90fb:	e8 ba fb ff ff       	call   8cba <_Z6printfPKcz>
    9100:	66 59                	pop    %cx
    9102:	66 5b                	pop    %bx
    9104:	eb 2a                	jmp    9130 <_ZN2sh4execERKNS_3cmdE+0x286>
    9106:	67 66 8d b3 04 03    	lea    0x304(%bp,%di),%si
    910c:	00 00                	add    %al,(%eax)
    910e:	66 81 c3 84 07       	add    $0x784,%bx
    9113:	00 00                	add    %al,(%eax)
                printf("%s\n", histroy[i]);
    9115:	66 56                	push   %si
    9117:	66 68 bd ad          	pushw  $0xadbd
    911b:	00 00                	add    %al,(%eax)
    911d:	66 e8 97 fb          	callw  8cb8 <_Z7sprintfPcPKcz+0x1e>
    9121:	ff                   	(bad)  
    9122:	ff 66 83             	jmp    *-0x7d(%esi)
    9125:	ee                   	out    %al,(%dx)
    9126:	80 66 58 66          	andb   $0x66,0x58(%esi)
            for(int i = 1; i < history_term; ++i)
    912a:	5a                   	pop    %edx
    912b:	66 39 f3             	cmp    %si,%bx
    912e:	75 e5                	jne    9115 <_ZN2sh4execERKNS_3cmdE+0x26b>
    }
    9130:	66 31 c0             	xor    %ax,%ax
    9133:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    9138:	66 5b                	pop    %bx
    913a:	66 5e                	pop    %si
    913c:	66 5f                	pop    %di
    913e:	66 5d                	pop    %bp
    9140:	66 c3                	retw   

Disassembly of section .text._ZN2sh16read_prog_recordEv:

00009142 <_ZN2sh16read_prog_recordEv>:
    void read_prog_record()
    9142:	66 55                	push   %bp
    9144:	66 89 e5             	mov    %sp,%bp
    9147:	66 57                	push   %di
    9149:	66 56                	push   %si
    914b:	66 53                	push   %bx
    914d:	66 83 ec 6c          	sub    $0x6c,%sp
    9151:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        sys_read_disk(0, (uint32_t)record_buf, REC_FILE_SECTOR, 1);
    9156:	67 66 8d bb 84 07    	lea    0x784(%bp,%di),%di
    915c:	00 00                	add    %al,(%eax)
    915e:	66 6a 01             	pushw  $0x1
    9161:	66 6a 34             	pushw  $0x34
    9164:	66 57                	push   %di
    9166:	66 6a 00             	pushw  $0x0
    9169:	66 e8 ce f1          	callw  833b <sys_get_scancode+0xf>
    916d:	ff                   	(bad)  
    916e:	ff 66 83             	jmp    *-0x7d(%esi)
        sscanf(p, "%s", buf1);
    9171:	c4 10                	les    (%eax),%edx
    9173:	67 66 8d 75 94       	lea    -0x6c(%di),%si
    9178:	66 56                	push   %si
    917a:	66 68 f7 ad          	pushw  $0xadf7
    917e:	00 00                	add    %al,(%eax)
    9180:	66 57                	push   %di
    9182:	66 e8 08 f9          	callw  8a8e <_Z7vsscanfPKcS0_Pc+0x1bf>
    9186:	ff                   	(bad)  
    9187:	ff 66 83             	jmp    *-0x7d(%esi)
        p += (strlen(buf1) + 1);
    918a:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    918d:	56                   	push   %esi
    918e:	66 e8 e3 f2          	callw  8475 <_Z6memsetPvim+0x23>
    9192:	ff                   	(bad)  
    9193:	ff 67 66             	jmp    *0x66(%edi)
    9196:	8d 44 07 01          	lea    0x1(%edi,%eax,1),%eax
    919a:	67 66 89 45 8c       	mov    %ax,-0x74(%di)
        prog_cnt = strtol(buf1, nullptr, 10);
    919f:	67 66 c7 04 24 0a    	movw   $0xa24,(%si)
    91a5:	00 00                	add    %al,(%eax)
    91a7:	00 66 6a             	add    %ah,0x6a(%esi)
    91aa:	00 66 56             	add    %ah,0x56(%esi)
    91ad:	66 e8 99 f4          	callw  864a <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    91b1:	ff                   	(bad)  
    91b2:	ff 67 66             	jmp    *0x66(%edi)
    91b5:	89 83 84 0b 00 00    	mov    %eax,0xb84(%ebx)
    91bb:	66 83 c4 0c          	add    $0xc,%sp
        for(size_t i = 0; i < prog_cnt; ++i)
    91bf:	67 66 c7 45 90 00 00 	movw   $0x0,-0x70(%di)
    91c6:	00 00                	add    %al,(%eax)
    91c8:	67 66 8b 45 90       	mov    -0x70(%di),%ax
    91cd:	67 66 39 83 84 0b    	cmp    %ax,0xb84(%bp,%di)
    91d3:	00 00                	add    %al,(%eax)
    91d5:	0f 86 97 00 67 66    	jbe    66679272 <_GLOBAL_OFFSET_TABLE_+0x6666e42e>
            sscanf(p, "%s%s", buf2, buf3);
    91db:	8d 7d d4             	lea    -0x2c(%ebp),%edi
    91de:	66 57                	push   %di
    91e0:	67 66 8d 75 b4       	lea    -0x4c(%di),%si
    91e5:	66 56                	push   %si
    91e7:	66 68 f5 ad          	pushw  $0xadf5
    91eb:	00 00                	add    %al,(%eax)
    91ed:	67 66 ff 75 8c       	pushw  -0x74(%di)
    91f2:	66 e8 98 f8          	callw  8a8e <_Z7vsscanfPKcS0_Pc+0x1bf>
    91f6:	ff                   	(bad)  
    91f7:	ff 67 66             	jmp    *0x66(%edi)
    91fa:	6b 4d 90 24          	imul   $0x24,-0x70(%ebp),%ecx
            strcpy(progs[i].name, buf2);
    91fe:	66 83 c4 10          	add    $0x10,%sp
    9202:	66 56                	push   %si
    9204:	67 66 8d 84 0b 8c    	lea    -0x73f5(%si),%ax
    920a:	0b 00                	or     (%eax),%eax
    920c:	00 67 66             	add    %ah,0x66(%edi)
    920f:	89 4d 88             	mov    %ecx,-0x78(%ebp)
    9212:	66 50                	push   %ax
    9214:	66 e8 79 f2          	callw  8491 <_Z6strlenPKc+0x1a>
    9218:	ff                   	(bad)  
    9219:	ff 66 58             	jmp    *0x58(%esi)
            progs[i].lba = strtol(buf3, nullptr, 10);
    921c:	66 5a                	pop    %dx
    921e:	66 6a 0a             	pushw  $0xa
    9221:	66 6a 00             	pushw  $0x0
    9224:	66 57                	push   %di
    9226:	66 e8 20 f4          	callw  864a <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    922a:	ff                   	(bad)  
    922b:	ff 67 66             	jmp    *0x66(%edi)
    922e:	8b 4d 88             	mov    -0x78(%ebp),%ecx
    9231:	67 66 89 84 0b ac    	mov    %ax,-0x53f5(%si)
    9237:	0b 00                	or     (%eax),%eax
    9239:	00 66 83             	add    %ah,-0x7d(%esi)
            p += (strlen(buf2) + strlen(buf3) + 2);
    923c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    923f:	56                   	push   %esi
    9240:	66 e8 31 f2          	callw  8475 <_Z6memsetPvim+0x23>
    9244:	ff                   	(bad)  
    9245:	ff 67 66             	jmp    *0x66(%edi)
    9248:	89 45 88             	mov    %eax,-0x78(%ebp)
    924b:	67 66 89 3c          	mov    %di,(%si)
    924f:	24 66                	and    $0x66,%al
    9251:	e8 21 f2 ff ff       	call   8477 <_Z6strlenPKc>
    9256:	67 66 8b 55 88       	mov    -0x78(%di),%dx
    925b:	67 66 8d 44 02       	lea    0x2(%si),%ax
    9260:	02 67 66             	add    0x66(%edi),%ah
    9263:	01 45 8c             	add    %eax,-0x74(%ebp)
        for(size_t i = 0; i < prog_cnt; ++i)
    9266:	67 66 ff 45 90       	incw   -0x70(%di)
    926b:	66 59                	pop    %cx
    926d:	e9 58 ff 67 66       	jmp    666891ca <_GLOBAL_OFFSET_TABLE_+0x6667e386>
    }
    9272:	8d 65 f4             	lea    -0xc(%ebp),%esp
    9275:	66 5b                	pop    %bx
    9277:	66 5e                	pop    %si
    9279:	66 5f                	pop    %di
    927b:	66 5d                	pop    %bp
    927d:	66 c3                	retw   

Disassembly of section .text._ZN2sh3runEv:

00009280 <_ZN2sh3runEv>:
        read_help_file();
    }
    void run () {
    9280:	66 55                	push   %bp
    9282:	66 89 e5             	mov    %sp,%bp
    9285:	66 57                	push   %di
    9287:	66 56                	push   %si
    9289:	66 53                	push   %bx
    928b:	66 83 ec 10          	sub    $0x10,%sp
    928f:	67 66 8b 7d 08       	mov    0x8(%di),%di
        printf("%s", prompt);
    9294:	66 68 fa ad          	pushw  $0xadfa
    9298:	00 00                	add    %al,(%eax)
    929a:	66 68 f7 ad          	pushw  $0xadf7
    929e:	00 00                	add    %al,(%eax)
    92a0:	66 e8 14 fa          	callw  8cb8 <_Z7sprintfPcPKcz+0x1e>
    92a4:	ff                   	(bad)  
    92a5:	ff 66 58             	jmp    *0x58(%esi)
    92a8:	66 5a                	pop    %dx
        while(true)
        {
            char in = getchar();
    92aa:	66 e8 c8 f5          	callw  8876 <_Z4putsPKc+0x3c>
    92ae:	ff                   	(bad)  
    92af:	ff 66 89             	jmp    *-0x77(%esi)
    92b2:	c2 3c 08             	ret    $0x83c
            if (in == '\b')
    92b5:	75 35                	jne    92ec <_ZN2sh3runEv+0x6c>
            {
                if(pos != 0){
    92b7:	67 66 83 bf 88 0b 00 	cmpw   $0x0,0xb88(%bx)
    92be:	00 00                	add    %al,(%eax)
    92c0:	74 e8                	je     92aa <_ZN2sh3runEv+0x2a>
                    putchar('\b');
    92c2:	66 6a 08             	pushw  $0x8
    92c5:	66 e8 55 f5          	callw  881e <_ZL19system_call_putchari+0x29>
    92c9:	ff                   	(bad)  
    92ca:	ff 67 66             	jmp    *0x66(%edi)
                    buf[pos--] = '\0';
    92cd:	8b 87 88 0b 00 00    	mov    0xb88(%edi),%eax
    92d3:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    92d8:	67 66 89 97 88 0b    	mov    %dx,0xb88(%bx)
    92de:	00 00                	add    %al,(%eax)
    92e0:	67 c6 84 07 04 02    	movb   $0x2,0x407(%si)
    92e6:	00 00                	add    %al,(%eax)
    92e8:	00 e9                	add    %ch,%cl
    92ea:	d4 02                	aam    $0x2
                }
            }
            else if (in == 13)
    92ec:	3c 0d                	cmp    $0xd,%al
    92ee:	0f 85 c3 01 66 6a    	jne    6a6694b7 <_GLOBAL_OFFSET_TABLE_+0x6a65e673>
            {
                putchar('\n');
    92f4:	0a 66 e8             	or     -0x18(%esi),%ah
    92f7:	25 f5 ff ff 67       	and    $0x67fffff5,%eax
                history_push(buf);
    92fc:	66 8d 87 04 02 00 00 	lea    0x204(%edi),%ax
    9303:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
        memmove(histroy[1], histroy[0], buf_size * history_term * sizeof(char));
    9308:	67 66 8d 9f 84 02    	lea    0x284(%bx),%bx
    930e:	00 00                	add    %al,(%eax)
    9310:	67 66 c7 04 24 00    	movw   $0x24,(%si)
    9316:	05 00 00 66 53       	add    $0x53660000,%eax
    931b:	67 66 8d 87 04 03    	lea    0x304(%bx),%ax
    9321:	00 00                	add    %al,(%eax)
    9323:	66 50                	push   %ax
    9325:	66 e8 da f0          	callw  8403 <_Z6memcpyPvPKvm+0x2b>
    9329:	ff                   	(bad)  
    932a:	ff 66 83             	jmp    *-0x7d(%esi)
        strcpy(histroy[0], buf);
    932d:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    9330:	66 ff 75 f0          	pushw  -0x10(%ebp)
    9334:	66 53                	push   %bx
    9336:	66 e8 57 f1          	callw  8491 <_Z6strlenPKc+0x1a>
    933a:	ff                   	(bad)  
    933b:	ff 66 5b             	jmp    *0x5b(%esi)
    933e:	66 5e                	pop    %si
        char * p = buf;
    9340:	67 66 8d 9f 04 02    	lea    0x204(%bx),%bx
    9346:	00 00                	add    %al,(%eax)
        while(*p && isspace(*p)){
    9348:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    934d:	84 c0                	test   %al,%al
    934f:	75 08                	jne    9359 <_ZN2sh3runEv+0xd9>
        char * p = buf;
    9351:	66 31 d2             	xor    %dx,%dx
    9354:	66 31 f6             	xor    %si,%si
    9357:	eb 39                	jmp    9392 <_ZN2sh3runEv+0x112>
        while(*p && isspace(*p)){
    9359:	66 50                	push   %ax
    935b:	66 e8 2d f2          	callw  858c <_Z7reversePc+0x4a>
    935f:	ff                   	(bad)  
    9360:	ff 66 59             	jmp    *0x59(%esi)
    9363:	66 85 c0             	test   %ax,%ax
    9366:	74 e9                	je     9351 <_ZN2sh3runEv+0xd1>
            ++p;
    9368:	66 43                	inc    %bx
    936a:	eb dc                	jmp    9348 <_ZN2sh3runEv+0xc8>
    936c:	67 88 55 ec          	mov    %dl,-0x14(%di)
            if(isspace(*p))
    9370:	66 50                	push   %ax
    9372:	66 e8 16 f2          	callw  858c <_Z7reversePc+0x4a>
    9376:	ff                   	(bad)  
    9377:	ff 66 5a             	jmp    *0x5a(%esi)
    937a:	66 85 c0             	test   %ax,%ax
    937d:	67 8a 55 ec          	mov    -0x14(%di),%dl
    9381:	74 1a                	je     939d <_ZN2sh3runEv+0x11d>
                *p = '\0';
    9383:	67 c6 03 00          	movb   $0x0,(%bp,%di)
                if(con)
    9387:	84 d2                	test   %dl,%dl
    9389:	74 05                	je     9390 <_ZN2sh3runEv+0x110>
                    ++i;
    938b:	66 46                	inc    %si
                    con = false;
    938d:	66 31 d2             	xor    %dx,%dx
            ++p;
    9390:	66 43                	inc    %bx
        while (*p)
    9392:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    9397:	84 c0                	test   %al,%al
    9399:	75 d1                	jne    936c <_ZN2sh3runEv+0xec>
    939b:	eb 0e                	jmp    93ab <_ZN2sh3runEv+0x12b>
                if(!con)
    939d:	84 d2                	test   %dl,%dl
    939f:	75 ef                	jne    9390 <_ZN2sh3runEv+0x110>
                    inputs[i] = p;
    93a1:	67 66 89 5c b7       	mov    %bx,-0x49(%si)
    93a6:	04 b2                	add    $0xb2,%al
                    con = true;
    93a8:	01 eb                	add    %ebp,%ebx
    93aa:	e5 84                	in     $0x84,%eax
        if(con) ++i;
    93ac:	d2 74 04 66          	shlb   %cl,0x66(%esp,%eax,1)
    93b0:	46                   	inc    %esi
    93b1:	eb 07                	jmp    93ba <_ZN2sh3runEv+0x13a>
                int input_cnt = split_input(buf);
                if (input_cnt == 0)
    93b3:	66 85 f6             	test   %si,%si
    93b6:	0f 84 f0 fe 67 66    	je     666892ac <_GLOBAL_OFFSET_TABLE_+0x6667e468>
                    continue;
                int cmd_cnt = split_batch(inputs, input_cnt);
    93bc:	8d 47 04             	lea    0x4(%edi),%eax
    93bf:	67 66 89 45 ec       	mov    %ax,-0x14(%di)
        int p = 0;
    93c4:	66 31 c9             	xor    %cx,%cx
        while(strcmp(inputs[p], ";") == 0){
    93c7:	66 68 01 ae          	pushw  $0xae01
    93cb:	00 00                	add    %al,(%eax)
    93cd:	67 66 8b 45 ec       	mov    -0x14(%di),%ax
    93d2:	67 66 ff 34          	pushw  (%si)
    93d6:	88 67 66             	mov    %ah,0x66(%edi)
    93d9:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    93dc:	66 e8 f3 f0          	callw  84d3 <_Z6strcpyPcPKc+0x40>
    93e0:	ff                   	(bad)  
    93e1:	ff 66 59             	jmp    *0x59(%esi)
    93e4:	66 5b                	pop    %bx
    93e6:	66 85 c0             	test   %ax,%ax
    93e9:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    93ee:	75 04                	jne    93f4 <_ZN2sh3runEv+0x174>
            ++p;
    93f0:	66 41                	inc    %cx
    93f2:	eb d3                	jmp    93c7 <_ZN2sh3runEv+0x147>
        bool con = false;
    93f4:	66 31 d2             	xor    %dx,%dx
        int i = 0;
    93f7:	66 31 db             	xor    %bx,%bx
        while (p < input_cnt)
    93fa:	66 39 f1             	cmp    %si,%cx
    93fd:	7d 66                	jge    9465 <_ZN2sh3runEv+0x1e5>
    93ff:	67 88 55 e7          	mov    %dl,-0x19(%di)
            if(strcmp(inputs[p], ";") == 0)
    9403:	66 68 01 ae          	pushw  $0xae01
    9407:	00 00                	add    %al,(%eax)
    9409:	67 66 8b 45 ec       	mov    -0x14(%di),%ax
    940e:	67 66 ff 34          	pushw  (%si)
    9412:	88 67 66             	mov    %ah,0x66(%edi)
    9415:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    9418:	66 e8 b7 f0          	callw  84d3 <_Z6strcpyPcPKc+0x40>
    941c:	ff                   	(bad)  
    941d:	ff 66 59             	jmp    *0x59(%esi)
    9420:	66 5a                	pop    %dx
    9422:	66 85 c0             	test   %ax,%ax
    9425:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    942a:	67 8a 55 e7          	mov    -0x19(%di),%dl
    942e:	75 0b                	jne    943b <_ZN2sh3runEv+0x1bb>
                if(con)
    9430:	84 d2                	test   %dl,%dl
    9432:	74 2d                	je     9461 <_ZN2sh3runEv+0x1e1>
                    ++i;
    9434:	66 43                	inc    %bx
                    con = false;
    9436:	66 31 d2             	xor    %dx,%dx
    9439:	eb 26                	jmp    9461 <_ZN2sh3runEv+0x1e1>
                if(!con)
    943b:	84 d2                	test   %dl,%dl
    943d:	75 19                	jne    9458 <_ZN2sh3runEv+0x1d8>
    943f:	67 66 8d 04          	lea    (%si),%ax
    9443:	df 67 66             	fbld   0x66(%edi)
                    cmds[i].start = p;
    9446:	89 88 04 01 00 00    	mov    %ecx,0x104(%eax)
                    cmds[i].cnt++;
    944c:	67 66 ff 80 08 01    	incw   0x108(%bx,%si)
    9452:	00 00                	add    %al,(%eax)
                    con = true;
    9454:	b2 01                	mov    $0x1,%dl
    9456:	eb 09                	jmp    9461 <_ZN2sh3runEv+0x1e1>
                    cmds[i].cnt++;
    9458:	67 66 ff 84 df 08    	incw   0x8df(%si)
    945e:	01 00                	add    %eax,(%eax)
    9460:	00 66 41             	add    %ah,0x41(%esi)
            ++p;
    9463:	eb 95                	jmp    93fa <_ZN2sh3runEv+0x17a>
        if(con) ++i;
    9465:	84 d2                	test   %dl,%dl
    9467:	74 02                	je     946b <_ZN2sh3runEv+0x1eb>
    9469:	66 43                	inc    %bx
                for(int cmd_num = 0; cmd_num < cmd_cnt; ++ cmd_num)
    946b:	66 31 f6             	xor    %si,%si
    946e:	66 39 de             	cmp    %bx,%si
    9471:	74 1b                	je     948e <_ZN2sh3runEv+0x20e>
                {
                    exec(cmds[cmd_num]);
    9473:	67 66 8d 84 f7 04    	lea    0x4f7(%si),%ax
    9479:	01 00                	add    %eax,(%eax)
    947b:	00 66 50             	add    %ah,0x50(%esi)
    947e:	66 57                	push   %di
    9480:	66 e8 24 fa          	callw  8ea8 <_ZN3tty7putcharEi+0x100>
    9484:	ff                   	(bad)  
    9485:	ff 66 46             	jmp    *0x46(%esi)
                for(int cmd_num = 0; cmd_num < cmd_cnt; ++ cmd_num)
    9488:	66 58                	pop    %ax
    948a:	66 5a                	pop    %dx
    948c:	eb e0                	jmp    946e <_ZN2sh3runEv+0x1ee>
                }
                memset(buf, 0, buf_size);
    948e:	66 68 80 00          	pushw  $0x80
    9492:	00 00                	add    %al,(%eax)
    9494:	66 6a 00             	pushw  $0x0
    9497:	67 66 ff 75 f0       	pushw  -0x10(%di)
    949c:	66 e8 b0 ef          	callw  8450 <_Z7memmovePvPKvm+0x4b>
    94a0:	ff                   	(bad)  
    94a1:	ff 67 66             	jmp    *0x66(%edi)
                pos = 0;
    94a4:	c7 87 88 0b 00 00 00 	movl   $0x0,0xb88(%edi)
    94ab:	00 00 00 
                printf("%s", prompt);
    94ae:	66 83 c4 0c          	add    $0xc,%sp
    94b2:	e9 df fd 84 c0       	jmp    c0859296 <_GLOBAL_OFFSET_TABLE_+0xc084e452>
            }
            else if (in == 0)
    94b7:	0f 84 ef fd 3c 09    	je     93d92ac <_GLOBAL_OFFSET_TABLE_+0x93ce468>
            {
                continue;
            }
            else if( in == '\t')
    94bd:	0f 85 cc 00 66 31    	jne    3166958f <_GLOBAL_OFFSET_TABLE_+0x3165e74b>
            {
                bool first_matching = false;
                for(int i = 0; i < supported_cmd_num; ++i){
    94c3:	db 66 31             	(bad)  0x31(%esi)
                bool first_matching = false;
    94c6:	c9                   	leave  
    94c7:	67 88 4d ec          	mov    %cl,-0x14(%di)
    94cb:	67 66 8d b7 04 02    	lea    0x204(%bx),%si
    94d1:	00 00                	add    %al,(%eax)
                for(int i = 0; i < supported_cmd_num; ++i){
    94d3:	67 66 39 1f          	cmp    %bx,(%bx)
    94d7:	7e 4f                	jle    9528 <_ZN2sh3runEv+0x2a8>
                    if(bf(buf, cmd_list[i]) != -1)
    94d9:	67 66 8b 04          	mov    (%si),%ax
    94dd:	9d                   	popf   
    94de:	04 ae                	add    $0xae,%al
    94e0:	00 00                	add    %al,(%eax)
    94e2:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    94e7:	66 89 c2             	mov    %ax,%dx
    94ea:	66 89 f0             	mov    %si,%ax
    94ed:	66 e8 05 f8          	callw  8cf6 <_Z6printfPKcz+0x3c>
    94f1:	ff                   	(bad)  
    94f2:	ff 66 40             	jmp    *0x40(%esi)
    94f5:	67 8a 4d ec          	mov    -0x14(%di),%cl
    94f9:	74 29                	je     9524 <_ZN2sh3runEv+0x2a4>
                    {
                        if(!first_matching){
    94fb:	84 c9                	test   %cl,%cl
    94fd:	75 0e                	jne    950d <_ZN2sh3runEv+0x28d>
                            printf("\n");
    94ff:	66 68 b3 ad          	pushw  $0xadb3
    9503:	00 00                	add    %al,(%eax)
    9505:	66 e8 af f7          	callw  8cb8 <_Z7sprintfPcPKcz+0x1e>
    9509:	ff                   	(bad)  
    950a:	ff 66 58             	jmp    *0x58(%esi)
                            first_matching = true;
                        }
                        printf("%s\n", cmd_list[i]);
    950d:	67 66 ff 75 f0       	pushw  -0x10(%di)
    9512:	66 68 bd ad          	pushw  $0xadbd
    9516:	00 00                	add    %al,(%eax)
    9518:	66 e8 9c f7          	callw  8cb8 <_Z7sprintfPcPKcz+0x1e>
    951c:	ff                   	(bad)  
    951d:	ff 66 59             	jmp    *0x59(%esi)
    9520:	66 5e                	pop    %si
    9522:	b1 01                	mov    $0x1,%cl
                for(int i = 0; i < supported_cmd_num; ++i){
    9524:	66 43                	inc    %bx
    9526:	eb 9f                	jmp    94c7 <_ZN2sh3runEv+0x247>
                    }
                }
                for(size_t i = 0; i < prog_cnt; ++i)
    9528:	66 31 db             	xor    %bx,%bx
    952b:	67 66 39 9f 84 0b    	cmp    %bx,0xb84(%bx)
    9531:	00 00                	add    %al,(%eax)
    9533:	76 3d                	jbe    9572 <_ZN2sh3runEv+0x2f2>
    9535:	66 6b c3 24          	imul   $0x24,%bx,%ax
    9539:	67 66 8d 8c 07 8c    	lea    -0x73f9(%si),%cx
    953f:	0b 00                	or     (%eax),%eax
    9541:	00 66 89             	add    %ah,-0x77(%esi)
                    if(bf(buf, progs[i].name) != -1)
    9544:	ca 67 66             	lret   $0x6667
    9547:	89 4d f0             	mov    %ecx,-0x10(%ebp)
    954a:	66 89 f0             	mov    %si,%ax
    954d:	66 e8 a5 f7          	callw  8cf6 <_Z6printfPKcz+0x3c>
    9551:	ff                   	(bad)  
    9552:	ff 66 40             	jmp    *0x40(%esi)
    9555:	74 17                	je     956e <_ZN2sh3runEv+0x2ee>
                        printf("%s\n", progs[i].name);
    9557:	67 66 8b 4d f0       	mov    -0x10(%di),%cx
    955c:	66 51                	push   %cx
    955e:	66 68 bd ad          	pushw  $0xadbd
    9562:	00 00                	add    %al,(%eax)
    9564:	66 e8 50 f7          	callw  8cb8 <_Z7sprintfPcPKcz+0x1e>
    9568:	ff                   	(bad)  
    9569:	ff 66 58             	jmp    *0x58(%esi)
    956c:	66 5a                	pop    %dx
                for(size_t i = 0; i < prog_cnt; ++i)
    956e:	66 43                	inc    %bx
    9570:	eb b9                	jmp    952b <_ZN2sh3runEv+0x2ab>
                printf("%s", prompt);
    9572:	66 68 fa ad          	pushw  $0xadfa
    9576:	00 00                	add    %al,(%eax)
    9578:	66 68 f7 ad          	pushw  $0xadf7
    957c:	00 00                	add    %al,(%eax)
    957e:	66 e8 36 f7          	callw  8cb8 <_Z7sprintfPcPKcz+0x1e>
    9582:	ff                   	(bad)  
    9583:	ff 66 5a             	jmp    *0x5a(%esi)
                printf("%s", buf);
    9586:	66 59                	pop    %cx
    9588:	66 56                	push   %si
    958a:	e9 0d fd 66 0f       	jmp    f67929c <_GLOBAL_OFFSET_TABLE_+0xf66e458>
            }
            else {
                putchar(in);
    958f:	be c0 67 66 89       	mov    $0x896667c0,%esi
    9594:	55                   	push   %ebp
    9595:	f0 66 50             	lock push %ax
    9598:	66 e8 82 f2          	callw  881e <_ZL19system_call_putchari+0x29>
    959c:	ff                   	(bad)  
    959d:	ff 67 66             	jmp    *0x66(%edi)
                buf[pos++] = in;
    95a0:	8b 87 88 0b 00 00    	mov    0xb88(%edi),%eax
    95a6:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    95ab:	67 66 89 8f 88 0b    	mov    %cx,0xb88(%bx)
    95b1:	00 00                	add    %al,(%eax)
    95b3:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    95b8:	67 88 94 07 04       	mov    %dl,0x407(%si)
    95bd:	02 00                	add    (%eax),%al
    95bf:	00 66 58             	add    %ah,0x58(%esi)
    95c2:	e9                   	.byte 0xe9
    95c3:	e5 fc                	in     $0xfc,%eax

Disassembly of section .text._Z4itoaIjEvPcT_ib:

000095c5 <_Z4itoaIjEvPcT_ib>:
void itoa(char* buffer, T num, int base, bool captial = false)
    95c5:	66 55                	push   %bp
    95c7:	66 89 e5             	mov    %sp,%bp
    95ca:	66 57                	push   %di
    95cc:	66 56                	push   %si
    95ce:	66 53                	push   %bx
    95d0:	66 83 ec 08          	sub    $0x8,%sp
    95d4:	67 66 8b 75 08       	mov    0x8(%di),%si
    95d9:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    95de:	67 66 8b 7d 10       	mov    0x10(%di),%di
    95e3:	67 8a 5d 14          	mov    0x14(%di),%bl
    95e7:	67 88 5d ef          	mov    %bl,-0x11(%di)
    char *p = buffer;
    95eb:	66 89 f1             	mov    %si,%cx
    95ee:	66 31 d2             	xor    %dx,%dx
    95f1:	66 f7 f7             	div    %di
    95f4:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    95f9:	67 80 7d ef 00       	cmpb   $0x0,-0x11(%di)
    95fe:	74 09                	je     9609 <_Z4itoaIjEvPcT_ib+0x44>
    9600:	67 8a 9a 20 ae       	mov    -0x51e0(%bp,%si),%bl
    9605:	00 00                	add    %al,(%eax)
    9607:	eb 07                	jmp    9610 <_Z4itoaIjEvPcT_ib+0x4b>
    9609:	67 8a 9a 31 ae       	mov    -0x51cf(%bp,%si),%bl
    960e:	00 00                	add    %al,(%eax)
    9610:	67 66 8d 51 01       	lea    0x1(%bx,%di),%dx
    9615:	67 88 5a ff          	mov    %bl,-0x1(%bp,%si)
        if(num == 0) break;
    9619:	67 66 83 7d f0 00    	cmpw   $0x0,-0x10(%di)
    961f:	74 05                	je     9626 <_Z4itoaIjEvPcT_ib+0x61>
    9621:	66 89 d1             	mov    %dx,%cx
    9624:	eb c8                	jmp    95ee <_Z4itoaIjEvPcT_ib+0x29>
    *p = '\0';
    9626:	67 c6 41 01 00       	movb   $0x0,0x1(%bx,%di)
    reverse(buffer);
    962b:	67 66 89 75 08       	mov    %si,0x8(%di)
}
    9630:	66 58                	pop    %ax
    9632:	66 5a                	pop    %dx
    9634:	66 5b                	pop    %bx
    9636:	66 5e                	pop    %si
    9638:	66 5f                	pop    %di
    963a:	66 5d                	pop    %bp
    reverse(buffer);
    963c:	e9                   	.byte 0xe9
    963d:	03 ef                	add    %edi,%ebp
