
build/kernel/kernel.bin.elf:     file format elf32-i386


Disassembly of section .text:

00007e00 <_text>:
    7e00:	68 43 7e 68 80       	push   $0x80687e43
    7e05:	00 e8                	add    %ch,%al
    7e07:	21 00                	and    %eax,(%eax)
    7e09:	83 c4 04             	add    $0x4,%esp
    7e0c:	68 45 7e 68 84       	push   $0x84687e45
    7e11:	00 e8                	add    %ch,%al
    7e13:	15 00 83 c4 04       	adc    $0x4c48300,%eax
    7e18:	68 55 7e 68 60       	push   $0x60687e55
    7e1d:	02 e8                	add    %al,%ch
    7e1f:	09 00                	or     %eax,(%eax)
    7e21:	83 c4 04             	add    $0x4,%esp
    7e24:	e8 36 01 fa eb       	call   ebfa7f5f <_GLOBAL_OFFSET_TABLE_+0xebf9d093>
    7e29:	fe                   	.byte 0xfe

00007e2a <install_int>:
    7e2a:	55                   	push   %ebp
    7e2b:	89 e5                	mov    %esp,%ebp
    7e2d:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    7e32:	8b 76 04             	mov    0x4(%esi),%esi
    7e35:	8b 4e 06             	mov    0x6(%esi),%ecx
    7e38:	26 89 0c 26          	mov    %ecx,%es:(%esi,%eiz,1)
    7e3c:	8c 4c 02 8e          	mov    %cs,-0x72(%edx,%eax,1)
    7e40:	c0                   	.byte 0xc0
    7e41:	5d                   	pop    %ebp
    7e42:	c3                   	ret    

00007e43 <interrupt_20h>:
    7e43:	b4 4c                	mov    $0x4c,%ah

00007e45 <interrupt_21h>:
    7e45:	80 fc 4c             	cmp    $0x4c,%ah
    7e48:	75 09                	jne    7e53 <panic_21h_func_not_impl>
    7e4a:	83 c4 06             	add    $0x6,%esp
    7e4d:	66 ff 26             	jmpw   *(%esi)
    7e50:	0a                   	.byte 0xa
    7e51:	a0                   	.byte 0xa0
    7e52:	cf                   	iret   

00007e53 <panic_21h_func_not_impl>:
    7e53:	eb fe                	jmp    7e53 <panic_21h_func_not_impl>

00007e55 <interrupt_98h>:
    7e55:	80 fc 00             	cmp    $0x0,%ah
    7e58:	75 05                	jne    7e5f <func_01>

00007e5a <func_00>:
    7e5a:	e8 2c 02 eb 14       	call   14eb808b <_GLOBAL_OFFSET_TABLE_+0x14ead1bf>

00007e5f <func_01>:
    7e5f:	60                   	pusha  
    7e60:	80 fc 01             	cmp    $0x1,%ah
    7e63:	75 0e                	jne    7e73 <func_02>
    7e65:	66 50                	push   %ax
    7e67:	66 e8 d0 00          	callw  7f3b <_Z19sys_get_current_ttyv+0xb>
    7e6b:	00 00                	add    %al,(%eax)
    7e6d:	83 c4 04             	add    $0x4,%esp
    7e70:	61                   	popa   
    7e71:	eb 00                	jmp    7e73 <func_02>

00007e73 <func_02>:
    7e73:	cf                   	iret   

00007e74 <_ZL8print_okPc>:
    int mask = 0x00FF;
    ch = ch & mask;
    sys_get_current_tty()->putchar(ch);
}
const char* str = "Welcome to HHOS version 1.2.0\nYou can input help to see how to use it!";
static inline void print_ok(char * mod) {
    7e74:	66 55                	push   %bp
    7e76:	66 89 e5             	mov    %sp,%bp
    printf("%s init [", mod);
    7e79:	66 50                	push   %ax
    7e7b:	66 68 54 ad          	pushw  $0xad54
    7e7f:	00 00                	add    %al,(%eax)
    7e81:	66 e8 4c 0e          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    7e85:	00 00                	add    %al,(%eax)
    {
        cur_y = y;
    }
    void set_color(int _color)
    {
        color = _color;
    7e87:	66 a1 80 9d 67 66    	mov    0x66679d80,%ax
    7e8d:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
    current_tty->set_color(MAKE_COLOR(VGA_BLACK, VGA_GREEN));
    printf("OK");
    7e94:	66 58                	pop    %ax
    7e96:	66 5a                	pop    %dx
    7e98:	66 68 5e ad          	pushw  $0xad5e
    7e9c:	00 00                	add    %al,(%eax)
    7e9e:	66 e8 2f 0e          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    7ea2:	00 00                	add    %al,(%eax)
    7ea4:	66 a1 80 9d 67 66    	mov    0x66679d80,%ax
    7eaa:	c7 40 08 07 00 00 00 	movl   $0x7,0x8(%eax)
    current_tty->set_color(MAKE_COLOR(VGA_BLACK, VGA_WHITE));
    printf("]\n");
    7eb1:	67 66 c7 04 24 61    	movw   $0x6124,(%si)
    7eb7:	ad                   	lods   %ds:(%esi),%eax
    7eb8:	00 00                	add    %al,(%eax)
    7eba:	66 e8 13 0e          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    7ebe:	00 00                	add    %al,(%eax)
}
    7ec0:	66 59                	pop    %cx
    7ec2:	66 c9                	leavew 
    7ec4:	66 c3                	retw   

00007ec6 <_ZN3tty11move_cursorEii.isra.1>:
    }
    void move_cursor(int x, int y)
    7ec6:	66 55                	push   %bp
    7ec8:	66 89 e5             	mov    %sp,%bp
    7ecb:	66 53                	push   %bx
    {
        uint16_t pos = x * 80 + y;
    7ecd:	6b c0 50             	imul   $0x50,%eax,%eax
    7ed0:	67 66 8d 1c          	lea    (%si),%bx
    7ed4:	10 66 6a             	adc    %ah,0x6a(%esi)
        sys_outb(0x3D4, 0x0F);
    7ed7:	0f 66 68 d4          	pcmpgtd -0x2c(%eax),%mm5
    7edb:	03 00                	add    (%eax),%eax
    7edd:	00 66 e8             	add    %ah,-0x18(%esi)
    7ee0:	2d 04 00 00 66       	sub    $0x66000004,%eax
        sys_outb(0x3D5, (uint8_t) (pos & 0xFF));
    7ee5:	58                   	pop    %eax
    7ee6:	66 5a                	pop    %dx
    7ee8:	66 0f b6 c3          	movzbw %bl,%ax
    7eec:	66 50                	push   %ax
    7eee:	66 68 d5 03          	pushw  $0x3d5
    7ef2:	00 00                	add    %al,(%eax)
    7ef4:	66 e8 17 04          	callw  830f <sys_inb+0xd>
    7ef8:	00 00                	add    %al,(%eax)
        sys_outb(0x3D4, 0x0E);
    7efa:	66 59                	pop    %cx
    7efc:	66 58                	pop    %ax
    7efe:	66 6a 0e             	pushw  $0xe
    7f01:	66 68 d4 03          	pushw  $0x3d4
    7f05:	00 00                	add    %al,(%eax)
    7f07:	66 e8 04 04          	callw  830f <sys_inb+0xd>
    7f0b:	00 00                	add    %al,(%eax)
        sys_outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
    7f0d:	66 58                	pop    %ax
    7f0f:	66 5a                	pop    %dx
    7f11:	66 0f b6 df          	movzbw %bh,%bx
    7f15:	66 53                	push   %bx
    7f17:	66 68 d5 03          	pushw  $0x3d5
    7f1b:	00 00                	add    %al,(%eax)
    7f1d:	66 e8 ee 03          	callw  830f <sys_inb+0xd>
    7f21:	00 00                	add    %al,(%eax)
    7f23:	66 59                	pop    %cx
    7f25:	66 5b                	pop    %bx
    }
    7f27:	67 66 8b 5d fc       	mov    -0x4(%di),%bx
    7f2c:	66 c9                	leavew 
    7f2e:	66 c3                	retw   

00007f30 <_Z19sys_get_current_ttyv>:
tty* sys_get_current_tty(){return current_tty;}
    7f30:	66 55                	push   %bp
    7f32:	66 89 e5             	mov    %sp,%bp
    7f35:	66 a1 80 9d 66 5d    	mov    0x5d669d80,%ax
    7f3b:	66 c3                	retw   

00007f3d <sys_current_tty_putchar>:
{
    7f3d:	66 55                	push   %bp
    7f3f:	66 89 e5             	mov    %sp,%bp
    ch = ch & mask;
    7f42:	67 66 0f b6 45 08    	movzbw 0x8(%di),%ax
    sys_get_current_tty()->putchar(ch);
    7f48:	66 50                	push   %ax
    7f4a:	66 ff 36             	pushw  (%esi)
    7f4d:	80 9d 66 e8 6d 0e 00 	sbbb   $0x0,0xe6de866(%ebp)
    7f54:	00 66 58             	add    %ah,0x58(%esi)
}
    7f57:	66 5a                	pop    %dx
    7f59:	66 c9                	leavew 
    7f5b:	66 c3                	retw   

00007f5d <kernel_main>:
extern "C" void kernel_main()
{
    7f5d:	66 55                	push   %bp
    7f5f:	66 89 e5             	mov    %sp,%bp
    7f62:	66 53                	push   %bx
    7f64:	66 81 ec d8 0d       	sub    $0xdd8,%sp
    7f69:	00 00                	add    %al,(%eax)
        sys_bios_clear_screen();
    7f6b:	66 e8 02 01          	callw  8071 <sys_bios_print_string+0x21>
    7f6f:	00 00                	add    %al,(%eax)
        tty_init();
    7f71:	67 66 8d 9d 24 f2    	lea    -0xddc(%di),%bx
    7f77:	ff                   	(bad)  
    7f78:	ff 66 53             	jmp    *0x53(%esi)
    7f7b:	66 e8 09 0e          	callw  8d88 <_ZN2sh2bfEPKcS1_.isra.4+0x76>
    7f7f:	00 00                	add    %al,(%eax)


    tty tty1;
    current_tty = &tty1;
    7f81:	66 89 1e             	mov    %bx,(%esi)
    7f84:	80 9d 66 59 66 b8 64 	sbbb   $0x64,-0x4799a69a(%ebp)
    print_ok("TTY");
    7f8b:	ad                   	lods   %ds:(%esi),%eax
    7f8c:	00 00                	add    %al,(%eax)
    7f8e:	66 e8 e0 fe          	callw  7e72 <func_01+0x13>
    7f92:	ff                   	(bad)  
    7f93:	ff 67 66             	jmp    *0x66(%edi)
        return -1;
    }


public:
    sh(){
    7f96:	c7 85 30 f2 ff ff 07 	movl   $0x7,-0xdd0(%ebp)
    7f9d:	00 00 00 
    7fa0:	66 31 c0             	xor    %ax,%ax
    struct cmd{
    7fa3:	67 66 8d 9d 30 f2    	lea    -0xdd0(%di),%bx
    7fa9:	ff                   	(bad)  
    7faa:	ff 67 66             	jmp    *0x66(%edi)
    7fad:	c7 84 05 38 f3 ff ff 	movl   $0x0,-0xcc8(%ebp,%eax,1)
    7fb4:	00 00 00 00 
    7fb8:	66 83 c0 08          	add    $0x8,%ax
    sh(){
    7fbc:	66 3d 00 01          	cmp    $0x100,%ax
    7fc0:	00 00                	add    %al,(%eax)
    7fc2:	75 e7                	jne    7fab <kernel_main+0x4e>
    7fc4:	67 66 c7 85 b4 fd ff 	movw   $0xffff,-0x24c(%di)
    7fcb:	ff 
    7fcc:	00 00                	add    %al,(%eax)
    7fce:	00 00                	add    %al,(%eax)
    7fd0:	67 66 c7 85 b8 fd ff 	movw   $0xffff,-0x248(%di)
    7fd7:	ff 
    7fd8:	00 00                	add    %al,(%eax)
    7fda:	00 00                	add    %al,(%eax)
        memset(buf, 0, buf_size);
    7fdc:	66 68 80 00          	pushw  $0x80
    7fe0:	00 00                	add    %al,(%eax)
    7fe2:	66 6a 00             	pushw  $0x0
    7fe5:	67 66 8d 85 34 f4    	lea    -0xbcc(%di),%ax
    7feb:	ff                   	(bad)  
    7fec:	ff 66 50             	jmp    *0x50(%esi)
    7fef:	66 e8 66 04          	callw  8459 <_Z7memmovePvPKvm+0x4b>
    7ff3:	00 00                	add    %al,(%eax)
        read_prog_record();
    7ff5:	66 83 c4 0c          	add    $0xc,%sp
    7ff9:	66 53                	push   %bx
    7ffb:	66 e8 6d 11          	callw  916c <_ZN2sh4execERKNS_3cmdE+0x2a8>
    7fff:	00 00                	add    %al,(%eax)
        sys_read_disk(0, (uint32_t)help, HELP_FILE_SECTOR, 1);
    8001:	67 66 c7 04 24 01    	movw   $0x124,(%si)
    8007:	00 00                	add    %al,(%eax)
    8009:	00 66 6a             	add    %ah,0x6a(%esi)
    800c:	20 67 66             	and    %ah,0x66(%edi)
    800f:	8d 85 b4 fb ff ff    	lea    -0x44c(%ebp),%eax
    8015:	66 50                	push   %ax
    8017:	66 6a 00             	pushw  $0x0
    801a:	66 e8 26 03          	callw  8344 <sys_get_scancode+0xf>
    801e:	00 00                	add    %al,(%eax)
    sh sh1;
    print_ok("Shell");
    8020:	66 83 c4 10          	add    $0x10,%sp
    8024:	66 b8 68 ad          	mov    $0xad68,%ax
    8028:	00 00                	add    %al,(%eax)
    802a:	66 e8 44 fe          	callw  7e72 <func_01+0x13>
    802e:	ff                   	(bad)  
    802f:	ff 66 ff             	jmp    *-0x1(%esi)
    printf("%s\n", str);
    8032:	36 50                	ss push %eax
    8034:	ad                   	lods   %ds:(%esi),%eax
    8035:	66 68 50 ae          	pushw  $0xae50
    8039:	00 00                	add    %al,(%eax)
    803b:	66 e8 92 0c          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    803f:	00 00                	add    %al,(%eax)
    sh1.run();
    8041:	66 58                	pop    %ax
    8043:	66 5a                	pop    %dx
    8045:	66 53                	push   %bx
    8047:	66 e8 5f 12          	callw  92aa <_ZN2sh16read_prog_recordEv+0x13c>
    804b:	00 00                	add    %al,(%eax)
    804d:	66 90                	xchg   %ax,%ax
    804f:	90                   	nop

00008050 <sys_bios_print_string>:
    8050:	55                   	push   %ebp
    8051:	89 e5                	mov    %esp,%ebp
    8053:	8b 4e 0a             	mov    0xa(%esi),%ecx
    8056:	8b 5e 0e             	mov    0xe(%esi),%ebx
    8059:	b7 00                	mov    $0x0,%bh
    805b:	8b 56 12             	mov    0x12(%esi),%edx
    805e:	8c d8                	mov    %ds,%eax
    8060:	8e c0                	mov    %eax,%es
    8062:	b8 01 13 8e ed       	mov    $0xed8e1301,%eax
    8067:	8b 6e 06             	mov    0x6(%esi),%ebp
    806a:	cd 10                	int    $0x10
    806c:	8c ed                	mov    %gs,%ebp
    806e:	5d                   	pop    %ebp
    806f:	66 59                	pop    %cx
    8071:	ff e1                	jmp    *%ecx

00008073 <sys_bios_clear_screen>:
    8073:	60                   	pusha  
    8074:	b4 06                	mov    $0x6,%ah
    8076:	b0 00                	mov    $0x0,%al
    8078:	b7 07                	mov    $0x7,%bh
    807a:	b5 00                	mov    $0x0,%ch
    807c:	b1 00                	mov    $0x0,%cl
    807e:	b6 18                	mov    $0x18,%dh
    8080:	b2 4f                	mov    $0x4f,%dl
    8082:	cd 10                	int    $0x10
    8084:	61                   	popa   
    8085:	66 59                	pop    %cx
    8087:	ff e1                	jmp    *%ecx

00008089 <sys_bios_getchar>:
    8089:	b4 00                	mov    $0x0,%ah
    808b:	cd 16                	int    $0x16
    808d:	b4 00                	mov    $0x0,%ah
    808f:	c3                   	ret    

00008090 <sys_execve_bin>:
    8090:	55                   	push   %ebp
    8091:	89 e5                	mov    %esp,%ebp
    8093:	60                   	pusha  
    8094:	1e                   	push   %ds
    8095:	06                   	push   %es
    8096:	b8 00 10 8e d8       	mov    $0xd88e1000,%eax
    809b:	8e c0                	mov    %eax,%es
    809d:	8e d0                	mov    %eax,%ss
    809f:	c7 06 00 a0 cd 00    	movl   $0xcda000,(%esi)
    80a5:	c7 06 02 a0 20 00    	movl   $0x20a002,(%esi)
    80ab:	c7 06 0a a0 ba 80    	movl   $0x80baa00a,(%esi)
    80b1:	8c 0e                	mov    %cs,(%esi)
    80b3:	0c a0                	or     $0xa0,%al
    80b5:	ea                   	.byte 0xea
    80b6:	00                   	.byte 0x0
    80b7:	a1                   	.byte 0xa1
    80b8:	00 10                	add    %dl,(%eax)

000080ba <return_point>:
    80ba:	b8 00 00 8e d0       	mov    $0xd08e0000,%eax
    80bf:	58                   	pop    %eax
    80c0:	8e c0                	mov    %eax,%es
    80c2:	58                   	pop    %eax
    80c3:	8e d8                	mov    %eax,%ds
    80c5:	61                   	popa   
    80c6:	5d                   	pop    %ebp
    80c7:	66 59                	pop    %cx
    80c9:	ff e1                	jmp    *%ecx

000080cb <sys_bios_print_int>:
#include "sys_lib.h"
void sys_bios_print_int(int num, int color, int pos)
{
    80cb:	66 55                	push   %bp
    80cd:	66 89 e5             	mov    %sp,%bp
    80d0:	66 57                	push   %di
    80d2:	66 56                	push   %si
    80d4:	66 53                	push   %bx
    80d6:	66 50                	push   %ax
    int num_ = num;
    80d8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    80dd:	66 b9 01 00          	mov    $0x1,%cx
    80e1:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    80e3:	66 bb 0a 00          	mov    $0xa,%bx
    80e7:	00 00                	add    %al,(%eax)
    80e9:	66 99                	cwtd   
    80eb:	66 f7 fb             	idiv   %bx
    80ee:	66 85 c0             	test   %ax,%ax
    80f1:	74 04                	je     80f7 <sys_bios_print_int+0x2c>
    80f3:	66 41                	inc    %cx
    80f5:	eb f2                	jmp    80e9 <sys_bios_print_int+0x1e>
    char arr[len + 1];
    80f7:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    80fc:	66 83 e0 fc          	and    $0xfffc,%ax
    8100:	66 29 c4             	sub    %ax,%sp
    8103:	66 89 e7             	mov    %sp,%di
    8106:	67 66 8d 1c          	lea    (%si),%bx
    810a:	0c 67                	or     $0x67,%al
    int power = 1;
    810c:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    8112:	00 00                	add    %al,(%eax)
    for(int i = 0; i < len; ++i, power *= 10)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    8114:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8119:	66 99                	cwtd   
    811b:	67 66 f7 7d f0       	idivw  -0x10(%di)
    8120:	66 be 0a 00          	mov    $0xa,%si
    8124:	00 00                	add    %al,(%eax)
    8126:	66 99                	cwtd   
    8128:	66 f7 fe             	idiv   %si
    812b:	66 83 c2 30          	add    $0x30,%dx
    812f:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    8133:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    8139:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    813e:	66 4b                	dec    %bx
    8140:	66 39 df             	cmp    %bx,%di
    8143:	75 cf                	jne    8114 <sys_bios_print_int+0x49>
    arr[len] = '\0';
    8145:	67 c6 04 0f          	movb   $0xf,(%si)
    8149:	00 67 66             	add    %ah,0x66(%edi)
    sys_bios_print_string(arr, len, color, pos);
    814c:	ff 75 10             	pushl  0x10(%ebp)
    814f:	67 66 ff 75 0c       	pushw  0xc(%di)
    8154:	66 51                	push   %cx
    8156:	66 57                	push   %di
    8158:	66 e8 f2 fe          	callw  804e <kernel_main+0xf1>
    815c:	ff                   	(bad)  
    815d:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8160:	c4 10                	les    (%eax),%edx
    8162:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8167:	66 5b                	pop    %bx
    8169:	66 5e                	pop    %si
    816b:	66 5f                	pop    %di
    816d:	66 5d                	pop    %bp
    816f:	66 c3                	retw   

00008171 <sys_putchar>:
    //"mov word ptr gs:[bp],ax\n\t"
                   //".att_syntax noprefix\n\t");
//}

void sys_putchar(int c, int color, int x, int y)
{
    8171:	66 55                	push   %bp
    8173:	66 89 e5             	mov    %sp,%bp
    8176:	66 53                	push   %bx
    int offset = (x * 80 + y)*2;
    uint16_t ch = c | (color << 8);
    8178:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    817d:	66 c1 e0 08          	shl    $0x8,%ax
    8181:	67 66 0b 45 08       	or     0x8(%di),%ax
    int offset = (x * 80 + y)*2;
    8186:	67 66 6b 5d 10 50    	imul   $0x50,0x10(%di),%bx
    818c:	67 66 03 5d 14       	add    0x14(%di),%bx
    8191:	66 01 db             	add    %bx,%bx
    "mov word ptr gs:[bp],ax\n\t"
    "popa\n\t"
    ".att_syntax noprefix\n\t"
    :
    :"a"(ch),"b"(offset)
    :"%ecx");
    8194:	66 60                	pushaw 
    8196:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    819b:	89 dd                	mov    %ebx,%ebp
    819d:	65 89 46 00          	mov    %eax,%gs:0x0(%esi)
    81a1:	66 61                	popaw  
}
    81a3:	66 5b                	pop    %bx
    81a5:	66 5d                	pop    %bp
    81a7:	66 c3                	retw   

000081a9 <sys_print_string>:
{
    81a9:	66 55                	push   %bp
    81ab:	66 89 e5             	mov    %sp,%bp
    81ae:	66 56                	push   %si
    81b0:	66 53                	push   %bx
    81b2:	67 66 8b 5d 14       	mov    0x14(%di),%bx
    81b7:	67 66 8b 75 0c       	mov    0xc(%di),%si
    81bc:	66 01 de             	add    %bx,%si
    81bf:	66 89 da             	mov    %bx,%dx
    for(unsigned int i = 0; i < len; ++i)
    81c2:	66 39 f2             	cmp    %si,%dx
    81c5:	74 28                	je     81ef <sys_print_string+0x46>
        sys_putchar(str[i], color, x, y + i);
    81c7:	66 52                	push   %dx
    81c9:	67 66 ff 75 10       	pushw  0x10(%di)
    81ce:	66 6a 07             	pushw  $0x7
    81d1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    81d6:	66 29 d8             	sub    %bx,%ax
    81d9:	67 66 0f be 04       	movsbw (%si),%ax
    81de:	10 66 50             	adc    %ah,0x50(%esi)
    81e1:	66 e8 8a ff          	callw  816f <sys_bios_print_int+0xa4>
    81e5:	ff                   	(bad)  
    81e6:	ff 66 42             	jmp    *0x42(%esi)
    for(unsigned int i = 0; i < len; ++i)
    81e9:	66 83 c4 10          	add    $0x10,%sp
    81ed:	eb d3                	jmp    81c2 <sys_print_string+0x19>
}
    81ef:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    81f4:	66 5b                	pop    %bx
    81f6:	66 5e                	pop    %si
    81f8:	66 5d                	pop    %bp
    81fa:	66 c3                	retw   

000081fc <sys_print_int>:
{
    81fc:	66 55                	push   %bp
    81fe:	66 89 e5             	mov    %sp,%bp
    8201:	66 57                	push   %di
    8203:	66 56                	push   %si
    8205:	66 53                	push   %bx
    8207:	66 50                	push   %ax
    int num_ = num;
    8209:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    820e:	66 b9 01 00          	mov    $0x1,%cx
    8212:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    8214:	66 bb 0a 00          	mov    $0xa,%bx
    8218:	00 00                	add    %al,(%eax)
    821a:	66 99                	cwtd   
    821c:	66 f7 fb             	idiv   %bx
    821f:	66 85 c0             	test   %ax,%ax
    8222:	74 04                	je     8228 <sys_print_int+0x2c>
    8224:	66 41                	inc    %cx
    8226:	eb f2                	jmp    821a <sys_print_int+0x1e>
    char arr[len + 1];
    8228:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    822d:	66 83 e0 fc          	and    $0xfffc,%ax
    8231:	66 29 c4             	sub    %ax,%sp
    8234:	66 89 e7             	mov    %sp,%di
    8237:	67 66 8d 1c          	lea    (%si),%bx
    823b:	0c 67                	or     $0x67,%al
    int power = 1;
    823d:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    8243:	00 00                	add    %al,(%eax)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    8245:	67 66 8b 45 08       	mov    0x8(%di),%ax
    824a:	66 99                	cwtd   
    824c:	67 66 f7 7d f0       	idivw  -0x10(%di)
    8251:	66 be 0a 00          	mov    $0xa,%si
    8255:	00 00                	add    %al,(%eax)
    8257:	66 99                	cwtd   
    8259:	66 f7 fe             	idiv   %si
    825c:	66 83 c2 30          	add    $0x30,%dx
    8260:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    8264:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    826a:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    826f:	66 4b                	dec    %bx
    8271:	66 39 df             	cmp    %bx,%di
    8274:	75 cf                	jne    8245 <sys_print_int+0x49>
    arr[len] = '\0';
    8276:	67 c6 04 0f          	movb   $0xf,(%si)
    827a:	00 67 66             	add    %ah,0x66(%edi)
    sys_print_string(arr, len, x, y); 
    827d:	ff 75 10             	pushl  0x10(%ebp)
    8280:	67 66 ff 75 0c       	pushw  0xc(%di)
    8285:	66 51                	push   %cx
    8287:	66 57                	push   %di
    8289:	66 e8 1a ff          	callw  81a7 <sys_putchar+0x36>
    828d:	ff                   	(bad)  
    828e:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8291:	c4 10                	les    (%eax),%edx
    8293:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8298:	66 5b                	pop    %bx
    829a:	66 5e                	pop    %si
    829c:	66 5f                	pop    %di
    829e:	66 5d                	pop    %bp
    82a0:	66 c3                	retw   

000082a2 <sys_bios_scroll_up>:

void sys_bios_scroll_up(int color)
{
    82a2:	66 55                	push   %bp
    82a4:	66 89 e5             	mov    %sp,%bp
    "movb $79, %%dl\n\t"
    "movb $0x06, %%ah\n\t"
    "int $0x10\n\t"
    "popa\n\t"
    :
    : "g"(color));
    82a7:	66 60                	pushaw 
    82a9:	b0 01                	mov    $0x1,%al
    82ab:	67 8a 7d 08          	mov    0x8(%di),%bh
    82af:	b5 00                	mov    $0x0,%ch
    82b1:	b1 00                	mov    $0x0,%cl
    82b3:	b6 18                	mov    $0x18,%dh
    82b5:	b2 4f                	mov    $0x4f,%dl
    82b7:	b4 06                	mov    $0x6,%ah
    82b9:	cd 10                	int    $0x10
    82bb:	66 61                	popaw  
}
    82bd:	66 5d                	pop    %bp
    82bf:	66 c3                	retw   

000082c1 <sys_bios_putchar>:

void sys_bios_putchar(char c, int color, int x, int y)
{
    82c1:	66 55                	push   %bp
    82c3:	66 89 e5             	mov    %sp,%bp
    82c6:	66 50                	push   %ax
    82c8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    82cd:	67 88 45 fc          	mov    %al,-0x4(%di)
    sys_bios_print_string(&c, 1, color, MAKE_POS(x, y));
    82d1:	67 66 8b 45 10       	mov    0x10(%di),%ax
    82d6:	66 c1 e0 08          	shl    $0x8,%ax
    82da:	67 66 0f b6 55 14    	movzbw 0x14(%di),%dx
    82e0:	66 09 d0             	or     %dx,%ax
    82e3:	66 50                	push   %ax
    82e5:	67 66 ff 75 0c       	pushw  0xc(%di)
    82ea:	66 6a 01             	pushw  $0x1
    82ed:	67 66 8d 45 fc       	lea    -0x4(%di),%ax
    82f2:	66 50                	push   %ax
    82f4:	66 e8 56 fd          	callw  804e <kernel_main+0xf1>
    82f8:	ff                   	(bad)  
    82f9:	ff 66 83             	jmp    *-0x7d(%esi)
}
    82fc:	c4 10                	les    (%eax),%edx
    82fe:	66 c9                	leavew 
    8300:	66 c3                	retw   

00008302 <sys_inb>:

uint8_t sys_inb(uint16_t port)
{
    8302:	66 55                	push   %bp
    8304:	66 89 e5             	mov    %sp,%bp
    uint8_t ret;
    asm volatile ( "inb %1, %0"
                   : "=a"(ret)
                   : "Nd"(port) );
    8307:	67 66 8b 55 08       	mov    0x8(%di),%dx
    830c:	ec                   	in     (%dx),%al
    return ret;
}
    830d:	66 5d                	pop    %bp
    830f:	66 c3                	retw   

00008311 <sys_outb>:
//    asm(".att_syntax noprefix\n");
//    return ret;
//}

void sys_outb(uint16_t port, uint8_t data)
{
    8311:	66 55                	push   %bp
    8313:	66 89 e5             	mov    %sp,%bp
    asm volatile ( "outb %0, %1"
                   : 
                   : "a"(data), "Nd"(port) );
    8316:	67 66 8b 55 08       	mov    0x8(%di),%dx
    831b:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8320:	ee                   	out    %al,(%dx)
}
    8321:	66 5d                	pop    %bp
    8323:	66 c3                	retw   

00008325 <sys_dbg_bochs_putc>:
//                    : "=a"(ret)
//                    : "Nd"(port) );
//     return ret;
// }

void sys_dbg_bochs_putc(char c){
    8325:	66 55                	push   %bp
    8327:	66 89 e5             	mov    %sp,%bp
                   : "a"(data), "Nd"(port) );
    832a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    832f:	e6 e9                	out    %al,$0xe9
    sys_outb(0xe9, (uint8_t)c);
}
    8331:	66 5d                	pop    %bp
    8333:	66 c3                	retw   

00008335 <sys_get_scancode>:

char sys_get_scancode()
{
    8335:	66 55                	push   %bp
    8337:	66 89 e5             	mov    %sp,%bp
                   : "Nd"(port) );
    833a:	e4 64                	in     $0x64,%al
    while (!(sys_inb(0x64) & 1));
    833c:	a8 01                	test   $0x1,%al
    833e:	74 fa                	je     833a <sys_get_scancode+0x5>
                   : "Nd"(port) );
    8340:	e4 60                	in     $0x60,%al
    return sys_inb(0x60);
}
    8342:	66 5d                	pop    %bp
    8344:	66 c3                	retw   

00008346 <sys_read_disk>:

void sys_read_disk(uint32_t segment, uint32_t address, uint16_t logical_start_sector, uint8_t secotr_cnt)
{
    8346:	66 55                	push   %bp
    8348:	66 89 e5             	mov    %sp,%bp
    834b:	66 53                	push   %bx
    uint8_t head = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) / FLOPPY_SECTOR_PER_TRACK;
    834d:	67 66 0f b7 45 10    	movzww 0x10(%di),%ax
    8353:	66 b9 24 00          	mov    $0x24,%cx
    8357:	00 00                	add    %al,(%eax)
    8359:	66 99                	cwtd   
    835b:	66 f7 f9             	idiv   %cx
    835e:	66 89 c1             	mov    %ax,%cx
    8361:	66 bb 12 00          	mov    $0x12,%bx
    8365:	00 00                	add    %al,(%eax)
    8367:	66 89 d0             	mov    %dx,%ax
    836a:	66 99                	cwtd   
    836c:	66 f7 fb             	idiv   %bx
    uint16_t cylinder = logical_start_sector / (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK);
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    //位操作一定要注意类型匹配（两小时）
    uint16_t mask1 = 255;
    uint16_t mask2 = 768;
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    836f:	66 89 cb             	mov    %cx,%bx
    8372:	66 c1 e3 08          	shl    $0x8,%bx
    8376:	66 81 e1 00 03       	and    $0x300,%cx
    837b:	00 00                	add    %al,(%eax)
    837d:	66 c1 f9 02          	sar    $0x2,%cx
    8381:	66 09 d9             	or     %bx,%cx
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    8384:	66 42                	inc    %dx
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    8386:	66 09 d1             	or     %dx,%cx
     "movb %4, %%al\n\t"    //扇区数
     "movb $0, %%dl\n\t"    //驱动器号
     "movb $2, %%ah\n\t"    //功能号
     "int $0x13\n\t"
     "pop %%es\n\t"
     : :"g"(segment), "g"(address), "g"(head), "g"(_cx), "g" (secotr_cnt));
    8389:	06                   	push   %es
    838a:	67 8b 5d 08          	mov    0x8(%di),%ebx
    838e:	8e c3                	mov    %ebx,%es
    8390:	67 8b 5d 0c          	mov    0xc(%di),%ebx
    8394:	88 c6                	mov    %al,%dh
    8396:	89 c9                	mov    %ecx,%ecx
    8398:	67 8a 45 14          	mov    0x14(%di),%al
    839c:	b2 00                	mov    $0x0,%dl
    839e:	b4 02                	mov    $0x2,%ah
    83a0:	cd 13                	int    $0x13
    83a2:	07                   	pop    %es
}
    83a3:	66 5b                	pop    %bx
    83a5:	66 5d                	pop    %bp
    83a7:	66 c3                	retw   

000083a9 <_Z6memcmpPKvS0_m>:
namespace hhlibc {

#endif

int memcmp(const void * _s1, const void* _s2, size_t n)
{
    83a9:	66 55                	push   %bp
    83ab:	66 89 e5             	mov    %sp,%bp
    83ae:	66 31 d2             	xor    %dx,%dx
    auto s1 = reinterpret_cast<const unsigned char*>(_s1);
    auto s2 = reinterpret_cast<const unsigned char*>(_s2);
    while(n--)
    83b1:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    83b6:	74 22                	je     83da <_Z6memcmpPKvS0_m+0x31>
    {
        if(*s1 != *s2)          //**不能**让!=时跳出然后返回*s1 - *s2
    83b8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    83bd:	67 66 0f b6 04       	movzbw (%si),%ax
    83c2:	10 66 42             	adc    %ah,0x42(%esi)
    83c5:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    83ca:	67 66 0f b6 4c 11    	movzbw 0x11(%si),%cx
    83d0:	ff                   	(bad)  
    83d1:	38 c8                	cmp    %cl,%al
    83d3:	74 dc                	je     83b1 <_Z6memcmpPKvS0_m+0x8>
        {                       //因为那样在实际上==的时候，会比较错误
            return *s1 - *s2;
    83d5:	66 29 c8             	sub    %cx,%ax
    83d8:	eb 03                	jmp    83dd <_Z6memcmpPKvS0_m+0x34>
        }
        ++s1;
        ++s2;
    }
    return 0;
    83da:	66 31 c0             	xor    %ax,%ax
}
    83dd:	66 5d                	pop    %bp
    83df:	66 c3                	retw   

000083e1 <_Z6memcpyPvPKvm>:

void* memcpy(void* _dst, const void* _src, size_t n)
{
    83e1:	66 55                	push   %bp
    83e3:	66 89 e5             	mov    %sp,%bp
    83e6:	66 53                	push   %bx
    83e8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    83ed:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    83f2:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    while (n--)
    83f5:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    83fa:	74 0c                	je     8408 <_Z6memcpyPvPKvm+0x27>
    {
        *(dst++) = *(src++);
    83fc:	67 8a 0c             	mov    (%si),%cl
    83ff:	13 67 88             	adc    -0x78(%edi),%esp
    8402:	0c 10                	or     $0x10,%al
    8404:	66 42                	inc    %dx
    while (n--)
    8406:	eb ed                	jmp    83f5 <_Z6memcpyPvPKvm+0x14>
    }
    return _dst;
}
    8408:	66 5b                	pop    %bx
    840a:	66 5d                	pop    %bp
    840c:	66 c3                	retw   

0000840e <_Z7memmovePvPKvm>:
void* memmove(void* _dst, const void* _src, size_t n)
{
    840e:	66 55                	push   %bp
    8410:	66 89 e5             	mov    %sp,%bp
    8413:	66 56                	push   %si
    8415:	66 53                	push   %bx
    8417:	67 66 8b 45 08       	mov    0x8(%di),%ax
    841c:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    8421:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    if(dst < src)
    8426:	66 39 d8             	cmp    %bx,%ax
    8429:	73 14                	jae    843f <_Z7memmovePvPKvm+0x31>
    842b:	66 31 c9             	xor    %cx,%cx
    {
        while(n--)
    842e:	66 39 f1             	cmp    %si,%cx
    8431:	74 20                	je     8453 <_Z7memmovePvPKvm+0x45>
        {
            *(dst++) = *(src++);
    8433:	67 8a 14             	mov    (%si),%dl
    8436:	0b 67 88             	or     -0x78(%edi),%esp
    8439:	14 08                	adc    $0x8,%al
    843b:	66 41                	inc    %cx
        while(n--)
    843d:	eb ef                	jmp    842e <_Z7memmovePvPKvm+0x20>
        }
    }
    else if(dst > src)
    843f:	76 12                	jbe    8453 <_Z7memmovePvPKvm+0x45>
    {
        src += n;
        dst += n;
        while(n--)
    8441:	66 4e                	dec    %si
    8443:	66 83 fe ff          	cmp    $0xffff,%si
    8447:	74 0a                	je     8453 <_Z7memmovePvPKvm+0x45>
        {
            *(--dst) = *(--src);
    8449:	67 8a 0c             	mov    (%si),%cl
    844c:	33 67 88             	xor    -0x78(%edi),%esp
    844f:	0c 30                	or     $0x30,%al
        while(n--)
    8451:	eb ee                	jmp    8441 <_Z7memmovePvPKvm+0x33>
        }
    }
    return _dst;
}
    8453:	66 5b                	pop    %bx
    8455:	66 5e                	pop    %si
    8457:	66 5d                	pop    %bp
    8459:	66 c3                	retw   

0000845b <_Z6memsetPvim>:
void* memset(void* _dst, int c, size_t n)
{
    845b:	66 55                	push   %bp
    845d:	66 89 e5             	mov    %sp,%bp
    8460:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8465:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    846a:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    while(n--)
    846d:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    8472:	74 08                	je     847c <_Z6memsetPvim+0x21>
    {
        *(dst++) = static_cast<unsigned char>(c);
    8474:	67 88 0c             	mov    %cl,(%si)
    8477:	10 66 42             	adc    %ah,0x42(%esi)
    while(n--)
    847a:	eb f1                	jmp    846d <_Z6memsetPvim+0x12>
    }
    return _dst;
}
    847c:	66 5d                	pop    %bp
    847e:	66 c3                	retw   

00008480 <_Z6strlenPKc>:
size_t strlen(const char* _str)
{
    8480:	66 55                	push   %bp
    8482:	66 89 e5             	mov    %sp,%bp
    8485:	67 66 8b 55 08       	mov    0x8(%di),%dx
    auto str = _str;
    size_t len = 0;
    848a:	66 31 c0             	xor    %ax,%ax
    while(*(_str++))
    848d:	67 80 3c 02          	cmpb   $0x2,(%si)
    8491:	00 74 04 66          	add    %dh,0x66(%esp,%eax,1)
    {
        len++;
    8495:	40                   	inc    %eax
    while(*(_str++))
    8496:	eb f5                	jmp    848d <_Z6strlenPKc+0xd>
    }
    return len;
}
    8498:	66 5d                	pop    %bp
    849a:	66 c3                	retw   

0000849c <_Z6strcpyPcPKc>:
char *strcpy(char* _dst, const char* _src)
{
    849c:	66 55                	push   %bp
    849e:	66 89 e5             	mov    %sp,%bp
    84a1:	66 56                	push   %si
    84a3:	66 53                	push   %bx
    84a5:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    84aa:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    auto len = strlen(_src);
    84af:	66 51                	push   %cx
    84b1:	66 e8 c9 ff          	callw  847e <_Z6memsetPvim+0x23>
    84b5:	ff                   	(bad)  
    84b6:	ff 66 89             	jmp    *-0x77(%esi)
    84b9:	c6                   	(bad)  
    memcpy(reinterpret_cast<void*>(_dst), reinterpret_cast<const void *>(_src), len);
    84ba:	67 66 89 04          	mov    %ax,(%si)
    84be:	24 66                	and    $0x66,%al
    84c0:	51                   	push   %ecx
    84c1:	66 53                	push   %bx
    84c3:	66 e8 18 ff          	callw  83df <_Z6memcmpPKvS0_m+0x36>
    84c7:	ff                   	(bad)  
    84c8:	ff 67 c6             	jmp    *-0x3a(%edi)
    _dst[len] = '\0';
    84cb:	04 33                	add    $0x33,%al
    84cd:	00 66 89             	add    %ah,-0x77(%esi)
    return _dst;
}
    84d0:	d8 67 66             	fsubs  0x66(%edi)
    84d3:	8d 65 f8             	lea    -0x8(%ebp),%esp
    84d6:	66 5b                	pop    %bx
    84d8:	66 5e                	pop    %si
    84da:	66 5d                	pop    %bp
    84dc:	66 c3                	retw   

000084de <_Z6strcmpPKcS0_>:
int strcmp(const char* _s1, const char* _s2)
{
    84de:	66 55                	push   %bp
    84e0:	66 89 e5             	mov    %sp,%bp
    84e3:	66 57                	push   %di
    84e5:	66 56                	push   %si
    84e7:	66 53                	push   %bx
    84e9:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    84ee:	67 66 8b 7d 0c       	mov    0xc(%di),%di
    auto len1 = strlen(_s1);
    84f3:	66 51                	push   %cx
    84f5:	66 e8 85 ff          	callw  847e <_Z6memsetPvim+0x23>
    84f9:	ff                   	(bad)  
    84fa:	ff 66 89             	jmp    *-0x77(%esi)
    84fd:	c3                   	ret    
    auto len2 = strlen(_s2);
    84fe:	67 66 89 3c          	mov    %di,(%si)
    8502:	24 66                	and    $0x66,%al
    8504:	e8 77 ff ff ff       	call   8480 <_Z6strlenPKc>
    8509:	66 5a                	pop    %dx
    850b:	66 89 c6             	mov    %ax,%si
    auto len = len1 < len2 ? len1 : len2;
    auto ret = memcmp(reinterpret_cast<const void*>(_s1), reinterpret_cast<const void *>(_s2), len);
    850e:	66 39 c3             	cmp    %ax,%bx
    8511:	77 03                	ja     8516 <_Z6strcmpPKcS0_+0x38>
    8513:	66 89 d8             	mov    %bx,%ax
    8516:	66 50                	push   %ax
    8518:	66 57                	push   %di
    851a:	66 51                	push   %cx
    851c:	66 e8 87 fe          	callw  83a7 <sys_read_disk+0x61>
    8520:	ff                   	(bad)  
    8521:	ff 66 83             	jmp    *-0x7d(%esi)
    8524:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    if(ret == 0)
    8527:	85 c0                	test   %eax,%eax
    8529:	75 11                	jne    853c <_Z6strcmpPKcS0_+0x5e>
    {
        if(len1 == len2)
    852b:	66 39 f3             	cmp    %si,%bx
    852e:	74 0c                	je     853c <_Z6strcmpPKcS0_+0x5e>
        {
            return -1;
        }
        else
        {
            return 1;
    8530:	66 39 de             	cmp    %bx,%si
    8533:	66 19 c0             	sbb    %ax,%ax
    8536:	66 83 e0 02          	and    $0x2,%ax
    853a:	66 48                	dec    %ax
        }
    }
    return ret;
}
    853c:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8541:	66 5b                	pop    %bx
    8543:	66 5e                	pop    %si
    8545:	66 5f                	pop    %di
    8547:	66 5d                	pop    %bp
    8549:	66 c3                	retw   

0000854b <_Z7reversePc>:

void reverse(char* buffer)
{
    854b:	66 55                	push   %bp
    854d:	66 89 e5             	mov    %sp,%bp
    8550:	66 56                	push   %si
    8552:	66 53                	push   %bx
    8554:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    char ch;
    size_t len = strlen(buffer);
    8559:	66 51                	push   %cx
    855b:	66 e8 1f ff          	callw  847e <_Z6memsetPvim+0x23>
    855f:	ff                   	(bad)  
    8560:	ff 66 5a             	jmp    *0x5a(%esi)
    8563:	66 89 ca             	mov    %cx,%dx
    8566:	67 66 8d 0c          	lea    (%si),%cx
    856a:	01 66 d1             	add    %esp,-0x2f(%esi)
    for(size_t i = 0; i < len / 2; ++i)
    856d:	e8 67 66 8d 34       	call   348debd9 <_GLOBAL_OFFSET_TABLE_+0x348d3d0d>
    8572:	10 66 49             	adc    %ah,0x49(%esi)
    8575:	66 39 f2             	cmp    %si,%dx
    8578:	74 10                	je     858a <_Z7reversePc+0x3f>
    {
        ch = *(buffer + i);
    857a:	67 8a 1a             	mov    (%bp,%si),%bl
        *(buffer + i) = *(buffer + len - 1 - i);
    857d:	67 8a 01             	mov    (%bx,%di),%al
    8580:	67 88 02             	mov    %al,(%bp,%si)
        *(buffer + len - 1 - i)  = ch;
    8583:	67 88 19             	mov    %bl,(%bx,%di)
    8586:	66 42                	inc    %dx
    for(size_t i = 0; i < len / 2; ++i)
    8588:	eb e9                	jmp    8573 <_Z7reversePc+0x28>
    }
}
    858a:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    858f:	66 5b                	pop    %bx
    8591:	66 5e                	pop    %si
    8593:	66 5d                	pop    %bp
    8595:	66 c3                	retw   

00008597 <_Z7isspacei>:
namespace hhlibc {

#endif

int isspace( int ch )
{
    8597:	66 55                	push   %bp
    8599:	66 89 e5             	mov    %sp,%bp
    859c:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return (ch == 9 || ch == 32 || (ch >= 10 && ch <= 13));
    85a1:	67 66 8d 42 f7       	lea    -0x9(%bp,%si),%ax
    85a6:	66 83 f8 04          	cmp    $0x4,%ax
    85aa:	0f 96 c0             	setbe  %al
    85ad:	66 83 fa 20          	cmp    $0x20,%dx
    85b1:	0f 94 c2             	sete   %dl
    85b4:	66 09 d0             	or     %dx,%ax
    85b7:	66 0f b6 c0          	movzbw %al,%ax
}
    85bb:	66 5d                	pop    %bp
    85bd:	66 c3                	retw   

000085bf <_Z7isalnumi>:

int isalnum(int ch)
{
    85bf:	66 55                	push   %bp
    85c1:	66 89 e5             	mov    %sp,%bp
    85c4:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return ((ch >= 48 && ch <= 57) || (ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122));
    85c9:	67 66 8d 4a d0       	lea    -0x30(%bp,%si),%cx
    85ce:	b0 01                	mov    $0x1,%al
    85d0:	66 83 f9 09          	cmp    $0x9,%cx
    85d4:	76 0f                	jbe    85e5 <_Z7isalnumi+0x26>
    85d6:	66 83 e2 df          	and    $0xffdf,%dx
    85da:	66 83 ea 41          	sub    $0x41,%dx
    85de:	66 83 fa 19          	cmp    $0x19,%dx
    85e2:	0f 96 c0             	setbe  %al
    85e5:	66 0f b6 c0          	movzbw %al,%ax
}
    85e9:	66 5d                	pop    %bp
    85eb:	66 c3                	retw   

000085ed <_Z7isdigiti>:

int isdigit(int ch)
{
    85ed:	66 55                	push   %bp
    85ef:	66 89 e5             	mov    %sp,%bp
    return (ch >= 48 && ch <= 57);
    85f2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    85f7:	66 83 e8 30          	sub    $0x30,%ax
    85fb:	66 83 f8 09          	cmp    $0x9,%ax
    85ff:	0f 96 c0             	setbe  %al
    8602:	66 0f b6 c0          	movzbw %al,%ax
}
    8606:	66 5d                	pop    %bp
    8608:	66 c3                	retw   

0000860a <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0>:
    if(base == 0 && !auto_detected)
    {
        base = 10;
        auto_detected = true;
    }
    auto char_to_digit = [](auto ch){
    860a:	66 55                	push   %bp
    860c:	66 89 e5             	mov    %sp,%bp
    860f:	66 89 c2             	mov    %ax,%dx
        int digit;
        if(ch >= '0' && ch <= '9')
    8612:	66 83 e8 30          	sub    $0x30,%ax
    8616:	3c 09                	cmp    $0x9,%al
    8618:	77 0b                	ja     8625 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x1b>
            digit = ch - '0';
    861a:	66 0f be d2          	movsbw %dl,%dx
    861e:	67 66 8d 42 d0       	lea    -0x30(%bp,%si),%ax
    8623:	eb 2b                	jmp    8650 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='A' && ch <= 'F')
    8625:	67 66 8d 42 bf       	lea    -0x41(%bp,%si),%ax
    862a:	3c 05                	cmp    $0x5,%al
    862c:	77 0b                	ja     8639 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x2f>
            digit = ch - 'A' + 10;
    862e:	66 0f be d2          	movsbw %dl,%dx
    8632:	67 66 8d 42 c9       	lea    -0x37(%bp,%si),%ax
    8637:	eb 17                	jmp    8650 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='a' && ch <= 'f')
    8639:	67 66 8d 4a 9f       	lea    -0x61(%bp,%si),%cx
            digit = ch - 'a' + 10;
        else
            digit = -1;
    863e:	66 83 c8 ff          	or     $0xffff,%ax
        else if(ch >='a' && ch <= 'f')
    8642:	80 f9 05             	cmp    $0x5,%cl
    8645:	77 09                	ja     8650 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
            digit = ch - 'a' + 10;
    8647:	66 0f be d2          	movsbw %dl,%dx
    864b:	67 66 8d 42 a9       	lea    -0x57(%bp,%si),%ax
        return digit;
    };
    8650:	66 5d                	pop    %bp
    8652:	66 c3                	retw   

00008654 <_Z6strtolPKcPPci>:
{
    8654:	66 55                	push   %bp
    8656:	66 89 e5             	mov    %sp,%bp
    8659:	66 57                	push   %di
    865b:	66 56                	push   %si
    865d:	66 53                	push   %bx
    865f:	66 83 ec 0c          	sub    $0xc,%sp
    8663:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto start = str;   
    8668:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    while(isspace(*start))
    866d:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    8672:	66 50                	push   %ax
    8674:	66 e8 1d ff          	callw  8595 <_Z7reversePc+0x4a>
    8678:	ff                   	(bad)  
    8679:	ff 66 5f             	jmp    *0x5f(%esi)
    867c:	66 85 c0             	test   %ax,%ax
    867f:	74 04                	je     8685 <_Z6strtolPKcPPci+0x31>
        ++start;
    8681:	66 43                	inc    %bx
    while(isspace(*start))
    8683:	eb e8                	jmp    866d <_Z6strtolPKcPPci+0x19>
    size_t len_num = strlen(start);//非白空格数字串长度
    8685:	66 53                	push   %bx
    8687:	66 e8 f3 fd          	callw  847e <_Z6memsetPvim+0x23>
    868b:	ff                   	(bad)  
    868c:	ff 66 59             	jmp    *0x59(%esi)
    if(len_num == 0)
    868f:	66 85 c0             	test   %ax,%ax
    8692:	75 1e                	jne    86b2 <_Z6strtolPKcPPci+0x5e>
        return 0;
    8694:	66 31 c0             	xor    %ax,%ax
        if(str_end) *str_end = const_cast<char*>(str);
    8697:	67 66 83 7d 0c 00    	cmpw   $0x0,0xc(%di)
    869d:	0f 84 4d 01 67 66    	je     666787f0 <_GLOBAL_OFFSET_TABLE_+0x6666d924>
    86a3:	8b 7d 0c             	mov    0xc(%ebp),%edi
    86a6:	67 66 8b 75 08       	mov    0x8(%di),%si
    86ab:	67 66 89 37          	mov    %si,(%bx)
    86af:	e9 3c 01 67 8a       	jmp    8a6787f0 <_GLOBAL_OFFSET_TABLE_+0x8a66d924>
    if(*high == '+' || *high == '-')
    86b4:	13 80 fa 2b 74 10    	adc    0x10742bfa(%eax),%eax
    86ba:	80 fa 2d             	cmp    $0x2d,%dl
    86bd:	75 21                	jne    86e0 <_Z6strtolPKcPPci+0x8c>
        sign = (*high == '+') ? 1 : -1;
    86bf:	67 66 c7 45 f0 ff ff 	movw   $0xffff,-0x10(%di)
    86c6:	ff                   	(bad)  
    86c7:	ff                   	(bad)  
    86c8:	eb 09                	jmp    86d3 <_Z6strtolPKcPPci+0x7f>
    86ca:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    86d1:	00 00                	add    %al,(%eax)
        ++high;
    86d3:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
        sign_char_bit = 1;
    86d8:	66 ba 01 00          	mov    $0x1,%dx
    86dc:	00 00                	add    %al,(%eax)
    86de:	eb 0f                	jmp    86ef <_Z6strtolPKcPPci+0x9b>
    86e0:	66 89 df             	mov    %bx,%di
    size_t sign_char_bit = 0;
    86e3:	66 31 d2             	xor    %dx,%dx
    int sign = 1;
    86e6:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    86ed:	00 00                	add    %al,(%eax)
    if(base == 16 || (base == 0 && !auto_detected))
    86ef:	66 f7 c6 ef ff       	test   $0xffef,%si
    86f4:	ff                   	(bad)  
    86f5:	ff 75 29             	pushl  0x29(%ebp)
        if(len_num > 1 + sign_char_bit && 
    86f8:	67 66 8d 4a 01       	lea    0x1(%bp,%si),%cx
    86fd:	66 39 c1             	cmp    %ax,%cx
    8700:	73 1f                	jae    8721 <_Z6strtolPKcPPci+0xcd>
    8702:	67 80 3f 30          	cmpb   $0x30,(%bx)
    8706:	75 19                	jne    8721 <_Z6strtolPKcPPci+0xcd>
           (*(high + 1) == 'x' || *(high + 1) == 'X'))
    8708:	67 8a 4f 01          	mov    0x1(%bx),%cl
    870c:	66 83 e1 df          	and    $0xffdf,%cx
    8710:	80 f9 58             	cmp    $0x58,%cl
    8713:	75 0c                	jne    8721 <_Z6strtolPKcPPci+0xcd>
             high += 2;
    8715:	66 83 c7 02          	add    $0x2,%di
             base = 16;
    8719:	66 be 10 00          	mov    $0x10,%si
    871d:	00 00                	add    %al,(%eax)
    871f:	eb 2b                	jmp    874c <_Z6strtolPKcPPci+0xf8>
    if(base == 8 || (base == 0 && !auto_detected))
    8721:	66 83 fe 08          	cmp    $0x8,%si
    8725:	74 05                	je     872c <_Z6strtolPKcPPci+0xd8>
    8727:	66 85 f6             	test   %si,%si
    872a:	75 20                	jne    874c <_Z6strtolPKcPPci+0xf8>
        if(len_num > sign_char_bit && *high == 0)   //存在八进制前缀0
    872c:	66 39 c2             	cmp    %ax,%dx
    872f:	73 10                	jae    8741 <_Z6strtolPKcPPci+0xed>
    8731:	67 80 3f 00          	cmpb   $0x0,(%bx)
    8735:	75 0a                	jne    8741 <_Z6strtolPKcPPci+0xed>
            high += 1;
    8737:	66 47                	inc    %di
            base = 8;
    8739:	66 be 08 00          	mov    $0x8,%si
    873d:	00 00                	add    %al,(%eax)
    873f:	eb 0b                	jmp    874c <_Z6strtolPKcPPci+0xf8>
    if(base == 0 && !auto_detected)
    8741:	66 85 f6             	test   %si,%si
    8744:	75 06                	jne    874c <_Z6strtolPKcPPci+0xf8>
        base = 10;
    8746:	66 be 0a 00          	mov    $0xa,%si
    874a:	00 00                	add    %al,(%eax)
    bool has_vaild_char = false;
    874c:	67 c6 45 ec 00       	movb   $0x0,-0x14(%di)
    auto low = start;   
    //使low指向数字低位后的一个位置
    while(!isspace(*low) &&             //判断是否是白空格
    8751:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    8756:	66 50                	push   %ax
    8758:	66 e8 39 fe          	callw  8595 <_Z7reversePc+0x4a>
    875c:	ff                   	(bad)  
    875d:	ff 66 5a             	jmp    *0x5a(%esi)
          (*low != '\0') &&             //判断是否字符串结束
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    8760:	66 85 c0             	test   %ax,%ax
    8763:	75 28                	jne    878d <_Z6strtolPKcPPci+0x139>
          (*low != '\0') &&             //判断是否字符串结束
    8765:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    while(!isspace(*low) &&             //判断是否是白空格
    876a:	84 c0                	test   %al,%al
    876c:	74 1f                	je     878d <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    876e:	66 e8 96 fe          	callw  8608 <_Z7isdigiti+0x1b>
    8772:	ff                   	(bad)  
    8773:	ff 66 83             	jmp    *-0x7d(%esi)
          (*low != '\0') &&             //判断是否字符串结束
    8776:	f8                   	clc    
    8777:	ff 0f                	decl   (%edi)
    8779:	95                   	xchg   %eax,%ebp
    877a:	c2 66 39             	ret    $0x3966
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    877d:	f0 0f 9c c0          	lock setl %al
    8781:	20 c2                	and    %al,%dl
    8783:	74 08                	je     878d <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) < base    //判断是否是该进制
          )
    {
        ++low;
    8785:	66 43                	inc    %bx
        has_vaild_char = true;
    8787:	67 88 55 ec          	mov    %dl,-0x14(%di)
    while(!isspace(*low) &&             //判断是否是白空格
    878b:	eb c4                	jmp    8751 <_Z6strtolPKcPPci+0xfd>
    }
    if(!has_vaild_char)
    878d:	67 80 7d ec 00       	cmpb   $0x0,-0x14(%di)
    8792:	0f 84 fe fe 67 66    	je     66688696 <_GLOBAL_OFFSET_TABLE_+0x6667d7ca>
        if (str_end) *str_end = const_cast<char*>(str);
        return 0;
    }
    long power = 1;
    long ret = 0;
    if(str_end) *str_end = const_cast<char*>(low);
    8798:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
    879c:	74 09                	je     87a7 <_Z6strtolPKcPPci+0x153>
    879e:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    87a3:	67 66 89 18          	mov    %bx,(%bx,%si)
    for(auto p = low - 1; p >= high; --p)
    87a7:	66 4b                	dec    %bx
    long ret = 0;
    87a9:	66 31 c9             	xor    %cx,%cx
    long power = 1;
    87ac:	66 ba 01 00          	mov    $0x1,%dx
    87b0:	00 00                	add    %al,(%eax)
    87b2:	67 66 89 55 e8       	mov    %dx,-0x18(%di)
    for(auto p = low - 1; p >= high; --p)
    87b7:	66 39 fb             	cmp    %di,%bx
    87ba:	72 29                	jb     87e5 <_Z6strtolPKcPPci+0x191>
    87bc:	67 66 89 4d ec       	mov    %cx,-0x14(%di)
    {
        int digit = char_to_digit(*p);
    87c1:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    87c6:	66 e8 3e fe          	callw  8608 <_Z7isdigiti+0x1b>
    87ca:	ff                   	(bad)  
    87cb:	ff 67 66             	jmp    *0x66(%edi)
        ret += power * digit;
    87ce:	8b 55 e8             	mov    -0x18(%ebp),%edx
    87d1:	66 0f af c2          	imul   %dx,%ax
    87d5:	67 66 8b 4d ec       	mov    -0x14(%di),%cx
    87da:	66 01 c1             	add    %ax,%cx
        
        power *= base;
    87dd:	66 0f af d6          	imul   %si,%dx
    for(auto p = low - 1; p >= high; --p)
    87e1:	66 4b                	dec    %bx
    87e3:	eb cd                	jmp    87b2 <_Z6strtolPKcPPci+0x15e>
    }
    ret *= sign;
    87e5:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    87ea:	66 0f af c1          	imul   %cx,%ax
    return ret;
}
    87ee:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    87f3:	66 5b                	pop    %bx
    87f5:	66 5e                	pop    %si
    87f7:	66 5f                	pop    %di
    87f9:	66 5d                	pop    %bp
    87fb:	66 c3                	retw   

000087fd <_ZL19system_call_putchari>:
    int mask = 0x00FF;
    ret = ret & mask;
    return ret;
}
static inline void system_call_putchar(int ch)
{
    87fd:	66 55                	push   %bp
    87ff:	66 89 e5             	mov    %sp,%bp
    8802:	66 53                	push   %bx
    8804:	66 89 c2             	mov    %ax,%dx
            "movw %%bx, %%es\n\t"

    :
    :"r"(c)
    :"%eax", "ebx"
    );
    8807:	88 d0                	mov    %dl,%al
    8809:	b4 01                	mov    $0x1,%ah
    880b:	8c d3                	mov    %ss,%ebx
    880d:	8e e3                	mov    %ebx,%fs
    880f:	bb 00 00 8e d3       	mov    $0xd38e0000,%ebx
    8814:	8e db                	mov    %ebx,%ds
    8816:	8e c3                	mov    %ebx,%es
    8818:	cd 98                	int    $0x98
    881a:	8c e3                	mov    %fs,%ebx
    881c:	8e d3                	mov    %ebx,%ss
    881e:	8e db                	mov    %ebx,%ds
    8820:	8e c3                	mov    %ebx,%es
}
    8822:	66 5b                	pop    %bx
    8824:	66 5d                	pop    %bp
    8826:	66 c3                	retw   

00008828 <_Z7putchari>:
namespace hhlibc {

#endif
#ifndef _HHOS_LIBC_TEST
int putchar( int ch )
{
    8828:	66 55                	push   %bp
    882a:	66 89 e5             	mov    %sp,%bp
    882d:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    //sys_get_current_tty()->putchar(ch);
    system_call_putchar(ch);
    8832:	66 89 c8             	mov    %cx,%ax
    8835:	66 e8 c2 ff          	callw  87fb <_Z6strtolPKcPPci+0x1a7>
    8839:	ff                   	(bad)  
    883a:	ff 66 89             	jmp    *-0x77(%esi)
    //sys_tty_putchar(ch);
    return ch;
}
    883d:	c8 66 5d 66          	enter  $0x5d66,$0x66
    8841:	c3                   	ret    

00008842 <_Z4putsPKc>:

int puts(const char* string)
{
    8842:	66 55                	push   %bp
    8844:	66 89 e5             	mov    %sp,%bp
    8847:	66 53                	push   %bx
    8849:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    auto len = strlen(string);
    884e:	66 53                	push   %bx
    8850:	66 e8 2a fc          	callw  847e <_Z6memsetPvim+0x23>
    8854:	ff                   	(bad)  
    8855:	ff 66 89             	jmp    *-0x77(%esi)
    8858:	d9 67 66             	fldenv 0x66(%edi)
    885b:	8d 1c 03             	lea    (%ebx,%eax,1),%ebx
    885e:	66 58                	pop    %ax
    for(size_t i = 0; i < len; ++i)
    8860:	66 39 d9             	cmp    %bx,%cx
    8863:	74 0f                	je     8874 <_Z4putsPKc+0x32>
    {
        putchar(*(string + i));
    8865:	67 66 0f be 01       	movsbw (%bx,%di),%ax
    system_call_putchar(ch);
    886a:	66 e8 8d ff          	callw  87fb <_Z6strtolPKcPPci+0x1a7>
    886e:	ff                   	(bad)  
    886f:	ff 66 41             	jmp    *0x41(%esi)
    for(size_t i = 0; i < len; ++i)
    8872:	eb ec                	jmp    8860 <_Z4putsPKc+0x1e>
    }
    return 0;
}
    8874:	66 31 c0             	xor    %ax,%ax
    8877:	67 66 8b 5d fc       	mov    -0x4(%di),%bx
    887c:	66 c9                	leavew 
    887e:	66 c3                	retw   

00008880 <_Z7getcharv>:
#endif


#ifndef _HHOS_LIBC_TEST
int getchar(void)
{
    8880:	66 55                	push   %bp
    8882:	66 89 e5             	mov    %sp,%bp
    );
    8885:	b4 00                	mov    $0x0,%ah
    8887:	cd 98                	int    $0x98
    8889:	66 89 c2             	mov    %ax,%dx
    ret = ret & mask;
    888c:	66 0f b6 c2          	movzbw %dl,%ax
    return system_call_getchar();
}
    8890:	66 5d                	pop    %bp
    8892:	66 c3                	retw   

00008894 <_Z4getsPc>:
char *gets( char *str )
{
    8894:	66 55                	push   %bp
    8896:	66 89 e5             	mov    %sp,%bp
    8899:	66 53                	push   %bx
    889b:	66 51                	push   %cx
    889d:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    );
    88a2:	b4 00                	mov    $0x0,%ah
    88a4:	cd 98                	int    $0x98
    88a6:	66 89 c3             	mov    %ax,%bx
    int cnt = 0;
    char ch;
    while(true)
    {
        ch = getchar();
        if (ch == '\b')
    88a9:	80 fb 08             	cmp    $0x8,%bl
    88ac:	74 f4                	je     88a2 <_Z4getsPc+0xe>
        {
            if (cnt > 0)
                putchar(ch);
            continue;
        }
        putchar(ch);
    88ae:	66 0f be c3          	movsbw %bl,%ax
    88b2:	67 88 5d fb          	mov    %bl,-0x5(%di)
    system_call_putchar(ch);
    88b6:	66 e8 41 ff          	callw  87fb <_Z6strtolPKcPPci+0x1a7>
    88ba:	ff                   	(bad)  
    88bb:	ff 67 8a             	jmp    *-0x76(%edi)
        if(ch == 13) {
    88be:	55                   	push   %ebp
    88bf:	fb                   	sti    
    88c0:	80 fa 0d             	cmp    $0xd,%dl
    88c3:	74 08                	je     88cd <_Z4getsPc+0x39>
            putchar('\n');
            break;
        }
        *(str++) = ch;
    88c5:	66 41                	inc    %cx
    88c7:	67 88 59 ff          	mov    %bl,-0x1(%bx,%di)
    88cb:	eb d5                	jmp    88a2 <_Z4getsPc+0xe>
    system_call_putchar(ch);
    88cd:	66 b8 0a 00          	mov    $0xa,%ax
    88d1:	00 00                	add    %al,(%eax)
    88d3:	66 e8 24 ff          	callw  87fb <_Z6strtolPKcPPci+0x1a7>
    88d7:	ff                   	(bad)  
    88d8:	ff 67 c6             	jmp    *-0x3a(%edi)
    }
    *str = '\0';
    88db:	01 00                	add    %eax,(%eax)
    return str;
}
    88dd:	66 89 c8             	mov    %cx,%ax
    88e0:	66 5a                	pop    %dx
    88e2:	66 5b                	pop    %bx
    88e4:	66 5d                	pop    %bp
    88e6:	66 c3                	retw   

000088e8 <_Z7vsscanfPKcS0_Pc>:
#endif

int vsscanf( const char* buffer, const char* format, va_list vlist )
{
    88e8:	66 55                	push   %bp
    88ea:	66 89 e5             	mov    %sp,%bp
    88ed:	66 57                	push   %di
    88ef:	66 56                	push   %si
    88f1:	66 53                	push   %bx
    88f3:	66 83 ec 14          	sub    $0x14,%sp
    88f7:	67 66 8b 75 08       	mov    0x8(%di),%si
    88fc:	67 66 8b 7d 10       	mov    0x10(%di),%di
    auto len_fmt = strlen(format);
    8901:	67 66 ff 75 0c       	pushw  0xc(%di)
    8906:	66 e8 74 fb          	callw  847e <_Z6memsetPvim+0x23>
    890a:	ff                   	(bad)  
    890b:	ff 67 66             	jmp    *0x66(%edi)
    890e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    8911:	66 59                	pop    %cx
    auto p_fmt = format; 
    8913:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8918:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    auto p_buf = buffer;
    bool error = false;
    int ret = 0;
    891d:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    8924:	00 00                	add    %al,(%eax)
    bool error = false;
    8926:	67 c6 45 e7 00       	movb   $0x0,-0x19(%di)
    while(static_cast<size_t>(p_fmt - format) < len_fmt)
    892b:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    8930:	67 66 2b 45 0c       	sub    0xc(%di),%ax
    8935:	67 66 3b 45 e0       	cmp    -0x20(%di),%ax
    893a:	0f 93 c0             	setae  %al
    {
        if(error) break;
    893d:	67 08 45 e7          	or     %al,-0x19(%di)
    8941:	0f 85 50 01 67 66    	jne    66678a97 <_GLOBAL_OFFSET_TABLE_+0x6666dbcb>
        if(isspace(*p_fmt)) //略过白空格
    8947:	8b 45 e8             	mov    -0x18(%ebp),%eax
    894a:	67 66 0f be 00       	movsbw (%bx,%si),%ax
    894f:	66 50                	push   %ax
    8951:	66 e8 40 fc          	callw  8595 <_Z7reversePc+0x4a>
    8955:	ff                   	(bad)  
    8956:	ff 66 5a             	jmp    *0x5a(%esi)
    8959:	66 85 c0             	test   %ax,%ax
    895c:	74 1d                	je     897b <_Z7vsscanfPKcS0_Pc+0x93>
        {
            p_fmt++;
    895e:	67 66 ff 45 e8       	incw   -0x18(%di)
            while(isspace(*buffer)) buffer++;
    8963:	67 66 0f be 06 66 50 	movsbw 0x5066,%ax
    896a:	66 e8 27 fc          	callw  8595 <_Z7reversePc+0x4a>
    896e:	ff                   	(bad)  
    896f:	ff 66 5b             	jmp    *0x5b(%esi)
    8972:	66 85 c0             	test   %ax,%ax
    8975:	74 b4                	je     892b <_Z7vsscanfPKcS0_Pc+0x43>
    8977:	66 46                	inc    %si
    8979:	eb e8                	jmp    8963 <_Z7vsscanfPKcS0_Pc+0x7b>
            continue;
        }
        else if(*p_fmt == '%') //格式控制符
    897b:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    8980:	67 80 38 25          	cmpb   $0x25,(%bx,%si)
    8984:	75 a5                	jne    892b <_Z7vsscanfPKcS0_Pc+0x43>
        {
            p_fmt++;
            char specifier = *p_fmt;
    8986:	67 8a 40 01          	mov    0x1(%bx,%si),%al
            p_fmt++;
    898a:	67 66 83 45 e8 02    	addw   $0x2,-0x18(%di)
            switch(specifier)
    8990:	3c 69                	cmp    $0x69,%al
    8992:	0f 84 b0 00 7f 25    	je     257f8a48 <_GLOBAL_OFFSET_TABLE_+0x257edb7c>
    8998:	3c 58                	cmp    $0x58,%al
    899a:	0f 84 c4 00 7f 10    	je     107f8a64 <_GLOBAL_OFFSET_TABLE_+0x107edb98>
    89a0:	3c 25                	cmp    $0x25,%al
    89a2:	75 87                	jne    892b <_Z7vsscanfPKcS0_Pc+0x43>
            {
                case '%':
                {
                    if(*buffer == '%') 
    89a4:	67 80 3e 25 67 0f    	cmpb   $0xf,0x6725
    89aa:	95                   	xchg   %eax,%ebp
    89ab:	45                   	inc    %ebp
    89ac:	e7 e9                	out    %eax,$0xe9
    89ae:	7b ff                	jnp    89af <_Z7vsscanfPKcS0_Pc+0xc7>
            switch(specifier)
    89b0:	3c 63                	cmp    $0x63,%al
    89b2:	74 31                	je     89e5 <_Z7vsscanfPKcS0_Pc+0xfd>
    89b4:	3c 64                	cmp    $0x64,%al
    89b6:	0f 84 9a 00 e9 6e    	je     6ee98a56 <_GLOBAL_OFFSET_TABLE_+0x6ee8db8a>
    89bc:	ff                   	(bad)  
    89bd:	3c 73                	cmp    $0x73,%al
    89bf:	74 4d                	je     8a0e <_Z7vsscanfPKcS0_Pc+0x126>
    89c1:	7f 15                	jg     89d8 <_Z7vsscanfPKcS0_Pc+0xf0>
    89c3:	3c 6f                	cmp    $0x6f,%al
    89c5:	0f 85 62 ff 67 66    	jne    6668892d <_GLOBAL_OFFSET_TABLE_+0x6667da61>
                    ++ret;
                    break;
                }
                case 'o':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    89cb:	8d 5f 04             	lea    0x4(%edi),%ebx
    89ce:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 8);
    89d2:	66 6a 08             	pushw  $0x8
    89d5:	e9 96 00 3c 75       	jmp    753c8a70 <_GLOBAL_OFFSET_TABLE_+0x753bdba4>
            switch(specifier)
    89da:	74 78                	je     8a54 <_Z7vsscanfPKcS0_Pc+0x16c>
    89dc:	3c 78                	cmp    $0x78,%al
    89de:	0f 84 80 00 e9 46    	je     46e98a64 <_GLOBAL_OFFSET_TABLE_+0x46e8db98>
    89e4:	ff 67 66             	jmp    *0x66(%edi)
                    char* p = va_arg(vlist, char*);
    89e7:	8b 17                	mov    (%edi),%edx
                    *p = *buffer;
    89e9:	67 8a 06 67 88       	mov    -0x7799,%al
    89ee:	02 66 46             	add    0x46(%esi),%ah
                    ++ret;
    89f1:	67 66 ff 45 ec       	incw   -0x14(%di)
                    char* p = va_arg(vlist, char*);
    89f6:	66 83 c7 04          	add    $0x4,%di
                    break;
    89fa:	e9 2e ff 66 50       	jmp    5067892d <_GLOBAL_OFFSET_TABLE_+0x5066da61>
                    while (*buffer && isspace(*buffer)) buffer++;
    89ff:	66 e8 92 fb          	callw  8595 <_Z7reversePc+0x4a>
    8a03:	ff                   	(bad)  
    8a04:	ff 66 59             	jmp    *0x59(%esi)
    8a07:	66 85 c0             	test   %ax,%ax
    8a0a:	74 0b                	je     8a17 <_Z7vsscanfPKcS0_Pc+0x12f>
    8a0c:	66 46                	inc    %si
    8a0e:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    8a15:	75 e6                	jne    89fd <_Z7vsscanfPKcS0_Pc+0x115>
                    char* p = va_arg(vlist, char*);
    8a17:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8a1c:	67 66 8b 3f          	mov    (%bx),%di
                    while(*buffer && !isspace(*buffer))
    8a20:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    8a27:	75 0b                	jne    8a34 <_Z7vsscanfPKcS0_Pc+0x14c>
                    *p = '\0';
    8a29:	67 c6 07 00          	movb   $0x0,(%bx)
                    ++ret;
    8a2d:	67 66 ff 45 ec       	incw   -0x14(%di)
    8a32:	eb 5b                	jmp    8a8f <_Z7vsscanfPKcS0_Pc+0x1a7>
                    while(*buffer && !isspace(*buffer))
    8a34:	66 50                	push   %ax
    8a36:	66 e8 5b fb          	callw  8595 <_Z7reversePc+0x4a>
    8a3a:	ff                   	(bad)  
    8a3b:	ff 66 5a             	jmp    *0x5a(%esi)
    8a3e:	66 85 c0             	test   %ax,%ax
    8a41:	75 e6                	jne    8a29 <_Z7vsscanfPKcS0_Pc+0x141>
                        *(p++) = *(buffer++);
    8a43:	a4                   	movsb  %ds:(%esi),%es:(%edi)
                    while(*buffer && !isspace(*buffer))
    8a44:	eb da                	jmp    8a20 <_Z7vsscanfPKcS0_Pc+0x138>
                    int* p = va_arg(vlist, int*);
    8a46:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8a4b:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 0);
    8a4f:	66 6a 00             	pushw  $0x0
    8a52:	eb 1a                	jmp    8a6e <_Z7vsscanfPKcS0_Pc+0x186>
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8a54:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8a59:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 10);
    8a5d:	66 6a 0a             	pushw  $0xa
    8a60:	eb 0c                	jmp    8a6e <_Z7vsscanfPKcS0_Pc+0x186>
                    break;
                }
                case 'x':
                case 'X':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8a62:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8a67:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 16);
    8a6b:	66 6a 10             	pushw  $0x10
    8a6e:	67 66 8d 45 f0       	lea    -0x10(%di),%ax
    8a73:	66 50                	push   %ax
    8a75:	66 56                	push   %si
    8a77:	66 e8 d7 fb          	callw  8652 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    8a7b:	ff                   	(bad)  
    8a7c:	ff 67 66             	jmp    *0x66(%edi)
                    *p = static_cast<unsigned int>(num);
    8a7f:	89 07                	mov    %eax,(%edi)
                    buffer = end;
    8a81:	67 66 8b 75 f0       	mov    -0x10(%di),%si
                    ++ret;
    8a86:	67 66 ff 45 ec       	incw   -0x14(%di)
    8a8b:	66 83 c4 0c          	add    $0xc,%sp
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8a8f:	66 89 df             	mov    %bx,%di
    8a92:	e9 96 fe 67 66       	jmp    6668892d <_GLOBAL_OFFSET_TABLE_+0x6667da61>
                    break;
            }
        }
    }
    return ret;
}
    8a97:	8b 45 ec             	mov    -0x14(%ebp),%eax
    8a9a:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8a9f:	66 5b                	pop    %bx
    8aa1:	66 5e                	pop    %si
    8aa3:	66 5f                	pop    %di
    8aa5:	66 5d                	pop    %bp
    8aa7:	66 c3                	retw   

00008aa9 <_Z6sscanfPKcS0_z>:
int sscanf( const char* buffer, const char* format, ... )
{
    8aa9:	66 55                	push   %bp
    8aab:	66 89 e5             	mov    %sp,%bp
   	int ret;
	va_list va;
	va_start(va, format);
    8aae:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsscanf(buffer, format, va);
    8ab3:	66 50                	push   %ax
    8ab5:	67 66 ff 75 0c       	pushw  0xc(%di)
    8aba:	67 66 ff 75 08       	pushw  0x8(%di)
    8abf:	66 e8 23 fe          	callw  88e6 <_Z4getsPc+0x52>
    8ac3:	ff                   	(bad)  
    8ac4:	ff 66 c9             	jmp    *-0x37(%esi)
	va_end(va);
    return ret; 
}
    8ac7:	66 c3                	retw   

00008ac9 <_Z5scanfPKcz>:
#ifndef _HHOS_LIBC_TEST
static char scanfbuf[80*25];
//TODO 关于这个返回值
int scanf( const char* format, ... )
{
    8ac9:	66 55                	push   %bp
    8acb:	66 89 e5             	mov    %sp,%bp
    if (!gets(scanfbuf)) return EOF;
    8ace:	66 68 a0 9d          	pushw  $0x9da0
    8ad2:	00 00                	add    %al,(%eax)
    8ad4:	66 e8 ba fd          	callw  8892 <_Z7getcharv+0x12>
    8ad8:	ff                   	(bad)  
    8ad9:	ff 66 89             	jmp    *-0x77(%esi)
    8adc:	c2 66 58             	ret    $0x5866
    8adf:	66 83 c8 ff          	or     $0xffff,%ax
    8ae3:	66 85 d2             	test   %dx,%dx
    8ae6:	74 1c                	je     8b04 <_Z5scanfPKcz+0x3b>
	int ret;
	va_list va;
	va_start(va, format);
    8ae8:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsscanf(scanfbuf, format, va);
    8aed:	66 50                	push   %ax
    8aef:	67 66 ff 75 08       	pushw  0x8(%di)
    8af4:	66 68 a0 9d          	pushw  $0x9da0
    8af8:	00 00                	add    %al,(%eax)
    8afa:	66 e8 e8 fd          	callw  88e6 <_Z4getsPc+0x52>
    8afe:	ff                   	(bad)  
    8aff:	ff 66 83             	jmp    *-0x7d(%esi)
	va_end(va);
    return ret;
    8b02:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    8b05:	c9                   	leave  
    8b06:	66 c3                	retw   

00008b08 <_Z8vsprintfPcPKcS_>:
{
    8b08:	66 55                	push   %bp
    8b0a:	66 89 e5             	mov    %sp,%bp
    8b0d:	66 57                	push   %di
    8b0f:	66 56                	push   %si
    8b11:	66 53                	push   %bx
    8b13:	66 83 ec 0c          	sub    $0xc,%sp
    8b17:	67 66 8b 75 0c       	mov    0xc(%di),%si
    8b1c:	67 66 8b 55 10       	mov    0x10(%di),%dx
    8b21:	67 66 89 55 f0       	mov    %dx,-0x10(%di)
    auto len_fmt = strlen(format);
    8b26:	66 56                	push   %si
    8b28:	66 e8 52 f9          	callw  847e <_Z6memsetPvim+0x23>
    8b2c:	ff                   	(bad)  
    8b2d:	ff 67 66             	jmp    *0x66(%edi)
    8b30:	89 45 ec             	mov    %eax,-0x14(%ebp)
    8b33:	66 58                	pop    %ax
    auto p_buf = buffer;
    8b35:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8b3a:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    while(len_fmt--)
    8b3f:	67 66 ff 4d ec       	decw   -0x14(%di)
    8b44:	67 66 83 7d ec ff    	cmpw   $0xffff,-0x14(%di)
    8b4a:	0f 84 4a 01 67 8a    	je     8a678c9a <_GLOBAL_OFFSET_TABLE_+0x8a66ddce>
        if(*p_fmt != '%')
    8b50:	06                   	push   %es
    8b51:	3c 25                	cmp    $0x25,%al
    8b53:	74 07                	je     8b5c <_Z8vsprintfPcPKcS_+0x54>
            *(p_buf++) = *(p_fmt++);    //非控制字符
    8b55:	66 46                	inc    %si
    8b57:	67 88 03             	mov    %al,(%bp,%di)
    8b5a:	eb 5f                	jmp    8bbb <_Z8vsprintfPcPKcS_+0xb3>
            char specifier = *(++p_fmt); //%后面一个字符是specifier
    8b5c:	67 8a 46 01          	mov    0x1(%bp),%al
            ++p_fmt;                     //记录specifier并跳过
    8b60:	66 83 c6 02          	add    $0x2,%si
            switch (specifier)
    8b64:	3c 69                	cmp    $0x69,%al
    8b66:	0f 84 81 00 7f 17    	je     177f8bed <_GLOBAL_OFFSET_TABLE_+0x177edd21>
    8b6c:	3c 63                	cmp    $0x63,%al
    8b6e:	74 40                	je     8bb0 <_Z8vsprintfPcPKcS_+0xa8>
    8b70:	3c 64                	cmp    $0x64,%al
    8b72:	74 77                	je     8beb <_Z8vsprintfPcPKcS_+0xe3>
    8b74:	3c 58                	cmp    $0x58,%al
    8b76:	75 c7                	jne    8b3f <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8b78:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16, true);
    8b7d:	66 6a 01             	pushw  $0x1
    8b80:	e9 e2 00 3c 73       	jmp    733c8c67 <_GLOBAL_OFFSET_TABLE_+0x733bdd9b>
            switch (specifier)
    8b85:	74 38                	je     8bbf <_Z8vsprintfPcPKcS_+0xb7>
    8b87:	7f 12                	jg     8b9b <_Z8vsprintfPcPKcS_+0x93>
    8b89:	3c 6f                	cmp    $0x6f,%al
    8b8b:	75 b2                	jne    8b3f <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8b8d:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 8);
    8b92:	66 6a 00             	pushw  $0x0
    8b95:	66 6a 08             	pushw  $0x8
    8b98:	e9 da 00 3c 75       	jmp    753c8c77 <_GLOBAL_OFFSET_TABLE_+0x753bddab>
            switch (specifier)
    8b9d:	0f 84 c9 00 3c 78    	je     783c8c6c <_GLOBAL_OFFSET_TABLE_+0x783bdda0>
    8ba3:	75 9a                	jne    8b3f <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8ba5:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16);
    8baa:	66 6a 00             	pushw  $0x0
    8bad:	e9 b5 00 67 66       	jmp    66678c67 <_GLOBAL_OFFSET_TABLE_+0x6666dd9b>
                    *(p_buf++) = va_arg(vlist, int); 
    8bb2:	8b 02                	mov    (%edx),%eax
    8bb4:	67 88 03             	mov    %al,(%bp,%di)
    8bb7:	66 83 c2 04          	add    $0x4,%dx
    8bbb:	66 43                	inc    %bx
                    break;
    8bbd:	eb 80                	jmp    8b3f <_Z8vsprintfPcPKcS_+0x37>
                    const char * str = va_arg(vlist, char*);
    8bbf:	67 66 8d 42 04       	lea    0x4(%bp,%si),%ax
    8bc4:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8bc9:	67 66 8b 3a          	mov    (%bp,%si),%di
                    strcpy(p_buf, str);
    8bcd:	66 57                	push   %di
    8bcf:	66 53                	push   %bx
    8bd1:	66 e8 c5 f8          	callw  849a <_Z6strlenPKc+0x1a>
    8bd5:	ff                   	(bad)  
    8bd6:	ff 66 59             	jmp    *0x59(%esi)
                    p_buf += strlen(str);               //p应当永远指向有意义的字符后面一位
    8bd9:	66 58                	pop    %ax
    8bdb:	66 57                	push   %di
    8bdd:	66 e8 9d f8          	callw  847e <_Z6memsetPvim+0x23>
    8be1:	ff                   	(bad)  
    8be2:	ff 66 01             	jmp    *0x1(%esi)
    8be5:	c3                   	ret    
                    break;
    8be6:	66 58                	pop    %ax
    8be8:	e9 4f ff 67 66       	jmp    66688b3c <_GLOBAL_OFFSET_TABLE_+0x6667dc70>
                    int num = va_arg(vlist, int);
    8bed:	8d 42 04             	lea    0x4(%edx),%eax
    8bf0:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    8bf5:	67 66 8b 02          	mov    (%bp,%si),%ax
template<typename T>
void itoa(char* buffer, T num, int base, bool captial = false)
{
    const char* num_char_upper = "0123456789ABCDEF";
    const char* num_char_lower = "0123456789abcdef";
    if(num < 0)
    8bf9:	66 89 df             	mov    %bx,%di
    8bfc:	66 85 c0             	test   %ax,%ax
    8bff:	79 0c                	jns    8c0d <_Z8vsprintfPcPKcS_+0x105>
    8c01:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
    {
        *(buffer++) = '-';
    8c06:	67 c6 03 2d          	movb   $0x2d,(%bp,%di)
        num = -num;
    8c0a:	66 f7 d8             	neg    %ax
    }
    char *p = buffer;
    8c0d:	67 66 89 7d f0       	mov    %di,-0x10(%di)
    int mod = 0;
    while(true)
    {
        mod = num % base;
        num /= base;
    8c12:	66 b9 0a 00          	mov    $0xa,%cx
    8c16:	00 00                	add    %al,(%eax)
    8c18:	66 99                	cwtd   
    8c1a:	66 f7 f9             	idiv   %cx
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    8c1d:	67 66 8b 4d f0       	mov    -0x10(%di),%cx
    8c22:	66 41                	inc    %cx
    8c24:	67 8a 92 b9 ae       	mov    -0x5147(%bp,%si),%dl
    8c29:	00 00                	add    %al,(%eax)
    8c2b:	67 88 51 ff          	mov    %dl,-0x1(%bx,%di)
        if(num == 0) break;
    8c2f:	66 85 c0             	test   %ax,%ax
    8c32:	74 07                	je     8c3b <_Z8vsprintfPcPKcS_+0x133>
    8c34:	67 66 89 4d f0       	mov    %cx,-0x10(%di)
    8c39:	eb d7                	jmp    8c12 <_Z8vsprintfPcPKcS_+0x10a>
    }
    *p = '\0';
    8c3b:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8c40:	67 c6 40 01 00       	movb   $0x0,0x1(%bx,%si)
    reverse(buffer);
    8c45:	66 57                	push   %di
    8c47:	66 e8 fe f8          	callw  8549 <_Z6strcmpPKcS0_+0x6b>
    8c4b:	ff                   	(bad)  
    8c4c:	ff 67 66             	jmp    *0x66(%edi)
                    p_buf += strlen(p_buf);             //同理
    8c4f:	89 1c 24             	mov    %ebx,(%esp)
    8c52:	66 e8 28 f8          	callw  847e <_Z6memsetPvim+0x23>
    8c56:	ff                   	(bad)  
    8c57:	ff 66 01             	jmp    *0x1(%esi)
    8c5a:	c3                   	ret    
                    break;
    8c5b:	66 5a                	pop    %dx
                    int num = va_arg(vlist, int);
    8c5d:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
                    break;
    8c62:	e9 da fe 66 6a       	jmp    6a678b41 <_GLOBAL_OFFSET_TABLE_+0x6a66dc75>
                    itoa(p_buf, num, 16, true);
    8c67:	10 eb                	adc    %ch,%bl
    8c69:	0b 67 66             	or     0x66(%edi),%esp
                    unsigned int num = va_arg(vlist, int);
    8c6c:	8d 7a 04             	lea    0x4(%edx),%edi
                    itoa(p_buf, num, 10);
    8c6f:	66 6a 00             	pushw  $0x0
    8c72:	66 6a 0a             	pushw  $0xa
    8c75:	67 66 ff 32          	pushw  (%bp,%si)
    8c79:	66 53                	push   %bx
    8c7b:	66 e8 9f 09          	callw  961e <_ZN2sh3runEv+0x372>
    8c7f:	00 00                	add    %al,(%eax)
                    p_buf += strlen(p_buf);             //同理
    8c81:	66 83 c4 10          	add    $0x10,%sp
    8c85:	66 53                	push   %bx
    8c87:	66 e8 f3 f7          	callw  847e <_Z6memsetPvim+0x23>
    8c8b:	ff                   	(bad)  
    8c8c:	ff 66 01             	jmp    *0x1(%esi)
    8c8f:	c3                   	ret    
                    break;
    8c90:	66 58                	pop    %ax
                    unsigned int num = va_arg(vlist, int);
    8c92:	66 89 fa             	mov    %di,%dx
                    break;
    8c95:	e9 a7 fe 67 c6       	jmp    c6688b41 <_GLOBAL_OFFSET_TABLE_+0xc667dc75>
    *p_buf = '\0';
    8c9a:	03 00                	add    (%eax),%eax
    return p_buf - buffer;
    8c9c:	66 89 d8             	mov    %bx,%ax
    8c9f:	67 66 2b 45 08       	sub    0x8(%di),%ax
}
    8ca4:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8ca9:	66 5b                	pop    %bx
    8cab:	66 5e                	pop    %si
    8cad:	66 5f                	pop    %di
    8caf:	66 5d                	pop    %bp
    8cb1:	66 c3                	retw   

00008cb3 <_Z7sprintfPcPKcz>:
{
    8cb3:	66 55                	push   %bp
    8cb5:	66 89 e5             	mov    %sp,%bp
	va_start(va, format);
    8cb8:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsprintf(buffer, format, va);
    8cbd:	66 50                	push   %ax
    8cbf:	67 66 ff 75 0c       	pushw  0xc(%di)
    8cc4:	67 66 ff 75 08       	pushw  0x8(%di)
    8cc9:	66 e8 39 fe          	callw  8b06 <_Z5scanfPKcz+0x3d>
    8ccd:	ff                   	(bad)  
    8cce:	ff 66 c9             	jmp    *-0x37(%esi)
}
    8cd1:	66 c3                	retw   

00008cd3 <_Z6printfPKcz>:
{
    8cd3:	66 55                	push   %bp
    8cd5:	66 89 e5             	mov    %sp,%bp
    8cd8:	66 53                	push   %bx
	va_start(va, format);
    8cda:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsprintf(printbuf, format, va);
    8cdf:	66 50                	push   %ax
    8ce1:	67 66 ff 75 08       	pushw  0x8(%di)
    8ce6:	66 68 80 a5          	pushw  $0xa580
    8cea:	00 00                	add    %al,(%eax)
    8cec:	66 e8 16 fe          	callw  8b06 <_Z5scanfPKcz+0x3d>
    8cf0:	ff                   	(bad)  
    8cf1:	ff 66 89             	jmp    *-0x77(%esi)
    8cf4:	c3                   	ret    
    puts(printbuf);
    8cf5:	66 83 c4 0c          	add    $0xc,%sp
    8cf9:	66 68 80 a5          	pushw  $0xa580
    8cfd:	00 00                	add    %al,(%eax)
    8cff:	66 e8 3d fb          	callw  8840 <_Z7putchari+0x18>
    8d03:	ff                   	(bad)  
    8d04:	ff 66 89             	jmp    *-0x77(%esi)
}
    8d07:	d8 67 66             	fsubs  0x66(%edi)
    8d0a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    8d0d:	66 c9                	leavew 
    8d0f:	66 c3                	retw   

Disassembly of section .text._ZN2sh2bfEPKcS1_.isra.4:

00008d12 <_ZN2sh2bfEPKcS1_.isra.4>:
    int bf(const char* Pattern, const char * Text) {
    8d12:	66 55                	push   %bp
    8d14:	66 89 e5             	mov    %sp,%bp
    8d17:	66 57                	push   %di
    8d19:	66 56                	push   %si
    8d1b:	66 53                	push   %bx
    8d1d:	66 51                	push   %cx
    8d1f:	66 89 c3             	mov    %ax,%bx
    8d22:	66 89 d7             	mov    %dx,%di
        ss_t m = strlen(Pattern);
    8d25:	66 50                	push   %ax
    8d27:	66 e8 53 f7          	callw  847e <_Z6memsetPvim+0x23>
    8d2b:	ff                   	(bad)  
    8d2c:	ff 66 89             	jmp    *-0x77(%esi)
    8d2f:	c6                   	(bad)  
        ss_t n = strlen(Text);
    8d30:	67 66 89 3c          	mov    %di,(%si)
    8d34:	24 66                	and    $0x66,%al
    8d36:	e8 45 f7 ff ff       	call   8480 <_Z6strlenPKc>
    8d3b:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8d40:	66 58                	pop    %ax
        ss_t i = 0, k = 0;
    8d42:	66 31 d2             	xor    %dx,%dx
    8d45:	66 31 c9             	xor    %cx,%cx
        while(k < m && i < n) {
    8d48:	66 39 d6             	cmp    %dx,%si
    8d4b:	7e 21                	jle    8d6e <_ZN2sh2bfEPKcS1_.isra.4+0x5c>
    8d4d:	67 66 39 4d f0       	cmp    %cx,-0x10(%di)
    8d52:	7e 22                	jle    8d76 <_ZN2sh2bfEPKcS1_.isra.4+0x64>
            if(Pattern[k] == Text[i]) {
    8d54:	67 8a 04             	mov    (%si),%al
    8d57:	0f 67 38             	packuswb (%eax),%mm7
    8d5a:	04 13                	add    $0x13,%al
    8d5c:	75 06                	jne    8d64 <_ZN2sh2bfEPKcS1_.isra.4+0x52>
                ++k;
    8d5e:	66 42                	inc    %dx
                ++i;
    8d60:	66 41                	inc    %cx
    8d62:	eb e4                	jmp    8d48 <_ZN2sh2bfEPKcS1_.isra.4+0x36>
                i = i - k + 1;
    8d64:	66 29 d1             	sub    %dx,%cx
    8d67:	66 41                	inc    %cx
                k = 0;
    8d69:	66 31 d2             	xor    %dx,%dx
    8d6c:	eb da                	jmp    8d48 <_ZN2sh2bfEPKcS1_.isra.4+0x36>
            return i - k;
    8d6e:	66 89 c8             	mov    %cx,%ax
    8d71:	66 29 d0             	sub    %dx,%ax
    8d74:	eb 04                	jmp    8d7a <_ZN2sh2bfEPKcS1_.isra.4+0x68>
        return -1;
    8d76:	66 83 c8 ff          	or     $0xffff,%ax
    }
    8d7a:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8d7f:	66 5b                	pop    %bx
    8d81:	66 5e                	pop    %si
    8d83:	66 5f                	pop    %di
    8d85:	66 5d                	pop    %bp
    8d87:	66 c3                	retw   

Disassembly of section .text._ZN3tty8tty_initEv:

00008d8a <_ZN3tty8tty_initEv>:
    void tty_init()
    8d8a:	66 55                	push   %bp
    8d8c:	66 89 e5             	mov    %sp,%bp
    8d8f:	66 53                	push   %bx
    8d91:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        cur_x = 0;
    8d96:	67 66 c7 03 00 00    	movw   $0x0,(%bp,%di)
    8d9c:	00 00                	add    %al,(%eax)
        cur_y = 0;
    8d9e:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    8da5:	00 00                	add    %al,(%eax)
        move_cursor(0, 0);
    8da7:	66 31 d2             	xor    %dx,%dx
    8daa:	66 31 c0             	xor    %ax,%ax
    8dad:	66 e8 13 f1          	callw  7ec4 <_ZL8print_okPc+0x50>
    8db1:	ff                   	(bad)  
    8db2:	ff 67 66             	jmp    *0x66(%edi)
        color = MAKE_COLOR(VGA_BLACK, VGA_WHITE);
    8db5:	c7 43 08 07 00 00 00 	movl   $0x7,0x8(%ebx)
    }
    8dbc:	66 5b                	pop    %bx
    8dbe:	66 5d                	pop    %bp
    8dc0:	66 c3                	retw   

Disassembly of section .text._ZN3tty7putcharEi:

00008dc2 <_ZN3tty7putcharEi>:
        tty_mem[y + 80 * x] = c;
        tty_mem[y + 80 * x + 1] = color;
#endif
        sys_putchar(c, color, x, y);
    }
    void putchar(int c)
    8dc2:	66 55                	push   %bp
    8dc4:	66 89 e5             	mov    %sp,%bp
    8dc7:	66 56                	push   %si
    8dc9:	66 53                	push   %bx
    8dcb:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8dd0:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    {
        switch(c)
    8dd5:	66 83 f8 0d          	cmp    $0xd,%ax
    8dd9:	77 79                	ja     8e54 <_ZN3tty7putcharEi+0x92>
    8ddb:	67 ff 24             	jmp    *(%si)
    8dde:	85 b8 ad 00 00 66    	test   %edi,0x660000ad(%eax)
    8de4:	be 04 00 00 00       	mov    $0x4,%esi
        {
            case '\t':
            {
                for(int i = 0; i < 4; ++i) putchar(' ');
    8de9:	66 6a 20             	pushw  $0x20
    8dec:	66 53                	push   %bx
    8dee:	66 e8 ce ff          	callw  8dc0 <_ZN3tty8tty_initEv+0x36>
    8df2:	ff                   	(bad)  
    8df3:	ff 66 5a             	jmp    *0x5a(%esi)
    8df6:	66 59                	pop    %cx
    8df8:	66 4e                	dec    %si
    8dfa:	75 ed                	jne    8de9 <_ZN3tty7putcharEi+0x27>
    8dfc:	e9 96 00 67 66       	jmp    66678e97 <_GLOBAL_OFFSET_TABLE_+0x6666dfcb>
            }
            case 0:
                break;
            case '\b':
            {
                if(cur_y == 0 && cur_x == 0) 
    8e01:	8b 53 04             	mov    0x4(%ebx),%edx
    8e04:	67 66 8b 03          	mov    (%bp,%di),%ax
    8e08:	66 85 d2             	test   %dx,%dx
    8e0b:	75 1b                	jne    8e28 <_ZN3tty7putcharEi+0x66>
    8e0d:	66 85 c0             	test   %ax,%ax
    8e10:	0f 84 99 00 67 66    	je     66678eaf <_GLOBAL_OFFSET_TABLE_+0x6666dfe3>
                {
                    break;
                }
                else if (cur_y == 0 && cur_x != 0)
                {
                    cur_y = 80 - 1;
    8e16:	c7 43 04 4f 00 00 00 	movl   $0x4f,0x4(%ebx)
                    cur_x--;
    8e1d:	66 48                	dec    %ax
    8e1f:	67 66 89 03          	mov    %ax,(%bp,%di)
        sys_putchar(c, color, x, y);
    8e23:	66 6a 4f             	pushw  $0x4f
    8e26:	eb 09                	jmp    8e31 <_ZN3tty7putcharEi+0x6f>
                    putchar_worker(' ', MAKE_COLOR(VGA_BLACK, VGA_WHITE) , cur_x, cur_y);
                    break;
                }
                else
                {
                    cur_y--;
    8e28:	66 4a                	dec    %dx
    8e2a:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        sys_putchar(c, color, x, y);
    8e2f:	66 52                	push   %dx
    8e31:	66 50                	push   %ax
    8e33:	66 6a 07             	pushw  $0x7
    8e36:	66 6a 20             	pushw  $0x20
    8e39:	66 e8 32 f3          	callw  816f <sys_bios_print_int+0xa4>
    8e3d:	ff                   	(bad)  
    8e3e:	ff 66 83             	jmp    *-0x7d(%esi)
    8e41:	c4 10                	les    (%eax),%edx
    8e43:	eb 50                	jmp    8e95 <_ZN3tty7putcharEi+0xd3>
                    break;
                }
            }
            case '\n':
            {
                cur_x++;
    8e45:	67 66 ff 03          	incw   (%bp,%di)
                cur_y = 0;
    8e49:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    8e50:	00 00                	add    %al,(%eax)
                break;
    8e52:	eb 41                	jmp    8e95 <_ZN3tty7putcharEi+0xd3>
        sys_putchar(c, color, x, y);
    8e54:	67 66 ff 73 04       	pushw  0x4(%bp,%di)
    8e59:	67 66 ff 33          	pushw  (%bp,%di)
    8e5d:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    8e62:	66 50                	push   %ax
    8e64:	66 e8 07 f3          	callw  816f <sys_bios_print_int+0xa4>
    8e68:	ff                   	(bad)  
    8e69:	ff 67 66             	jmp    *0x66(%edi)
            }
            default:
            {
                putchar_worker(c, color, cur_x, cur_y);
                cur_x = (cur_y == 79) ? cur_x + 1 : cur_x;
    8e6c:	8b 43 04             	mov    0x4(%ebx),%eax
    8e6f:	66 83 c4 10          	add    $0x10,%sp
    8e73:	66 83 f8 4f          	cmp    $0x4f,%ax
    8e77:	67 66 8b 13          	mov    (%bp,%di),%dx
    8e7b:	75 02                	jne    8e7f <_ZN3tty7putcharEi+0xbd>
    8e7d:	66 42                	inc    %dx
    8e7f:	67 66 89 13          	mov    %dx,(%bp,%di)
                cur_y = (cur_y + 1) % 80;
    8e83:	66 40                	inc    %ax
    8e85:	66 b9 50 00          	mov    $0x50,%cx
    8e89:	00 00                	add    %al,(%eax)
    8e8b:	66 99                	cwtd   
    8e8d:	66 f7 f9             	idiv   %cx
    8e90:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        if (cur_x >= 25)
    8e95:	67 66 83 3b 18       	cmpw   $0x18,(%bp,%di)
    8e9a:	7e 11                	jle    8ead <_ZN3tty7putcharEi+0xeb>
            sys_bios_scroll_up(color);
    8e9c:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    8ea1:	66 e8 fb f3          	callw  82a0 <sys_print_int+0xa4>
    8ea5:	ff                   	(bad)  
    8ea6:	ff 67 66             	jmp    *0x66(%edi)
            --cur_x;
    8ea9:	ff 0b                	decl   (%ebx)
    8eab:	66 58                	pop    %ax
                break;
            }
        }
        scroll_up();
        move_cursor(cur_x, cur_y);
    8ead:	67 66 8b 53 04       	mov    0x4(%bp,%di),%dx
    8eb2:	67 66 8b 03          	mov    (%bp,%di),%ax
    }
    8eb6:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    8ebb:	66 5b                	pop    %bx
    8ebd:	66 5e                	pop    %si
    8ebf:	66 5d                	pop    %bp
        move_cursor(cur_x, cur_y);
    8ec1:	e9                   	.byte 0xe9
    8ec2:	02 f0                	add    %al,%dh

Disassembly of section .text._ZN2sh4execERKNS_3cmdE:

00008ec4 <_ZN2sh4execERKNS_3cmdE>:
    int exec(const cmd & input_cmd)
    8ec4:	66 55                	push   %bp
    8ec6:	66 89 e5             	mov    %sp,%bp
    8ec9:	66 57                	push   %di
    8ecb:	66 56                	push   %si
    8ecd:	66 53                	push   %bx
    8ecf:	66 83 ec 08          	sub    $0x8,%sp
    8ed3:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8ed8:	67 66 8b 75 0c       	mov    0xc(%di),%si
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8edd:	66 68 37 ae          	pushw  $0xae37
    8ee1:	00 00                	add    %al,(%eax)
    8ee3:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8ee9:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    8eed:	66 e8 eb f5          	callw  84dc <_Z6strcpyPcPKc+0x40>
    8ef1:	ff                   	(bad)  
    8ef2:	ff 66 5a             	jmp    *0x5a(%esi)
        if (is_command(input_cmd, "ls") || is_command(input_cmd, "dir")) {
    8ef5:	66 59                	pop    %cx
    8ef7:	66 85 c0             	test   %ax,%ax
    8efa:	75 33                	jne    8f2f <_ZN2sh4execERKNS_3cmdE+0x6b>
            printf("You have %d user programs intalled\n", prog_cnt);
    8efc:	67 66 ff b3 84 0b    	pushw  0xb84(%bp,%di)
    8f02:	00 00                	add    %al,(%eax)
    8f04:	66 68 f0 ad          	pushw  $0xadf0
    8f08:	00 00                	add    %al,(%eax)
    8f0a:	66 e8 c3 fd          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    8f0e:	ff                   	(bad)  
    8f0f:	ff 66 59             	jmp    *0x59(%esi)
            printf("Program Name\t\t\tSector Number\n");
    8f12:	66 5e                	pop    %si
    8f14:	66 68 14 ae          	pushw  $0xae14
    8f18:	00 00                	add    %al,(%eax)
    8f1a:	66 e8 b3 fd          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    8f1e:	ff                   	(bad)  
    8f1f:	ff 67 66             	jmp    *0x66(%edi)
    8f22:	8d b3 8c 0b 00 00    	lea    0xb8c(%ebx),%esi
    8f28:	66 5f                	pop    %di
            for (size_t i = 0; i < prog_cnt; ++i) {
    8f2a:	66 31 ff             	xor    %di,%di
    8f2d:	eb 41                	jmp    8f70 <_ZN2sh4execERKNS_3cmdE+0xac>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8f2f:	66 68 32 ae          	pushw  $0xae32
    8f33:	00 00                	add    %al,(%eax)
    8f35:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8f3b:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    8f3f:	66 e8 99 f5          	callw  84dc <_Z6strcpyPcPKc+0x40>
    8f43:	ff                   	(bad)  
    8f44:	ff 66 5f             	jmp    *0x5f(%esi)
        if (is_command(input_cmd, "ls") || is_command(input_cmd, "dir")) {
    8f47:	66 5a                	pop    %dx
    8f49:	66 85 c0             	test   %ax,%ax
    8f4c:	74 ae                	je     8efc <_ZN2sh4execERKNS_3cmdE+0x38>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8f4e:	66 68 36 ae          	pushw  $0xae36
    8f52:	00 00                	add    %al,(%eax)
    8f54:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8f5a:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    8f5e:	66 e8 7a f5          	callw  84dc <_Z6strcpyPcPKc+0x40>
    8f62:	ff                   	(bad)  
    8f63:	ff 66 5a             	jmp    *0x5a(%esi)
        else if (is_command(input_cmd, "cls") || is_command(input_cmd, "clear"))
    8f66:	66 59                	pop    %cx
    8f68:	66 85 c0             	test   %ax,%ax
    8f6b:	75 2e                	jne    8f9b <_ZN2sh4execERKNS_3cmdE+0xd7>
    8f6d:	e9 90 01 67 66       	jmp    66679102 <_GLOBAL_OFFSET_TABLE_+0x6666e236>
            for (size_t i = 0; i < prog_cnt; ++i) {
    8f72:	39 bb 84 0b 00 00    	cmp    %edi,0xb84(%ebx)
    8f78:	0f 86 e0 01 67 66    	jbe    6667915e <_GLOBAL_OFFSET_TABLE_+0x6666e292>
                printf("%s\t\t\t\t\t%d\n", progs[i].name, progs[i].lba);
    8f7e:	ff 76 20             	pushl  0x20(%esi)
    8f81:	66 56                	push   %si
    8f83:	66 68 3a ae          	pushw  $0xae3a
    8f87:	00 00                	add    %al,(%eax)
    8f89:	66 e8 44 fd          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    8f8d:	ff                   	(bad)  
    8f8e:	ff 66 47             	jmp    *0x47(%esi)
            for (size_t i = 0; i < prog_cnt; ++i) {
    8f91:	66 83 c6 24          	add    $0x24,%si
    8f95:	66 83 c4 0c          	add    $0xc,%sp
    8f99:	eb d5                	jmp    8f70 <_ZN2sh4execERKNS_3cmdE+0xac>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8f9b:	66 68 45 ae          	pushw  $0xae45
    8f9f:	00 00                	add    %al,(%eax)
    8fa1:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8fa7:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    8fab:	66 e8 2d f5          	callw  84dc <_Z6strcpyPcPKc+0x40>
    8faf:	ff                   	(bad)  
    8fb0:	ff 66 59             	jmp    *0x59(%esi)
        else if (is_command(input_cmd, "cls") || is_command(input_cmd, "clear"))
    8fb3:	66 5f                	pop    %di
    8fb5:	66 85 c0             	test   %ax,%ax
    8fb8:	0f 84 44 01 66 68    	je     68669102 <_GLOBAL_OFFSET_TABLE_+0x6865e236>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8fbe:	4b                   	dec    %ebx
    8fbf:	ae                   	scas   %es:(%edi),%al
    8fc0:	00 00                	add    %al,(%eax)
    8fc2:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8fc8:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    8fcc:	66 e8 0c f5          	callw  84dc <_Z6strcpyPcPKc+0x40>
    8fd0:	ff                   	(bad)  
    8fd1:	ff 66 5f             	jmp    *0x5f(%esi)
        else if (is_command(input_cmd, "help"))
    8fd4:	66 5a                	pop    %dx
    8fd6:	66 85 c0             	test   %ax,%ax
    8fd9:	75 0c                	jne    8fe7 <_ZN2sh4execERKNS_3cmdE+0x123>
            printf("%s\n", help);
    8fdb:	66 81 c3 84 09       	add    $0x984,%bx
    8fe0:	00 00                	add    %al,(%eax)
    8fe2:	66 53                	push   %bx
    8fe4:	e9 39 01 66 68       	jmp    68669122 <_GLOBAL_OFFSET_TABLE_+0x6865e256>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8fe9:	54                   	push   %esp
    8fea:	ae                   	scas   %es:(%edi),%al
    8feb:	00 00                	add    %al,(%eax)
    8fed:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8ff3:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    8ff7:	66 e8 e1 f4          	callw  84dc <_Z6strcpyPcPKc+0x40>
    8ffb:	ff                   	(bad)  
    8ffc:	ff 66 5a             	jmp    *0x5a(%esi)
        else if (is_command(input_cmd, "echo"))
    8fff:	66 59                	pop    %cx
    9001:	66 85 c0             	test   %ax,%ax
    9004:	75 3d                	jne    9043 <_ZN2sh4execERKNS_3cmdE+0x17f>
            for(int i = 1; i < input_cmd.cnt; ++i)
    9006:	66 bf 01 00          	mov    $0x1,%di
    900a:	00 00                	add    %al,(%eax)
    900c:	67 66 39 7e 04       	cmp    %di,0x4(%bp)
    9011:	7e 21                	jle    9034 <_ZN2sh4execERKNS_3cmdE+0x170>
                printf("%s ", inputs[input_cmd.start + i]);
    9013:	67 66 8b 06 66 01    	mov    0x166,%ax
    9019:	f8                   	clc    
    901a:	67 66 ff 74 83       	pushw  -0x7d(%si)
    901f:	04 66                	add    $0x66,%al
    9021:	68 59 ae 00 00       	push   $0xae59
    9026:	66 e8 a7 fc          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    902a:	ff                   	(bad)  
    902b:	ff 66 47             	jmp    *0x47(%esi)
            for(int i = 1; i < input_cmd.cnt; ++i)
    902e:	66 59                	pop    %cx
    9030:	66 58                	pop    %ax
    9032:	eb d8                	jmp    900c <_ZN2sh4execERKNS_3cmdE+0x148>
            printf("\n");
    9034:	66 68 62 ad          	pushw  $0xad62
    9038:	00 00                	add    %al,(%eax)
    903a:	66 e8 93 fc          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    903e:	ff                   	(bad)  
    903f:	ff                   	(bad)  
    9040:	e9 ce 00 66 68       	jmp    68669113 <_GLOBAL_OFFSET_TABLE_+0x6865e247>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    9045:	5d                   	pop    %ebp
    9046:	ae                   	scas   %es:(%edi),%al
    9047:	00 00                	add    %al,(%eax)
    9049:	67 66 8b 06 67 66    	mov    0x6667,%ax
    904f:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    9053:	66 e8 85 f4          	callw  84dc <_Z6strcpyPcPKc+0x40>
    9057:	ff                   	(bad)  
    9058:	ff 66 5f             	jmp    *0x5f(%esi)
        else if (is_command(input_cmd, "history"))
    905b:	66 5a                	pop    %dx
    905d:	66 85 c0             	test   %ax,%ax
    9060:	0f 84 ce 00 66 31    	je     31669134 <_GLOBAL_OFFSET_TABLE_+0x3165e268>
            for(size_t i = 0; i < prog_cnt; ++i)
    9066:	c9                   	leave  
    9067:	67 66 39 8b 84 0b    	cmp    %cx,0xb84(%bp,%di)
    906d:	00 00                	add    %al,(%eax)
    906f:	0f 86 a7 00 66 6b    	jbe    6b66911c <_GLOBAL_OFFSET_TABLE_+0x6b65e250>
    9075:	d1 24 67             	shll   (%edi,%eiz,2)
    9078:	66 89 4d ec          	mov    %cx,-0x14(%ebp)
    907c:	67 66 8d bc 13 8c    	lea    -0x73ed(%si),%di
    9082:	0b 00                	or     (%eax),%eax
    9084:	00 67 66             	add    %ah,0x66(%edi)
    9087:	89 55 f0             	mov    %edx,-0x10(%ebp)
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    908a:	66 57                	push   %di
    908c:	67 66 8b 06 67 66    	mov    0x6667,%ax
    9092:	ff 74 83 04          	pushl  0x4(%ebx,%eax,4)
    9096:	66 e8 42 f4          	callw  84dc <_Z6strcpyPcPKc+0x40>
    909a:	ff                   	(bad)  
    909b:	ff 66 5a             	jmp    *0x5a(%esi)
                if (is_command(input_cmd, progs[i].name))
    909e:	66 59                	pop    %cx
    90a0:	66 85 c0             	test   %ax,%ax
    90a3:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    90a8:	67 66 8b 4d ec       	mov    -0x14(%di),%cx
    90ad:	75 66                	jne    9115 <_ZN2sh4execERKNS_3cmdE+0x251>
class bin_loader
{
public:
    static void load_binary_from_floppy(int n)
    {
        sys_read_disk(user_prog_segment, user_prog_load_addr, n, 20);
    90af:	66 6a 14             	pushw  $0x14
                    bin_loader::load_binary_from_floppy(progs[i].lba);
    90b2:	66 01 d3             	add    %dx,%bx
    90b5:	67 66 0f b7 83 ac 0b 	movzww 0xbac(%bp,%di),%ax
    90bc:	00 00                	add    %al,(%eax)
    90be:	66 50                	push   %ax
    90c0:	66 68 00 a1          	pushw  $0xa100
    90c4:	00 00                	add    %al,(%eax)
    90c6:	66 68 00 10          	pushw  $0x1000
    90ca:	00 00                	add    %al,(%eax)
    90cc:	66 e8 74 f2          	callw  8344 <sys_get_scancode+0xf>
    90d0:	ff                   	(bad)  
    90d1:	ff 66 83             	jmp    *-0x7d(%esi)
        sys_execve_bin();
    90d4:	c4 10                	les    (%eax),%edx
    90d6:	66 e8 b4 ef          	callw  808e <sys_bios_getchar+0x5>
    90da:	ff                   	(bad)  
    90db:	ff 66 57             	jmp    *0x57(%esi)
                    if(!(strlen(progs[i].name) > 2 && progs[i].name[0] == 'c' && progs[i].name[1] == '_'))
    90de:	66 e8 9c f3          	callw  847e <_Z6memsetPvim+0x23>
    90e2:	ff                   	(bad)  
    90e3:	ff 66 5f             	jmp    *0x5f(%esi)
    90e6:	66 83 f8 02          	cmp    $0x2,%ax
    90ea:	76 14                	jbe    9100 <_ZN2sh4execERKNS_3cmdE+0x23c>
    90ec:	67 80 bb 8c 0b 00    	cmpb   $0x0,0xb8c(%bp,%di)
    90f2:	00 63 75             	add    %ah,0x75(%ebx)
    90f5:	0a 67 80             	or     -0x80(%edi),%ah
    90f8:	bb 8d 0b 00 00       	mov    $0xb8d,%ebx
    90fd:	5f                   	pop    %edi
    90fe:	74 5c                	je     915c <_ZN2sh4execERKNS_3cmdE+0x298>
                        sys_bios_clear_screen();
    9100:	66 e8 6d ef          	callw  8071 <sys_bios_print_string+0x21>
    9104:	ff                   	(bad)  
    9105:	ff 66 ff             	jmp    *-0x1(%esi)
                        sys_get_current_tty()->tty_init();
    9108:	36 80 9d 66 e8 79 fc 	sbbb   $0xff,%ss:-0x386179a(%ebp)
    910f:	ff 
    9110:	ff 66 5e             	jmp    *0x5e(%esi)
    9113:	eb 47                	jmp    915c <_ZN2sh4execERKNS_3cmdE+0x298>
            for(size_t i = 0; i < prog_cnt; ++i)
    9115:	66 41                	inc    %cx
    9117:	e9 4d ff 66 68       	jmp    68679069 <_GLOBAL_OFFSET_TABLE_+0x6866e19d>
                printf("%s\n", "No such command or file");
    911c:	65 ae                	gs scas %es:(%edi),%al
    911e:	00 00                	add    %al,(%eax)
    9120:	66 68 50 ae          	pushw  $0xae50
    9124:	00 00                	add    %al,(%eax)
    9126:	66 e8 a7 fb          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    912a:	ff                   	(bad)  
    912b:	ff 66 59             	jmp    *0x59(%esi)
    912e:	66 5b                	pop    %bx
    9130:	eb 2a                	jmp    915c <_ZN2sh4execERKNS_3cmdE+0x298>
    9132:	67 66 8d b3 04 03    	lea    0x304(%bp,%di),%si
    9138:	00 00                	add    %al,(%eax)
    913a:	66 81 c3 84 07       	add    $0x784,%bx
    913f:	00 00                	add    %al,(%eax)
                printf("%s\n", histroy[i]);
    9141:	66 56                	push   %si
    9143:	66 68 50 ae          	pushw  $0xae50
    9147:	00 00                	add    %al,(%eax)
    9149:	66 e8 84 fb          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    914d:	ff                   	(bad)  
    914e:	ff 66 83             	jmp    *-0x7d(%esi)
    9151:	ee                   	out    %al,(%dx)
    9152:	80 66 58 66          	andb   $0x66,0x58(%esi)
            for(int i = 1; i < history_term; ++i)
    9156:	5a                   	pop    %edx
    9157:	66 39 f3             	cmp    %si,%bx
    915a:	75 e5                	jne    9141 <_ZN2sh4execERKNS_3cmdE+0x27d>
    }
    915c:	66 31 c0             	xor    %ax,%ax
    915f:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    9164:	66 5b                	pop    %bx
    9166:	66 5e                	pop    %si
    9168:	66 5f                	pop    %di
    916a:	66 5d                	pop    %bp
    916c:	66 c3                	retw   

Disassembly of section .text._ZN2sh16read_prog_recordEv:

0000916e <_ZN2sh16read_prog_recordEv>:
    void read_prog_record()
    916e:	66 55                	push   %bp
    9170:	66 89 e5             	mov    %sp,%bp
    9173:	66 57                	push   %di
    9175:	66 56                	push   %si
    9177:	66 53                	push   %bx
    9179:	66 83 ec 6c          	sub    $0x6c,%sp
    917d:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        sys_read_disk(0, (uint32_t)record_buf, REC_FILE_SECTOR, 1);
    9182:	67 66 8d bb 84 07    	lea    0x784(%bp,%di),%di
    9188:	00 00                	add    %al,(%eax)
    918a:	66 6a 01             	pushw  $0x1
    918d:	66 6a 34             	pushw  $0x34
    9190:	66 57                	push   %di
    9192:	66 6a 00             	pushw  $0x0
    9195:	66 e8 ab f1          	callw  8344 <sys_get_scancode+0xf>
    9199:	ff                   	(bad)  
    919a:	ff 66 83             	jmp    *-0x7d(%esi)
        sscanf(p, "%s", buf1);
    919d:	c4 10                	les    (%eax),%edx
    919f:	67 66 8d 75 94       	lea    -0x6c(%di),%si
    91a4:	66 56                	push   %si
    91a6:	66 68 7f ae          	pushw  $0xae7f
    91aa:	00 00                	add    %al,(%eax)
    91ac:	66 57                	push   %di
    91ae:	66 e8 f5 f8          	callw  8aa7 <_Z7vsscanfPKcS0_Pc+0x1bf>
    91b2:	ff                   	(bad)  
    91b3:	ff 66 83             	jmp    *-0x7d(%esi)
        p += (strlen(buf1) + 1);
    91b6:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    91b9:	56                   	push   %esi
    91ba:	66 e8 c0 f2          	callw  847e <_Z6memsetPvim+0x23>
    91be:	ff                   	(bad)  
    91bf:	ff 67 66             	jmp    *0x66(%edi)
    91c2:	8d 44 07 01          	lea    0x1(%edi,%eax,1),%eax
    91c6:	67 66 89 45 8c       	mov    %ax,-0x74(%di)
        prog_cnt = strtol(buf1, nullptr, 10);
    91cb:	67 66 c7 04 24 0a    	movw   $0xa24,(%si)
    91d1:	00 00                	add    %al,(%eax)
    91d3:	00 66 6a             	add    %ah,0x6a(%esi)
    91d6:	00 66 56             	add    %ah,0x56(%esi)
    91d9:	66 e8 75 f4          	callw  8652 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    91dd:	ff                   	(bad)  
    91de:	ff 67 66             	jmp    *0x66(%edi)
    91e1:	89 83 84 0b 00 00    	mov    %eax,0xb84(%ebx)
    91e7:	66 83 c4 0c          	add    $0xc,%sp
        for(size_t i = 0; i < prog_cnt; ++i)
    91eb:	67 66 c7 45 90 00 00 	movw   $0x0,-0x70(%di)
    91f2:	00 00                	add    %al,(%eax)
    91f4:	67 66 8b 45 90       	mov    -0x70(%di),%ax
    91f9:	67 66 39 83 84 0b    	cmp    %ax,0xb84(%bp,%di)
    91ff:	00 00                	add    %al,(%eax)
    9201:	0f 86 97 00 67 66    	jbe    6667929e <_GLOBAL_OFFSET_TABLE_+0x6666e3d2>
            sscanf(p, "%s%s", buf2, buf3);
    9207:	8d 7d d4             	lea    -0x2c(%ebp),%edi
    920a:	66 57                	push   %di
    920c:	67 66 8d 75 b4       	lea    -0x4c(%di),%si
    9211:	66 56                	push   %si
    9213:	66 68 7d ae          	pushw  $0xae7d
    9217:	00 00                	add    %al,(%eax)
    9219:	67 66 ff 75 8c       	pushw  -0x74(%di)
    921e:	66 e8 85 f8          	callw  8aa7 <_Z7vsscanfPKcS0_Pc+0x1bf>
    9222:	ff                   	(bad)  
    9223:	ff 67 66             	jmp    *0x66(%edi)
    9226:	6b 4d 90 24          	imul   $0x24,-0x70(%ebp),%ecx
            strcpy(progs[i].name, buf2);
    922a:	66 83 c4 10          	add    $0x10,%sp
    922e:	66 56                	push   %si
    9230:	67 66 8d 84 0b 8c    	lea    -0x73f5(%si),%ax
    9236:	0b 00                	or     (%eax),%eax
    9238:	00 67 66             	add    %ah,0x66(%edi)
    923b:	89 4d 88             	mov    %ecx,-0x78(%ebp)
    923e:	66 50                	push   %ax
    9240:	66 e8 56 f2          	callw  849a <_Z6strlenPKc+0x1a>
    9244:	ff                   	(bad)  
    9245:	ff 66 58             	jmp    *0x58(%esi)
            progs[i].lba = strtol(buf3, nullptr, 10);
    9248:	66 5a                	pop    %dx
    924a:	66 6a 0a             	pushw  $0xa
    924d:	66 6a 00             	pushw  $0x0
    9250:	66 57                	push   %di
    9252:	66 e8 fc f3          	callw  8652 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    9256:	ff                   	(bad)  
    9257:	ff 67 66             	jmp    *0x66(%edi)
    925a:	8b 4d 88             	mov    -0x78(%ebp),%ecx
    925d:	67 66 89 84 0b ac    	mov    %ax,-0x53f5(%si)
    9263:	0b 00                	or     (%eax),%eax
    9265:	00 66 83             	add    %ah,-0x7d(%esi)
            p += (strlen(buf2) + strlen(buf3) + 2);
    9268:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    926b:	56                   	push   %esi
    926c:	66 e8 0e f2          	callw  847e <_Z6memsetPvim+0x23>
    9270:	ff                   	(bad)  
    9271:	ff 67 66             	jmp    *0x66(%edi)
    9274:	89 45 88             	mov    %eax,-0x78(%ebp)
    9277:	67 66 89 3c          	mov    %di,(%si)
    927b:	24 66                	and    $0x66,%al
    927d:	e8 fe f1 ff ff       	call   8480 <_Z6strlenPKc>
    9282:	67 66 8b 55 88       	mov    -0x78(%di),%dx
    9287:	67 66 8d 44 02       	lea    0x2(%si),%ax
    928c:	02 67 66             	add    0x66(%edi),%ah
    928f:	01 45 8c             	add    %eax,-0x74(%ebp)
        for(size_t i = 0; i < prog_cnt; ++i)
    9292:	67 66 ff 45 90       	incw   -0x70(%di)
    9297:	66 59                	pop    %cx
    9299:	e9 58 ff 67 66       	jmp    666891f6 <_GLOBAL_OFFSET_TABLE_+0x6667e32a>
    }
    929e:	8d 65 f4             	lea    -0xc(%ebp),%esp
    92a1:	66 5b                	pop    %bx
    92a3:	66 5e                	pop    %si
    92a5:	66 5f                	pop    %di
    92a7:	66 5d                	pop    %bp
    92a9:	66 c3                	retw   

Disassembly of section .text._ZN2sh3runEv:

000092ac <_ZN2sh3runEv>:
        read_help_file();
    }
    void run () {
    92ac:	66 55                	push   %bp
    92ae:	66 89 e5             	mov    %sp,%bp
    92b1:	66 57                	push   %di
    92b3:	66 56                	push   %si
    92b5:	66 53                	push   %bx
    92b7:	66 83 ec 10          	sub    $0x10,%sp
    92bb:	67 66 8b 7d 08       	mov    0x8(%di),%di
        printf("%s", prompt);
    92c0:	66 68 82 ae          	pushw  $0xae82
    92c4:	00 00                	add    %al,(%eax)
    92c6:	66 68 7f ae          	pushw  $0xae7f
    92ca:	00 00                	add    %al,(%eax)
    92cc:	66 e8 01 fa          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    92d0:	ff                   	(bad)  
    92d1:	ff 66 59             	jmp    *0x59(%esi)
    92d4:	66 5b                	pop    %bx
        while(true)
        {
            char in = getchar();
    92d6:	66 e8 a4 f5          	callw  887e <_Z4putsPKc+0x3c>
    92da:	ff                   	(bad)  
    92db:	ff 66 89             	jmp    *-0x77(%esi)
    92de:	c2 3c 08             	ret    $0x83c
            if (in == '\b')
    92e1:	75 35                	jne    9318 <_ZN2sh3runEv+0x6c>
            {
                if(pos != 0){
    92e3:	67 66 83 bf 88 0b 00 	cmpw   $0x0,0xb88(%bx)
    92ea:	00 00                	add    %al,(%eax)
    92ec:	74 e8                	je     92d6 <_ZN2sh3runEv+0x2a>
                    putchar('\b');
    92ee:	66 6a 08             	pushw  $0x8
    92f1:	66 e8 31 f5          	callw  8826 <_ZL19system_call_putchari+0x29>
    92f5:	ff                   	(bad)  
    92f6:	ff 67 66             	jmp    *0x66(%edi)
                    buf[pos--] = '\0';
    92f9:	8b 87 88 0b 00 00    	mov    0xb88(%edi),%eax
    92ff:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    9304:	67 66 89 97 88 0b    	mov    %dx,0xb88(%bx)
    930a:	00 00                	add    %al,(%eax)
    930c:	67 c6 84 07 04 02    	movb   $0x2,0x407(%si)
    9312:	00 00                	add    %al,(%eax)
    9314:	00 e9                	add    %ch,%cl
    9316:	03 03                	add    (%ebx),%eax
                }
            }
            else if (in == 13)
    9318:	3c 0d                	cmp    $0xd,%al
    931a:	0f 85 d8 01 66 6a    	jne    6a6694f8 <_GLOBAL_OFFSET_TABLE_+0x6a65e62c>
            {
                putchar('\n');
    9320:	0a 66 e8             	or     -0x18(%esi),%ah
    9323:	01 f5                	add    %esi,%ebp
    9325:	ff                   	(bad)  
    9326:	ff 67 66             	jmp    *0x66(%edi)
                if(strlen(buf) == 0)
    9329:	8d 87 04 02 00 00    	lea    0x204(%edi),%eax
    932f:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    9334:	67 66 89 04          	mov    %ax,(%si)
    9338:	24 66                	and    $0x66,%al
    933a:	e8 41 f1 ff ff       	call   8480 <_Z6strlenPKc>
    933f:	66 5a                	pop    %dx
    9341:	66 85 c0             	test   %ax,%ax
    9344:	0f 84 78 ff 67 66    	je     666892c2 <_GLOBAL_OFFSET_TABLE_+0x6667e3f6>
        memmove(histroy[1], histroy[0], buf_size * history_term * sizeof(char));
    934a:	8d 9f 84 02 00 00    	lea    0x284(%edi),%ebx
    9350:	66 68 00 05          	pushw  $0x500
    9354:	00 00                	add    %al,(%eax)
    9356:	66 53                	push   %bx
    9358:	67 66 8d 87 04 03    	lea    0x304(%bx),%ax
    935e:	00 00                	add    %al,(%eax)
    9360:	66 50                	push   %ax
    9362:	66 e8 a6 f0          	callw  840c <_Z6memcpyPvPKvm+0x2b>
    9366:	ff                   	(bad)  
    9367:	ff 66 83             	jmp    *-0x7d(%esi)
        strcpy(histroy[0], buf);
    936a:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    936d:	66 ff 75 f0          	pushw  -0x10(%ebp)
    9371:	66 53                	push   %bx
    9373:	66 e8 23 f1          	callw  849a <_Z6strlenPKc+0x1a>
    9377:	ff                   	(bad)  
    9378:	ff 66 5b             	jmp    *0x5b(%esi)
    937b:	66 5e                	pop    %si
        char * p = buf;
    937d:	67 66 8d 9f 04 02    	lea    0x204(%bx),%bx
    9383:	00 00                	add    %al,(%eax)
        while(*p && isspace(*p)){
    9385:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    938a:	84 c0                	test   %al,%al
    938c:	75 08                	jne    9396 <_ZN2sh3runEv+0xea>
        char * p = buf;
    938e:	66 31 d2             	xor    %dx,%dx
    9391:	66 31 f6             	xor    %si,%si
    9394:	eb 39                	jmp    93cf <_ZN2sh3runEv+0x123>
        while(*p && isspace(*p)){
    9396:	66 50                	push   %ax
    9398:	66 e8 f9 f1          	callw  8595 <_Z7reversePc+0x4a>
    939c:	ff                   	(bad)  
    939d:	ff 66 59             	jmp    *0x59(%esi)
    93a0:	66 85 c0             	test   %ax,%ax
    93a3:	74 e9                	je     938e <_ZN2sh3runEv+0xe2>
            ++p;
    93a5:	66 43                	inc    %bx
    93a7:	eb dc                	jmp    9385 <_ZN2sh3runEv+0xd9>
    93a9:	67 88 55 ec          	mov    %dl,-0x14(%di)
            if(isspace(*p))
    93ad:	66 50                	push   %ax
    93af:	66 e8 e2 f1          	callw  8595 <_Z7reversePc+0x4a>
    93b3:	ff                   	(bad)  
    93b4:	ff 66 5a             	jmp    *0x5a(%esi)
    93b7:	66 85 c0             	test   %ax,%ax
    93ba:	67 8a 55 ec          	mov    -0x14(%di),%dl
    93be:	74 1a                	je     93da <_ZN2sh3runEv+0x12e>
                *p = '\0';
    93c0:	67 c6 03 00          	movb   $0x0,(%bp,%di)
                if(con)
    93c4:	84 d2                	test   %dl,%dl
    93c6:	74 05                	je     93cd <_ZN2sh3runEv+0x121>
                    ++i;
    93c8:	66 46                	inc    %si
                    con = false;
    93ca:	66 31 d2             	xor    %dx,%dx
            ++p;
    93cd:	66 43                	inc    %bx
        while (*p)
    93cf:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    93d4:	84 c0                	test   %al,%al
    93d6:	75 d1                	jne    93a9 <_ZN2sh3runEv+0xfd>
    93d8:	eb 0e                	jmp    93e8 <_ZN2sh3runEv+0x13c>
                if(!con)
    93da:	84 d2                	test   %dl,%dl
    93dc:	75 ef                	jne    93cd <_ZN2sh3runEv+0x121>
                    inputs[i] = p;
    93de:	67 66 89 5c b7       	mov    %bx,-0x49(%si)
    93e3:	04 b2                	add    $0xb2,%al
                    con = true;
    93e5:	01 eb                	add    %ebp,%ebx
    93e7:	e5 84                	in     $0x84,%eax
        if(con) ++i;
    93e9:	d2 74 04 66          	shlb   %cl,0x66(%esp,%eax,1)
    93ed:	46                   	inc    %esi
    93ee:	eb 07                	jmp    93f7 <_ZN2sh3runEv+0x14b>
                    printf("%s", prompt);
                    continue;
                }
                history_push(buf);
                int input_cnt = split_input(buf);
                if (input_cnt == 0)
    93f0:	66 85 f6             	test   %si,%si
    93f3:	0f 84 df fe 67 66    	je     666892d8 <_GLOBAL_OFFSET_TABLE_+0x6667e40c>
                    continue;
                int cmd_cnt = split_batch(inputs, input_cnt);
    93f9:	8d 47 04             	lea    0x4(%edi),%eax
    93fc:	67 66 89 45 ec       	mov    %ax,-0x14(%di)
        int p = 0;
    9401:	66 31 c9             	xor    %cx,%cx
        while(strcmp(inputs[p], ";") == 0){
    9404:	66 68 89 ae          	pushw  $0xae89
    9408:	00 00                	add    %al,(%eax)
    940a:	67 66 8b 45 ec       	mov    -0x14(%di),%ax
    940f:	67 66 ff 34          	pushw  (%si)
    9413:	88 67 66             	mov    %ah,0x66(%edi)
    9416:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    9419:	66 e8 bf f0          	callw  84dc <_Z6strcpyPcPKc+0x40>
    941d:	ff                   	(bad)  
    941e:	ff 66 59             	jmp    *0x59(%esi)
    9421:	66 5b                	pop    %bx
    9423:	66 85 c0             	test   %ax,%ax
    9426:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    942b:	75 04                	jne    9431 <_ZN2sh3runEv+0x185>
            ++p;
    942d:	66 41                	inc    %cx
    942f:	eb d3                	jmp    9404 <_ZN2sh3runEv+0x158>
        bool con = false;
    9431:	66 31 d2             	xor    %dx,%dx
        int i = 0;
    9434:	66 31 db             	xor    %bx,%bx
        while (p < input_cnt)
    9437:	66 39 f1             	cmp    %si,%cx
    943a:	7d 6a                	jge    94a6 <_ZN2sh3runEv+0x1fa>
    943c:	67 88 55 e7          	mov    %dl,-0x19(%di)
            if(strcmp(inputs[p], ";") == 0)
    9440:	66 68 89 ae          	pushw  $0xae89
    9444:	00 00                	add    %al,(%eax)
    9446:	67 66 8b 45 ec       	mov    -0x14(%di),%ax
    944b:	67 66 ff 34          	pushw  (%si)
    944f:	88 67 66             	mov    %ah,0x66(%edi)
    9452:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    9455:	66 e8 83 f0          	callw  84dc <_Z6strcpyPcPKc+0x40>
    9459:	ff                   	(bad)  
    945a:	ff 66 59             	jmp    *0x59(%esi)
    945d:	66 5a                	pop    %dx
    945f:	66 85 c0             	test   %ax,%ax
    9462:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    9467:	67 8a 55 e7          	mov    -0x19(%di),%dl
    946b:	75 0b                	jne    9478 <_ZN2sh3runEv+0x1cc>
                if(con)
    946d:	84 d2                	test   %dl,%dl
    946f:	74 31                	je     94a2 <_ZN2sh3runEv+0x1f6>
                    ++i;
    9471:	66 43                	inc    %bx
                    con = false;
    9473:	66 31 d2             	xor    %dx,%dx
    9476:	eb 2a                	jmp    94a2 <_ZN2sh3runEv+0x1f6>
                if(!con)
    9478:	84 d2                	test   %dl,%dl
    947a:	75 1d                	jne    9499 <_ZN2sh3runEv+0x1ed>
    947c:	67 66 8d 04          	lea    (%si),%ax
    9480:	df 67 66             	fbld   0x66(%edi)
                    cmds[i].start = p;
    9483:	89 88 04 01 00 00    	mov    %ecx,0x104(%eax)
                    cmds[i].cnt = 1;
    9489:	67 66 c7 80 08 01 00 	movw   $0x0,0x108(%bx,%si)
    9490:	00 
    9491:	01 00                	add    %eax,(%eax)
    9493:	00 00                	add    %al,(%eax)
                    con = true;
    9495:	b2 01                	mov    $0x1,%dl
    9497:	eb 09                	jmp    94a2 <_ZN2sh3runEv+0x1f6>
                    cmds[i].cnt++;
    9499:	67 66 ff 84 df 08    	incw   0x8df(%si)
    949f:	01 00                	add    %eax,(%eax)
    94a1:	00 66 41             	add    %ah,0x41(%esi)
            ++p;
    94a4:	eb 91                	jmp    9437 <_ZN2sh3runEv+0x18b>
        if(con) ++i;
    94a6:	84 d2                	test   %dl,%dl
    94a8:	74 02                	je     94ac <_ZN2sh3runEv+0x200>
    94aa:	66 43                	inc    %bx
                for(int cmd_num = 0; cmd_num < cmd_cnt; ++ cmd_num)
    94ac:	66 31 f6             	xor    %si,%si
    94af:	66 39 de             	cmp    %bx,%si
    94b2:	74 1b                	je     94cf <_ZN2sh3runEv+0x223>
                {
                    exec(cmds[cmd_num]);
    94b4:	67 66 8d 84 f7 04    	lea    0x4f7(%si),%ax
    94ba:	01 00                	add    %eax,(%eax)
    94bc:	00 66 50             	add    %ah,0x50(%esi)
    94bf:	66 57                	push   %di
    94c1:	66 e8 fd f9          	callw  8ec2 <_ZN3tty7putcharEi+0x100>
    94c5:	ff                   	(bad)  
    94c6:	ff 66 46             	jmp    *0x46(%esi)
                for(int cmd_num = 0; cmd_num < cmd_cnt; ++ cmd_num)
    94c9:	66 58                	pop    %ax
    94cb:	66 5a                	pop    %dx
    94cd:	eb e0                	jmp    94af <_ZN2sh3runEv+0x203>
                }
                memset(buf, 0, buf_size);
    94cf:	66 68 80 00          	pushw  $0x80
    94d3:	00 00                	add    %al,(%eax)
    94d5:	66 6a 00             	pushw  $0x0
    94d8:	67 66 ff 75 f0       	pushw  -0x10(%di)
    94dd:	66 e8 78 ef          	callw  8459 <_Z7memmovePvPKvm+0x4b>
    94e1:	ff                   	(bad)  
    94e2:	ff 67 66             	jmp    *0x66(%edi)
                pos = 0;
    94e5:	c7 87 88 0b 00 00 00 	movl   $0x0,0xb88(%edi)
    94ec:	00 00 00 
                printf("%s", prompt);
    94ef:	66 83 c4 0c          	add    $0xc,%sp
    94f3:	e9 ca fd 84 c0       	jmp    c08592c2 <_GLOBAL_OFFSET_TABLE_+0xc084e3f6>
            }
            else if (in == 0)
    94f8:	0f 84 da fd 3c 09    	je     93d92d8 <_GLOBAL_OFFSET_TABLE_+0x93ce40c>
            {
                continue;
            }
            else if( in == '\t')
    94fe:	0f 85 e6 00 66 31    	jne    316695ea <_GLOBAL_OFFSET_TABLE_+0x3165e71e>
            {
                bool first_matching = false;
                for(int i = 0; i < supported_cmd_num; ++i){
    9504:	db 66 31             	(bad)  0x31(%esi)
                bool first_matching = false;
    9507:	c9                   	leave  
    9508:	67 66 8d b7 04 02    	lea    0x204(%bx),%si
    950e:	00 00                	add    %al,(%eax)
                for(int i = 0; i < supported_cmd_num; ++i){
    9510:	67 66 39 1f          	cmp    %bx,(%bx)
    9514:	7e 53                	jle    9569 <_ZN2sh3runEv+0x2bd>
    9516:	67 88 4d ec          	mov    %cl,-0x14(%di)
                    if(bf(buf, cmd_list[i]) != -1)
    951a:	67 66 8b 04          	mov    (%si),%ax
    951e:	9d                   	popf   
    951f:	8c ae 00 00 67 66    	mov    %gs,0x66670000(%esi)
    9525:	89 45 f0             	mov    %eax,-0x10(%ebp)
    9528:	66 89 c2             	mov    %ax,%dx
    952b:	66 89 f0             	mov    %si,%ax
    952e:	66 e8 de f7          	callw  8d10 <_Z6printfPKcz+0x3d>
    9532:	ff                   	(bad)  
    9533:	ff 66 40             	jmp    *0x40(%esi)
    9536:	67 8a 4d ec          	mov    -0x14(%di),%cl
    953a:	74 29                	je     9565 <_ZN2sh3runEv+0x2b9>
                    {
                        if(!first_matching){
    953c:	84 c9                	test   %cl,%cl
    953e:	75 0e                	jne    954e <_ZN2sh3runEv+0x2a2>
                            printf("\n");
    9540:	66 68 62 ad          	pushw  $0xad62
    9544:	00 00                	add    %al,(%eax)
    9546:	66 e8 87 f7          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    954a:	ff                   	(bad)  
    954b:	ff 66 58             	jmp    *0x58(%esi)
                            first_matching = true;
                        }
                        printf("%s\n", cmd_list[i]);
    954e:	67 66 ff 75 f0       	pushw  -0x10(%di)
    9553:	66 68 50 ae          	pushw  $0xae50
    9557:	00 00                	add    %al,(%eax)
    9559:	66 e8 74 f7          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    955d:	ff                   	(bad)  
    955e:	ff 66 5e             	jmp    *0x5e(%esi)
    9561:	66 58                	pop    %ax
    9563:	b1 01                	mov    $0x1,%cl
                for(int i = 0; i < supported_cmd_num; ++i){
    9565:	66 43                	inc    %bx
    9567:	eb 9f                	jmp    9508 <_ZN2sh3runEv+0x25c>
                    }
                }
                for(size_t i = 0; i < prog_cnt; ++i)
    9569:	66 31 db             	xor    %bx,%bx
    956c:	67 88 4d ec          	mov    %cl,-0x14(%di)
    9570:	67 66 39 9f 84 0b    	cmp    %bx,0xb84(%bx)
    9576:	00 00                	add    %al,(%eax)
    9578:	76 53                	jbe    95cd <_ZN2sh3runEv+0x321>
    957a:	66 6b c3 24          	imul   $0x24,%bx,%ax
    957e:	67 66 8d 84 07 8c    	lea    -0x73f9(%si),%ax
    9584:	0b 00                	or     (%eax),%eax
    9586:	00 67 66             	add    %ah,0x66(%edi)
    9589:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    if(bf(buf, progs[i].name) != -1)
    958c:	66 89 c2             	mov    %ax,%dx
    958f:	66 89 f0             	mov    %si,%ax
    9592:	66 e8 7a f7          	callw  8d10 <_Z6printfPKcz+0x3d>
    9596:	ff                   	(bad)  
    9597:	ff 66 40             	jmp    *0x40(%esi)
    959a:	67 8a 4d ec          	mov    -0x14(%di),%cl
    959e:	74 29                	je     95c9 <_ZN2sh3runEv+0x31d>
                    {
                        if(!first_matching){
    95a0:	84 c9                	test   %cl,%cl
    95a2:	75 0e                	jne    95b2 <_ZN2sh3runEv+0x306>
                            printf("\n");
    95a4:	66 68 62 ad          	pushw  $0xad62
    95a8:	00 00                	add    %al,(%eax)
    95aa:	66 e8 23 f7          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    95ae:	ff                   	(bad)  
    95af:	ff 66 59             	jmp    *0x59(%esi)
                            first_matching = true;
                        }
                        printf("%s\n", progs[i].name);
    95b2:	67 66 ff 75 f0       	pushw  -0x10(%di)
    95b7:	66 68 50 ae          	pushw  $0xae50
    95bb:	00 00                	add    %al,(%eax)
    95bd:	66 e8 10 f7          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    95c1:	ff                   	(bad)  
    95c2:	ff 66 58             	jmp    *0x58(%esi)
    95c5:	66 5a                	pop    %dx
    95c7:	b1 01                	mov    $0x1,%cl
                for(size_t i = 0; i < prog_cnt; ++i)
    95c9:	66 43                	inc    %bx
    95cb:	eb 9f                	jmp    956c <_ZN2sh3runEv+0x2c0>
                    }
                printf("%s", prompt);
    95cd:	66 68 82 ae          	pushw  $0xae82
    95d1:	00 00                	add    %al,(%eax)
    95d3:	66 68 7f ae          	pushw  $0xae7f
    95d7:	00 00                	add    %al,(%eax)
    95d9:	66 e8 f4 f6          	callw  8cd1 <_Z7sprintfPcPKcz+0x1e>
    95dd:	ff                   	(bad)  
    95de:	ff 66 5a             	jmp    *0x5a(%esi)
                printf("%s", buf);
    95e1:	66 59                	pop    %cx
    95e3:	66 56                	push   %si
    95e5:	e9 de fc 66 0f       	jmp    f6792c8 <_GLOBAL_OFFSET_TABLE_+0xf66e3fc>
            }
            else {
                putchar(in);
    95ea:	be c0 67 66 89       	mov    $0x896667c0,%esi
    95ef:	55                   	push   %ebp
    95f0:	f0 66 50             	lock push %ax
    95f3:	66 e8 2f f2          	callw  8826 <_ZL19system_call_putchari+0x29>
    95f7:	ff                   	(bad)  
    95f8:	ff 67 66             	jmp    *0x66(%edi)
                buf[pos++] = in;
    95fb:	8b 87 88 0b 00 00    	mov    0xb88(%edi),%eax
    9601:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    9606:	67 66 89 8f 88 0b    	mov    %cx,0xb88(%bx)
    960c:	00 00                	add    %al,(%eax)
    960e:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    9613:	67 88 94 07 04       	mov    %dl,0x407(%si)
    9618:	02 00                	add    (%eax),%al
    961a:	00 66 58             	add    %ah,0x58(%esi)
    961d:	e9                   	.byte 0xe9
    961e:	b6 fc                	mov    $0xfc,%dh

Disassembly of section .text._Z4itoaIjEvPcT_ib:

00009620 <_Z4itoaIjEvPcT_ib>:
void itoa(char* buffer, T num, int base, bool captial = false)
    9620:	66 55                	push   %bp
    9622:	66 89 e5             	mov    %sp,%bp
    9625:	66 57                	push   %di
    9627:	66 56                	push   %si
    9629:	66 53                	push   %bx
    962b:	66 83 ec 08          	sub    $0x8,%sp
    962f:	67 66 8b 75 08       	mov    0x8(%di),%si
    9634:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9639:	67 66 8b 7d 10       	mov    0x10(%di),%di
    963e:	67 8a 5d 14          	mov    0x14(%di),%bl
    9642:	67 88 5d ef          	mov    %bl,-0x11(%di)
    char *p = buffer;
    9646:	66 89 f1             	mov    %si,%cx
    9649:	66 31 d2             	xor    %dx,%dx
    964c:	66 f7 f7             	div    %di
    964f:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    9654:	67 80 7d ef 00       	cmpb   $0x0,-0x11(%di)
    9659:	74 09                	je     9664 <_Z4itoaIjEvPcT_ib+0x44>
    965b:	67 8a 9a a8 ae       	mov    -0x5158(%bp,%si),%bl
    9660:	00 00                	add    %al,(%eax)
    9662:	eb 07                	jmp    966b <_Z4itoaIjEvPcT_ib+0x4b>
    9664:	67 8a 9a b9 ae       	mov    -0x5147(%bp,%si),%bl
    9669:	00 00                	add    %al,(%eax)
    966b:	67 66 8d 51 01       	lea    0x1(%bx,%di),%dx
    9670:	67 88 5a ff          	mov    %bl,-0x1(%bp,%si)
        if(num == 0) break;
    9674:	67 66 83 7d f0 00    	cmpw   $0x0,-0x10(%di)
    967a:	74 05                	je     9681 <_Z4itoaIjEvPcT_ib+0x61>
    967c:	66 89 d1             	mov    %dx,%cx
    967f:	eb c8                	jmp    9649 <_Z4itoaIjEvPcT_ib+0x29>
    *p = '\0';
    9681:	67 c6 41 01 00       	movb   $0x0,0x1(%bx,%di)
    reverse(buffer);
    9686:	67 66 89 75 08       	mov    %si,0x8(%di)
}
    968b:	66 58                	pop    %ax
    968d:	66 5a                	pop    %dx
    968f:	66 5b                	pop    %bx
    9691:	66 5e                	pop    %si
    9693:	66 5f                	pop    %di
    9695:	66 5d                	pop    %bp
    reverse(buffer);
    9697:	e9                   	.byte 0xe9
    9698:	b1 ee                	mov    $0xee,%cl
