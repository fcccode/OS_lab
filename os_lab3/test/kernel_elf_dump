
build/kernel/kernel.bin.elf:     file format elf32-i386


Disassembly of section .text:

00007e00 <_text>:
    7e00:	68 37 7e 68 80       	push   $0x80687e37
    7e05:	00 e8                	add    %ch,%al
    7e07:	15 00 83 c4 04       	adc    $0x4c48300,%eax
    7e0c:	68 39 7e 68 84       	push   $0x84687e39
    7e11:	00 e8                	add    %ch,%al
    7e13:	09 00                	or     %eax,(%eax)
    7e15:	83 c4 04             	add    $0x4,%esp
    7e18:	e8 3b 00 fa eb       	call   ebfa7e58 <_data_end+0xebf9d870>
    7e1d:	fe                   	.byte 0xfe

00007e1e <install_int>:
    7e1e:	55                   	push   %ebp
    7e1f:	89 e5                	mov    %esp,%ebp
    7e21:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    7e26:	8b 76 04             	mov    0x4(%esi),%esi
    7e29:	8b 4e 06             	mov    0x6(%esi),%ecx
    7e2c:	26 89 0c 26          	mov    %ecx,%es:(%esi,%eiz,1)
    7e30:	8c 4c 02 8e          	mov    %cs,-0x72(%edx,%eax,1)
    7e34:	c0                   	.byte 0xc0
    7e35:	5d                   	pop    %ebp
    7e36:	c3                   	ret    

00007e37 <interrupt_20h>:
    7e37:	b4 4c                	mov    $0x4c,%ah

00007e39 <interrupt_21h>:
    7e39:	80 fc 4c             	cmp    $0x4c,%ah
    7e3c:	75 09                	jne    7e47 <panic_21h_func_not_impl>
    7e3e:	83 c4 06             	add    $0x6,%esp
    7e41:	66 ff 26             	jmpw   *(%esi)
    7e44:	0a                   	.byte 0xa
    7e45:	a0                   	.byte 0xa0
    7e46:	cf                   	iret   

00007e47 <panic_21h_func_not_impl>:
    7e47:	eb fe                	jmp    7e47 <panic_21h_func_not_impl>

00007e49 <_Z19sys_get_current_ttyv>:
#include "../libc/string.h"
#include "../libc/stdio.h"
#include "sh.h"

static tty* current_tty = nullptr;
tty* sys_get_current_tty(){return current_tty;}
    7e49:	66 55                	push   %bp
    7e4b:	66 89 e5             	mov    %sp,%bp
    7e4e:	66 a1 a0 95 66 5d    	mov    0x5d6695a0,%ax
    7e54:	66 c3                	retw   

00007e56 <kernel_main>:
const char* str = "I am back";
extern "C" void kernel_main()
{
    7e56:	66 55                	push   %bp
    7e58:	66 89 e5             	mov    %sp,%bp
    7e5b:	66 53                	push   %bx
    7e5d:	66 81 ec 54 06       	sub    $0x654,%sp
    7e62:	00 00                	add    %al,(%eax)
#ifdef _USE_MULTI_TTY_
    char tty_mem[80*25*2];
#endif
public:
    tty() {
        sys_bios_clear_screen();
    7e64:	66 e8 16 01          	callw  7f7e <sys_bios_print_string+0x1e>
    7e68:	00 00                	add    %al,(%eax)
        tty_init();
    }
    void tty_init()
    {
        cur_x = 0;
    7e6a:	67 66 c7 85 a8 f9 ff 	movw   $0xffff,-0x658(%di)
    7e71:	ff 
    7e72:	00 00                	add    %al,(%eax)
    7e74:	00 00                	add    %al,(%eax)
        cur_y = 0;
    7e76:	67 66 c7 85 ac f9 ff 	movw   $0xffff,-0x654(%di)
    7e7d:	ff 
    7e7e:	00 00                	add    %al,(%eax)
    7e80:	00 00                	add    %al,(%eax)
        color = color;
    }
    void move_cursor(int x, int y)
    {
        uint16_t pos = x * 80 + y;
        sys_outb(0x3D4, 0x0F);
    7e82:	66 6a 0f             	pushw  $0xf
    7e85:	66 68 d4 03          	pushw  $0x3d4
    7e89:	00 00                	add    %al,(%eax)
    7e8b:	66 e8 86 03          	callw  8215 <sys_inb+0xd>
    7e8f:	00 00                	add    %al,(%eax)
        sys_outb(0x3D5, (uint8_t) (pos & 0xFF));
    7e91:	66 58                	pop    %ax
    7e93:	66 5a                	pop    %dx
    7e95:	66 6a 00             	pushw  $0x0
    7e98:	66 68 d5 03          	pushw  $0x3d5
    7e9c:	00 00                	add    %al,(%eax)
    7e9e:	66 e8 73 03          	callw  8215 <sys_inb+0xd>
    7ea2:	00 00                	add    %al,(%eax)
        sys_outb(0x3D4, 0x0E);
    7ea4:	66 59                	pop    %cx
    7ea6:	66 5b                	pop    %bx
    7ea8:	66 6a 0e             	pushw  $0xe
    7eab:	66 68 d4 03          	pushw  $0x3d4
    7eaf:	00 00                	add    %al,(%eax)
    7eb1:	66 e8 60 03          	callw  8215 <sys_inb+0xd>
    7eb5:	00 00                	add    %al,(%eax)
        sys_outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
    7eb7:	66 58                	pop    %ax
    7eb9:	66 5a                	pop    %dx
    7ebb:	66 6a 00             	pushw  $0x0
    7ebe:	66 68 d5 03          	pushw  $0x3d5
    7ec2:	00 00                	add    %al,(%eax)
    7ec4:	66 e8 4d 03          	callw  8215 <sys_inb+0xd>
    7ec8:	00 00                	add    %al,(%eax)
        color = MAKE_COLOR(VGA_BLACK, VGA_WHITE);
    7eca:	67 66 c7 85 b0 f9 ff 	movw   $0xffff,-0x650(%di)
    7ed1:	ff 
    7ed2:	07                   	pop    %es
    7ed3:	00 00                	add    %al,(%eax)
    7ed5:	00 67 66             	add    %ah,0x66(%edi)
    tty tty1;
    current_tty = &tty1;
    7ed8:	8d 85 a8 f9 ff ff    	lea    -0x658(%ebp),%eax
    7ede:	66 a3 a0 95 66 59    	mov    %ax,0x596695a0
//        if (ch == 13)
//            putchar('\n');
//        else
//            putchar(ch);
//    }
    printf("%s\n", "tty init OK");
    7ee4:	66 5b                	pop    %bx
    7ee6:	66 68 a5 a5          	pushw  $0xa5a5
    7eea:	00 00                	add    %al,(%eax)
    7eec:	66 68 89 a5          	pushw  $0xa589
    7ef0:	00 00                	add    %al,(%eax)
    7ef2:	66 e8 24 0c          	callw  8b1a <_Z7sprintfPcPKcz+0x1e>
    7ef6:	00 00                	add    %al,(%eax)
            progs[i].lba = strtol(buf3, nullptr, 10);
            p += (strlen(buf2) + strlen(buf3) + 2);
        }
    }
public:
    sh(){
    7ef8:	67 66 c7 45 f4 00 00 	movw   $0x0,-0xc(%di)
    7eff:	00 00                	add    %al,(%eax)
    7f01:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    7f08:	00 00                	add    %al,(%eax)
        memset(buf, 0, buf_size);
    7f0a:	66 58                	pop    %ax
    7f0c:	66 5a                	pop    %dx
    7f0e:	66 68 00 02          	pushw  $0x200
    7f12:	00 00                	add    %al,(%eax)
    7f14:	66 6a 00             	pushw  $0x0
    7f17:	67 66 8d 9d b4 f9    	lea    -0x64c(%di),%bx
    7f1d:	ff                   	(bad)  
    7f1e:	ff 66 53             	jmp    *0x53(%esi)
    7f21:	66 e8 3a 04          	callw  835f <_Z7memmovePvPKvm+0x4b>
    7f25:	00 00                	add    %al,(%eax)
        read_prog_record();
    7f27:	66 83 c4 0c          	add    $0xc,%sp
    7f2b:	66 53                	push   %bx
    7f2d:	66 e8 4f 0c          	callw  8b80 <_Z7isspacei+0x26>
    7f31:	00 00                	add    %al,(%eax)
    sh sh1;
    printf("%s\n", "sh init OK");
    7f33:	67 66 c7 04 24 b1    	movw   $0xb124,(%si)
    7f39:	a5                   	movsl  %ds:(%esi),%es:(%edi)
    7f3a:	00 00                	add    %al,(%eax)
    7f3c:	66 68 89 a5          	pushw  $0xa589
    7f40:	00 00                	add    %al,(%eax)
    7f42:	66 e8 d4 0b          	callw  8b1a <_Z7sprintfPcPKcz+0x1e>
    7f46:	00 00                	add    %al,(%eax)
    sh1.run();
    7f48:	66 59                	pop    %cx
    7f4a:	66 58                	pop    %ax
    7f4c:	66 53                	push   %bx
    7f4e:	66 e8 6c 0d          	callw  8cbe <_text_end+0x13c>
    7f52:	00 00                	add    %al,(%eax)
    7f54:	66 90                	xchg   %ax,%ax
    7f56:	66 90                	xchg   %ax,%ax
    7f58:	66 90                	xchg   %ax,%ax
    7f5a:	66 90                	xchg   %ax,%ax
    7f5c:	66 90                	xchg   %ax,%ax
    7f5e:	66 90                	xchg   %ax,%ax

00007f60 <sys_bios_print_string>:
    7f60:	55                   	push   %ebp
    7f61:	89 e5                	mov    %esp,%ebp
    7f63:	8b 4e 0a             	mov    0xa(%esi),%ecx
    7f66:	8b 5e 0e             	mov    0xe(%esi),%ebx
    7f69:	b7 00                	mov    $0x0,%bh
    7f6b:	8b 56 12             	mov    0x12(%esi),%edx
    7f6e:	8c d8                	mov    %ds,%eax
    7f70:	8e c0                	mov    %eax,%es
    7f72:	b8 01 13 8e ed       	mov    $0xed8e1301,%eax
    7f77:	8b 6e 06             	mov    0x6(%esi),%ebp
    7f7a:	cd 10                	int    $0x10
    7f7c:	8c ed                	mov    %gs,%ebp
    7f7e:	5d                   	pop    %ebp
    7f7f:	c3                   	ret    

00007f80 <sys_bios_clear_screen>:
    7f80:	60                   	pusha  
    7f81:	b4 06                	mov    $0x6,%ah
    7f83:	b0 00                	mov    $0x0,%al
    7f85:	b7 07                	mov    $0x7,%bh
    7f87:	b5 00                	mov    $0x0,%ch
    7f89:	b1 00                	mov    $0x0,%cl
    7f8b:	b6 18                	mov    $0x18,%dh
    7f8d:	b2 4f                	mov    $0x4f,%dl
    7f8f:	cd 10                	int    $0x10
    7f91:	61                   	popa   
    7f92:	c3                   	ret    

00007f93 <sys_bios_getchar>:
    7f93:	b4 00                	mov    $0x0,%ah
    7f95:	cd 16                	int    $0x16
    7f97:	b4 00                	mov    $0x0,%ah
    7f99:	c3                   	ret    

00007f9a <sys_execve_bin>:
    7f9a:	55                   	push   %ebp
    7f9b:	89 e5                	mov    %esp,%ebp
    7f9d:	60                   	pusha  
    7f9e:	1e                   	push   %ds
    7f9f:	06                   	push   %es
    7fa0:	16                   	push   %ss
    7fa1:	b8 00 10 8e d8       	mov    $0xd88e1000,%eax
    7fa6:	8e c0                	mov    %eax,%es
    7fa8:	8e d0                	mov    %eax,%ss
    7faa:	c7 06 00 a0 cd 00    	movl   $0xcda000,(%esi)
    7fb0:	c7 06 02 a0 20 00    	movl   $0x20a002,(%esi)
    7fb6:	c7 06 0a a0 c5 7f    	movl   $0x7fc5a00a,(%esi)
    7fbc:	8c 0e                	mov    %cs,(%esi)
    7fbe:	0c a0                	or     $0xa0,%al
    7fc0:	ea                   	.byte 0xea
    7fc1:	00                   	.byte 0x0
    7fc2:	a1                   	.byte 0xa1
    7fc3:	00 10                	add    %dl,(%eax)

00007fc5 <return_point>:
    7fc5:	58                   	pop    %eax
    7fc6:	8e d0                	mov    %eax,%ss
    7fc8:	58                   	pop    %eax
    7fc9:	8e c0                	mov    %eax,%es
    7fcb:	58                   	pop    %eax
    7fcc:	8e d8                	mov    %eax,%ds
    7fce:	61                   	popa   
    7fcf:	5d                   	pop    %ebp
    7fd0:	c3                   	ret    

00007fd1 <sys_bios_print_int>:
#include "sys_lib.h"
void sys_bios_print_int(int num, int color, int pos)
{
    7fd1:	66 55                	push   %bp
    7fd3:	66 89 e5             	mov    %sp,%bp
    7fd6:	66 57                	push   %di
    7fd8:	66 56                	push   %si
    7fda:	66 53                	push   %bx
    7fdc:	66 50                	push   %ax
    int num_ = num;
    7fde:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    7fe3:	66 b9 01 00          	mov    $0x1,%cx
    7fe7:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    7fe9:	66 bb 0a 00          	mov    $0xa,%bx
    7fed:	00 00                	add    %al,(%eax)
    7fef:	66 99                	cwtd   
    7ff1:	66 f7 fb             	idiv   %bx
    7ff4:	66 85 c0             	test   %ax,%ax
    7ff7:	74 04                	je     7ffd <sys_bios_print_int+0x2c>
    7ff9:	66 41                	inc    %cx
    7ffb:	eb f2                	jmp    7fef <sys_bios_print_int+0x1e>
    char arr[len + 1];
    7ffd:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    8002:	66 83 e0 fc          	and    $0xfffc,%ax
    8006:	66 29 c4             	sub    %ax,%sp
    8009:	66 89 e7             	mov    %sp,%di
    800c:	67 66 8d 1c          	lea    (%si),%bx
    8010:	0c 67                	or     $0x67,%al
    int power = 1;
    8012:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    8018:	00 00                	add    %al,(%eax)
    for(int i = 0; i < len; ++i, power *= 10)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    801a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    801f:	66 99                	cwtd   
    8021:	67 66 f7 7d f0       	idivw  -0x10(%di)
    8026:	66 be 0a 00          	mov    $0xa,%si
    802a:	00 00                	add    %al,(%eax)
    802c:	66 99                	cwtd   
    802e:	66 f7 fe             	idiv   %si
    8031:	66 83 c2 30          	add    $0x30,%dx
    8035:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    8039:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    803f:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8044:	66 4b                	dec    %bx
    8046:	66 39 df             	cmp    %bx,%di
    8049:	75 cf                	jne    801a <sys_bios_print_int+0x49>
    arr[len] = '\0';
    804b:	67 c6 04 0f          	movb   $0xf,(%si)
    804f:	00 67 66             	add    %ah,0x66(%edi)
    sys_bios_print_string(arr, len, color, pos);
    8052:	ff 75 10             	pushl  0x10(%ebp)
    8055:	67 66 ff 75 0c       	pushw  0xc(%di)
    805a:	66 51                	push   %cx
    805c:	66 57                	push   %di
    805e:	66 e8 fc fe          	callw  7f5e <kernel_main+0x108>
    8062:	ff                   	(bad)  
    8063:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8066:	c4 10                	les    (%eax),%edx
    8068:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    806d:	66 5b                	pop    %bx
    806f:	66 5e                	pop    %si
    8071:	66 5f                	pop    %di
    8073:	66 5d                	pop    %bp
    8075:	66 c3                	retw   

00008077 <sys_putchar>:
    //"mov word ptr gs:[bp],ax\n\t"
                   //".att_syntax noprefix\n\t");
//}

void sys_putchar(int c, int color, int x, int y)
{
    8077:	66 55                	push   %bp
    8079:	66 89 e5             	mov    %sp,%bp
    807c:	66 53                	push   %bx
    int offset = (x * 80 + y)*2;
    uint16_t ch = c | (color << 8);
    807e:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8083:	66 c1 e0 08          	shl    $0x8,%ax
    8087:	67 66 0b 45 08       	or     0x8(%di),%ax
    int offset = (x * 80 + y)*2;
    808c:	67 66 6b 5d 10 50    	imul   $0x50,0x10(%di),%bx
    8092:	67 66 03 5d 14       	add    0x14(%di),%bx
    8097:	66 01 db             	add    %bx,%bx
    "mov word ptr gs:[bp],ax\n\t"
    "popa\n\t"
    ".att_syntax noprefix\n\t"
    :
    :"a"(ch),"b"(offset)
    :"%ecx");
    809a:	66 60                	pushaw 
    809c:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    80a1:	89 dd                	mov    %ebx,%ebp
    80a3:	65 89 46 00          	mov    %eax,%gs:0x0(%esi)
    80a7:	66 61                	popaw  
}
    80a9:	66 5b                	pop    %bx
    80ab:	66 5d                	pop    %bp
    80ad:	66 c3                	retw   

000080af <sys_print_string>:
{
    80af:	66 55                	push   %bp
    80b1:	66 89 e5             	mov    %sp,%bp
    80b4:	66 56                	push   %si
    80b6:	66 53                	push   %bx
    80b8:	67 66 8b 5d 14       	mov    0x14(%di),%bx
    80bd:	67 66 8b 75 0c       	mov    0xc(%di),%si
    80c2:	66 01 de             	add    %bx,%si
    80c5:	66 89 da             	mov    %bx,%dx
    for(unsigned int i = 0; i < len; ++i)
    80c8:	66 39 f2             	cmp    %si,%dx
    80cb:	74 28                	je     80f5 <sys_print_string+0x46>
        sys_putchar(str[i], color, x, y + i);
    80cd:	66 52                	push   %dx
    80cf:	67 66 ff 75 10       	pushw  0x10(%di)
    80d4:	66 6a 07             	pushw  $0x7
    80d7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    80dc:	66 29 d8             	sub    %bx,%ax
    80df:	67 66 0f be 04       	movsbw (%si),%ax
    80e4:	10 66 50             	adc    %ah,0x50(%esi)
    80e7:	66 e8 8a ff          	callw  8075 <sys_bios_print_int+0xa4>
    80eb:	ff                   	(bad)  
    80ec:	ff 66 42             	jmp    *0x42(%esi)
    for(unsigned int i = 0; i < len; ++i)
    80ef:	66 83 c4 10          	add    $0x10,%sp
    80f3:	eb d3                	jmp    80c8 <sys_print_string+0x19>
}
    80f5:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    80fa:	66 5b                	pop    %bx
    80fc:	66 5e                	pop    %si
    80fe:	66 5d                	pop    %bp
    8100:	66 c3                	retw   

00008102 <sys_print_int>:
{
    8102:	66 55                	push   %bp
    8104:	66 89 e5             	mov    %sp,%bp
    8107:	66 57                	push   %di
    8109:	66 56                	push   %si
    810b:	66 53                	push   %bx
    810d:	66 50                	push   %ax
    int num_ = num;
    810f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    8114:	66 b9 01 00          	mov    $0x1,%cx
    8118:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    811a:	66 bb 0a 00          	mov    $0xa,%bx
    811e:	00 00                	add    %al,(%eax)
    8120:	66 99                	cwtd   
    8122:	66 f7 fb             	idiv   %bx
    8125:	66 85 c0             	test   %ax,%ax
    8128:	74 04                	je     812e <sys_print_int+0x2c>
    812a:	66 41                	inc    %cx
    812c:	eb f2                	jmp    8120 <sys_print_int+0x1e>
    char arr[len + 1];
    812e:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    8133:	66 83 e0 fc          	and    $0xfffc,%ax
    8137:	66 29 c4             	sub    %ax,%sp
    813a:	66 89 e7             	mov    %sp,%di
    813d:	67 66 8d 1c          	lea    (%si),%bx
    8141:	0c 67                	or     $0x67,%al
    int power = 1;
    8143:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    8149:	00 00                	add    %al,(%eax)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    814b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8150:	66 99                	cwtd   
    8152:	67 66 f7 7d f0       	idivw  -0x10(%di)
    8157:	66 be 0a 00          	mov    $0xa,%si
    815b:	00 00                	add    %al,(%eax)
    815d:	66 99                	cwtd   
    815f:	66 f7 fe             	idiv   %si
    8162:	66 83 c2 30          	add    $0x30,%dx
    8166:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    816a:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    8170:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8175:	66 4b                	dec    %bx
    8177:	66 39 df             	cmp    %bx,%di
    817a:	75 cf                	jne    814b <sys_print_int+0x49>
    arr[len] = '\0';
    817c:	67 c6 04 0f          	movb   $0xf,(%si)
    8180:	00 67 66             	add    %ah,0x66(%edi)
    sys_print_string(arr, len, x, y); 
    8183:	ff 75 10             	pushl  0x10(%ebp)
    8186:	67 66 ff 75 0c       	pushw  0xc(%di)
    818b:	66 51                	push   %cx
    818d:	66 57                	push   %di
    818f:	66 e8 1a ff          	callw  80ad <sys_putchar+0x36>
    8193:	ff                   	(bad)  
    8194:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8197:	c4 10                	les    (%eax),%edx
    8199:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    819e:	66 5b                	pop    %bx
    81a0:	66 5e                	pop    %si
    81a2:	66 5f                	pop    %di
    81a4:	66 5d                	pop    %bp
    81a6:	66 c3                	retw   

000081a8 <sys_bios_scroll_up>:

void sys_bios_scroll_up(int color)
{
    81a8:	66 55                	push   %bp
    81aa:	66 89 e5             	mov    %sp,%bp
    "movb $79, %%dl\n\t"
    "movb $0x06, %%ah\n\t"
    "int $0x10\n\t"
    "popa\n\t"
    :
    : "g"(color));
    81ad:	66 60                	pushaw 
    81af:	b0 01                	mov    $0x1,%al
    81b1:	67 8a 7d 08          	mov    0x8(%di),%bh
    81b5:	b5 00                	mov    $0x0,%ch
    81b7:	b1 00                	mov    $0x0,%cl
    81b9:	b6 18                	mov    $0x18,%dh
    81bb:	b2 4f                	mov    $0x4f,%dl
    81bd:	b4 06                	mov    $0x6,%ah
    81bf:	cd 10                	int    $0x10
    81c1:	66 61                	popaw  
}
    81c3:	66 5d                	pop    %bp
    81c5:	66 c3                	retw   

000081c7 <sys_bios_putchar>:

void sys_bios_putchar(char c, int color, int x, int y)
{
    81c7:	66 55                	push   %bp
    81c9:	66 89 e5             	mov    %sp,%bp
    81cc:	66 50                	push   %ax
    81ce:	67 66 8b 45 08       	mov    0x8(%di),%ax
    81d3:	67 88 45 fc          	mov    %al,-0x4(%di)
    sys_bios_print_string(&c, 1, color, MAKE_POS(x, y));
    81d7:	67 66 8b 45 10       	mov    0x10(%di),%ax
    81dc:	66 c1 e0 08          	shl    $0x8,%ax
    81e0:	67 66 0f b6 55 14    	movzbw 0x14(%di),%dx
    81e6:	66 09 d0             	or     %dx,%ax
    81e9:	66 50                	push   %ax
    81eb:	67 66 ff 75 0c       	pushw  0xc(%di)
    81f0:	66 6a 01             	pushw  $0x1
    81f3:	67 66 8d 45 fc       	lea    -0x4(%di),%ax
    81f8:	66 50                	push   %ax
    81fa:	66 e8 60 fd          	callw  7f5e <kernel_main+0x108>
    81fe:	ff                   	(bad)  
    81ff:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8202:	c4 10                	les    (%eax),%edx
    8204:	66 c9                	leavew 
    8206:	66 c3                	retw   

00008208 <sys_inb>:

uint8_t sys_inb(uint16_t port)
{
    8208:	66 55                	push   %bp
    820a:	66 89 e5             	mov    %sp,%bp
    uint8_t ret;
    asm volatile ( "inb %1, %0"
                   : "=a"(ret)
                   : "Nd"(port) );
    820d:	67 66 8b 55 08       	mov    0x8(%di),%dx
    8212:	ec                   	in     (%dx),%al
    return ret;
}
    8213:	66 5d                	pop    %bp
    8215:	66 c3                	retw   

00008217 <sys_outb>:
//    asm(".att_syntax noprefix\n");
//    return ret;
//}

void sys_outb(uint16_t port, uint8_t data)
{
    8217:	66 55                	push   %bp
    8219:	66 89 e5             	mov    %sp,%bp
    asm volatile ( "outb %0, %1"
                   : 
                   : "a"(data), "Nd"(port) );
    821c:	67 66 8b 55 08       	mov    0x8(%di),%dx
    8221:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8226:	ee                   	out    %al,(%dx)
}
    8227:	66 5d                	pop    %bp
    8229:	66 c3                	retw   

0000822b <sys_dbg_bochs_putc>:
//                    : "=a"(ret)
//                    : "Nd"(port) );
//     return ret;
// }

void sys_dbg_bochs_putc(char c){
    822b:	66 55                	push   %bp
    822d:	66 89 e5             	mov    %sp,%bp
                   : "a"(data), "Nd"(port) );
    8230:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8235:	e6 e9                	out    %al,$0xe9
    sys_outb(0xe9, (uint8_t)c);
}
    8237:	66 5d                	pop    %bp
    8239:	66 c3                	retw   

0000823b <sys_get_scancode>:

char sys_get_scancode()
{
    823b:	66 55                	push   %bp
    823d:	66 89 e5             	mov    %sp,%bp
                   : "Nd"(port) );
    8240:	e4 64                	in     $0x64,%al
    while (!(sys_inb(0x64) & 1));
    8242:	a8 01                	test   $0x1,%al
    8244:	74 fa                	je     8240 <sys_get_scancode+0x5>
                   : "Nd"(port) );
    8246:	e4 60                	in     $0x60,%al
    return sys_inb(0x60);
}
    8248:	66 5d                	pop    %bp
    824a:	66 c3                	retw   

0000824c <sys_read_disk>:

void sys_read_disk(uint32_t segment, uint32_t address, uint16_t logical_start_sector, uint8_t secotr_cnt)
{
    824c:	66 55                	push   %bp
    824e:	66 89 e5             	mov    %sp,%bp
    8251:	66 53                	push   %bx
    uint8_t head = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) / FLOPPY_SECTOR_PER_TRACK;
    8253:	67 66 0f b7 45 10    	movzww 0x10(%di),%ax
    8259:	66 b9 24 00          	mov    $0x24,%cx
    825d:	00 00                	add    %al,(%eax)
    825f:	66 99                	cwtd   
    8261:	66 f7 f9             	idiv   %cx
    8264:	66 89 c1             	mov    %ax,%cx
    8267:	66 bb 12 00          	mov    $0x12,%bx
    826b:	00 00                	add    %al,(%eax)
    826d:	66 89 d0             	mov    %dx,%ax
    8270:	66 99                	cwtd   
    8272:	66 f7 fb             	idiv   %bx
    uint16_t cylinder = logical_start_sector / (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK);
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    //位操作一定要注意类型匹配（两小时）
    uint16_t mask1 = 255;
    uint16_t mask2 = 768;
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    8275:	66 89 cb             	mov    %cx,%bx
    8278:	66 c1 e3 08          	shl    $0x8,%bx
    827c:	66 81 e1 00 03       	and    $0x300,%cx
    8281:	00 00                	add    %al,(%eax)
    8283:	66 c1 f9 02          	sar    $0x2,%cx
    8287:	66 09 d9             	or     %bx,%cx
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    828a:	66 42                	inc    %dx
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    828c:	66 09 d1             	or     %dx,%cx
     "movb %4, %%al\n\t"    //扇区数
     "movb $0, %%dl\n\t"    //驱动器号
     "movb $2, %%ah\n\t"    //功能号
     "int $0x13\n\t"
     "pop %%es\n\t"
     : :"g"(segment), "g"(address), "g"(head), "g"(_cx), "g" (secotr_cnt));
    828f:	06                   	push   %es
    8290:	67 8b 5d 08          	mov    0x8(%di),%ebx
    8294:	8e c3                	mov    %ebx,%es
    8296:	67 8b 5d 0c          	mov    0xc(%di),%ebx
    829a:	88 c6                	mov    %al,%dh
    829c:	89 c9                	mov    %ecx,%ecx
    829e:	67 8a 45 14          	mov    0x14(%di),%al
    82a2:	b2 00                	mov    $0x0,%dl
    82a4:	b4 02                	mov    $0x2,%ah
    82a6:	cd 13                	int    $0x13
    82a8:	07                   	pop    %es
}
    82a9:	66 5b                	pop    %bx
    82ab:	66 5d                	pop    %bp
    82ad:	66 c3                	retw   

000082af <_Z6memcmpPKvS0_m>:
namespace hhlibc {

#endif

int memcmp(const void * _s1, const void* _s2, size_t n)
{
    82af:	66 55                	push   %bp
    82b1:	66 89 e5             	mov    %sp,%bp
    82b4:	66 31 d2             	xor    %dx,%dx
    auto s1 = reinterpret_cast<const unsigned char*>(_s1);
    auto s2 = reinterpret_cast<const unsigned char*>(_s2);
    while(n--)
    82b7:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    82bc:	74 22                	je     82e0 <_Z6memcmpPKvS0_m+0x31>
    {
        if(*s1 != *s2)          //**不能**让!=时跳出然后返回*s1 - *s2
    82be:	67 66 8b 45 08       	mov    0x8(%di),%ax
    82c3:	67 66 0f b6 04       	movzbw (%si),%ax
    82c8:	10 66 42             	adc    %ah,0x42(%esi)
    82cb:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    82d0:	67 66 0f b6 4c 11    	movzbw 0x11(%si),%cx
    82d6:	ff                   	(bad)  
    82d7:	38 c8                	cmp    %cl,%al
    82d9:	74 dc                	je     82b7 <_Z6memcmpPKvS0_m+0x8>
        {                       //因为那样在实际上==的时候，会比较错误
            return *s1 - *s2;
    82db:	66 29 c8             	sub    %cx,%ax
    82de:	eb 03                	jmp    82e3 <_Z6memcmpPKvS0_m+0x34>
        }
        ++s1;
        ++s2;
    }
    return 0;
    82e0:	66 31 c0             	xor    %ax,%ax
}
    82e3:	66 5d                	pop    %bp
    82e5:	66 c3                	retw   

000082e7 <_Z6memcpyPvPKvm>:

void* memcpy(void* _dst, const void* _src, size_t n)
{
    82e7:	66 55                	push   %bp
    82e9:	66 89 e5             	mov    %sp,%bp
    82ec:	66 53                	push   %bx
    82ee:	67 66 8b 45 08       	mov    0x8(%di),%ax
    82f3:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    82f8:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    while (n--)
    82fb:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    8300:	74 0c                	je     830e <_Z6memcpyPvPKvm+0x27>
    {
        *(dst++) = *(src++);
    8302:	67 8a 0c             	mov    (%si),%cl
    8305:	13 67 88             	adc    -0x78(%edi),%esp
    8308:	0c 10                	or     $0x10,%al
    830a:	66 42                	inc    %dx
    while (n--)
    830c:	eb ed                	jmp    82fb <_Z6memcpyPvPKvm+0x14>
    }
    return _dst;
}
    830e:	66 5b                	pop    %bx
    8310:	66 5d                	pop    %bp
    8312:	66 c3                	retw   

00008314 <_Z7memmovePvPKvm>:
void* memmove(void* _dst, const void* _src, size_t n)
{
    8314:	66 55                	push   %bp
    8316:	66 89 e5             	mov    %sp,%bp
    8319:	66 56                	push   %si
    831b:	66 53                	push   %bx
    831d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8322:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    8327:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    if(dst < src)
    832c:	66 39 d8             	cmp    %bx,%ax
    832f:	73 14                	jae    8345 <_Z7memmovePvPKvm+0x31>
    8331:	66 31 c9             	xor    %cx,%cx
    {
        while(n--)
    8334:	66 39 f1             	cmp    %si,%cx
    8337:	74 20                	je     8359 <_Z7memmovePvPKvm+0x45>
        {
            *(dst++) = *(src++);
    8339:	67 8a 14             	mov    (%si),%dl
    833c:	0b 67 88             	or     -0x78(%edi),%esp
    833f:	14 08                	adc    $0x8,%al
    8341:	66 41                	inc    %cx
        while(n--)
    8343:	eb ef                	jmp    8334 <_Z7memmovePvPKvm+0x20>
        }
    }
    else if(dst > src)
    8345:	76 12                	jbe    8359 <_Z7memmovePvPKvm+0x45>
    {
        src += n;
        dst += n;
        while(n--)
    8347:	66 4e                	dec    %si
    8349:	66 83 fe ff          	cmp    $0xffff,%si
    834d:	74 0a                	je     8359 <_Z7memmovePvPKvm+0x45>
        {
            *(--dst) = *(--src);
    834f:	67 8a 0c             	mov    (%si),%cl
    8352:	33 67 88             	xor    -0x78(%edi),%esp
    8355:	0c 30                	or     $0x30,%al
        while(n--)
    8357:	eb ee                	jmp    8347 <_Z7memmovePvPKvm+0x33>
        }
    }
    return _dst;
}
    8359:	66 5b                	pop    %bx
    835b:	66 5e                	pop    %si
    835d:	66 5d                	pop    %bp
    835f:	66 c3                	retw   

00008361 <_Z6memsetPvim>:
void* memset(void* _dst, int c, size_t n)
{
    8361:	66 55                	push   %bp
    8363:	66 89 e5             	mov    %sp,%bp
    8366:	67 66 8b 45 08       	mov    0x8(%di),%ax
    836b:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    8370:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    while(n--)
    8373:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    8378:	74 08                	je     8382 <_Z6memsetPvim+0x21>
    {
        *(dst++) = static_cast<unsigned char>(c);
    837a:	67 88 0c             	mov    %cl,(%si)
    837d:	10 66 42             	adc    %ah,0x42(%esi)
    while(n--)
    8380:	eb f1                	jmp    8373 <_Z6memsetPvim+0x12>
    }
    return _dst;
}
    8382:	66 5d                	pop    %bp
    8384:	66 c3                	retw   

00008386 <_Z6strlenPKc>:
size_t strlen(const char* _str)
{
    8386:	66 55                	push   %bp
    8388:	66 89 e5             	mov    %sp,%bp
    838b:	67 66 8b 55 08       	mov    0x8(%di),%dx
    auto str = _str;
    size_t len = 0;
    8390:	66 31 c0             	xor    %ax,%ax
    while(*(_str++))
    8393:	67 80 3c 02          	cmpb   $0x2,(%si)
    8397:	00 74 04 66          	add    %dh,0x66(%esp,%eax,1)
    {
        len++;
    839b:	40                   	inc    %eax
    while(*(_str++))
    839c:	eb f5                	jmp    8393 <_Z6strlenPKc+0xd>
    }
    return len;
}
    839e:	66 5d                	pop    %bp
    83a0:	66 c3                	retw   

000083a2 <_Z6strcpyPcPKc>:
char *strcpy(char* _dst, const char* _src)
{
    83a2:	66 55                	push   %bp
    83a4:	66 89 e5             	mov    %sp,%bp
    83a7:	66 56                	push   %si
    83a9:	66 53                	push   %bx
    83ab:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    83b0:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    auto len = strlen(_src);
    83b5:	66 51                	push   %cx
    83b7:	66 e8 c9 ff          	callw  8384 <_Z6memsetPvim+0x23>
    83bb:	ff                   	(bad)  
    83bc:	ff 66 89             	jmp    *-0x77(%esi)
    83bf:	c6                   	(bad)  
    memcpy(reinterpret_cast<void*>(_dst), reinterpret_cast<const void *>(_src), len);
    83c0:	67 66 89 04          	mov    %ax,(%si)
    83c4:	24 66                	and    $0x66,%al
    83c6:	51                   	push   %ecx
    83c7:	66 53                	push   %bx
    83c9:	66 e8 18 ff          	callw  82e5 <_Z6memcmpPKvS0_m+0x36>
    83cd:	ff                   	(bad)  
    83ce:	ff 67 c6             	jmp    *-0x3a(%edi)
    _dst[len] = '\0';
    83d1:	04 33                	add    $0x33,%al
    83d3:	00 66 89             	add    %ah,-0x77(%esi)
    return _dst;
}
    83d6:	d8 67 66             	fsubs  0x66(%edi)
    83d9:	8d 65 f8             	lea    -0x8(%ebp),%esp
    83dc:	66 5b                	pop    %bx
    83de:	66 5e                	pop    %si
    83e0:	66 5d                	pop    %bp
    83e2:	66 c3                	retw   

000083e4 <_Z6strcmpPKcS0_>:
int strcmp(const char* _s1, const char* _s2)
{
    83e4:	66 55                	push   %bp
    83e6:	66 89 e5             	mov    %sp,%bp
    83e9:	66 57                	push   %di
    83eb:	66 56                	push   %si
    83ed:	66 53                	push   %bx
    83ef:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    83f4:	67 66 8b 7d 0c       	mov    0xc(%di),%di
    auto len1 = strlen(_s1);
    83f9:	66 51                	push   %cx
    83fb:	66 e8 85 ff          	callw  8384 <_Z6memsetPvim+0x23>
    83ff:	ff                   	(bad)  
    8400:	ff 66 89             	jmp    *-0x77(%esi)
    8403:	c3                   	ret    
    auto len2 = strlen(_s2);
    8404:	67 66 89 3c          	mov    %di,(%si)
    8408:	24 66                	and    $0x66,%al
    840a:	e8 77 ff ff ff       	call   8386 <_Z6strlenPKc>
    840f:	66 5a                	pop    %dx
    8411:	66 89 c6             	mov    %ax,%si
    auto len = len1 < len2 ? len1 : len2;
    auto ret = memcmp(reinterpret_cast<const void*>(_s1), reinterpret_cast<const void *>(_s2), len);
    8414:	66 39 c3             	cmp    %ax,%bx
    8417:	77 03                	ja     841c <_Z6strcmpPKcS0_+0x38>
    8419:	66 89 d8             	mov    %bx,%ax
    841c:	66 50                	push   %ax
    841e:	66 57                	push   %di
    8420:	66 51                	push   %cx
    8422:	66 e8 87 fe          	callw  82ad <sys_read_disk+0x61>
    8426:	ff                   	(bad)  
    8427:	ff 66 83             	jmp    *-0x7d(%esi)
    842a:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    if(ret == 0)
    842d:	85 c0                	test   %eax,%eax
    842f:	75 11                	jne    8442 <_Z6strcmpPKcS0_+0x5e>
    {
        if(len1 == len2)
    8431:	66 39 f3             	cmp    %si,%bx
    8434:	74 0c                	je     8442 <_Z6strcmpPKcS0_+0x5e>
        {
            return -1;
        }
        else
        {
            return 1;
    8436:	66 39 de             	cmp    %bx,%si
    8439:	66 19 c0             	sbb    %ax,%ax
    843c:	66 83 e0 02          	and    $0x2,%ax
    8440:	66 48                	dec    %ax
        }
    }
    return ret;
}
    8442:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8447:	66 5b                	pop    %bx
    8449:	66 5e                	pop    %si
    844b:	66 5f                	pop    %di
    844d:	66 5d                	pop    %bp
    844f:	66 c3                	retw   

00008451 <_Z7reversePc>:

void reverse(char* buffer)
{
    8451:	66 55                	push   %bp
    8453:	66 89 e5             	mov    %sp,%bp
    8456:	66 56                	push   %si
    8458:	66 53                	push   %bx
    845a:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    char ch;
    size_t len = strlen(buffer);
    845f:	66 51                	push   %cx
    8461:	66 e8 1f ff          	callw  8384 <_Z6memsetPvim+0x23>
    8465:	ff                   	(bad)  
    8466:	ff 66 5a             	jmp    *0x5a(%esi)
    8469:	66 89 ca             	mov    %cx,%dx
    846c:	67 66 8d 0c          	lea    (%si),%cx
    8470:	01 66 d1             	add    %esp,-0x2f(%esi)
    for(size_t i = 0; i < len / 2; ++i)
    8473:	e8 67 66 8d 34       	call   348deadf <_data_end+0x348d44f7>
    8478:	10 66 49             	adc    %ah,0x49(%esi)
    847b:	66 39 f2             	cmp    %si,%dx
    847e:	74 10                	je     8490 <_Z7reversePc+0x3f>
    {
        ch = *(buffer + i);
    8480:	67 8a 1a             	mov    (%bp,%si),%bl
        *(buffer + i) = *(buffer + len - 1 - i);
    8483:	67 8a 01             	mov    (%bx,%di),%al
    8486:	67 88 02             	mov    %al,(%bp,%si)
        *(buffer + len - 1 - i)  = ch;
    8489:	67 88 19             	mov    %bl,(%bx,%di)
    848c:	66 42                	inc    %dx
    for(size_t i = 0; i < len / 2; ++i)
    848e:	eb e9                	jmp    8479 <_Z7reversePc+0x28>
    }
}
    8490:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    8495:	66 5b                	pop    %bx
    8497:	66 5e                	pop    %si
    8499:	66 5d                	pop    %bp
    849b:	66 c3                	retw   
    849d:	90                   	nop

0000849e <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0>:
    if(base == 0 && !auto_detected)
    {
        base = 10;
        auto_detected = true;
    }
    auto char_to_digit = [](auto ch){
    849e:	66 55                	push   %bp
    84a0:	66 89 e5             	mov    %sp,%bp
    84a3:	66 89 c2             	mov    %ax,%dx
        int digit;
        if(ch >= '0' && ch <= '9')
    84a6:	66 83 e8 30          	sub    $0x30,%ax
    84aa:	3c 09                	cmp    $0x9,%al
    84ac:	77 0b                	ja     84b9 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x1b>
            digit = ch - '0';
    84ae:	66 0f be d2          	movsbw %dl,%dx
    84b2:	67 66 8d 42 d0       	lea    -0x30(%bp,%si),%ax
    84b7:	eb 2b                	jmp    84e4 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='A' && ch <= 'F')
    84b9:	67 66 8d 42 bf       	lea    -0x41(%bp,%si),%ax
    84be:	3c 05                	cmp    $0x5,%al
    84c0:	77 0b                	ja     84cd <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x2f>
            digit = ch - 'A' + 10;
    84c2:	66 0f be d2          	movsbw %dl,%dx
    84c6:	67 66 8d 42 c9       	lea    -0x37(%bp,%si),%ax
    84cb:	eb 17                	jmp    84e4 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='a' && ch <= 'f')
    84cd:	67 66 8d 4a 9f       	lea    -0x61(%bp,%si),%cx
            digit = ch - 'a' + 10;
        else
            digit = -1;
    84d2:	66 83 c8 ff          	or     $0xffff,%ax
        else if(ch >='a' && ch <= 'f')
    84d6:	80 f9 05             	cmp    $0x5,%cl
    84d9:	77 09                	ja     84e4 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
            digit = ch - 'a' + 10;
    84db:	66 0f be d2          	movsbw %dl,%dx
    84df:	67 66 8d 42 a9       	lea    -0x57(%bp,%si),%ax
        return digit;
    };
    84e4:	66 5d                	pop    %bp
    84e6:	66 c3                	retw   

000084e8 <_Z6strtolPKcPPci>:
{
    84e8:	66 55                	push   %bp
    84ea:	66 89 e5             	mov    %sp,%bp
    84ed:	66 57                	push   %di
    84ef:	66 56                	push   %si
    84f1:	66 53                	push   %bx
    84f3:	66 83 ec 0c          	sub    $0xc,%sp
    84f7:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto start = str;   
    84fc:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    while(isspace(*start))
    8501:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    8506:	66 50                	push   %ax
    8508:	66 e8 4c 06          	callw  8b58 <_Z6printfPKcz+0x3c>
    850c:	00 00                	add    %al,(%eax)
    850e:	66 5f                	pop    %di
    8510:	66 85 c0             	test   %ax,%ax
    8513:	74 04                	je     8519 <_Z6strtolPKcPPci+0x31>
        ++start;
    8515:	66 43                	inc    %bx
    while(isspace(*start))
    8517:	eb e8                	jmp    8501 <_Z6strtolPKcPPci+0x19>
    size_t len_num = strlen(start);//非白空格数字串长度
    8519:	66 53                	push   %bx
    851b:	66 e8 65 fe          	callw  8384 <_Z6memsetPvim+0x23>
    851f:	ff                   	(bad)  
    8520:	ff 66 59             	jmp    *0x59(%esi)
    if(len_num == 0)
    8523:	66 85 c0             	test   %ax,%ax
    8526:	75 1e                	jne    8546 <_Z6strtolPKcPPci+0x5e>
        return 0;
    8528:	66 31 c0             	xor    %ax,%ax
        if(str_end) *str_end = const_cast<char*>(str);
    852b:	67 66 83 7d 0c 00    	cmpw   $0x0,0xc(%di)
    8531:	0f 84 4d 01 67 66    	je     66678684 <_data_end+0x6666e09c>
    8537:	8b 7d 0c             	mov    0xc(%ebp),%edi
    853a:	67 66 8b 75 08       	mov    0x8(%di),%si
    853f:	67 66 89 37          	mov    %si,(%bx)
    8543:	e9 3c 01 67 8a       	jmp    8a678684 <_data_end+0x8a66e09c>
    if(*high == '+' || *high == '-')
    8548:	13 80 fa 2b 74 10    	adc    0x10742bfa(%eax),%eax
    854e:	80 fa 2d             	cmp    $0x2d,%dl
    8551:	75 21                	jne    8574 <_Z6strtolPKcPPci+0x8c>
        sign = (*high == '+') ? 1 : -1;
    8553:	67 66 c7 45 f0 ff ff 	movw   $0xffff,-0x10(%di)
    855a:	ff                   	(bad)  
    855b:	ff                   	(bad)  
    855c:	eb 09                	jmp    8567 <_Z6strtolPKcPPci+0x7f>
    855e:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    8565:	00 00                	add    %al,(%eax)
        ++high;
    8567:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
        sign_char_bit = 1;
    856c:	66 ba 01 00          	mov    $0x1,%dx
    8570:	00 00                	add    %al,(%eax)
    8572:	eb 0f                	jmp    8583 <_Z6strtolPKcPPci+0x9b>
    8574:	66 89 df             	mov    %bx,%di
    size_t sign_char_bit = 0;
    8577:	66 31 d2             	xor    %dx,%dx
    int sign = 1;
    857a:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    8581:	00 00                	add    %al,(%eax)
    if(base == 16 || (base == 0 && !auto_detected))
    8583:	66 f7 c6 ef ff       	test   $0xffef,%si
    8588:	ff                   	(bad)  
    8589:	ff 75 29             	pushl  0x29(%ebp)
        if(len_num > 1 + sign_char_bit && 
    858c:	67 66 8d 4a 01       	lea    0x1(%bp,%si),%cx
    8591:	66 39 c1             	cmp    %ax,%cx
    8594:	73 1f                	jae    85b5 <_Z6strtolPKcPPci+0xcd>
    8596:	67 80 3f 30          	cmpb   $0x30,(%bx)
    859a:	75 19                	jne    85b5 <_Z6strtolPKcPPci+0xcd>
           (*(high + 1) == 'x' || *(high + 1) == 'X'))
    859c:	67 8a 4f 01          	mov    0x1(%bx),%cl
    85a0:	66 83 e1 df          	and    $0xffdf,%cx
    85a4:	80 f9 58             	cmp    $0x58,%cl
    85a7:	75 0c                	jne    85b5 <_Z6strtolPKcPPci+0xcd>
             high += 2;
    85a9:	66 83 c7 02          	add    $0x2,%di
             base = 16;
    85ad:	66 be 10 00          	mov    $0x10,%si
    85b1:	00 00                	add    %al,(%eax)
    85b3:	eb 2b                	jmp    85e0 <_Z6strtolPKcPPci+0xf8>
    if(base == 8 || (base == 0 && !auto_detected))
    85b5:	66 83 fe 08          	cmp    $0x8,%si
    85b9:	74 05                	je     85c0 <_Z6strtolPKcPPci+0xd8>
    85bb:	66 85 f6             	test   %si,%si
    85be:	75 20                	jne    85e0 <_Z6strtolPKcPPci+0xf8>
        if(len_num > sign_char_bit && *high == 0)   //存在八进制前缀0
    85c0:	66 39 c2             	cmp    %ax,%dx
    85c3:	73 10                	jae    85d5 <_Z6strtolPKcPPci+0xed>
    85c5:	67 80 3f 00          	cmpb   $0x0,(%bx)
    85c9:	75 0a                	jne    85d5 <_Z6strtolPKcPPci+0xed>
            high += 1;
    85cb:	66 47                	inc    %di
            base = 8;
    85cd:	66 be 08 00          	mov    $0x8,%si
    85d1:	00 00                	add    %al,(%eax)
    85d3:	eb 0b                	jmp    85e0 <_Z6strtolPKcPPci+0xf8>
    if(base == 0 && !auto_detected)
    85d5:	66 85 f6             	test   %si,%si
    85d8:	75 06                	jne    85e0 <_Z6strtolPKcPPci+0xf8>
        base = 10;
    85da:	66 be 0a 00          	mov    $0xa,%si
    85de:	00 00                	add    %al,(%eax)
    bool has_vaild_char = false;
    85e0:	67 c6 45 ec 00       	movb   $0x0,-0x14(%di)
    auto low = start;   
    //使low指向数字低位后的一个位置
    while(!isspace(*low) &&             //判断是否是白空格
    85e5:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    85ea:	66 50                	push   %ax
    85ec:	66 e8 68 05          	callw  8b58 <_Z6printfPKcz+0x3c>
    85f0:	00 00                	add    %al,(%eax)
          (*low != '\0') &&             //判断是否字符串结束
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    85f2:	66 5a                	pop    %dx
    85f4:	66 85 c0             	test   %ax,%ax
    85f7:	75 28                	jne    8621 <_Z6strtolPKcPPci+0x139>
          (*low != '\0') &&             //判断是否字符串结束
    85f9:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    while(!isspace(*low) &&             //判断是否是白空格
    85fe:	84 c0                	test   %al,%al
    8600:	74 1f                	je     8621 <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    8602:	66 e8 96 fe          	callw  849c <_Z7reversePc+0x4b>
    8606:	ff                   	(bad)  
    8607:	ff 66 83             	jmp    *-0x7d(%esi)
          (*low != '\0') &&             //判断是否字符串结束
    860a:	f8                   	clc    
    860b:	ff 0f                	decl   (%edi)
    860d:	95                   	xchg   %eax,%ebp
    860e:	c2 66 39             	ret    $0x3966
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    8611:	f0 0f 9c c0          	lock setl %al
    8615:	20 c2                	and    %al,%dl
    8617:	74 08                	je     8621 <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) < base    //判断是否是该进制
          )
    {
        ++low;
    8619:	66 43                	inc    %bx
        has_vaild_char = true;
    861b:	67 88 55 ec          	mov    %dl,-0x14(%di)
    while(!isspace(*low) &&             //判断是否是白空格
    861f:	eb c4                	jmp    85e5 <_Z6strtolPKcPPci+0xfd>
    }
    if(!has_vaild_char)
    8621:	67 80 7d ec 00       	cmpb   $0x0,-0x14(%di)
    8626:	0f 84 fe fe 67 66    	je     6668852a <_data_end+0x6667df42>
        if (str_end) *str_end = const_cast<char*>(str);
        return 0;
    }
    long power = 1;
    long ret = 0;
    if(str_end) *str_end = const_cast<char*>(low);
    862c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
    8630:	74 09                	je     863b <_Z6strtolPKcPPci+0x153>
    8632:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8637:	67 66 89 18          	mov    %bx,(%bx,%si)
    for(auto p = low - 1; p >= high; --p)
    863b:	66 4b                	dec    %bx
    long ret = 0;
    863d:	66 31 c9             	xor    %cx,%cx
    long power = 1;
    8640:	66 ba 01 00          	mov    $0x1,%dx
    8644:	00 00                	add    %al,(%eax)
    8646:	67 66 89 55 e8       	mov    %dx,-0x18(%di)
    for(auto p = low - 1; p >= high; --p)
    864b:	66 39 fb             	cmp    %di,%bx
    864e:	72 29                	jb     8679 <_Z6strtolPKcPPci+0x191>
    8650:	67 66 89 4d ec       	mov    %cx,-0x14(%di)
    {
        int digit = char_to_digit(*p);
    8655:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    865a:	66 e8 3e fe          	callw  849c <_Z7reversePc+0x4b>
    865e:	ff                   	(bad)  
    865f:	ff 67 66             	jmp    *0x66(%edi)
        ret += power * digit;
    8662:	8b 55 e8             	mov    -0x18(%ebp),%edx
    8665:	66 0f af c2          	imul   %dx,%ax
    8669:	67 66 8b 4d ec       	mov    -0x14(%di),%cx
    866e:	66 01 c1             	add    %ax,%cx
        
        power *= base;
    8671:	66 0f af d6          	imul   %si,%dx
    for(auto p = low - 1; p >= high; --p)
    8675:	66 4b                	dec    %bx
    8677:	eb cd                	jmp    8646 <_Z6strtolPKcPPci+0x15e>
    }
    ret *= sign;
    8679:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    867e:	66 0f af c1          	imul   %cx,%ax
    return ret;
}
    8682:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8687:	66 5b                	pop    %bx
    8689:	66 5e                	pop    %si
    868b:	66 5f                	pop    %di
    868d:	66 5d                	pop    %bp
    868f:	66 c3                	retw   

00008691 <_Z7putchari>:
namespace hhlibc {

#endif
#ifndef _HHOS_LIBC_TEST
int putchar( int ch )
{
    8691:	66 55                	push   %bp
    8693:	66 89 e5             	mov    %sp,%bp
    8696:	66 53                	push   %bx
    8698:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    sys_get_current_tty()->putchar(ch);
    869d:	66 e8 a6 f7          	callw  7e47 <panic_21h_func_not_impl>
    86a1:	ff                   	(bad)  
    86a2:	ff 66 53             	jmp    *0x53(%esi)
    86a5:	66 50                	push   %ax
    86a7:	66 e8 65 07          	callw  8e10 <_ZN2sh3runEv+0x150>
    86ab:	00 00                	add    %al,(%eax)
    //sys_tty_putchar(ch);
    return ch;
}
    86ad:	66 89 d8             	mov    %bx,%ax
    86b0:	67 66 8b 5d fc       	mov    -0x4(%di),%bx
    86b5:	66 c9                	leavew 
    86b7:	66 c3                	retw   

000086b9 <_Z4putsPKc>:

int puts(const char* string)
{
    86b9:	66 55                	push   %bp
    86bb:	66 89 e5             	mov    %sp,%bp
    86be:	66 56                	push   %si
    86c0:	66 53                	push   %bx
    86c2:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    auto len = strlen(string);
    86c7:	66 53                	push   %bx
    86c9:	66 e8 b7 fc          	callw  8384 <_Z6memsetPvim+0x23>
    86cd:	ff                   	(bad)  
    86ce:	ff 67 66             	jmp    *0x66(%edi)
    86d1:	8d 34 03             	lea    (%ebx,%eax,1),%esi
    86d4:	66 58                	pop    %ax
    for(size_t i = 0; i < len; ++i)
    86d6:	66 39 f3             	cmp    %si,%bx
    86d9:	74 11                	je     86ec <_Z4putsPKc+0x33>
    {
        putchar(*(string + i));
    86db:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    86e0:	66 50                	push   %ax
    86e2:	66 e8 a9 ff          	callw  868f <_Z6strtolPKcPPci+0x1a7>
    86e6:	ff                   	(bad)  
    86e7:	ff 66 43             	jmp    *0x43(%esi)
    86ea:	eb e8                	jmp    86d4 <_Z4putsPKc+0x1b>
    }
    return 0;
}
    86ec:	66 31 c0             	xor    %ax,%ax
    86ef:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    86f4:	66 5b                	pop    %bx
    86f6:	66 5e                	pop    %si
    86f8:	66 5d                	pop    %bp
    86fa:	66 c3                	retw   

000086fc <_Z7getcharv>:
#endif


#ifndef _HHOS_LIBC_TEST
int getchar(void)
{
    86fc:	66 55                	push   %bp
    86fe:	66 89 e5             	mov    %sp,%bp
    return sys_bios_getchar();
}
    8701:	66 5d                	pop    %bp
    return sys_bios_getchar();
    8703:	e9                   	.byte 0xe9
    8704:	8d                   	(bad)  
    8705:	f8                   	clc    

00008706 <_Z4getsPc>:
char *gets( char *str )
{
    8706:	66 55                	push   %bp
    8708:	66 89 e5             	mov    %sp,%bp
    870b:	66 53                	push   %bx
    870d:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    return sys_bios_getchar();
    8712:	66 e8 7b f8          	callw  7f91 <sys_bios_clear_screen+0x11>
    8716:	ff                   	(bad)  
    8717:	ff                   	(bad)  
    char ch;
    while(true)
    {
        ch = getchar();
        if(ch == '\n') break;
    8718:	3c 0a                	cmp    $0xa,%al
    871a:	74 08                	je     8724 <_Z4getsPc+0x1e>
        *(str++) = ch;
    871c:	66 43                	inc    %bx
    871e:	67 88 43 ff          	mov    %al,-0x1(%bp,%di)
        ch = getchar();
    8722:	eb ee                	jmp    8712 <_Z4getsPc+0xc>
    }
    *str = '\0';
    8724:	67 c6 03 00          	movb   $0x0,(%bp,%di)
    return str;
}
    8728:	66 89 d8             	mov    %bx,%ax
    872b:	66 5b                	pop    %bx
    872d:	66 5d                	pop    %bp
    872f:	66 c3                	retw   

00008731 <_Z7vsscanfPKcS0_Pc>:
#endif

int vsscanf( const char* buffer, const char* format, va_list vlist )
{
    8731:	66 55                	push   %bp
    8733:	66 89 e5             	mov    %sp,%bp
    8736:	66 57                	push   %di
    8738:	66 56                	push   %si
    873a:	66 53                	push   %bx
    873c:	66 83 ec 14          	sub    $0x14,%sp
    8740:	67 66 8b 75 08       	mov    0x8(%di),%si
    8745:	67 66 8b 7d 10       	mov    0x10(%di),%di
    auto len_fmt = strlen(format);
    874a:	67 66 ff 75 0c       	pushw  0xc(%di)
    874f:	66 e8 31 fc          	callw  8384 <_Z6memsetPvim+0x23>
    8753:	ff                   	(bad)  
    8754:	ff 67 66             	jmp    *0x66(%edi)
    8757:	89 45 e0             	mov    %eax,-0x20(%ebp)
    875a:	66 59                	pop    %cx
    auto p_fmt = format; 
    875c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8761:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    auto p_buf = buffer;
    bool error = false;
    int ret = 0;
    8766:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    876d:	00 00                	add    %al,(%eax)
    bool error = false;
    876f:	67 c6 45 e7 00       	movb   $0x0,-0x19(%di)
    while(static_cast<size_t>(p_fmt - format) < len_fmt)
    8774:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    8779:	67 66 2b 45 0c       	sub    0xc(%di),%ax
    877e:	67 66 3b 45 e0       	cmp    -0x20(%di),%ax
    8783:	0f 93 c0             	setae  %al
    {
        if(error) break;
    8786:	67 08 45 e7          	or     %al,-0x19(%di)
    878a:	0f 85 50 01 67 66    	jne    666788e0 <_data_end+0x6666e2f8>
        if(isspace(*p_fmt)) //略过白空格
    8790:	8b 45 e8             	mov    -0x18(%ebp),%eax
    8793:	67 66 0f be 00       	movsbw (%bx,%si),%ax
    8798:	66 50                	push   %ax
    879a:	66 e8 ba 03          	callw  8b58 <_Z6printfPKcz+0x3c>
    879e:	00 00                	add    %al,(%eax)
    87a0:	66 5a                	pop    %dx
    87a2:	66 85 c0             	test   %ax,%ax
    87a5:	74 1d                	je     87c4 <_Z7vsscanfPKcS0_Pc+0x93>
        {
            p_fmt++;
    87a7:	67 66 ff 45 e8       	incw   -0x18(%di)
            while(isspace(*buffer)) buffer++;
    87ac:	67 66 0f be 06 66 50 	movsbw 0x5066,%ax
    87b3:	66 e8 a1 03          	callw  8b58 <_Z6printfPKcz+0x3c>
    87b7:	00 00                	add    %al,(%eax)
    87b9:	66 5b                	pop    %bx
    87bb:	66 85 c0             	test   %ax,%ax
    87be:	74 b4                	je     8774 <_Z7vsscanfPKcS0_Pc+0x43>
    87c0:	66 46                	inc    %si
    87c2:	eb e8                	jmp    87ac <_Z7vsscanfPKcS0_Pc+0x7b>
            continue;
        }
        else if(*p_fmt == '%') //格式控制符
    87c4:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    87c9:	67 80 38 25          	cmpb   $0x25,(%bx,%si)
    87cd:	75 a5                	jne    8774 <_Z7vsscanfPKcS0_Pc+0x43>
        {
            p_fmt++;
            char specifier = *p_fmt;
    87cf:	67 8a 40 01          	mov    0x1(%bx,%si),%al
            p_fmt++;
    87d3:	67 66 83 45 e8 02    	addw   $0x2,-0x18(%di)
            switch(specifier)
    87d9:	3c 69                	cmp    $0x69,%al
    87db:	0f 84 b0 00 7f 25    	je     257f8891 <_data_end+0x257ee2a9>
    87e1:	3c 58                	cmp    $0x58,%al
    87e3:	0f 84 c4 00 7f 10    	je     107f88ad <_data_end+0x107ee2c5>
    87e9:	3c 25                	cmp    $0x25,%al
    87eb:	75 87                	jne    8774 <_Z7vsscanfPKcS0_Pc+0x43>
            {
                case '%':
                {
                    if(*buffer == '%') 
    87ed:	67 80 3e 25 67 0f    	cmpb   $0xf,0x6725
    87f3:	95                   	xchg   %eax,%ebp
    87f4:	45                   	inc    %ebp
    87f5:	e7 e9                	out    %eax,$0xe9
    87f7:	7b ff                	jnp    87f8 <_Z7vsscanfPKcS0_Pc+0xc7>
            switch(specifier)
    87f9:	3c 63                	cmp    $0x63,%al
    87fb:	74 31                	je     882e <_Z7vsscanfPKcS0_Pc+0xfd>
    87fd:	3c 64                	cmp    $0x64,%al
    87ff:	0f 84 9a 00 e9 6e    	je     6ee9889f <_data_end+0x6ee8e2b7>
    8805:	ff                   	(bad)  
    8806:	3c 73                	cmp    $0x73,%al
    8808:	74 4d                	je     8857 <_Z7vsscanfPKcS0_Pc+0x126>
    880a:	7f 15                	jg     8821 <_Z7vsscanfPKcS0_Pc+0xf0>
    880c:	3c 6f                	cmp    $0x6f,%al
    880e:	0f 85 62 ff 67 66    	jne    66688776 <_data_end+0x6667e18e>
                    ++ret;
                    break;
                }
                case 'o':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8814:	8d 5f 04             	lea    0x4(%edi),%ebx
    8817:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 8);
    881b:	66 6a 08             	pushw  $0x8
    881e:	e9 96 00 3c 75       	jmp    753c88b9 <_data_end+0x753be2d1>
            switch(specifier)
    8823:	74 78                	je     889d <_Z7vsscanfPKcS0_Pc+0x16c>
    8825:	3c 78                	cmp    $0x78,%al
    8827:	0f 84 80 00 e9 46    	je     46e988ad <_data_end+0x46e8e2c5>
    882d:	ff 67 66             	jmp    *0x66(%edi)
                    char* p = va_arg(vlist, char*);
    8830:	8b 17                	mov    (%edi),%edx
                    *p = *buffer;
    8832:	67 8a 06 67 88       	mov    -0x7799,%al
    8837:	02 66 46             	add    0x46(%esi),%ah
                    ++ret;
    883a:	67 66 ff 45 ec       	incw   -0x14(%di)
                    char* p = va_arg(vlist, char*);
    883f:	66 83 c7 04          	add    $0x4,%di
                    break;
    8843:	e9 2e ff 66 50       	jmp    50678776 <_data_end+0x5066e18e>
                    while (*buffer && isspace(*buffer)) buffer++;
    8848:	66 e8 0c 03          	callw  8b58 <_Z6printfPKcz+0x3c>
    884c:	00 00                	add    %al,(%eax)
    884e:	66 59                	pop    %cx
    8850:	66 85 c0             	test   %ax,%ax
    8853:	74 0b                	je     8860 <_Z7vsscanfPKcS0_Pc+0x12f>
    8855:	66 46                	inc    %si
    8857:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    885e:	75 e6                	jne    8846 <_Z7vsscanfPKcS0_Pc+0x115>
                    char* p = va_arg(vlist, char*);
    8860:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8865:	67 66 8b 3f          	mov    (%bx),%di
                    while(*buffer && !isspace(*buffer))
    8869:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    8870:	75 0b                	jne    887d <_Z7vsscanfPKcS0_Pc+0x14c>
                    *p = '\0';
    8872:	67 c6 07 00          	movb   $0x0,(%bx)
                    ++ret;
    8876:	67 66 ff 45 ec       	incw   -0x14(%di)
    887b:	eb 5b                	jmp    88d8 <_Z7vsscanfPKcS0_Pc+0x1a7>
                    while(*buffer && !isspace(*buffer))
    887d:	66 50                	push   %ax
    887f:	66 e8 d5 02          	callw  8b58 <_Z6printfPKcz+0x3c>
    8883:	00 00                	add    %al,(%eax)
    8885:	66 5a                	pop    %dx
    8887:	66 85 c0             	test   %ax,%ax
    888a:	75 e6                	jne    8872 <_Z7vsscanfPKcS0_Pc+0x141>
                        *(p++) = *(buffer++);
    888c:	a4                   	movsb  %ds:(%esi),%es:(%edi)
                    while(*buffer && !isspace(*buffer))
    888d:	eb da                	jmp    8869 <_Z7vsscanfPKcS0_Pc+0x138>
                    int* p = va_arg(vlist, int*);
    888f:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8894:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 0);
    8898:	66 6a 00             	pushw  $0x0
    889b:	eb 1a                	jmp    88b7 <_Z7vsscanfPKcS0_Pc+0x186>
                    unsigned int* p = va_arg(vlist, unsigned int*);
    889d:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    88a2:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 10);
    88a6:	66 6a 0a             	pushw  $0xa
    88a9:	eb 0c                	jmp    88b7 <_Z7vsscanfPKcS0_Pc+0x186>
                    break;
                }
                case 'x':
                case 'X':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    88ab:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    88b0:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 16);
    88b4:	66 6a 10             	pushw  $0x10
    88b7:	67 66 8d 45 f0       	lea    -0x10(%di),%ax
    88bc:	66 50                	push   %ax
    88be:	66 56                	push   %si
    88c0:	66 e8 22 fc          	callw  84e6 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    88c4:	ff                   	(bad)  
    88c5:	ff 67 66             	jmp    *0x66(%edi)
                    *p = static_cast<unsigned int>(num);
    88c8:	89 07                	mov    %eax,(%edi)
                    buffer = end;
    88ca:	67 66 8b 75 f0       	mov    -0x10(%di),%si
                    ++ret;
    88cf:	67 66 ff 45 ec       	incw   -0x14(%di)
    88d4:	66 83 c4 0c          	add    $0xc,%sp
                    unsigned int* p = va_arg(vlist, unsigned int*);
    88d8:	66 89 df             	mov    %bx,%di
    88db:	e9 96 fe 67 66       	jmp    66688776 <_data_end+0x6667e18e>
                    break;
            }
        }
    }
    return ret;
}
    88e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
    88e3:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    88e8:	66 5b                	pop    %bx
    88ea:	66 5e                	pop    %si
    88ec:	66 5f                	pop    %di
    88ee:	66 5d                	pop    %bp
    88f0:	66 c3                	retw   

000088f2 <_Z6sscanfPKcS0_z>:
int sscanf( const char* buffer, const char* format, ... )
{
    88f2:	66 55                	push   %bp
    88f4:	66 89 e5             	mov    %sp,%bp
   	int ret;
	va_list va;
	va_start(va, format);
    88f7:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsscanf(buffer, format, va);
    88fc:	66 50                	push   %ax
    88fe:	67 66 ff 75 0c       	pushw  0xc(%di)
    8903:	67 66 ff 75 08       	pushw  0x8(%di)
    8908:	66 e8 23 fe          	callw  872f <_Z4getsPc+0x29>
    890c:	ff                   	(bad)  
    890d:	ff 66 c9             	jmp    *-0x37(%esi)
	va_end(va);
    return ret; 
}
    8910:	66 c3                	retw   

00008912 <_Z5scanfPKcz>:
#ifndef _HHOS_LIBC_TEST
static char scanfbuf[80*25];
//TODO 关于这个返回值
int scanf( const char* format, ... )
{
    8912:	66 55                	push   %bp
    8914:	66 89 e5             	mov    %sp,%bp
    if (!gets(scanfbuf)) return EOF;
    8917:	66 68 c0 95          	pushw  $0x95c0
    891b:	00 00                	add    %al,(%eax)
    891d:	66 e8 e3 fd          	callw  8704 <_Z7getcharv+0x8>
    8921:	ff                   	(bad)  
    8922:	ff 66 89             	jmp    *-0x77(%esi)
    8925:	c2 66 58             	ret    $0x5866
    8928:	66 83 c8 ff          	or     $0xffff,%ax
    892c:	66 85 d2             	test   %dx,%dx
    892f:	74 1c                	je     894d <_Z5scanfPKcz+0x3b>
	int ret;
	va_list va;
	va_start(va, format);
    8931:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsscanf(scanfbuf, format, va);
    8936:	66 50                	push   %ax
    8938:	67 66 ff 75 08       	pushw  0x8(%di)
    893d:	66 68 c0 95          	pushw  $0x95c0
    8941:	00 00                	add    %al,(%eax)
    8943:	66 e8 e8 fd          	callw  872f <_Z4getsPc+0x29>
    8947:	ff                   	(bad)  
    8948:	ff 66 83             	jmp    *-0x7d(%esi)
	va_end(va);
    return ret;
    894b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    894e:	c9                   	leave  
    894f:	66 c3                	retw   

00008951 <_Z8vsprintfPcPKcS_>:
{
    8951:	66 55                	push   %bp
    8953:	66 89 e5             	mov    %sp,%bp
    8956:	66 57                	push   %di
    8958:	66 56                	push   %si
    895a:	66 53                	push   %bx
    895c:	66 83 ec 0c          	sub    $0xc,%sp
    8960:	67 66 8b 75 0c       	mov    0xc(%di),%si
    8965:	67 66 8b 55 10       	mov    0x10(%di),%dx
    896a:	67 66 89 55 f0       	mov    %dx,-0x10(%di)
    auto len_fmt = strlen(format);
    896f:	66 56                	push   %si
    8971:	66 e8 0f fa          	callw  8384 <_Z6memsetPvim+0x23>
    8975:	ff                   	(bad)  
    8976:	ff 67 66             	jmp    *0x66(%edi)
    8979:	89 45 ec             	mov    %eax,-0x14(%ebp)
    897c:	66 58                	pop    %ax
    auto p_buf = buffer;
    897e:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8983:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    while(len_fmt--)
    8988:	67 66 ff 4d ec       	decw   -0x14(%di)
    898d:	67 66 83 7d ec ff    	cmpw   $0xffff,-0x14(%di)
    8993:	0f 84 4a 01 67 8a    	je     8a678ae3 <_data_end+0x8a66e4fb>
        if(*p_fmt != '%')
    8999:	06                   	push   %es
    899a:	3c 25                	cmp    $0x25,%al
    899c:	74 07                	je     89a5 <_Z8vsprintfPcPKcS_+0x54>
            *(p_buf++) = *(p_fmt++);    //非控制字符
    899e:	66 46                	inc    %si
    89a0:	67 88 03             	mov    %al,(%bp,%di)
    89a3:	eb 5f                	jmp    8a04 <_Z8vsprintfPcPKcS_+0xb3>
            char specifier = *(++p_fmt); //%后面一个字符是specifier
    89a5:	67 8a 46 01          	mov    0x1(%bp),%al
            ++p_fmt;                     //记录specifier并跳过
    89a9:	66 83 c6 02          	add    $0x2,%si
            switch (specifier)
    89ad:	3c 69                	cmp    $0x69,%al
    89af:	0f 84 81 00 7f 17    	je     177f8a36 <_data_end+0x177ee44e>
    89b5:	3c 63                	cmp    $0x63,%al
    89b7:	74 40                	je     89f9 <_Z8vsprintfPcPKcS_+0xa8>
    89b9:	3c 64                	cmp    $0x64,%al
    89bb:	74 77                	je     8a34 <_Z8vsprintfPcPKcS_+0xe3>
    89bd:	3c 58                	cmp    $0x58,%al
    89bf:	75 c7                	jne    8988 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    89c1:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16, true);
    89c6:	66 6a 01             	pushw  $0x1
    89c9:	e9 e2 00 3c 73       	jmp    733c8ab0 <_data_end+0x733be4c8>
            switch (specifier)
    89ce:	74 38                	je     8a08 <_Z8vsprintfPcPKcS_+0xb7>
    89d0:	7f 12                	jg     89e4 <_Z8vsprintfPcPKcS_+0x93>
    89d2:	3c 6f                	cmp    $0x6f,%al
    89d4:	75 b2                	jne    8988 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    89d6:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 8);
    89db:	66 6a 00             	pushw  $0x0
    89de:	66 6a 08             	pushw  $0x8
    89e1:	e9 da 00 3c 75       	jmp    753c8ac0 <_data_end+0x753be4d8>
            switch (specifier)
    89e6:	0f 84 c9 00 3c 78    	je     783c8ab5 <_data_end+0x783be4cd>
    89ec:	75 9a                	jne    8988 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    89ee:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16);
    89f3:	66 6a 00             	pushw  $0x0
    89f6:	e9 b5 00 67 66       	jmp    66678ab0 <_data_end+0x6666e4c8>
                    *(p_buf++) = va_arg(vlist, int); 
    89fb:	8b 02                	mov    (%edx),%eax
    89fd:	67 88 03             	mov    %al,(%bp,%di)
    8a00:	66 83 c2 04          	add    $0x4,%dx
    8a04:	66 43                	inc    %bx
                    break;
    8a06:	eb 80                	jmp    8988 <_Z8vsprintfPcPKcS_+0x37>
                    const char * str = va_arg(vlist, char*);
    8a08:	67 66 8d 42 04       	lea    0x4(%bp,%si),%ax
    8a0d:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8a12:	67 66 8b 3a          	mov    (%bp,%si),%di
                    strcpy(p_buf, str);
    8a16:	66 57                	push   %di
    8a18:	66 53                	push   %bx
    8a1a:	66 e8 82 f9          	callw  83a0 <_Z6strlenPKc+0x1a>
    8a1e:	ff                   	(bad)  
    8a1f:	ff 66 59             	jmp    *0x59(%esi)
                    p_buf += strlen(str);               //p应当永远指向有意义的字符后面一位
    8a22:	66 58                	pop    %ax
    8a24:	66 57                	push   %di
    8a26:	66 e8 5a f9          	callw  8384 <_Z6memsetPvim+0x23>
    8a2a:	ff                   	(bad)  
    8a2b:	ff 66 01             	jmp    *0x1(%esi)
    8a2e:	c3                   	ret    
                    break;
    8a2f:	66 58                	pop    %ax
    8a31:	e9 4f ff 67 66       	jmp    66688985 <_data_end+0x6667e39d>
                    int num = va_arg(vlist, int);
    8a36:	8d 42 04             	lea    0x4(%edx),%eax
    8a39:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    8a3e:	67 66 8b 02          	mov    (%bp,%si),%ax
template<typename T>
void itoa(char* buffer, T num, int base, bool captial = false)
{
    const char* num_char_upper = "0123456789ABCDEF";
    const char* num_char_lower = "0123456789abcdef";
    if(num < 0)
    8a42:	66 89 df             	mov    %bx,%di
    8a45:	66 85 c0             	test   %ax,%ax
    8a48:	79 0c                	jns    8a56 <_Z8vsprintfPcPKcS_+0x105>
    8a4a:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
    {
        *(buffer++) = '-';
    8a4f:	67 c6 03 2d          	movb   $0x2d,(%bp,%di)
        num = -num;
    8a53:	66 f7 d8             	neg    %ax
    }
    char *p = buffer;
    8a56:	67 66 89 7d f0       	mov    %di,-0x10(%di)
    int mod = 0;
    while(true)
    {
        mod = num % base;
        num /= base;
    8a5b:	66 b9 0a 00          	mov    $0xa,%cx
    8a5f:	00 00                	add    %al,(%eax)
    8a61:	66 99                	cwtd   
    8a63:	66 f7 f9             	idiv   %cx
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    8a66:	67 66 8b 4d f0       	mov    -0x10(%di),%cx
    8a6b:	66 41                	inc    %cx
    8a6d:	67 8a 92 d7 a5       	mov    -0x5a29(%bp,%si),%dl
    8a72:	00 00                	add    %al,(%eax)
    8a74:	67 88 51 ff          	mov    %dl,-0x1(%bx,%di)
        if(num == 0) break;
    8a78:	66 85 c0             	test   %ax,%ax
    8a7b:	74 07                	je     8a84 <_Z8vsprintfPcPKcS_+0x133>
    8a7d:	67 66 89 4d f0       	mov    %cx,-0x10(%di)
    8a82:	eb d7                	jmp    8a5b <_Z8vsprintfPcPKcS_+0x10a>
    }
    *p = '\0';
    8a84:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8a89:	67 c6 40 01 00       	movb   $0x0,0x1(%bx,%si)
    reverse(buffer);
    8a8e:	66 57                	push   %di
    8a90:	66 e8 bb f9          	callw  844f <_Z6strcmpPKcS0_+0x6b>
    8a94:	ff                   	(bad)  
    8a95:	ff 67 66             	jmp    *0x66(%edi)
                    p_buf += strlen(p_buf);             //同理
    8a98:	89 1c 24             	mov    %ebx,(%esp)
    8a9b:	66 e8 e5 f8          	callw  8384 <_Z6memsetPvim+0x23>
    8a9f:	ff                   	(bad)  
    8aa0:	ff 66 01             	jmp    *0x1(%esi)
    8aa3:	c3                   	ret    
                    break;
    8aa4:	66 5a                	pop    %dx
                    int num = va_arg(vlist, int);
    8aa6:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
                    break;
    8aab:	e9 da fe 66 6a       	jmp    6a67898a <_data_end+0x6a66e3a2>
                    itoa(p_buf, num, 16, true);
    8ab0:	10 eb                	adc    %ch,%bl
    8ab2:	0b 67 66             	or     0x66(%edi),%esp
                    unsigned int num = va_arg(vlist, int);
    8ab5:	8d 7a 04             	lea    0x4(%edx),%edi
                    itoa(p_buf, num, 10);
    8ab8:	66 6a 00             	pushw  $0x0
    8abb:	66 6a 0a             	pushw  $0xa
    8abe:	67 66 ff 32          	pushw  (%bp,%si)
    8ac2:	66 53                	push   %bx
    8ac4:	66 e8 b5 04          	callw  8f7d <_ZN3tty7putcharEi+0x16b>
    8ac8:	00 00                	add    %al,(%eax)
                    p_buf += strlen(p_buf);             //同理
    8aca:	66 83 c4 10          	add    $0x10,%sp
    8ace:	66 53                	push   %bx
    8ad0:	66 e8 b0 f8          	callw  8384 <_Z6memsetPvim+0x23>
    8ad4:	ff                   	(bad)  
    8ad5:	ff 66 01             	jmp    *0x1(%esi)
    8ad8:	c3                   	ret    
                    break;
    8ad9:	66 58                	pop    %ax
                    unsigned int num = va_arg(vlist, int);
    8adb:	66 89 fa             	mov    %di,%dx
                    break;
    8ade:	e9 a7 fe 67 c6       	jmp    c668898a <_data_end+0xc667e3a2>
    *p_buf = '\0';
    8ae3:	03 00                	add    (%eax),%eax
    return p_buf - buffer;
    8ae5:	66 89 d8             	mov    %bx,%ax
    8ae8:	67 66 2b 45 08       	sub    0x8(%di),%ax
}
    8aed:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8af2:	66 5b                	pop    %bx
    8af4:	66 5e                	pop    %si
    8af6:	66 5f                	pop    %di
    8af8:	66 5d                	pop    %bp
    8afa:	66 c3                	retw   

00008afc <_Z7sprintfPcPKcz>:
{
    8afc:	66 55                	push   %bp
    8afe:	66 89 e5             	mov    %sp,%bp
	va_start(va, format);
    8b01:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsprintf(buffer, format, va);
    8b06:	66 50                	push   %ax
    8b08:	67 66 ff 75 0c       	pushw  0xc(%di)
    8b0d:	67 66 ff 75 08       	pushw  0x8(%di)
    8b12:	66 e8 39 fe          	callw  894f <_Z5scanfPKcz+0x3d>
    8b16:	ff                   	(bad)  
    8b17:	ff 66 c9             	jmp    *-0x37(%esi)
}
    8b1a:	66 c3                	retw   

00008b1c <_Z6printfPKcz>:
{
    8b1c:	66 55                	push   %bp
    8b1e:	66 89 e5             	mov    %sp,%bp
    8b21:	66 53                	push   %bx
	va_start(va, format);
    8b23:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsprintf(printbuf, format, va);
    8b28:	66 50                	push   %ax
    8b2a:	67 66 ff 75 08       	pushw  0x8(%di)
    8b2f:	66 68 a0 9d          	pushw  $0x9da0
    8b33:	00 00                	add    %al,(%eax)
    8b35:	66 e8 16 fe          	callw  894f <_Z5scanfPKcz+0x3d>
    8b39:	ff                   	(bad)  
    8b3a:	ff 66 89             	jmp    *-0x77(%esi)
    8b3d:	c3                   	ret    
    puts(printbuf);
    8b3e:	66 83 c4 0c          	add    $0xc,%sp
    8b42:	66 68 a0 9d          	pushw  $0x9da0
    8b46:	00 00                	add    %al,(%eax)
    8b48:	66 e8 6b fb          	callw  86b7 <_Z7putchari+0x26>
    8b4c:	ff                   	(bad)  
    8b4d:	ff 66 89             	jmp    *-0x77(%esi)
}
    8b50:	d8 67 66             	fsubs  0x66(%edi)
    8b53:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    8b56:	66 c9                	leavew 
    8b58:	66 c3                	retw   

00008b5a <_Z7isspacei>:
namespace hhlibc {

#endif

int isspace( int ch )
{
    8b5a:	66 55                	push   %bp
    8b5c:	66 89 e5             	mov    %sp,%bp
    8b5f:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return (ch == 9 || ch == 32 || (ch >= 10 && ch <= 13));
    8b64:	67 66 8d 42 f7       	lea    -0x9(%bp,%si),%ax
    8b69:	66 83 f8 04          	cmp    $0x4,%ax
    8b6d:	0f 96 c0             	setbe  %al
    8b70:	66 83 fa 20          	cmp    $0x20,%dx
    8b74:	0f 94 c2             	sete   %dl
    8b77:	66 09 d0             	or     %dx,%ax
    8b7a:	66 0f b6 c0          	movzbw %al,%ax
}
    8b7e:	66 5d                	pop    %bp
    8b80:	66 c3                	retw   

Disassembly of section .text._ZN2sh16read_prog_recordEv:

00008b82 <_ZN2sh16read_prog_recordEv>:
    void read_prog_record()
    8b82:	66 55                	push   %bp
    8b84:	66 89 e5             	mov    %sp,%bp
    8b87:	66 57                	push   %di
    8b89:	66 56                	push   %si
    8b8b:	66 53                	push   %bx
    8b8d:	66 83 ec 6c          	sub    $0x6c,%sp
    8b91:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        sys_read_disk(0, (uint32_t)record_buf, 32, 1);
    8b96:	67 66 8d bb 00 02    	lea    0x200(%bp,%di),%di
    8b9c:	00 00                	add    %al,(%eax)
    8b9e:	66 6a 01             	pushw  $0x1
    8ba1:	66 6a 20             	pushw  $0x20
    8ba4:	66 57                	push   %di
    8ba6:	66 6a 00             	pushw  $0x0
    8ba9:	66 e8 9d f6          	callw  824a <sys_get_scancode+0xf>
    8bad:	ff                   	(bad)  
    8bae:	ff 66 83             	jmp    *-0x7d(%esi)
        sscanf(p, "%s", buf1);
    8bb1:	c4 10                	les    (%eax),%edx
    8bb3:	67 66 8d 75 94       	lea    -0x6c(%di),%si
    8bb8:	66 56                	push   %si
    8bba:	66 68 76 a5          	pushw  $0xa576
    8bbe:	00 00                	add    %al,(%eax)
    8bc0:	66 57                	push   %di
    8bc2:	66 e8 2a fd          	callw  88f0 <_Z7vsscanfPKcS0_Pc+0x1bf>
    8bc6:	ff                   	(bad)  
    8bc7:	ff 66 83             	jmp    *-0x7d(%esi)
        p += (strlen(buf1) + 1);
    8bca:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    8bcd:	56                   	push   %esi
    8bce:	66 e8 b2 f7          	callw  8384 <_Z6memsetPvim+0x23>
    8bd2:	ff                   	(bad)  
    8bd3:	ff 67 66             	jmp    *0x66(%edi)
    8bd6:	8d 44 07 01          	lea    0x1(%edi,%eax,1),%eax
    8bda:	67 66 89 45 8c       	mov    %ax,-0x74(%di)
        prog_cnt = strtol(buf1, nullptr, 10);
    8bdf:	67 66 c7 04 24 0a    	movw   $0xa24,(%si)
    8be5:	00 00                	add    %al,(%eax)
    8be7:	00 66 6a             	add    %ah,0x6a(%esi)
    8bea:	00 66 56             	add    %ah,0x56(%esi)
    8bed:	66 e8 f5 f8          	callw  84e6 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    8bf1:	ff                   	(bad)  
    8bf2:	ff 67 66             	jmp    *0x66(%edi)
    8bf5:	89 83 40 06 00 00    	mov    %eax,0x640(%ebx)
    8bfb:	66 83 c4 0c          	add    $0xc,%sp
        for(size_t i = 0; i < prog_cnt; ++i)
    8bff:	67 66 c7 45 90 00 00 	movw   $0x0,-0x70(%di)
    8c06:	00 00                	add    %al,(%eax)
    8c08:	67 66 8b 45 90       	mov    -0x70(%di),%ax
    8c0d:	67 66 39 83 40 06    	cmp    %ax,0x640(%bp,%di)
    8c13:	00 00                	add    %al,(%eax)
    8c15:	0f 86 97 00 67 66    	jbe    66678cb2 <_data_end+0x6666e6ca>
            sscanf(p, "%s%s", buf2, buf3);
    8c1b:	8d 7d d4             	lea    -0x2c(%ebp),%edi
    8c1e:	66 57                	push   %di
    8c20:	67 66 8d 75 b4       	lea    -0x4c(%di),%si
    8c25:	66 56                	push   %si
    8c27:	66 68 74 a5          	pushw  $0xa574
    8c2b:	00 00                	add    %al,(%eax)
    8c2d:	67 66 ff 75 8c       	pushw  -0x74(%di)
    8c32:	66 e8 ba fc          	callw  88f0 <_Z7vsscanfPKcS0_Pc+0x1bf>
    8c36:	ff                   	(bad)  
    8c37:	ff 67 66             	jmp    *0x66(%edi)
    8c3a:	6b 4d 90 24          	imul   $0x24,-0x70(%ebp),%ecx
            strcpy(progs[i].name, buf2);
    8c3e:	66 83 c4 10          	add    $0x10,%sp
    8c42:	66 56                	push   %si
    8c44:	67 66 8d 84 0b 00    	lea    0xb(%si),%ax
    8c4a:	04 00                	add    $0x0,%al
    8c4c:	00 67 66             	add    %ah,0x66(%edi)
    8c4f:	89 4d 88             	mov    %ecx,-0x78(%ebp)
    8c52:	66 50                	push   %ax
    8c54:	66 e8 48 f7          	callw  83a0 <_Z6strlenPKc+0x1a>
    8c58:	ff                   	(bad)  
    8c59:	ff 66 58             	jmp    *0x58(%esi)
            progs[i].lba = strtol(buf3, nullptr, 10);
    8c5c:	66 5a                	pop    %dx
    8c5e:	66 6a 0a             	pushw  $0xa
    8c61:	66 6a 00             	pushw  $0x0
    8c64:	66 57                	push   %di
    8c66:	66 e8 7c f8          	callw  84e6 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    8c6a:	ff                   	(bad)  
    8c6b:	ff 67 66             	jmp    *0x66(%edi)
    8c6e:	8b 4d 88             	mov    -0x78(%ebp),%ecx
    8c71:	67 66 89 84 0b 20    	mov    %ax,0x200b(%si)
    8c77:	04 00                	add    $0x0,%al
    8c79:	00 66 83             	add    %ah,-0x7d(%esi)
            p += (strlen(buf2) + strlen(buf3) + 2);
    8c7c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    8c7f:	56                   	push   %esi
    8c80:	66 e8 00 f7          	callw  8384 <_Z6memsetPvim+0x23>
    8c84:	ff                   	(bad)  
    8c85:	ff 67 66             	jmp    *0x66(%edi)
    8c88:	89 45 88             	mov    %eax,-0x78(%ebp)
    8c8b:	67 66 89 3c          	mov    %di,(%si)
    8c8f:	24 66                	and    $0x66,%al
    8c91:	e8 f0 f6 ff ff       	call   8386 <_Z6strlenPKc>
    8c96:	67 66 8b 55 88       	mov    -0x78(%di),%dx
    8c9b:	67 66 8d 44 02       	lea    0x2(%si),%ax
    8ca0:	02 67 66             	add    0x66(%edi),%ah
    8ca3:	01 45 8c             	add    %eax,-0x74(%ebp)
        for(size_t i = 0; i < prog_cnt; ++i)
    8ca6:	67 66 ff 45 90       	incw   -0x70(%di)
    8cab:	66 59                	pop    %cx
    8cad:	e9 58 ff 67 66       	jmp    66688c0a <_data_end+0x6667e622>
    }
    8cb2:	8d 65 f4             	lea    -0xc(%ebp),%esp
    8cb5:	66 5b                	pop    %bx
    8cb7:	66 5e                	pop    %si
    8cb9:	66 5f                	pop    %di
    8cbb:	66 5d                	pop    %bp
    8cbd:	66 c3                	retw   

Disassembly of section .text._ZN2sh3runEv:

00008cc0 <_ZN2sh3runEv>:
    }
    void run () {
    8cc0:	66 55                	push   %bp
    8cc2:	66 89 e5             	mov    %sp,%bp
    8cc5:	66 57                	push   %di
    8cc7:	66 56                	push   %si
    8cc9:	66 53                	push   %bx
    8ccb:	66 53                	push   %bx
    8ccd:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        while(true)
        {
            char in = getchar();
    8cd2:	66 e8 24 fa          	callw  86fa <_Z4putsPKc+0x41>
    8cd6:	ff                   	(bad)  
    8cd7:	ff 66 89             	jmp    *-0x77(%esi)
    8cda:	c2 3c 0d             	ret    $0xd3c
            if (in == 13)
    8cdd:	0f 85 fd 00 66 6a    	jne    6a668de0 <_data_end+0x6a65e7f8>
            {
                putchar('\n');
    8ce3:	0a 66 e8             	or     -0x18(%esi),%ah
    8ce6:	a7                   	cmpsl  %es:(%edi),%ds:(%esi)
    8ce7:	f9                   	stc    
    8ce8:	ff                   	(bad)  
    8ce9:	ff 67 66             	jmp    *0x66(%edi)
        if (strcmp(buf, "ls") == 0)
    8cec:	c7 04 24 79 a5 00 00 	movl   $0xa579,(%esp)
    8cf3:	66 53                	push   %bx
    8cf5:	66 e8 e9 f6          	callw  83e2 <_Z6strcpyPcPKc+0x40>
    8cf9:	ff                   	(bad)  
    8cfa:	ff 66 5a             	jmp    *0x5a(%esi)
    8cfd:	66 59                	pop    %cx
            for(size_t i = 0; i < prog_cnt; ++i)
    8cff:	66 31 f6             	xor    %si,%si
        if (strcmp(buf, "ls") == 0)
    8d02:	66 85 c0             	test   %ax,%ax
    8d05:	75 46                	jne    8d4d <_ZN2sh3runEv+0x8d>
            printf("lba\tname\n");
    8d07:	66 68 7c a5          	pushw  $0xa57c
    8d0b:	00 00                	add    %al,(%eax)
    8d0d:	66 e8 09 fe          	callw  8b1a <_Z7sprintfPcPKcz+0x1e>
    8d11:	ff                   	(bad)  
    8d12:	ff 67 66             	jmp    *0x66(%edi)
    8d15:	8d b3 00 04 00 00    	lea    0x400(%ebx),%esi
    8d1b:	66 5f                	pop    %di
            for(size_t i = 0; i < prog_cnt; ++i)
    8d1d:	66 31 ff             	xor    %di,%di
    8d20:	67 66 39 bb 40 06    	cmp    %di,0x640(%bp,%di)
    8d26:	00 00                	add    %al,(%eax)
    8d28:	0f 86 8e 00 66 56    	jbe    56668dbc <_data_end+0x5665e7d4>
                printf("%d\t%s\n", progs[i].lba, progs[i].name);
    8d2e:	67 66 ff 76 20       	pushw  0x20(%bp)
    8d33:	66 68 86 a5          	pushw  $0xa586
    8d37:	00 00                	add    %al,(%eax)
    8d39:	66 e8 dd fd          	callw  8b1a <_Z7sprintfPcPKcz+0x1e>
    8d3d:	ff                   	(bad)  
    8d3e:	ff 66 47             	jmp    *0x47(%esi)
            for(size_t i = 0; i < prog_cnt; ++i)
    8d41:	66 83 c6 24          	add    $0x24,%si
    8d45:	66 83 c4 0c          	add    $0xc,%sp
    8d49:	eb d5                	jmp    8d20 <_ZN2sh3runEv+0x60>
            for(size_t i = 0; i < prog_cnt; ++i)
    8d4b:	66 46                	inc    %si
    8d4d:	67 66 39 b3 40 06    	cmp    %si,0x640(%bp,%di)
    8d53:	00 00                	add    %al,(%eax)
    8d55:	76 4d                	jbe    8da4 <_ZN2sh3runEv+0xe4>
                if (strcmp(buf, progs[i].name) == 0)
    8d57:	66 6b fe 24          	imul   $0x24,%si,%di
    8d5b:	67 66 8d 84 3b 00    	lea    0x3b(%si),%ax
    8d61:	04 00                	add    $0x0,%al
    8d63:	00 66 50             	add    %ah,0x50(%esi)
    8d66:	66 53                	push   %bx
    8d68:	66 e8 76 f6          	callw  83e2 <_Z6strcpyPcPKc+0x40>
    8d6c:	ff                   	(bad)  
    8d6d:	ff 66 5a             	jmp    *0x5a(%esi)
    8d70:	66 59                	pop    %cx
    8d72:	66 85 c0             	test   %ax,%ax
    8d75:	75 d4                	jne    8d4b <_ZN2sh3runEv+0x8b>
class bin_loader
{
public:
    static void load_binary_from_floppy(int n)
    {
        sys_read_disk(user_prog_segment, user_prog_load_addr, n, 2);
    8d77:	66 6a 02             	pushw  $0x2
    8d7a:	67 66 0f b7 84 3b 20 	movzww 0x203b(%si),%ax
    8d81:	04 00                	add    $0x0,%al
    8d83:	00 66 50             	add    %ah,0x50(%esi)
    8d86:	66 68 00 a1          	pushw  $0xa100
    8d8a:	00 00                	add    %al,(%eax)
    8d8c:	66 68 00 10          	pushw  $0x1000
    8d90:	00 00                	add    %al,(%eax)
    8d92:	66 e8 b4 f4          	callw  824a <sys_get_scancode+0xf>
    8d96:	ff                   	(bad)  
    8d97:	ff 66 83             	jmp    *-0x7d(%esi)
        sys_execve_bin();
    8d9a:	c4 10                	les    (%eax),%edx
    8d9c:	66 e8 f8 f1          	callw  7f98 <sys_bios_getchar+0x5>
    8da0:	ff                   	(bad)  
    8da1:	ff                   	(bad)  
    8da2:	eb 16                	jmp    8dba <_ZN2sh3runEv+0xfa>
                printf("%s\n", "No such command or file");
    8da4:	66 68 8d a5          	pushw  $0xa58d
    8da8:	00 00                	add    %al,(%eax)
    8daa:	66 68 89 a5          	pushw  $0xa589
    8dae:	00 00                	add    %al,(%eax)
    8db0:	66 e8 66 fd          	callw  8b1a <_Z7sprintfPcPKcz+0x1e>
    8db4:	ff                   	(bad)  
    8db5:	ff 66 5a             	jmp    *0x5a(%esi)
    8db8:	66 59                	pop    %cx
                exec();
                memset(buf, 0, buf_size);
    8dba:	66 68 00 02          	pushw  $0x200
    8dbe:	00 00                	add    %al,(%eax)
    8dc0:	66 6a 00             	pushw  $0x0
    8dc3:	66 53                	push   %bx
    8dc5:	66 e8 96 f5          	callw  835f <_Z7memmovePvPKvm+0x4b>
    8dc9:	ff                   	(bad)  
    8dca:	ff 67 66             	jmp    *0x66(%edi)
                pos = 0;
    8dcd:	c7 83 44 06 00 00 00 	movl   $0x0,0x644(%ebx)
    8dd4:	00 00 00 
                continue;
    8dd7:	66 83 c4 0c          	add    $0xc,%sp
    8ddb:	e9 f4 fe 66 0f       	jmp    f678cd4 <_data_end+0xf66e6ec>
            }
            putchar(in);
    8de0:	be c0 67 66 89       	mov    $0x896667c0,%esi
    8de5:	55                   	push   %ebp
    8de6:	f0 66 50             	lock push %ax
    8de9:	66 e8 a2 f8          	callw  868f <_Z6strtolPKcPPci+0x1a7>
    8ded:	ff                   	(bad)  
    8dee:	ff 67 66             	jmp    *0x66(%edi)
            buf[pos++] = in;
    8df1:	8b 83 44 06 00 00    	mov    0x644(%ebx),%eax
    8df7:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    8dfc:	67 66 89 8b 44 06    	mov    %cx,0x644(%bp,%di)
    8e02:	00 00                	add    %al,(%eax)
    8e04:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    8e09:	67 88 14             	mov    %dl,(%si)
    8e0c:	03 66 58             	add    0x58(%esi),%esp
    8e0f:	e9                   	.byte 0xe9
    8e10:	c0                   	.byte 0xc0
    8e11:	fe                   	.byte 0xfe

Disassembly of section .text._ZN3tty7putcharEi:

00008e12 <_ZN3tty7putcharEi>:
        tty_mem[y + 80 * x] = c;
        tty_mem[y + 80 * x + 1] = color;
#endif
        sys_putchar(c, color, x, y);
    }
    void putchar(int c)
    8e12:	66 55                	push   %bp
    8e14:	66 89 e5             	mov    %sp,%bp
    8e17:	66 56                	push   %si
    8e19:	66 53                	push   %bx
    8e1b:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8e20:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    {
        switch(c)
    8e25:	66 83 f8 09          	cmp    $0x9,%ax
    8e29:	74 22                	je     8e4d <_ZN3tty7putcharEi+0x3b>
    8e2b:	7f 09                	jg     8e36 <_ZN3tty7putcharEi+0x24>
    8e2d:	66 83 f8 08          	cmp    $0x8,%ax
    8e31:	74 36                	je     8e69 <_ZN3tty7putcharEi+0x57>
    8e33:	e9 88 00 66 83       	jmp    83668ec0 <_data_end+0x8365e8d8>
    8e38:	f8                   	clc    
    8e39:	0a 74 73 66          	or     0x66(%ebx,%esi,2),%dh
    8e3d:	83 f8 0d             	cmp    $0xd,%eax
    8e40:	75 7c                	jne    8ebe <_ZN3tty7putcharEi+0xac>
                for(int i = 0; i < 4; ++i) putchar(' ');
                break;
            }
            case '\r':
            {
                cur_x = 0;
    8e42:	67 66 c7 03 00 00    	movw   $0x0,(%bp,%di)
    8e48:	00 00                	add    %al,(%eax)
                break;
    8e4a:	e9 b2 00 66 be       	jmp    be668f01 <_data_end+0xbe65e919>
        switch(c)
    8e4f:	04 00                	add    $0x0,%al
    8e51:	00 00                	add    %al,(%eax)
                for(int i = 0; i < 4; ++i) putchar(' ');
    8e53:	66 6a 20             	pushw  $0x20
    8e56:	66 53                	push   %bx
    8e58:	66 e8 b4 ff          	callw  8e10 <_ZN2sh3runEv+0x150>
    8e5c:	ff                   	(bad)  
    8e5d:	ff 66 58             	jmp    *0x58(%esi)
    8e60:	66 5a                	pop    %dx
    8e62:	66 4e                	dec    %si
    8e64:	75 ed                	jne    8e53 <_ZN3tty7putcharEi+0x41>
    8e66:	e9 96 00 67 66       	jmp    66678f01 <_data_end+0x6666e919>
            }
            case '\b':
            {
                if(cur_y == 0 && cur_x == 0) 
    8e6b:	8b 53 04             	mov    0x4(%ebx),%edx
    8e6e:	67 66 8b 03          	mov    (%bp,%di),%ax
    8e72:	66 85 d2             	test   %dx,%dx
    8e75:	75 1b                	jne    8e92 <_ZN3tty7putcharEi+0x80>
    8e77:	66 85 c0             	test   %ax,%ax
    8e7a:	0f 84 99 00 67 66    	je     66678f19 <_data_end+0x6666e931>
                {
                    break;
                }
                else if (cur_y == 0 && cur_x != 0)
                {
                    cur_y = 80 - 1;
    8e80:	c7 43 04 4f 00 00 00 	movl   $0x4f,0x4(%ebx)
                    cur_x--;
    8e87:	66 48                	dec    %ax
    8e89:	67 66 89 03          	mov    %ax,(%bp,%di)
        sys_putchar(c, color, x, y);
    8e8d:	66 6a 4f             	pushw  $0x4f
    8e90:	eb 09                	jmp    8e9b <_ZN3tty7putcharEi+0x89>
                    putchar_worker(' ', MAKE_COLOR(VGA_BLACK, VGA_WHITE) , cur_x, cur_y);
                    break;
                }
                else
                {
                    cur_y--;
    8e92:	66 4a                	dec    %dx
    8e94:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        sys_putchar(c, color, x, y);
    8e99:	66 52                	push   %dx
    8e9b:	66 50                	push   %ax
    8e9d:	66 6a 07             	pushw  $0x7
    8ea0:	66 6a 20             	pushw  $0x20
    8ea3:	66 e8 ce f1          	callw  8075 <sys_bios_print_int+0xa4>
    8ea7:	ff                   	(bad)  
    8ea8:	ff 66 83             	jmp    *-0x7d(%esi)
    8eab:	c4 10                	les    (%eax),%edx
    8ead:	eb 50                	jmp    8eff <_ZN3tty7putcharEi+0xed>
                    break;
                }
            }
            case '\n':
            {
                cur_x++;
    8eaf:	67 66 ff 03          	incw   (%bp,%di)
                cur_y = 0;
    8eb3:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    8eba:	00 00                	add    %al,(%eax)
                break;
    8ebc:	eb 41                	jmp    8eff <_ZN3tty7putcharEi+0xed>
        sys_putchar(c, color, x, y);
    8ebe:	67 66 ff 73 04       	pushw  0x4(%bp,%di)
    8ec3:	67 66 ff 33          	pushw  (%bp,%di)
    8ec7:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    8ecc:	66 50                	push   %ax
    8ece:	66 e8 a3 f1          	callw  8075 <sys_bios_print_int+0xa4>
    8ed2:	ff                   	(bad)  
    8ed3:	ff 67 66             	jmp    *0x66(%edi)
            }
            default:
            {
                putchar_worker(c, color, cur_x, cur_y);
                cur_x = (cur_y == 79) ? cur_x + 1 : cur_x;
    8ed6:	8b 43 04             	mov    0x4(%ebx),%eax
    8ed9:	66 83 c4 10          	add    $0x10,%sp
    8edd:	66 83 f8 4f          	cmp    $0x4f,%ax
    8ee1:	67 66 8b 13          	mov    (%bp,%di),%dx
    8ee5:	75 02                	jne    8ee9 <_ZN3tty7putcharEi+0xd7>
    8ee7:	66 42                	inc    %dx
    8ee9:	67 66 89 13          	mov    %dx,(%bp,%di)
                cur_y = (cur_y + 1) % 80;
    8eed:	66 40                	inc    %ax
    8eef:	66 b9 50 00          	mov    $0x50,%cx
    8ef3:	00 00                	add    %al,(%eax)
    8ef5:	66 99                	cwtd   
    8ef7:	66 f7 f9             	idiv   %cx
    8efa:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        if (cur_x >= 25)
    8eff:	67 66 83 3b 18       	cmpw   $0x18,(%bp,%di)
    8f04:	7e 11                	jle    8f17 <_ZN3tty7putcharEi+0x105>
            sys_bios_scroll_up(color);
    8f06:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    8f0b:	66 e8 97 f2          	callw  81a6 <sys_print_int+0xa4>
    8f0f:	ff                   	(bad)  
    8f10:	ff 67 66             	jmp    *0x66(%edi)
            --cur_x;
    8f13:	ff 0b                	decl   (%ebx)
    8f15:	66 59                	pop    %cx
        uint16_t pos = x * 80 + y;
    8f17:	67 6b 03 50          	imul   $0x50,(%bp,%di),%eax
    8f1b:	67 66 03 43 04       	add    0x4(%bp,%di),%ax
    8f20:	66 89 c3             	mov    %ax,%bx
        sys_outb(0x3D4, 0x0F);
    8f23:	66 6a 0f             	pushw  $0xf
    8f26:	66 68 d4 03          	pushw  $0x3d4
    8f2a:	00 00                	add    %al,(%eax)
    8f2c:	66 e8 e5 f2          	callw  8215 <sys_inb+0xd>
    8f30:	ff                   	(bad)  
    8f31:	ff 66 58             	jmp    *0x58(%esi)
        sys_outb(0x3D5, (uint8_t) (pos & 0xFF));
    8f34:	66 5a                	pop    %dx
    8f36:	66 0f b6 c3          	movzbw %bl,%ax
    8f3a:	66 50                	push   %ax
    8f3c:	66 68 d5 03          	pushw  $0x3d5
    8f40:	00 00                	add    %al,(%eax)
    8f42:	66 e8 cf f2          	callw  8215 <sys_inb+0xd>
    8f46:	ff                   	(bad)  
    8f47:	ff 66 59             	jmp    *0x59(%esi)
        sys_outb(0x3D4, 0x0E);
    8f4a:	66 5e                	pop    %si
    8f4c:	66 6a 0e             	pushw  $0xe
    8f4f:	66 68 d4 03          	pushw  $0x3d4
    8f53:	00 00                	add    %al,(%eax)
    8f55:	66 e8 bc f2          	callw  8215 <sys_inb+0xd>
    8f59:	ff                   	(bad)  
    8f5a:	ff 66 58             	jmp    *0x58(%esi)
        sys_outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
    8f5d:	66 5a                	pop    %dx
    8f5f:	66 0f b6 df          	movzbw %bh,%bx
    8f63:	67 66 89 5d 0c       	mov    %bx,0xc(%di)
    8f68:	67 66 c7 45 08 d5 03 	movw   $0x3d5,0x8(%di)
    8f6f:	00 00                	add    %al,(%eax)
                break;
            }
        }
        scroll_up();
        move_cursor(cur_x, cur_y);
    }
    8f71:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    8f76:	66 5b                	pop    %bx
    8f78:	66 5e                	pop    %si
    8f7a:	66 5d                	pop    %bp
        sys_outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
    8f7c:	e9                   	.byte 0xe9
    8f7d:	98                   	cwtl   
    8f7e:	f2                   	repnz

Disassembly of section .text._Z4itoaIjEvPcT_ib:

00008f7f <_Z4itoaIjEvPcT_ib>:
void itoa(char* buffer, T num, int base, bool captial = false)
    8f7f:	66 55                	push   %bp
    8f81:	66 89 e5             	mov    %sp,%bp
    8f84:	66 57                	push   %di
    8f86:	66 56                	push   %si
    8f88:	66 53                	push   %bx
    8f8a:	66 83 ec 08          	sub    $0x8,%sp
    8f8e:	67 66 8b 75 08       	mov    0x8(%di),%si
    8f93:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8f98:	67 66 8b 7d 10       	mov    0x10(%di),%di
    8f9d:	67 8a 5d 14          	mov    0x14(%di),%bl
    8fa1:	67 88 5d ef          	mov    %bl,-0x11(%di)
    char *p = buffer;
    8fa5:	66 89 f1             	mov    %si,%cx
    8fa8:	66 31 d2             	xor    %dx,%dx
    8fab:	66 f7 f7             	div    %di
    8fae:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    8fb3:	67 80 7d ef 00       	cmpb   $0x0,-0x11(%di)
    8fb8:	74 09                	je     8fc3 <_Z4itoaIjEvPcT_ib+0x44>
    8fba:	67 8a 9a c6 a5       	mov    -0x5a3a(%bp,%si),%bl
    8fbf:	00 00                	add    %al,(%eax)
    8fc1:	eb 07                	jmp    8fca <_Z4itoaIjEvPcT_ib+0x4b>
    8fc3:	67 8a 9a d7 a5       	mov    -0x5a29(%bp,%si),%bl
    8fc8:	00 00                	add    %al,(%eax)
    8fca:	67 66 8d 51 01       	lea    0x1(%bx,%di),%dx
    8fcf:	67 88 5a ff          	mov    %bl,-0x1(%bp,%si)
        if(num == 0) break;
    8fd3:	67 66 83 7d f0 00    	cmpw   $0x0,-0x10(%di)
    8fd9:	74 05                	je     8fe0 <_Z4itoaIjEvPcT_ib+0x61>
    8fdb:	66 89 d1             	mov    %dx,%cx
    8fde:	eb c8                	jmp    8fa8 <_Z4itoaIjEvPcT_ib+0x29>
    *p = '\0';
    8fe0:	67 c6 41 01 00       	movb   $0x0,0x1(%bx,%di)
    reverse(buffer);
    8fe5:	67 66 89 75 08       	mov    %si,0x8(%di)
}
    8fea:	66 58                	pop    %ax
    8fec:	66 5a                	pop    %dx
    8fee:	66 5b                	pop    %bx
    8ff0:	66 5e                	pop    %si
    8ff2:	66 5f                	pop    %di
    8ff4:	66 5d                	pop    %bp
    reverse(buffer);
    8ff6:	e9                   	.byte 0xe9
    8ff7:	58                   	pop    %eax
    8ff8:	f4                   	hlt    
