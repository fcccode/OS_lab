
build/kernel/kernel.bin.elf:     file format elf32-i386


Disassembly of section .text:

00007e00 <_text>:
    7e00:	68 37 7e 68 80       	push   $0x80687e37
    7e05:	00 e8                	add    %ch,%al
    7e07:	15 00 83 c4 04       	adc    $0x4c48300,%eax
    7e0c:	68 39 7e 68 84       	push   $0x84687e39
    7e11:	00 e8                	add    %ch,%al
    7e13:	09 00                	or     %eax,(%eax)
    7e15:	83 c4 04             	add    $0x4,%esp
    7e18:	e8 8d 00 fa eb       	call   ebfa7eaa <_GLOBAL_OFFSET_TABLE_+0xebf9d6b2>
    7e1d:	fe                   	.byte 0xfe

00007e1e <install_int>:
    7e1e:	55                   	push   %ebp
    7e1f:	89 e5                	mov    %esp,%ebp
    7e21:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    7e26:	8b 76 04             	mov    0x4(%esi),%esi
    7e29:	8b 4e 06             	mov    0x6(%esi),%ecx
    7e2c:	26 89 0c 26          	mov    %ecx,%es:(%esi,%eiz,1)
    7e30:	8c 4c 02 8e          	mov    %cs,-0x72(%edx,%eax,1)
    7e34:	c0                   	.byte 0xc0
    7e35:	5d                   	pop    %ebp
    7e36:	c3                   	ret    

00007e37 <interrupt_20h>:
    7e37:	b4 4c                	mov    $0x4c,%ah

00007e39 <interrupt_21h>:
    7e39:	80 fc 4c             	cmp    $0x4c,%ah
    7e3c:	75 09                	jne    7e47 <panic_21h_func_not_impl>
    7e3e:	83 c4 06             	add    $0x6,%esp
    7e41:	66 ff 26             	jmpw   *(%esi)
    7e44:	0a                   	.byte 0xa
    7e45:	a0                   	.byte 0xa0
    7e46:	cf                   	iret   

00007e47 <panic_21h_func_not_impl>:
    7e47:	eb fe                	jmp    7e47 <panic_21h_func_not_impl>

00007e49 <_ZL8print_okPc>:
#include "../libc/stdio.h"
#include "sh.h"
static tty* current_tty = nullptr;
tty* sys_get_current_tty(){return current_tty;}
const char* str = "Welcome to HHOS version 1.2.0\nYou can input help to see how to use it!";
static inline void print_ok(char * mod) {
    7e49:	66 55                	push   %bp
    7e4b:	66 89 e5             	mov    %sp,%bp
    printf("%s init [", mod);
    7e4e:	66 50                	push   %ax
    7e50:	66 68 14 a7          	pushw  $0xa714
    7e54:	00 00                	add    %al,(%eax)
    7e56:	66 e8 80 0d          	callw  8bda <_Z7sprintfPcPKcz+0x1e>
    7e5a:	00 00                	add    %al,(%eax)
    {
        cur_y = y;
    }
    void set_color(int _color)
    {
        color = _color;
    7e5c:	66 a1 40 97 67 66    	mov    0x66679740,%ax
    7e62:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
    current_tty->set_color(MAKE_COLOR(VGA_BLACK, VGA_GREEN));
    printf("OK");
    7e69:	66 58                	pop    %ax
    7e6b:	66 5a                	pop    %dx
    7e6d:	66 68 1e a7          	pushw  $0xa71e
    7e71:	00 00                	add    %al,(%eax)
    7e73:	66 e8 63 0d          	callw  8bda <_Z7sprintfPcPKcz+0x1e>
    7e77:	00 00                	add    %al,(%eax)
    7e79:	66 a1 40 97 67 66    	mov    0x66679740,%ax
    7e7f:	c7 40 08 07 00 00 00 	movl   $0x7,0x8(%eax)
    current_tty->set_color(MAKE_COLOR(VGA_BLACK, VGA_WHITE));
    printf("]\n");
    7e86:	67 66 c7 04 24 21    	movw   $0x2124,(%si)
    7e8c:	a7                   	cmpsl  %es:(%edi),%ds:(%esi)
    7e8d:	00 00                	add    %al,(%eax)
    7e8f:	66 e8 47 0d          	callw  8bda <_Z7sprintfPcPKcz+0x1e>
    7e93:	00 00                	add    %al,(%eax)
}
    7e95:	66 59                	pop    %cx
    7e97:	66 c9                	leavew 
    7e99:	66 c3                	retw   

00007e9b <_Z19sys_get_current_ttyv>:
tty* sys_get_current_tty(){return current_tty;}
    7e9b:	66 55                	push   %bp
    7e9d:	66 89 e5             	mov    %sp,%bp
    7ea0:	66 a1 40 97 66 5d    	mov    0x5d669740,%ax
    7ea6:	66 c3                	retw   

00007ea8 <kernel_main>:
extern "C" void kernel_main()
{
    7ea8:	66 55                	push   %bp
    7eaa:	66 89 e5             	mov    %sp,%bp
    7ead:	66 53                	push   %bx
    7eaf:	66 81 ec 58 08       	sub    $0x858,%sp
    7eb4:	00 00                	add    %al,(%eax)
        sys_bios_clear_screen();
    7eb6:	66 e8 84 01          	callw  803e <sys_bios_print_string+0x1e>
    7eba:	00 00                	add    %al,(%eax)
        tty_init();
    7ebc:	67 66 8d 9d a8 f7    	lea    -0x858(%di),%bx
    7ec2:	ff                   	(bad)  
    7ec3:	ff 66 53             	jmp    *0x53(%esi)
    7ec6:	66 e8 76 0d          	callw  8c40 <_Z7isspacei+0x26>
    7eca:	00 00                	add    %al,(%eax)
    tty tty1;
    current_tty = &tty1;
    7ecc:	66 89 1e             	mov    %bx,(%esi)
    7ecf:	40                   	inc    %eax
    7ed0:	97                   	xchg   %eax,%edi
    print_ok("TTY");
    7ed1:	66 5b                	pop    %bx
    7ed3:	66 b8 24 a7          	mov    $0xa724,%ax
    7ed7:	00 00                	add    %al,(%eax)
    7ed9:	66 e8 6a ff          	callw  7e47 <panic_21h_func_not_impl>
    7edd:	ff                   	(bad)  
    7ede:	ff 67 66             	jmp    *0x66(%edi)
    void read_help_file()
    {
        sys_read_disk(0, (uint32_t)help, 32, 1);
    }
public:
    sh(){
    7ee1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    7ee8:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    7eef:	00 00                	add    %al,(%eax)
        memset(buf, 0, buf_size);
    7ef1:	66 68 00 02          	pushw  $0x200
    7ef5:	00 00                	add    %al,(%eax)
    7ef7:	66 6a 00             	pushw  $0x0
    7efa:	67 66 8d 9d b4 f7    	lea    -0x84c(%di),%bx
    7f00:	ff                   	(bad)  
    7f01:	ff 66 53             	jmp    *0x53(%esi)
    7f04:	66 e8 18 05          	callw  8420 <_Z7memmovePvPKvm+0x4b>
    7f08:	00 00                	add    %al,(%eax)
        read_prog_record();
    7f0a:	66 83 c4 0c          	add    $0xc,%sp
    7f0e:	66 53                	push   %bx
    7f10:	66 e8 1c 0f          	callw  8e30 <_ZN2sh4execEv+0x172>
    7f14:	00 00                	add    %al,(%eax)
        sys_read_disk(0, (uint32_t)help, 32, 1);
    7f16:	67 66 c7 04 24 01    	movw   $0x124,(%si)
    7f1c:	00 00                	add    %al,(%eax)
    7f1e:	00 66 6a             	add    %ah,0x6a(%esi)
    7f21:	20 67 66             	and    %ah,0x66(%edi)
    7f24:	8d 85 b4 fb ff ff    	lea    -0x44c(%ebp),%eax
    7f2a:	66 50                	push   %ax
    7f2c:	66 6a 00             	pushw  $0x0
    7f2f:	66 e8 d8 03          	callw  830b <sys_get_scancode+0xf>
    7f33:	00 00                	add    %al,(%eax)
    sh sh1;
    print_ok("Shell");
    7f35:	66 83 c4 10          	add    $0x10,%sp
    7f39:	66 b8 28 a7          	mov    $0xa728,%ax
    7f3d:	00 00                	add    %al,(%eax)
    7f3f:	66 e8 04 ff          	callw  7e47 <panic_21h_func_not_impl>
    7f43:	ff                   	(bad)  
    7f44:	ff 66 ff             	jmp    *-0x1(%esi)
    printf("%s\n", str);
    7f47:	36 10 a7 66 68 a9 a7 	adc    %ah,%ss:-0x5856979a(%edi)
    7f4e:	00 00                	add    %al,(%eax)
    7f50:	66 e8 86 0c          	callw  8bda <_Z7sprintfPcPKcz+0x1e>
    7f54:	00 00                	add    %al,(%eax)
        read_help_file();
    }
    void run () {
        printf("%s", prompt);
    7f56:	66 58                	pop    %ax
    7f58:	66 5a                	pop    %dx
    7f5a:	66 68 2e a7          	pushw  $0xa72e
    7f5e:	00 00                	add    %al,(%eax)
    7f60:	66 68 d2 a7          	pushw  $0xa7d2
    7f64:	00 00                	add    %al,(%eax)
    7f66:	66 e8 70 0c          	callw  8bda <_Z7sprintfPcPKcz+0x1e>
    7f6a:	00 00                	add    %al,(%eax)
    7f6c:	66 5a                	pop    %dx
    7f6e:	66 59                	pop    %cx
        while(true)
        {
            char in = getchar();
    7f70:	66 e8 46 08          	callw  87ba <_Z4putsPKc+0x41>
    7f74:	00 00                	add    %al,(%eax)
    7f76:	66 89 c2             	mov    %ax,%dx
            if (in == '\b')
    7f79:	3c 08                	cmp    $0x8,%al
    7f7b:	75 2b                	jne    7fa8 <kernel_main+0x100>
            {
                if(pos != 0){
    7f7d:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    7f83:	74 eb                	je     7f70 <kernel_main+0xc8>
                    putchar('\b');
    7f85:	66 6a 08             	pushw  $0x8
    7f88:	66 e8 c3 07          	callw  874f <_Z6strtolPKcPPci+0x1a7>
    7f8c:	00 00                	add    %al,(%eax)
                    buf[pos--] = '\0';
    7f8e:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    7f93:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    7f98:	67 66 89 55 f8       	mov    %dx,-0x8(%di)
    7f9d:	67 c6 84 05 b4 f7    	movb   $0xf7,-0x4bfb(%si)
    7fa3:	ff                   	(bad)  
    7fa4:	ff 00                	incl   (%eax)
    7fa6:	eb 6f                	jmp    8017 <kernel_main+0x16f>
                }
            }
            else if (in == 13)
    7fa8:	3c 0d                	cmp    $0xd,%al
    7faa:	75 38                	jne    7fe4 <kernel_main+0x13c>
            {
                putchar('\n');
    7fac:	66 6a 0a             	pushw  $0xa
    7faf:	66 e8 9c 07          	callw  874f <_Z6strtolPKcPPci+0x1a7>
    7fb3:	00 00                	add    %al,(%eax)
                exec();
    7fb5:	67 66 89 1c          	mov    %bx,(%si)
    7fb9:	24 66                	and    $0x66,%al
    7fbb:	e8 fe 0c 00 00       	call   8cbe <_ZN2sh4execEv>
                memset(buf, 0, buf_size);
    7fc0:	67 66 c7 04 24 00    	movw   $0x24,(%si)
    7fc6:	02 00                	add    (%eax),%al
    7fc8:	00 66 6a             	add    %ah,0x6a(%esi)
    7fcb:	00 66 53             	add    %ah,0x53(%esi)
    7fce:	66 e8 4e 04          	callw  8420 <_Z7memmovePvPKvm+0x4b>
    7fd2:	00 00                	add    %al,(%eax)
                pos = 0;
    7fd4:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    7fdb:	00 00                	add    %al,(%eax)
                printf("%s", prompt);
    7fdd:	66 83 c4 0c          	add    $0xc,%sp
    7fe1:	e9 76 ff 66 0f       	jmp    f677f5c <_GLOBAL_OFFSET_TABLE_+0xf66d764>
            }
            else {
                putchar(in);
    7fe6:	be c0 67 66 89       	mov    $0x896667c0,%esi
    7feb:	95                   	xchg   %eax,%ebp
    7fec:	a4                   	movsb  %ds:(%esi),%es:(%edi)
    7fed:	f7 ff                	idiv   %edi
    7fef:	ff 66 50             	jmp    *0x50(%esi)
    7ff2:	66 e8 59 07          	callw  874f <_Z6strtolPKcPPci+0x1a7>
    7ff6:	00 00                	add    %al,(%eax)
                buf[pos++] = in;
    7ff8:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    7ffd:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    8002:	67 66 89 4d f8       	mov    %cx,-0x8(%di)
    8007:	67 66 8b 95 a4 f7    	mov    -0x85c(%di),%dx
    800d:	ff                   	(bad)  
    800e:	ff 67 88             	jmp    *-0x78(%edi)
    8011:	94                   	xchg   %eax,%esp
    8012:	05 b4 f7 ff ff       	add    $0xfffff7b4,%eax
    8017:	66 58                	pop    %ax
    8019:	e9 54 ff 66 90       	jmp    90677f72 <_GLOBAL_OFFSET_TABLE_+0x9066d77a>
    801e:	66 90                	xchg   %ax,%ax

00008020 <sys_bios_print_string>:
    8020:	55                   	push   %ebp
    8021:	89 e5                	mov    %esp,%ebp
    8023:	8b 4e 0a             	mov    0xa(%esi),%ecx
    8026:	8b 5e 0e             	mov    0xe(%esi),%ebx
    8029:	b7 00                	mov    $0x0,%bh
    802b:	8b 56 12             	mov    0x12(%esi),%edx
    802e:	8c d8                	mov    %ds,%eax
    8030:	8e c0                	mov    %eax,%es
    8032:	b8 01 13 8e ed       	mov    $0xed8e1301,%eax
    8037:	8b 6e 06             	mov    0x6(%esi),%ebp
    803a:	cd 10                	int    $0x10
    803c:	8c ed                	mov    %gs,%ebp
    803e:	5d                   	pop    %ebp
    803f:	c3                   	ret    

00008040 <sys_bios_clear_screen>:
    8040:	60                   	pusha  
    8041:	b4 06                	mov    $0x6,%ah
    8043:	b0 00                	mov    $0x0,%al
    8045:	b7 07                	mov    $0x7,%bh
    8047:	b5 00                	mov    $0x0,%ch
    8049:	b1 00                	mov    $0x0,%cl
    804b:	b6 18                	mov    $0x18,%dh
    804d:	b2 4f                	mov    $0x4f,%dl
    804f:	cd 10                	int    $0x10
    8051:	61                   	popa   
    8052:	c3                   	ret    

00008053 <sys_bios_getchar>:
    8053:	b4 00                	mov    $0x0,%ah
    8055:	cd 16                	int    $0x16
    8057:	b4 00                	mov    $0x0,%ah
    8059:	c3                   	ret    

0000805a <sys_execve_bin>:
    805a:	55                   	push   %ebp
    805b:	89 e5                	mov    %esp,%ebp
    805d:	60                   	pusha  
    805e:	1e                   	push   %ds
    805f:	06                   	push   %es
    8060:	b8 00 10 8e d8       	mov    $0xd88e1000,%eax
    8065:	8e c0                	mov    %eax,%es
    8067:	8e d0                	mov    %eax,%ss
    8069:	c7 06 00 a0 cd 00    	movl   $0xcda000,(%esi)
    806f:	c7 06 02 a0 20 00    	movl   $0x20a002,(%esi)
    8075:	c7 06 0a a0 84 80    	movl   $0x8084a00a,(%esi)
    807b:	8c 0e                	mov    %cs,(%esi)
    807d:	0c a0                	or     $0xa0,%al
    807f:	ea                   	.byte 0xea
    8080:	00                   	.byte 0x0
    8081:	a1                   	.byte 0xa1
    8082:	00 10                	add    %dl,(%eax)

00008084 <return_point>:
    8084:	b8 00 00 8e d0       	mov    $0xd08e0000,%eax
    8089:	58                   	pop    %eax
    808a:	8e c0                	mov    %eax,%es
    808c:	58                   	pop    %eax
    808d:	8e d8                	mov    %eax,%ds
    808f:	61                   	popa   
    8090:	5d                   	pop    %ebp
    8091:	c3                   	ret    

00008092 <sys_bios_print_int>:
#include "sys_lib.h"
void sys_bios_print_int(int num, int color, int pos)
{
    8092:	66 55                	push   %bp
    8094:	66 89 e5             	mov    %sp,%bp
    8097:	66 57                	push   %di
    8099:	66 56                	push   %si
    809b:	66 53                	push   %bx
    809d:	66 50                	push   %ax
    int num_ = num;
    809f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    80a4:	66 b9 01 00          	mov    $0x1,%cx
    80a8:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    80aa:	66 bb 0a 00          	mov    $0xa,%bx
    80ae:	00 00                	add    %al,(%eax)
    80b0:	66 99                	cwtd   
    80b2:	66 f7 fb             	idiv   %bx
    80b5:	66 85 c0             	test   %ax,%ax
    80b8:	74 04                	je     80be <sys_bios_print_int+0x2c>
    80ba:	66 41                	inc    %cx
    80bc:	eb f2                	jmp    80b0 <sys_bios_print_int+0x1e>
    char arr[len + 1];
    80be:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    80c3:	66 83 e0 fc          	and    $0xfffc,%ax
    80c7:	66 29 c4             	sub    %ax,%sp
    80ca:	66 89 e7             	mov    %sp,%di
    80cd:	67 66 8d 1c          	lea    (%si),%bx
    80d1:	0c 67                	or     $0x67,%al
    int power = 1;
    80d3:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    80d9:	00 00                	add    %al,(%eax)
    for(int i = 0; i < len; ++i, power *= 10)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    80db:	67 66 8b 45 08       	mov    0x8(%di),%ax
    80e0:	66 99                	cwtd   
    80e2:	67 66 f7 7d f0       	idivw  -0x10(%di)
    80e7:	66 be 0a 00          	mov    $0xa,%si
    80eb:	00 00                	add    %al,(%eax)
    80ed:	66 99                	cwtd   
    80ef:	66 f7 fe             	idiv   %si
    80f2:	66 83 c2 30          	add    $0x30,%dx
    80f6:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    80fa:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    8100:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8105:	66 4b                	dec    %bx
    8107:	66 39 df             	cmp    %bx,%di
    810a:	75 cf                	jne    80db <sys_bios_print_int+0x49>
    arr[len] = '\0';
    810c:	67 c6 04 0f          	movb   $0xf,(%si)
    8110:	00 67 66             	add    %ah,0x66(%edi)
    sys_bios_print_string(arr, len, color, pos);
    8113:	ff 75 10             	pushl  0x10(%ebp)
    8116:	67 66 ff 75 0c       	pushw  0xc(%di)
    811b:	66 51                	push   %cx
    811d:	66 57                	push   %di
    811f:	66 e8 fb fe          	callw  801e <kernel_main+0x176>
    8123:	ff                   	(bad)  
    8124:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8127:	c4 10                	les    (%eax),%edx
    8129:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    812e:	66 5b                	pop    %bx
    8130:	66 5e                	pop    %si
    8132:	66 5f                	pop    %di
    8134:	66 5d                	pop    %bp
    8136:	66 c3                	retw   

00008138 <sys_putchar>:
    //"mov word ptr gs:[bp],ax\n\t"
                   //".att_syntax noprefix\n\t");
//}

void sys_putchar(int c, int color, int x, int y)
{
    8138:	66 55                	push   %bp
    813a:	66 89 e5             	mov    %sp,%bp
    813d:	66 53                	push   %bx
    int offset = (x * 80 + y)*2;
    uint16_t ch = c | (color << 8);
    813f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8144:	66 c1 e0 08          	shl    $0x8,%ax
    8148:	67 66 0b 45 08       	or     0x8(%di),%ax
    int offset = (x * 80 + y)*2;
    814d:	67 66 6b 5d 10 50    	imul   $0x50,0x10(%di),%bx
    8153:	67 66 03 5d 14       	add    0x14(%di),%bx
    8158:	66 01 db             	add    %bx,%bx
    "mov word ptr gs:[bp],ax\n\t"
    "popa\n\t"
    ".att_syntax noprefix\n\t"
    :
    :"a"(ch),"b"(offset)
    :"%ecx");
    815b:	66 60                	pushaw 
    815d:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    8162:	89 dd                	mov    %ebx,%ebp
    8164:	65 89 46 00          	mov    %eax,%gs:0x0(%esi)
    8168:	66 61                	popaw  
}
    816a:	66 5b                	pop    %bx
    816c:	66 5d                	pop    %bp
    816e:	66 c3                	retw   

00008170 <sys_print_string>:
{
    8170:	66 55                	push   %bp
    8172:	66 89 e5             	mov    %sp,%bp
    8175:	66 56                	push   %si
    8177:	66 53                	push   %bx
    8179:	67 66 8b 5d 14       	mov    0x14(%di),%bx
    817e:	67 66 8b 75 0c       	mov    0xc(%di),%si
    8183:	66 01 de             	add    %bx,%si
    8186:	66 89 da             	mov    %bx,%dx
    for(unsigned int i = 0; i < len; ++i)
    8189:	66 39 f2             	cmp    %si,%dx
    818c:	74 28                	je     81b6 <sys_print_string+0x46>
        sys_putchar(str[i], color, x, y + i);
    818e:	66 52                	push   %dx
    8190:	67 66 ff 75 10       	pushw  0x10(%di)
    8195:	66 6a 07             	pushw  $0x7
    8198:	67 66 8b 45 08       	mov    0x8(%di),%ax
    819d:	66 29 d8             	sub    %bx,%ax
    81a0:	67 66 0f be 04       	movsbw (%si),%ax
    81a5:	10 66 50             	adc    %ah,0x50(%esi)
    81a8:	66 e8 8a ff          	callw  8136 <sys_bios_print_int+0xa4>
    81ac:	ff                   	(bad)  
    81ad:	ff 66 42             	jmp    *0x42(%esi)
    for(unsigned int i = 0; i < len; ++i)
    81b0:	66 83 c4 10          	add    $0x10,%sp
    81b4:	eb d3                	jmp    8189 <sys_print_string+0x19>
}
    81b6:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    81bb:	66 5b                	pop    %bx
    81bd:	66 5e                	pop    %si
    81bf:	66 5d                	pop    %bp
    81c1:	66 c3                	retw   

000081c3 <sys_print_int>:
{
    81c3:	66 55                	push   %bp
    81c5:	66 89 e5             	mov    %sp,%bp
    81c8:	66 57                	push   %di
    81ca:	66 56                	push   %si
    81cc:	66 53                	push   %bx
    81ce:	66 50                	push   %ax
    int num_ = num;
    81d0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    81d5:	66 b9 01 00          	mov    $0x1,%cx
    81d9:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    81db:	66 bb 0a 00          	mov    $0xa,%bx
    81df:	00 00                	add    %al,(%eax)
    81e1:	66 99                	cwtd   
    81e3:	66 f7 fb             	idiv   %bx
    81e6:	66 85 c0             	test   %ax,%ax
    81e9:	74 04                	je     81ef <sys_print_int+0x2c>
    81eb:	66 41                	inc    %cx
    81ed:	eb f2                	jmp    81e1 <sys_print_int+0x1e>
    char arr[len + 1];
    81ef:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    81f4:	66 83 e0 fc          	and    $0xfffc,%ax
    81f8:	66 29 c4             	sub    %ax,%sp
    81fb:	66 89 e7             	mov    %sp,%di
    81fe:	67 66 8d 1c          	lea    (%si),%bx
    8202:	0c 67                	or     $0x67,%al
    int power = 1;
    8204:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    820a:	00 00                	add    %al,(%eax)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    820c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8211:	66 99                	cwtd   
    8213:	67 66 f7 7d f0       	idivw  -0x10(%di)
    8218:	66 be 0a 00          	mov    $0xa,%si
    821c:	00 00                	add    %al,(%eax)
    821e:	66 99                	cwtd   
    8220:	66 f7 fe             	idiv   %si
    8223:	66 83 c2 30          	add    $0x30,%dx
    8227:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    822b:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    8231:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8236:	66 4b                	dec    %bx
    8238:	66 39 df             	cmp    %bx,%di
    823b:	75 cf                	jne    820c <sys_print_int+0x49>
    arr[len] = '\0';
    823d:	67 c6 04 0f          	movb   $0xf,(%si)
    8241:	00 67 66             	add    %ah,0x66(%edi)
    sys_print_string(arr, len, x, y); 
    8244:	ff 75 10             	pushl  0x10(%ebp)
    8247:	67 66 ff 75 0c       	pushw  0xc(%di)
    824c:	66 51                	push   %cx
    824e:	66 57                	push   %di
    8250:	66 e8 1a ff          	callw  816e <sys_putchar+0x36>
    8254:	ff                   	(bad)  
    8255:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8258:	c4 10                	les    (%eax),%edx
    825a:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    825f:	66 5b                	pop    %bx
    8261:	66 5e                	pop    %si
    8263:	66 5f                	pop    %di
    8265:	66 5d                	pop    %bp
    8267:	66 c3                	retw   

00008269 <sys_bios_scroll_up>:

void sys_bios_scroll_up(int color)
{
    8269:	66 55                	push   %bp
    826b:	66 89 e5             	mov    %sp,%bp
    "movb $79, %%dl\n\t"
    "movb $0x06, %%ah\n\t"
    "int $0x10\n\t"
    "popa\n\t"
    :
    : "g"(color));
    826e:	66 60                	pushaw 
    8270:	b0 01                	mov    $0x1,%al
    8272:	67 8a 7d 08          	mov    0x8(%di),%bh
    8276:	b5 00                	mov    $0x0,%ch
    8278:	b1 00                	mov    $0x0,%cl
    827a:	b6 18                	mov    $0x18,%dh
    827c:	b2 4f                	mov    $0x4f,%dl
    827e:	b4 06                	mov    $0x6,%ah
    8280:	cd 10                	int    $0x10
    8282:	66 61                	popaw  
}
    8284:	66 5d                	pop    %bp
    8286:	66 c3                	retw   

00008288 <sys_bios_putchar>:

void sys_bios_putchar(char c, int color, int x, int y)
{
    8288:	66 55                	push   %bp
    828a:	66 89 e5             	mov    %sp,%bp
    828d:	66 50                	push   %ax
    828f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8294:	67 88 45 fc          	mov    %al,-0x4(%di)
    sys_bios_print_string(&c, 1, color, MAKE_POS(x, y));
    8298:	67 66 8b 45 10       	mov    0x10(%di),%ax
    829d:	66 c1 e0 08          	shl    $0x8,%ax
    82a1:	67 66 0f b6 55 14    	movzbw 0x14(%di),%dx
    82a7:	66 09 d0             	or     %dx,%ax
    82aa:	66 50                	push   %ax
    82ac:	67 66 ff 75 0c       	pushw  0xc(%di)
    82b1:	66 6a 01             	pushw  $0x1
    82b4:	67 66 8d 45 fc       	lea    -0x4(%di),%ax
    82b9:	66 50                	push   %ax
    82bb:	66 e8 5f fd          	callw  801e <kernel_main+0x176>
    82bf:	ff                   	(bad)  
    82c0:	ff 66 83             	jmp    *-0x7d(%esi)
}
    82c3:	c4 10                	les    (%eax),%edx
    82c5:	66 c9                	leavew 
    82c7:	66 c3                	retw   

000082c9 <sys_inb>:

uint8_t sys_inb(uint16_t port)
{
    82c9:	66 55                	push   %bp
    82cb:	66 89 e5             	mov    %sp,%bp
    uint8_t ret;
    asm volatile ( "inb %1, %0"
                   : "=a"(ret)
                   : "Nd"(port) );
    82ce:	67 66 8b 55 08       	mov    0x8(%di),%dx
    82d3:	ec                   	in     (%dx),%al
    return ret;
}
    82d4:	66 5d                	pop    %bp
    82d6:	66 c3                	retw   

000082d8 <sys_outb>:
//    asm(".att_syntax noprefix\n");
//    return ret;
//}

void sys_outb(uint16_t port, uint8_t data)
{
    82d8:	66 55                	push   %bp
    82da:	66 89 e5             	mov    %sp,%bp
    asm volatile ( "outb %0, %1"
                   : 
                   : "a"(data), "Nd"(port) );
    82dd:	67 66 8b 55 08       	mov    0x8(%di),%dx
    82e2:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    82e7:	ee                   	out    %al,(%dx)
}
    82e8:	66 5d                	pop    %bp
    82ea:	66 c3                	retw   

000082ec <sys_dbg_bochs_putc>:
//                    : "=a"(ret)
//                    : "Nd"(port) );
//     return ret;
// }

void sys_dbg_bochs_putc(char c){
    82ec:	66 55                	push   %bp
    82ee:	66 89 e5             	mov    %sp,%bp
                   : "a"(data), "Nd"(port) );
    82f1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    82f6:	e6 e9                	out    %al,$0xe9
    sys_outb(0xe9, (uint8_t)c);
}
    82f8:	66 5d                	pop    %bp
    82fa:	66 c3                	retw   

000082fc <sys_get_scancode>:

char sys_get_scancode()
{
    82fc:	66 55                	push   %bp
    82fe:	66 89 e5             	mov    %sp,%bp
                   : "Nd"(port) );
    8301:	e4 64                	in     $0x64,%al
    while (!(sys_inb(0x64) & 1));
    8303:	a8 01                	test   $0x1,%al
    8305:	74 fa                	je     8301 <sys_get_scancode+0x5>
                   : "Nd"(port) );
    8307:	e4 60                	in     $0x60,%al
    return sys_inb(0x60);
}
    8309:	66 5d                	pop    %bp
    830b:	66 c3                	retw   

0000830d <sys_read_disk>:

void sys_read_disk(uint32_t segment, uint32_t address, uint16_t logical_start_sector, uint8_t secotr_cnt)
{
    830d:	66 55                	push   %bp
    830f:	66 89 e5             	mov    %sp,%bp
    8312:	66 53                	push   %bx
    uint8_t head = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) / FLOPPY_SECTOR_PER_TRACK;
    8314:	67 66 0f b7 45 10    	movzww 0x10(%di),%ax
    831a:	66 b9 24 00          	mov    $0x24,%cx
    831e:	00 00                	add    %al,(%eax)
    8320:	66 99                	cwtd   
    8322:	66 f7 f9             	idiv   %cx
    8325:	66 89 c1             	mov    %ax,%cx
    8328:	66 bb 12 00          	mov    $0x12,%bx
    832c:	00 00                	add    %al,(%eax)
    832e:	66 89 d0             	mov    %dx,%ax
    8331:	66 99                	cwtd   
    8333:	66 f7 fb             	idiv   %bx
    uint16_t cylinder = logical_start_sector / (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK);
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    //位操作一定要注意类型匹配（两小时）
    uint16_t mask1 = 255;
    uint16_t mask2 = 768;
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    8336:	66 89 cb             	mov    %cx,%bx
    8339:	66 c1 e3 08          	shl    $0x8,%bx
    833d:	66 81 e1 00 03       	and    $0x300,%cx
    8342:	00 00                	add    %al,(%eax)
    8344:	66 c1 f9 02          	sar    $0x2,%cx
    8348:	66 09 d9             	or     %bx,%cx
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    834b:	66 42                	inc    %dx
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    834d:	66 09 d1             	or     %dx,%cx
     "movb %4, %%al\n\t"    //扇区数
     "movb $0, %%dl\n\t"    //驱动器号
     "movb $2, %%ah\n\t"    //功能号
     "int $0x13\n\t"
     "pop %%es\n\t"
     : :"g"(segment), "g"(address), "g"(head), "g"(_cx), "g" (secotr_cnt));
    8350:	06                   	push   %es
    8351:	67 8b 5d 08          	mov    0x8(%di),%ebx
    8355:	8e c3                	mov    %ebx,%es
    8357:	67 8b 5d 0c          	mov    0xc(%di),%ebx
    835b:	88 c6                	mov    %al,%dh
    835d:	89 c9                	mov    %ecx,%ecx
    835f:	67 8a 45 14          	mov    0x14(%di),%al
    8363:	b2 00                	mov    $0x0,%dl
    8365:	b4 02                	mov    $0x2,%ah
    8367:	cd 13                	int    $0x13
    8369:	07                   	pop    %es
}
    836a:	66 5b                	pop    %bx
    836c:	66 5d                	pop    %bp
    836e:	66 c3                	retw   

00008370 <_Z6memcmpPKvS0_m>:
namespace hhlibc {

#endif

int memcmp(const void * _s1, const void* _s2, size_t n)
{
    8370:	66 55                	push   %bp
    8372:	66 89 e5             	mov    %sp,%bp
    8375:	66 31 d2             	xor    %dx,%dx
    auto s1 = reinterpret_cast<const unsigned char*>(_s1);
    auto s2 = reinterpret_cast<const unsigned char*>(_s2);
    while(n--)
    8378:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    837d:	74 22                	je     83a1 <_Z6memcmpPKvS0_m+0x31>
    {
        if(*s1 != *s2)          //**不能**让!=时跳出然后返回*s1 - *s2
    837f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8384:	67 66 0f b6 04       	movzbw (%si),%ax
    8389:	10 66 42             	adc    %ah,0x42(%esi)
    838c:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    8391:	67 66 0f b6 4c 11    	movzbw 0x11(%si),%cx
    8397:	ff                   	(bad)  
    8398:	38 c8                	cmp    %cl,%al
    839a:	74 dc                	je     8378 <_Z6memcmpPKvS0_m+0x8>
        {                       //因为那样在实际上==的时候，会比较错误
            return *s1 - *s2;
    839c:	66 29 c8             	sub    %cx,%ax
    839f:	eb 03                	jmp    83a4 <_Z6memcmpPKvS0_m+0x34>
        }
        ++s1;
        ++s2;
    }
    return 0;
    83a1:	66 31 c0             	xor    %ax,%ax
}
    83a4:	66 5d                	pop    %bp
    83a6:	66 c3                	retw   

000083a8 <_Z6memcpyPvPKvm>:

void* memcpy(void* _dst, const void* _src, size_t n)
{
    83a8:	66 55                	push   %bp
    83aa:	66 89 e5             	mov    %sp,%bp
    83ad:	66 53                	push   %bx
    83af:	67 66 8b 45 08       	mov    0x8(%di),%ax
    83b4:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    83b9:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    while (n--)
    83bc:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    83c1:	74 0c                	je     83cf <_Z6memcpyPvPKvm+0x27>
    {
        *(dst++) = *(src++);
    83c3:	67 8a 0c             	mov    (%si),%cl
    83c6:	13 67 88             	adc    -0x78(%edi),%esp
    83c9:	0c 10                	or     $0x10,%al
    83cb:	66 42                	inc    %dx
    while (n--)
    83cd:	eb ed                	jmp    83bc <_Z6memcpyPvPKvm+0x14>
    }
    return _dst;
}
    83cf:	66 5b                	pop    %bx
    83d1:	66 5d                	pop    %bp
    83d3:	66 c3                	retw   

000083d5 <_Z7memmovePvPKvm>:
void* memmove(void* _dst, const void* _src, size_t n)
{
    83d5:	66 55                	push   %bp
    83d7:	66 89 e5             	mov    %sp,%bp
    83da:	66 56                	push   %si
    83dc:	66 53                	push   %bx
    83de:	67 66 8b 45 08       	mov    0x8(%di),%ax
    83e3:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    83e8:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    if(dst < src)
    83ed:	66 39 d8             	cmp    %bx,%ax
    83f0:	73 14                	jae    8406 <_Z7memmovePvPKvm+0x31>
    83f2:	66 31 c9             	xor    %cx,%cx
    {
        while(n--)
    83f5:	66 39 f1             	cmp    %si,%cx
    83f8:	74 20                	je     841a <_Z7memmovePvPKvm+0x45>
        {
            *(dst++) = *(src++);
    83fa:	67 8a 14             	mov    (%si),%dl
    83fd:	0b 67 88             	or     -0x78(%edi),%esp
    8400:	14 08                	adc    $0x8,%al
    8402:	66 41                	inc    %cx
        while(n--)
    8404:	eb ef                	jmp    83f5 <_Z7memmovePvPKvm+0x20>
        }
    }
    else if(dst > src)
    8406:	76 12                	jbe    841a <_Z7memmovePvPKvm+0x45>
    {
        src += n;
        dst += n;
        while(n--)
    8408:	66 4e                	dec    %si
    840a:	66 83 fe ff          	cmp    $0xffff,%si
    840e:	74 0a                	je     841a <_Z7memmovePvPKvm+0x45>
        {
            *(--dst) = *(--src);
    8410:	67 8a 0c             	mov    (%si),%cl
    8413:	33 67 88             	xor    -0x78(%edi),%esp
    8416:	0c 30                	or     $0x30,%al
        while(n--)
    8418:	eb ee                	jmp    8408 <_Z7memmovePvPKvm+0x33>
        }
    }
    return _dst;
}
    841a:	66 5b                	pop    %bx
    841c:	66 5e                	pop    %si
    841e:	66 5d                	pop    %bp
    8420:	66 c3                	retw   

00008422 <_Z6memsetPvim>:
void* memset(void* _dst, int c, size_t n)
{
    8422:	66 55                	push   %bp
    8424:	66 89 e5             	mov    %sp,%bp
    8427:	67 66 8b 45 08       	mov    0x8(%di),%ax
    842c:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    8431:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    while(n--)
    8434:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    8439:	74 08                	je     8443 <_Z6memsetPvim+0x21>
    {
        *(dst++) = static_cast<unsigned char>(c);
    843b:	67 88 0c             	mov    %cl,(%si)
    843e:	10 66 42             	adc    %ah,0x42(%esi)
    while(n--)
    8441:	eb f1                	jmp    8434 <_Z6memsetPvim+0x12>
    }
    return _dst;
}
    8443:	66 5d                	pop    %bp
    8445:	66 c3                	retw   

00008447 <_Z6strlenPKc>:
size_t strlen(const char* _str)
{
    8447:	66 55                	push   %bp
    8449:	66 89 e5             	mov    %sp,%bp
    844c:	67 66 8b 55 08       	mov    0x8(%di),%dx
    auto str = _str;
    size_t len = 0;
    8451:	66 31 c0             	xor    %ax,%ax
    while(*(_str++))
    8454:	67 80 3c 02          	cmpb   $0x2,(%si)
    8458:	00 74 04 66          	add    %dh,0x66(%esp,%eax,1)
    {
        len++;
    845c:	40                   	inc    %eax
    while(*(_str++))
    845d:	eb f5                	jmp    8454 <_Z6strlenPKc+0xd>
    }
    return len;
}
    845f:	66 5d                	pop    %bp
    8461:	66 c3                	retw   

00008463 <_Z6strcpyPcPKc>:
char *strcpy(char* _dst, const char* _src)
{
    8463:	66 55                	push   %bp
    8465:	66 89 e5             	mov    %sp,%bp
    8468:	66 56                	push   %si
    846a:	66 53                	push   %bx
    846c:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8471:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    auto len = strlen(_src);
    8476:	66 51                	push   %cx
    8478:	66 e8 c9 ff          	callw  8445 <_Z6memsetPvim+0x23>
    847c:	ff                   	(bad)  
    847d:	ff 66 89             	jmp    *-0x77(%esi)
    8480:	c6                   	(bad)  
    memcpy(reinterpret_cast<void*>(_dst), reinterpret_cast<const void *>(_src), len);
    8481:	67 66 89 04          	mov    %ax,(%si)
    8485:	24 66                	and    $0x66,%al
    8487:	51                   	push   %ecx
    8488:	66 53                	push   %bx
    848a:	66 e8 18 ff          	callw  83a6 <_Z6memcmpPKvS0_m+0x36>
    848e:	ff                   	(bad)  
    848f:	ff 67 c6             	jmp    *-0x3a(%edi)
    _dst[len] = '\0';
    8492:	04 33                	add    $0x33,%al
    8494:	00 66 89             	add    %ah,-0x77(%esi)
    return _dst;
}
    8497:	d8 67 66             	fsubs  0x66(%edi)
    849a:	8d 65 f8             	lea    -0x8(%ebp),%esp
    849d:	66 5b                	pop    %bx
    849f:	66 5e                	pop    %si
    84a1:	66 5d                	pop    %bp
    84a3:	66 c3                	retw   

000084a5 <_Z6strcmpPKcS0_>:
int strcmp(const char* _s1, const char* _s2)
{
    84a5:	66 55                	push   %bp
    84a7:	66 89 e5             	mov    %sp,%bp
    84aa:	66 57                	push   %di
    84ac:	66 56                	push   %si
    84ae:	66 53                	push   %bx
    84b0:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    84b5:	67 66 8b 7d 0c       	mov    0xc(%di),%di
    auto len1 = strlen(_s1);
    84ba:	66 51                	push   %cx
    84bc:	66 e8 85 ff          	callw  8445 <_Z6memsetPvim+0x23>
    84c0:	ff                   	(bad)  
    84c1:	ff 66 89             	jmp    *-0x77(%esi)
    84c4:	c3                   	ret    
    auto len2 = strlen(_s2);
    84c5:	67 66 89 3c          	mov    %di,(%si)
    84c9:	24 66                	and    $0x66,%al
    84cb:	e8 77 ff ff ff       	call   8447 <_Z6strlenPKc>
    84d0:	66 5a                	pop    %dx
    84d2:	66 89 c6             	mov    %ax,%si
    auto len = len1 < len2 ? len1 : len2;
    auto ret = memcmp(reinterpret_cast<const void*>(_s1), reinterpret_cast<const void *>(_s2), len);
    84d5:	66 39 c3             	cmp    %ax,%bx
    84d8:	77 03                	ja     84dd <_Z6strcmpPKcS0_+0x38>
    84da:	66 89 d8             	mov    %bx,%ax
    84dd:	66 50                	push   %ax
    84df:	66 57                	push   %di
    84e1:	66 51                	push   %cx
    84e3:	66 e8 87 fe          	callw  836e <sys_read_disk+0x61>
    84e7:	ff                   	(bad)  
    84e8:	ff 66 83             	jmp    *-0x7d(%esi)
    84eb:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    if(ret == 0)
    84ee:	85 c0                	test   %eax,%eax
    84f0:	75 11                	jne    8503 <_Z6strcmpPKcS0_+0x5e>
    {
        if(len1 == len2)
    84f2:	66 39 f3             	cmp    %si,%bx
    84f5:	74 0c                	je     8503 <_Z6strcmpPKcS0_+0x5e>
        {
            return -1;
        }
        else
        {
            return 1;
    84f7:	66 39 de             	cmp    %bx,%si
    84fa:	66 19 c0             	sbb    %ax,%ax
    84fd:	66 83 e0 02          	and    $0x2,%ax
    8501:	66 48                	dec    %ax
        }
    }
    return ret;
}
    8503:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8508:	66 5b                	pop    %bx
    850a:	66 5e                	pop    %si
    850c:	66 5f                	pop    %di
    850e:	66 5d                	pop    %bp
    8510:	66 c3                	retw   

00008512 <_Z7reversePc>:

void reverse(char* buffer)
{
    8512:	66 55                	push   %bp
    8514:	66 89 e5             	mov    %sp,%bp
    8517:	66 56                	push   %si
    8519:	66 53                	push   %bx
    851b:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    char ch;
    size_t len = strlen(buffer);
    8520:	66 51                	push   %cx
    8522:	66 e8 1f ff          	callw  8445 <_Z6memsetPvim+0x23>
    8526:	ff                   	(bad)  
    8527:	ff 66 5a             	jmp    *0x5a(%esi)
    852a:	66 89 ca             	mov    %cx,%dx
    852d:	67 66 8d 0c          	lea    (%si),%cx
    8531:	01 66 d1             	add    %esp,-0x2f(%esi)
    for(size_t i = 0; i < len / 2; ++i)
    8534:	e8 67 66 8d 34       	call   348deba0 <_GLOBAL_OFFSET_TABLE_+0x348d43a8>
    8539:	10 66 49             	adc    %ah,0x49(%esi)
    853c:	66 39 f2             	cmp    %si,%dx
    853f:	74 10                	je     8551 <_Z7reversePc+0x3f>
    {
        ch = *(buffer + i);
    8541:	67 8a 1a             	mov    (%bp,%si),%bl
        *(buffer + i) = *(buffer + len - 1 - i);
    8544:	67 8a 01             	mov    (%bx,%di),%al
    8547:	67 88 02             	mov    %al,(%bp,%si)
        *(buffer + len - 1 - i)  = ch;
    854a:	67 88 19             	mov    %bl,(%bx,%di)
    854d:	66 42                	inc    %dx
    for(size_t i = 0; i < len / 2; ++i)
    854f:	eb e9                	jmp    853a <_Z7reversePc+0x28>
    }
}
    8551:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    8556:	66 5b                	pop    %bx
    8558:	66 5e                	pop    %si
    855a:	66 5d                	pop    %bp
    855c:	66 c3                	retw   

0000855e <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0>:
    if(base == 0 && !auto_detected)
    {
        base = 10;
        auto_detected = true;
    }
    auto char_to_digit = [](auto ch){
    855e:	66 55                	push   %bp
    8560:	66 89 e5             	mov    %sp,%bp
    8563:	66 89 c2             	mov    %ax,%dx
        int digit;
        if(ch >= '0' && ch <= '9')
    8566:	66 83 e8 30          	sub    $0x30,%ax
    856a:	3c 09                	cmp    $0x9,%al
    856c:	77 0b                	ja     8579 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x1b>
            digit = ch - '0';
    856e:	66 0f be d2          	movsbw %dl,%dx
    8572:	67 66 8d 42 d0       	lea    -0x30(%bp,%si),%ax
    8577:	eb 2b                	jmp    85a4 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='A' && ch <= 'F')
    8579:	67 66 8d 42 bf       	lea    -0x41(%bp,%si),%ax
    857e:	3c 05                	cmp    $0x5,%al
    8580:	77 0b                	ja     858d <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x2f>
            digit = ch - 'A' + 10;
    8582:	66 0f be d2          	movsbw %dl,%dx
    8586:	67 66 8d 42 c9       	lea    -0x37(%bp,%si),%ax
    858b:	eb 17                	jmp    85a4 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='a' && ch <= 'f')
    858d:	67 66 8d 4a 9f       	lea    -0x61(%bp,%si),%cx
            digit = ch - 'a' + 10;
        else
            digit = -1;
    8592:	66 83 c8 ff          	or     $0xffff,%ax
        else if(ch >='a' && ch <= 'f')
    8596:	80 f9 05             	cmp    $0x5,%cl
    8599:	77 09                	ja     85a4 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
            digit = ch - 'a' + 10;
    859b:	66 0f be d2          	movsbw %dl,%dx
    859f:	67 66 8d 42 a9       	lea    -0x57(%bp,%si),%ax
        return digit;
    };
    85a4:	66 5d                	pop    %bp
    85a6:	66 c3                	retw   

000085a8 <_Z6strtolPKcPPci>:
{
    85a8:	66 55                	push   %bp
    85aa:	66 89 e5             	mov    %sp,%bp
    85ad:	66 57                	push   %di
    85af:	66 56                	push   %si
    85b1:	66 53                	push   %bx
    85b3:	66 83 ec 0c          	sub    $0xc,%sp
    85b7:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto start = str;   
    85bc:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    while(isspace(*start))
    85c1:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    85c6:	66 50                	push   %ax
    85c8:	66 e8 4c 06          	callw  8c18 <_Z6printfPKcz+0x3c>
    85cc:	00 00                	add    %al,(%eax)
    85ce:	66 5f                	pop    %di
    85d0:	66 85 c0             	test   %ax,%ax
    85d3:	74 04                	je     85d9 <_Z6strtolPKcPPci+0x31>
        ++start;
    85d5:	66 43                	inc    %bx
    while(isspace(*start))
    85d7:	eb e8                	jmp    85c1 <_Z6strtolPKcPPci+0x19>
    size_t len_num = strlen(start);//非白空格数字串长度
    85d9:	66 53                	push   %bx
    85db:	66 e8 66 fe          	callw  8445 <_Z6memsetPvim+0x23>
    85df:	ff                   	(bad)  
    85e0:	ff 66 59             	jmp    *0x59(%esi)
    if(len_num == 0)
    85e3:	66 85 c0             	test   %ax,%ax
    85e6:	75 1e                	jne    8606 <_Z6strtolPKcPPci+0x5e>
        return 0;
    85e8:	66 31 c0             	xor    %ax,%ax
        if(str_end) *str_end = const_cast<char*>(str);
    85eb:	67 66 83 7d 0c 00    	cmpw   $0x0,0xc(%di)
    85f1:	0f 84 4d 01 67 66    	je     66678744 <_GLOBAL_OFFSET_TABLE_+0x6666df4c>
    85f7:	8b 7d 0c             	mov    0xc(%ebp),%edi
    85fa:	67 66 8b 75 08       	mov    0x8(%di),%si
    85ff:	67 66 89 37          	mov    %si,(%bx)
    8603:	e9 3c 01 67 8a       	jmp    8a678744 <_GLOBAL_OFFSET_TABLE_+0x8a66df4c>
    if(*high == '+' || *high == '-')
    8608:	13 80 fa 2b 74 10    	adc    0x10742bfa(%eax),%eax
    860e:	80 fa 2d             	cmp    $0x2d,%dl
    8611:	75 21                	jne    8634 <_Z6strtolPKcPPci+0x8c>
        sign = (*high == '+') ? 1 : -1;
    8613:	67 66 c7 45 f0 ff ff 	movw   $0xffff,-0x10(%di)
    861a:	ff                   	(bad)  
    861b:	ff                   	(bad)  
    861c:	eb 09                	jmp    8627 <_Z6strtolPKcPPci+0x7f>
    861e:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    8625:	00 00                	add    %al,(%eax)
        ++high;
    8627:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
        sign_char_bit = 1;
    862c:	66 ba 01 00          	mov    $0x1,%dx
    8630:	00 00                	add    %al,(%eax)
    8632:	eb 0f                	jmp    8643 <_Z6strtolPKcPPci+0x9b>
    8634:	66 89 df             	mov    %bx,%di
    size_t sign_char_bit = 0;
    8637:	66 31 d2             	xor    %dx,%dx
    int sign = 1;
    863a:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    8641:	00 00                	add    %al,(%eax)
    if(base == 16 || (base == 0 && !auto_detected))
    8643:	66 f7 c6 ef ff       	test   $0xffef,%si
    8648:	ff                   	(bad)  
    8649:	ff 75 29             	pushl  0x29(%ebp)
        if(len_num > 1 + sign_char_bit && 
    864c:	67 66 8d 4a 01       	lea    0x1(%bp,%si),%cx
    8651:	66 39 c1             	cmp    %ax,%cx
    8654:	73 1f                	jae    8675 <_Z6strtolPKcPPci+0xcd>
    8656:	67 80 3f 30          	cmpb   $0x30,(%bx)
    865a:	75 19                	jne    8675 <_Z6strtolPKcPPci+0xcd>
           (*(high + 1) == 'x' || *(high + 1) == 'X'))
    865c:	67 8a 4f 01          	mov    0x1(%bx),%cl
    8660:	66 83 e1 df          	and    $0xffdf,%cx
    8664:	80 f9 58             	cmp    $0x58,%cl
    8667:	75 0c                	jne    8675 <_Z6strtolPKcPPci+0xcd>
             high += 2;
    8669:	66 83 c7 02          	add    $0x2,%di
             base = 16;
    866d:	66 be 10 00          	mov    $0x10,%si
    8671:	00 00                	add    %al,(%eax)
    8673:	eb 2b                	jmp    86a0 <_Z6strtolPKcPPci+0xf8>
    if(base == 8 || (base == 0 && !auto_detected))
    8675:	66 83 fe 08          	cmp    $0x8,%si
    8679:	74 05                	je     8680 <_Z6strtolPKcPPci+0xd8>
    867b:	66 85 f6             	test   %si,%si
    867e:	75 20                	jne    86a0 <_Z6strtolPKcPPci+0xf8>
        if(len_num > sign_char_bit && *high == 0)   //存在八进制前缀0
    8680:	66 39 c2             	cmp    %ax,%dx
    8683:	73 10                	jae    8695 <_Z6strtolPKcPPci+0xed>
    8685:	67 80 3f 00          	cmpb   $0x0,(%bx)
    8689:	75 0a                	jne    8695 <_Z6strtolPKcPPci+0xed>
            high += 1;
    868b:	66 47                	inc    %di
            base = 8;
    868d:	66 be 08 00          	mov    $0x8,%si
    8691:	00 00                	add    %al,(%eax)
    8693:	eb 0b                	jmp    86a0 <_Z6strtolPKcPPci+0xf8>
    if(base == 0 && !auto_detected)
    8695:	66 85 f6             	test   %si,%si
    8698:	75 06                	jne    86a0 <_Z6strtolPKcPPci+0xf8>
        base = 10;
    869a:	66 be 0a 00          	mov    $0xa,%si
    869e:	00 00                	add    %al,(%eax)
    bool has_vaild_char = false;
    86a0:	67 c6 45 ec 00       	movb   $0x0,-0x14(%di)
    auto low = start;   
    //使low指向数字低位后的一个位置
    while(!isspace(*low) &&             //判断是否是白空格
    86a5:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    86aa:	66 50                	push   %ax
    86ac:	66 e8 68 05          	callw  8c18 <_Z6printfPKcz+0x3c>
    86b0:	00 00                	add    %al,(%eax)
          (*low != '\0') &&             //判断是否字符串结束
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    86b2:	66 5a                	pop    %dx
    86b4:	66 85 c0             	test   %ax,%ax
    86b7:	75 28                	jne    86e1 <_Z6strtolPKcPPci+0x139>
          (*low != '\0') &&             //判断是否字符串结束
    86b9:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    while(!isspace(*low) &&             //判断是否是白空格
    86be:	84 c0                	test   %al,%al
    86c0:	74 1f                	je     86e1 <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    86c2:	66 e8 96 fe          	callw  855c <_Z7reversePc+0x4a>
    86c6:	ff                   	(bad)  
    86c7:	ff 66 83             	jmp    *-0x7d(%esi)
          (*low != '\0') &&             //判断是否字符串结束
    86ca:	f8                   	clc    
    86cb:	ff 0f                	decl   (%edi)
    86cd:	95                   	xchg   %eax,%ebp
    86ce:	c2 66 39             	ret    $0x3966
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    86d1:	f0 0f 9c c0          	lock setl %al
    86d5:	20 c2                	and    %al,%dl
    86d7:	74 08                	je     86e1 <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) < base    //判断是否是该进制
          )
    {
        ++low;
    86d9:	66 43                	inc    %bx
        has_vaild_char = true;
    86db:	67 88 55 ec          	mov    %dl,-0x14(%di)
    while(!isspace(*low) &&             //判断是否是白空格
    86df:	eb c4                	jmp    86a5 <_Z6strtolPKcPPci+0xfd>
    }
    if(!has_vaild_char)
    86e1:	67 80 7d ec 00       	cmpb   $0x0,-0x14(%di)
    86e6:	0f 84 fe fe 67 66    	je     666885ea <_GLOBAL_OFFSET_TABLE_+0x6667ddf2>
        if (str_end) *str_end = const_cast<char*>(str);
        return 0;
    }
    long power = 1;
    long ret = 0;
    if(str_end) *str_end = const_cast<char*>(low);
    86ec:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
    86f0:	74 09                	je     86fb <_Z6strtolPKcPPci+0x153>
    86f2:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    86f7:	67 66 89 18          	mov    %bx,(%bx,%si)
    for(auto p = low - 1; p >= high; --p)
    86fb:	66 4b                	dec    %bx
    long ret = 0;
    86fd:	66 31 c9             	xor    %cx,%cx
    long power = 1;
    8700:	66 ba 01 00          	mov    $0x1,%dx
    8704:	00 00                	add    %al,(%eax)
    8706:	67 66 89 55 e8       	mov    %dx,-0x18(%di)
    for(auto p = low - 1; p >= high; --p)
    870b:	66 39 fb             	cmp    %di,%bx
    870e:	72 29                	jb     8739 <_Z6strtolPKcPPci+0x191>
    8710:	67 66 89 4d ec       	mov    %cx,-0x14(%di)
    {
        int digit = char_to_digit(*p);
    8715:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    871a:	66 e8 3e fe          	callw  855c <_Z7reversePc+0x4a>
    871e:	ff                   	(bad)  
    871f:	ff 67 66             	jmp    *0x66(%edi)
        ret += power * digit;
    8722:	8b 55 e8             	mov    -0x18(%ebp),%edx
    8725:	66 0f af c2          	imul   %dx,%ax
    8729:	67 66 8b 4d ec       	mov    -0x14(%di),%cx
    872e:	66 01 c1             	add    %ax,%cx
        
        power *= base;
    8731:	66 0f af d6          	imul   %si,%dx
    for(auto p = low - 1; p >= high; --p)
    8735:	66 4b                	dec    %bx
    8737:	eb cd                	jmp    8706 <_Z6strtolPKcPPci+0x15e>
    }
    ret *= sign;
    8739:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    873e:	66 0f af c1          	imul   %cx,%ax
    return ret;
}
    8742:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8747:	66 5b                	pop    %bx
    8749:	66 5e                	pop    %si
    874b:	66 5f                	pop    %di
    874d:	66 5d                	pop    %bp
    874f:	66 c3                	retw   

00008751 <_Z7putchari>:
namespace hhlibc {

#endif
#ifndef _HHOS_LIBC_TEST
int putchar( int ch )
{
    8751:	66 55                	push   %bp
    8753:	66 89 e5             	mov    %sp,%bp
    8756:	66 53                	push   %bx
    8758:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    sys_get_current_tty()->putchar(ch);
    875d:	66 e8 38 f7          	callw  7e99 <_ZL8print_okPc+0x50>
    8761:	ff                   	(bad)  
    8762:	ff 66 53             	jmp    *0x53(%esi)
    8765:	66 50                	push   %ax
    8767:	66 e8 03 08          	callw  8f6e <_ZN2sh16read_prog_recordEv+0x13c>
    876b:	00 00                	add    %al,(%eax)
    //sys_tty_putchar(ch);
    return ch;
}
    876d:	66 89 d8             	mov    %bx,%ax
    8770:	67 66 8b 5d fc       	mov    -0x4(%di),%bx
    8775:	66 c9                	leavew 
    8777:	66 c3                	retw   

00008779 <_Z4putsPKc>:

int puts(const char* string)
{
    8779:	66 55                	push   %bp
    877b:	66 89 e5             	mov    %sp,%bp
    877e:	66 56                	push   %si
    8780:	66 53                	push   %bx
    8782:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    auto len = strlen(string);
    8787:	66 53                	push   %bx
    8789:	66 e8 b8 fc          	callw  8445 <_Z6memsetPvim+0x23>
    878d:	ff                   	(bad)  
    878e:	ff 67 66             	jmp    *0x66(%edi)
    8791:	8d 34 03             	lea    (%ebx,%eax,1),%esi
    8794:	66 58                	pop    %ax
    for(size_t i = 0; i < len; ++i)
    8796:	66 39 f3             	cmp    %si,%bx
    8799:	74 11                	je     87ac <_Z4putsPKc+0x33>
    {
        putchar(*(string + i));
    879b:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    87a0:	66 50                	push   %ax
    87a2:	66 e8 a9 ff          	callw  874f <_Z6strtolPKcPPci+0x1a7>
    87a6:	ff                   	(bad)  
    87a7:	ff 66 43             	jmp    *0x43(%esi)
    87aa:	eb e8                	jmp    8794 <_Z4putsPKc+0x1b>
    }
    return 0;
}
    87ac:	66 31 c0             	xor    %ax,%ax
    87af:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    87b4:	66 5b                	pop    %bx
    87b6:	66 5e                	pop    %si
    87b8:	66 5d                	pop    %bp
    87ba:	66 c3                	retw   

000087bc <_Z7getcharv>:
#endif


#ifndef _HHOS_LIBC_TEST
int getchar(void)
{
    87bc:	66 55                	push   %bp
    87be:	66 89 e5             	mov    %sp,%bp
    return sys_bios_getchar();
}
    87c1:	66 5d                	pop    %bp
    return sys_bios_getchar();
    87c3:	e9                   	.byte 0xe9
    87c4:	8d                   	(bad)  
    87c5:	f8                   	clc    

000087c6 <_Z4getsPc>:
char *gets( char *str )
{
    87c6:	66 55                	push   %bp
    87c8:	66 89 e5             	mov    %sp,%bp
    87cb:	66 53                	push   %bx
    87cd:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    return sys_bios_getchar();
    87d2:	66 e8 7b f8          	callw  8051 <sys_bios_clear_screen+0x11>
    87d6:	ff                   	(bad)  
    87d7:	ff                   	(bad)  
    char ch;
    while(true)
    {
        ch = getchar();
        if(ch == '\n') break;
    87d8:	3c 0a                	cmp    $0xa,%al
    87da:	74 08                	je     87e4 <_Z4getsPc+0x1e>
        *(str++) = ch;
    87dc:	66 43                	inc    %bx
    87de:	67 88 43 ff          	mov    %al,-0x1(%bp,%di)
        ch = getchar();
    87e2:	eb ee                	jmp    87d2 <_Z4getsPc+0xc>
    }
    *str = '\0';
    87e4:	67 c6 03 00          	movb   $0x0,(%bp,%di)
    return str;
}
    87e8:	66 89 d8             	mov    %bx,%ax
    87eb:	66 5b                	pop    %bx
    87ed:	66 5d                	pop    %bp
    87ef:	66 c3                	retw   

000087f1 <_Z7vsscanfPKcS0_Pc>:
#endif

int vsscanf( const char* buffer, const char* format, va_list vlist )
{
    87f1:	66 55                	push   %bp
    87f3:	66 89 e5             	mov    %sp,%bp
    87f6:	66 57                	push   %di
    87f8:	66 56                	push   %si
    87fa:	66 53                	push   %bx
    87fc:	66 83 ec 14          	sub    $0x14,%sp
    8800:	67 66 8b 75 08       	mov    0x8(%di),%si
    8805:	67 66 8b 7d 10       	mov    0x10(%di),%di
    auto len_fmt = strlen(format);
    880a:	67 66 ff 75 0c       	pushw  0xc(%di)
    880f:	66 e8 32 fc          	callw  8445 <_Z6memsetPvim+0x23>
    8813:	ff                   	(bad)  
    8814:	ff 67 66             	jmp    *0x66(%edi)
    8817:	89 45 e0             	mov    %eax,-0x20(%ebp)
    881a:	66 59                	pop    %cx
    auto p_fmt = format; 
    881c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8821:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    auto p_buf = buffer;
    bool error = false;
    int ret = 0;
    8826:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    882d:	00 00                	add    %al,(%eax)
    bool error = false;
    882f:	67 c6 45 e7 00       	movb   $0x0,-0x19(%di)
    while(static_cast<size_t>(p_fmt - format) < len_fmt)
    8834:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    8839:	67 66 2b 45 0c       	sub    0xc(%di),%ax
    883e:	67 66 3b 45 e0       	cmp    -0x20(%di),%ax
    8843:	0f 93 c0             	setae  %al
    {
        if(error) break;
    8846:	67 08 45 e7          	or     %al,-0x19(%di)
    884a:	0f 85 50 01 67 66    	jne    666789a0 <_GLOBAL_OFFSET_TABLE_+0x6666e1a8>
        if(isspace(*p_fmt)) //略过白空格
    8850:	8b 45 e8             	mov    -0x18(%ebp),%eax
    8853:	67 66 0f be 00       	movsbw (%bx,%si),%ax
    8858:	66 50                	push   %ax
    885a:	66 e8 ba 03          	callw  8c18 <_Z6printfPKcz+0x3c>
    885e:	00 00                	add    %al,(%eax)
    8860:	66 5a                	pop    %dx
    8862:	66 85 c0             	test   %ax,%ax
    8865:	74 1d                	je     8884 <_Z7vsscanfPKcS0_Pc+0x93>
        {
            p_fmt++;
    8867:	67 66 ff 45 e8       	incw   -0x18(%di)
            while(isspace(*buffer)) buffer++;
    886c:	67 66 0f be 06 66 50 	movsbw 0x5066,%ax
    8873:	66 e8 a1 03          	callw  8c18 <_Z6printfPKcz+0x3c>
    8877:	00 00                	add    %al,(%eax)
    8879:	66 5b                	pop    %bx
    887b:	66 85 c0             	test   %ax,%ax
    887e:	74 b4                	je     8834 <_Z7vsscanfPKcS0_Pc+0x43>
    8880:	66 46                	inc    %si
    8882:	eb e8                	jmp    886c <_Z7vsscanfPKcS0_Pc+0x7b>
            continue;
        }
        else if(*p_fmt == '%') //格式控制符
    8884:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    8889:	67 80 38 25          	cmpb   $0x25,(%bx,%si)
    888d:	75 a5                	jne    8834 <_Z7vsscanfPKcS0_Pc+0x43>
        {
            p_fmt++;
            char specifier = *p_fmt;
    888f:	67 8a 40 01          	mov    0x1(%bx,%si),%al
            p_fmt++;
    8893:	67 66 83 45 e8 02    	addw   $0x2,-0x18(%di)
            switch(specifier)
    8899:	3c 69                	cmp    $0x69,%al
    889b:	0f 84 b0 00 7f 25    	je     257f8951 <_GLOBAL_OFFSET_TABLE_+0x257ee159>
    88a1:	3c 58                	cmp    $0x58,%al
    88a3:	0f 84 c4 00 7f 10    	je     107f896d <_GLOBAL_OFFSET_TABLE_+0x107ee175>
    88a9:	3c 25                	cmp    $0x25,%al
    88ab:	75 87                	jne    8834 <_Z7vsscanfPKcS0_Pc+0x43>
            {
                case '%':
                {
                    if(*buffer == '%') 
    88ad:	67 80 3e 25 67 0f    	cmpb   $0xf,0x6725
    88b3:	95                   	xchg   %eax,%ebp
    88b4:	45                   	inc    %ebp
    88b5:	e7 e9                	out    %eax,$0xe9
    88b7:	7b ff                	jnp    88b8 <_Z7vsscanfPKcS0_Pc+0xc7>
            switch(specifier)
    88b9:	3c 63                	cmp    $0x63,%al
    88bb:	74 31                	je     88ee <_Z7vsscanfPKcS0_Pc+0xfd>
    88bd:	3c 64                	cmp    $0x64,%al
    88bf:	0f 84 9a 00 e9 6e    	je     6ee9895f <_GLOBAL_OFFSET_TABLE_+0x6ee8e167>
    88c5:	ff                   	(bad)  
    88c6:	3c 73                	cmp    $0x73,%al
    88c8:	74 4d                	je     8917 <_Z7vsscanfPKcS0_Pc+0x126>
    88ca:	7f 15                	jg     88e1 <_Z7vsscanfPKcS0_Pc+0xf0>
    88cc:	3c 6f                	cmp    $0x6f,%al
    88ce:	0f 85 62 ff 67 66    	jne    66688836 <_GLOBAL_OFFSET_TABLE_+0x6667e03e>
                    ++ret;
                    break;
                }
                case 'o':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    88d4:	8d 5f 04             	lea    0x4(%edi),%ebx
    88d7:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 8);
    88db:	66 6a 08             	pushw  $0x8
    88de:	e9 96 00 3c 75       	jmp    753c8979 <_GLOBAL_OFFSET_TABLE_+0x753be181>
            switch(specifier)
    88e3:	74 78                	je     895d <_Z7vsscanfPKcS0_Pc+0x16c>
    88e5:	3c 78                	cmp    $0x78,%al
    88e7:	0f 84 80 00 e9 46    	je     46e9896d <_GLOBAL_OFFSET_TABLE_+0x46e8e175>
    88ed:	ff 67 66             	jmp    *0x66(%edi)
                    char* p = va_arg(vlist, char*);
    88f0:	8b 17                	mov    (%edi),%edx
                    *p = *buffer;
    88f2:	67 8a 06 67 88       	mov    -0x7799,%al
    88f7:	02 66 46             	add    0x46(%esi),%ah
                    ++ret;
    88fa:	67 66 ff 45 ec       	incw   -0x14(%di)
                    char* p = va_arg(vlist, char*);
    88ff:	66 83 c7 04          	add    $0x4,%di
                    break;
    8903:	e9 2e ff 66 50       	jmp    50678836 <_GLOBAL_OFFSET_TABLE_+0x5066e03e>
                    while (*buffer && isspace(*buffer)) buffer++;
    8908:	66 e8 0c 03          	callw  8c18 <_Z6printfPKcz+0x3c>
    890c:	00 00                	add    %al,(%eax)
    890e:	66 59                	pop    %cx
    8910:	66 85 c0             	test   %ax,%ax
    8913:	74 0b                	je     8920 <_Z7vsscanfPKcS0_Pc+0x12f>
    8915:	66 46                	inc    %si
    8917:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    891e:	75 e6                	jne    8906 <_Z7vsscanfPKcS0_Pc+0x115>
                    char* p = va_arg(vlist, char*);
    8920:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8925:	67 66 8b 3f          	mov    (%bx),%di
                    while(*buffer && !isspace(*buffer))
    8929:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    8930:	75 0b                	jne    893d <_Z7vsscanfPKcS0_Pc+0x14c>
                    *p = '\0';
    8932:	67 c6 07 00          	movb   $0x0,(%bx)
                    ++ret;
    8936:	67 66 ff 45 ec       	incw   -0x14(%di)
    893b:	eb 5b                	jmp    8998 <_Z7vsscanfPKcS0_Pc+0x1a7>
                    while(*buffer && !isspace(*buffer))
    893d:	66 50                	push   %ax
    893f:	66 e8 d5 02          	callw  8c18 <_Z6printfPKcz+0x3c>
    8943:	00 00                	add    %al,(%eax)
    8945:	66 5a                	pop    %dx
    8947:	66 85 c0             	test   %ax,%ax
    894a:	75 e6                	jne    8932 <_Z7vsscanfPKcS0_Pc+0x141>
                        *(p++) = *(buffer++);
    894c:	a4                   	movsb  %ds:(%esi),%es:(%edi)
                    while(*buffer && !isspace(*buffer))
    894d:	eb da                	jmp    8929 <_Z7vsscanfPKcS0_Pc+0x138>
                    int* p = va_arg(vlist, int*);
    894f:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8954:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 0);
    8958:	66 6a 00             	pushw  $0x0
    895b:	eb 1a                	jmp    8977 <_Z7vsscanfPKcS0_Pc+0x186>
                    unsigned int* p = va_arg(vlist, unsigned int*);
    895d:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8962:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 10);
    8966:	66 6a 0a             	pushw  $0xa
    8969:	eb 0c                	jmp    8977 <_Z7vsscanfPKcS0_Pc+0x186>
                    break;
                }
                case 'x':
                case 'X':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    896b:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8970:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 16);
    8974:	66 6a 10             	pushw  $0x10
    8977:	67 66 8d 45 f0       	lea    -0x10(%di),%ax
    897c:	66 50                	push   %ax
    897e:	66 56                	push   %si
    8980:	66 e8 22 fc          	callw  85a6 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    8984:	ff                   	(bad)  
    8985:	ff 67 66             	jmp    *0x66(%edi)
                    *p = static_cast<unsigned int>(num);
    8988:	89 07                	mov    %eax,(%edi)
                    buffer = end;
    898a:	67 66 8b 75 f0       	mov    -0x10(%di),%si
                    ++ret;
    898f:	67 66 ff 45 ec       	incw   -0x14(%di)
    8994:	66 83 c4 0c          	add    $0xc,%sp
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8998:	66 89 df             	mov    %bx,%di
    899b:	e9 96 fe 67 66       	jmp    66688836 <_GLOBAL_OFFSET_TABLE_+0x6667e03e>
                    break;
            }
        }
    }
    return ret;
}
    89a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
    89a3:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    89a8:	66 5b                	pop    %bx
    89aa:	66 5e                	pop    %si
    89ac:	66 5f                	pop    %di
    89ae:	66 5d                	pop    %bp
    89b0:	66 c3                	retw   

000089b2 <_Z6sscanfPKcS0_z>:
int sscanf( const char* buffer, const char* format, ... )
{
    89b2:	66 55                	push   %bp
    89b4:	66 89 e5             	mov    %sp,%bp
   	int ret;
	va_list va;
	va_start(va, format);
    89b7:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsscanf(buffer, format, va);
    89bc:	66 50                	push   %ax
    89be:	67 66 ff 75 0c       	pushw  0xc(%di)
    89c3:	67 66 ff 75 08       	pushw  0x8(%di)
    89c8:	66 e8 23 fe          	callw  87ef <_Z4getsPc+0x29>
    89cc:	ff                   	(bad)  
    89cd:	ff 66 c9             	jmp    *-0x37(%esi)
	va_end(va);
    return ret; 
}
    89d0:	66 c3                	retw   

000089d2 <_Z5scanfPKcz>:
#ifndef _HHOS_LIBC_TEST
static char scanfbuf[80*25];
//TODO 关于这个返回值
int scanf( const char* format, ... )
{
    89d2:	66 55                	push   %bp
    89d4:	66 89 e5             	mov    %sp,%bp
    if (!gets(scanfbuf)) return EOF;
    89d7:	66 68 60 97          	pushw  $0x9760
    89db:	00 00                	add    %al,(%eax)
    89dd:	66 e8 e3 fd          	callw  87c4 <_Z7getcharv+0x8>
    89e1:	ff                   	(bad)  
    89e2:	ff 66 89             	jmp    *-0x77(%esi)
    89e5:	c2 66 58             	ret    $0x5866
    89e8:	66 83 c8 ff          	or     $0xffff,%ax
    89ec:	66 85 d2             	test   %dx,%dx
    89ef:	74 1c                	je     8a0d <_Z5scanfPKcz+0x3b>
	int ret;
	va_list va;
	va_start(va, format);
    89f1:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsscanf(scanfbuf, format, va);
    89f6:	66 50                	push   %ax
    89f8:	67 66 ff 75 08       	pushw  0x8(%di)
    89fd:	66 68 60 97          	pushw  $0x9760
    8a01:	00 00                	add    %al,(%eax)
    8a03:	66 e8 e8 fd          	callw  87ef <_Z4getsPc+0x29>
    8a07:	ff                   	(bad)  
    8a08:	ff 66 83             	jmp    *-0x7d(%esi)
	va_end(va);
    return ret;
    8a0b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    8a0e:	c9                   	leave  
    8a0f:	66 c3                	retw   

00008a11 <_Z8vsprintfPcPKcS_>:
{
    8a11:	66 55                	push   %bp
    8a13:	66 89 e5             	mov    %sp,%bp
    8a16:	66 57                	push   %di
    8a18:	66 56                	push   %si
    8a1a:	66 53                	push   %bx
    8a1c:	66 83 ec 0c          	sub    $0xc,%sp
    8a20:	67 66 8b 75 0c       	mov    0xc(%di),%si
    8a25:	67 66 8b 55 10       	mov    0x10(%di),%dx
    8a2a:	67 66 89 55 f0       	mov    %dx,-0x10(%di)
    auto len_fmt = strlen(format);
    8a2f:	66 56                	push   %si
    8a31:	66 e8 10 fa          	callw  8445 <_Z6memsetPvim+0x23>
    8a35:	ff                   	(bad)  
    8a36:	ff 67 66             	jmp    *0x66(%edi)
    8a39:	89 45 ec             	mov    %eax,-0x14(%ebp)
    8a3c:	66 58                	pop    %ax
    auto p_buf = buffer;
    8a3e:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8a43:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    while(len_fmt--)
    8a48:	67 66 ff 4d ec       	decw   -0x14(%di)
    8a4d:	67 66 83 7d ec ff    	cmpw   $0xffff,-0x14(%di)
    8a53:	0f 84 4a 01 67 8a    	je     8a678ba3 <_GLOBAL_OFFSET_TABLE_+0x8a66e3ab>
        if(*p_fmt != '%')
    8a59:	06                   	push   %es
    8a5a:	3c 25                	cmp    $0x25,%al
    8a5c:	74 07                	je     8a65 <_Z8vsprintfPcPKcS_+0x54>
            *(p_buf++) = *(p_fmt++);    //非控制字符
    8a5e:	66 46                	inc    %si
    8a60:	67 88 03             	mov    %al,(%bp,%di)
    8a63:	eb 5f                	jmp    8ac4 <_Z8vsprintfPcPKcS_+0xb3>
            char specifier = *(++p_fmt); //%后面一个字符是specifier
    8a65:	67 8a 46 01          	mov    0x1(%bp),%al
            ++p_fmt;                     //记录specifier并跳过
    8a69:	66 83 c6 02          	add    $0x2,%si
            switch (specifier)
    8a6d:	3c 69                	cmp    $0x69,%al
    8a6f:	0f 84 81 00 7f 17    	je     177f8af6 <_GLOBAL_OFFSET_TABLE_+0x177ee2fe>
    8a75:	3c 63                	cmp    $0x63,%al
    8a77:	74 40                	je     8ab9 <_Z8vsprintfPcPKcS_+0xa8>
    8a79:	3c 64                	cmp    $0x64,%al
    8a7b:	74 77                	je     8af4 <_Z8vsprintfPcPKcS_+0xe3>
    8a7d:	3c 58                	cmp    $0x58,%al
    8a7f:	75 c7                	jne    8a48 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8a81:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16, true);
    8a86:	66 6a 01             	pushw  $0x1
    8a89:	e9 e2 00 3c 73       	jmp    733c8b70 <_GLOBAL_OFFSET_TABLE_+0x733be378>
            switch (specifier)
    8a8e:	74 38                	je     8ac8 <_Z8vsprintfPcPKcS_+0xb7>
    8a90:	7f 12                	jg     8aa4 <_Z8vsprintfPcPKcS_+0x93>
    8a92:	3c 6f                	cmp    $0x6f,%al
    8a94:	75 b2                	jne    8a48 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8a96:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 8);
    8a9b:	66 6a 00             	pushw  $0x0
    8a9e:	66 6a 08             	pushw  $0x8
    8aa1:	e9 da 00 3c 75       	jmp    753c8b80 <_GLOBAL_OFFSET_TABLE_+0x753be388>
            switch (specifier)
    8aa6:	0f 84 c9 00 3c 78    	je     783c8b75 <_GLOBAL_OFFSET_TABLE_+0x783be37d>
    8aac:	75 9a                	jne    8a48 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8aae:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16);
    8ab3:	66 6a 00             	pushw  $0x0
    8ab6:	e9 b5 00 67 66       	jmp    66678b70 <_GLOBAL_OFFSET_TABLE_+0x6666e378>
                    *(p_buf++) = va_arg(vlist, int); 
    8abb:	8b 02                	mov    (%edx),%eax
    8abd:	67 88 03             	mov    %al,(%bp,%di)
    8ac0:	66 83 c2 04          	add    $0x4,%dx
    8ac4:	66 43                	inc    %bx
                    break;
    8ac6:	eb 80                	jmp    8a48 <_Z8vsprintfPcPKcS_+0x37>
                    const char * str = va_arg(vlist, char*);
    8ac8:	67 66 8d 42 04       	lea    0x4(%bp,%si),%ax
    8acd:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8ad2:	67 66 8b 3a          	mov    (%bp,%si),%di
                    strcpy(p_buf, str);
    8ad6:	66 57                	push   %di
    8ad8:	66 53                	push   %bx
    8ada:	66 e8 83 f9          	callw  8461 <_Z6strlenPKc+0x1a>
    8ade:	ff                   	(bad)  
    8adf:	ff 66 59             	jmp    *0x59(%esi)
                    p_buf += strlen(str);               //p应当永远指向有意义的字符后面一位
    8ae2:	66 58                	pop    %ax
    8ae4:	66 57                	push   %di
    8ae6:	66 e8 5b f9          	callw  8445 <_Z6memsetPvim+0x23>
    8aea:	ff                   	(bad)  
    8aeb:	ff 66 01             	jmp    *0x1(%esi)
    8aee:	c3                   	ret    
                    break;
    8aef:	66 58                	pop    %ax
    8af1:	e9 4f ff 67 66       	jmp    66688a45 <_GLOBAL_OFFSET_TABLE_+0x6667e24d>
                    int num = va_arg(vlist, int);
    8af6:	8d 42 04             	lea    0x4(%edx),%eax
    8af9:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    8afe:	67 66 8b 02          	mov    (%bp,%si),%ax
template<typename T>
void itoa(char* buffer, T num, int base, bool captial = false)
{
    const char* num_char_upper = "0123456789ABCDEF";
    const char* num_char_lower = "0123456789abcdef";
    if(num < 0)
    8b02:	66 89 df             	mov    %bx,%di
    8b05:	66 85 c0             	test   %ax,%ax
    8b08:	79 0c                	jns    8b16 <_Z8vsprintfPcPKcS_+0x105>
    8b0a:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
    {
        *(buffer++) = '-';
    8b0f:	67 c6 03 2d          	movb   $0x2d,(%bp,%di)
        num = -num;
    8b13:	66 f7 d8             	neg    %ax
    }
    char *p = buffer;
    8b16:	67 66 89 7d f0       	mov    %di,-0x10(%di)
    int mod = 0;
    while(true)
    {
        mod = num % base;
        num /= base;
    8b1b:	66 b9 0a 00          	mov    $0xa,%cx
    8b1f:	00 00                	add    %al,(%eax)
    8b21:	66 99                	cwtd   
    8b23:	66 f7 f9             	idiv   %cx
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    8b26:	67 66 8b 4d f0       	mov    -0x10(%di),%cx
    8b2b:	66 41                	inc    %cx
    8b2d:	67 8a 92 e6 a7       	mov    -0x581a(%bp,%si),%dl
    8b32:	00 00                	add    %al,(%eax)
    8b34:	67 88 51 ff          	mov    %dl,-0x1(%bx,%di)
        if(num == 0) break;
    8b38:	66 85 c0             	test   %ax,%ax
    8b3b:	74 07                	je     8b44 <_Z8vsprintfPcPKcS_+0x133>
    8b3d:	67 66 89 4d f0       	mov    %cx,-0x10(%di)
    8b42:	eb d7                	jmp    8b1b <_Z8vsprintfPcPKcS_+0x10a>
    }
    *p = '\0';
    8b44:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8b49:	67 c6 40 01 00       	movb   $0x0,0x1(%bx,%si)
    reverse(buffer);
    8b4e:	66 57                	push   %di
    8b50:	66 e8 bc f9          	callw  8510 <_Z6strcmpPKcS0_+0x6b>
    8b54:	ff                   	(bad)  
    8b55:	ff 67 66             	jmp    *0x66(%edi)
                    p_buf += strlen(p_buf);             //同理
    8b58:	89 1c 24             	mov    %ebx,(%esp)
    8b5b:	66 e8 e6 f8          	callw  8445 <_Z6memsetPvim+0x23>
    8b5f:	ff                   	(bad)  
    8b60:	ff 66 01             	jmp    *0x1(%esi)
    8b63:	c3                   	ret    
                    break;
    8b64:	66 5a                	pop    %dx
                    int num = va_arg(vlist, int);
    8b66:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
                    break;
    8b6b:	e9 da fe 66 6a       	jmp    6a678a4a <_GLOBAL_OFFSET_TABLE_+0x6a66e252>
                    itoa(p_buf, num, 16, true);
    8b70:	10 eb                	adc    %ch,%bl
    8b72:	0b 67 66             	or     0x66(%edi),%esp
                    unsigned int num = va_arg(vlist, int);
    8b75:	8d 7a 04             	lea    0x4(%edx),%edi
                    itoa(p_buf, num, 10);
    8b78:	66 6a 00             	pushw  $0x0
    8b7b:	66 6a 0a             	pushw  $0xa
    8b7e:	67 66 ff 32          	pushw  (%bp,%si)
    8b82:	66 53                	push   %bx
    8b84:	66 e8 53 05          	callw  90db <_ZN3tty7putcharEi+0x16b>
    8b88:	00 00                	add    %al,(%eax)
                    p_buf += strlen(p_buf);             //同理
    8b8a:	66 83 c4 10          	add    $0x10,%sp
    8b8e:	66 53                	push   %bx
    8b90:	66 e8 b1 f8          	callw  8445 <_Z6memsetPvim+0x23>
    8b94:	ff                   	(bad)  
    8b95:	ff 66 01             	jmp    *0x1(%esi)
    8b98:	c3                   	ret    
                    break;
    8b99:	66 58                	pop    %ax
                    unsigned int num = va_arg(vlist, int);
    8b9b:	66 89 fa             	mov    %di,%dx
                    break;
    8b9e:	e9 a7 fe 67 c6       	jmp    c6688a4a <_GLOBAL_OFFSET_TABLE_+0xc667e252>
    *p_buf = '\0';
    8ba3:	03 00                	add    (%eax),%eax
    return p_buf - buffer;
    8ba5:	66 89 d8             	mov    %bx,%ax
    8ba8:	67 66 2b 45 08       	sub    0x8(%di),%ax
}
    8bad:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8bb2:	66 5b                	pop    %bx
    8bb4:	66 5e                	pop    %si
    8bb6:	66 5f                	pop    %di
    8bb8:	66 5d                	pop    %bp
    8bba:	66 c3                	retw   

00008bbc <_Z7sprintfPcPKcz>:
{
    8bbc:	66 55                	push   %bp
    8bbe:	66 89 e5             	mov    %sp,%bp
	va_start(va, format);
    8bc1:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsprintf(buffer, format, va);
    8bc6:	66 50                	push   %ax
    8bc8:	67 66 ff 75 0c       	pushw  0xc(%di)
    8bcd:	67 66 ff 75 08       	pushw  0x8(%di)
    8bd2:	66 e8 39 fe          	callw  8a0f <_Z5scanfPKcz+0x3d>
    8bd6:	ff                   	(bad)  
    8bd7:	ff 66 c9             	jmp    *-0x37(%esi)
}
    8bda:	66 c3                	retw   

00008bdc <_Z6printfPKcz>:
{
    8bdc:	66 55                	push   %bp
    8bde:	66 89 e5             	mov    %sp,%bp
    8be1:	66 53                	push   %bx
	va_start(va, format);
    8be3:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsprintf(printbuf, format, va);
    8be8:	66 50                	push   %ax
    8bea:	67 66 ff 75 08       	pushw  0x8(%di)
    8bef:	66 68 40 9f          	pushw  $0x9f40
    8bf3:	00 00                	add    %al,(%eax)
    8bf5:	66 e8 16 fe          	callw  8a0f <_Z5scanfPKcz+0x3d>
    8bf9:	ff                   	(bad)  
    8bfa:	ff 66 89             	jmp    *-0x77(%esi)
    8bfd:	c3                   	ret    
    puts(printbuf);
    8bfe:	66 83 c4 0c          	add    $0xc,%sp
    8c02:	66 68 40 9f          	pushw  $0x9f40
    8c06:	00 00                	add    %al,(%eax)
    8c08:	66 e8 6b fb          	callw  8777 <_Z7putchari+0x26>
    8c0c:	ff                   	(bad)  
    8c0d:	ff 66 89             	jmp    *-0x77(%esi)
}
    8c10:	d8 67 66             	fsubs  0x66(%edi)
    8c13:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    8c16:	66 c9                	leavew 
    8c18:	66 c3                	retw   

00008c1a <_Z7isspacei>:
namespace hhlibc {

#endif

int isspace( int ch )
{
    8c1a:	66 55                	push   %bp
    8c1c:	66 89 e5             	mov    %sp,%bp
    8c1f:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return (ch == 9 || ch == 32 || (ch >= 10 && ch <= 13));
    8c24:	67 66 8d 42 f7       	lea    -0x9(%bp,%si),%ax
    8c29:	66 83 f8 04          	cmp    $0x4,%ax
    8c2d:	0f 96 c0             	setbe  %al
    8c30:	66 83 fa 20          	cmp    $0x20,%dx
    8c34:	0f 94 c2             	sete   %dl
    8c37:	66 09 d0             	or     %dx,%ax
    8c3a:	66 0f b6 c0          	movzbw %al,%ax
}
    8c3e:	66 5d                	pop    %bp
    8c40:	66 c3                	retw   

Disassembly of section .text._ZN3tty8tty_initEv:

00008c42 <_ZN3tty8tty_initEv>:
    void tty_init()
    8c42:	66 55                	push   %bp
    8c44:	66 89 e5             	mov    %sp,%bp
    8c47:	66 53                	push   %bx
    8c49:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        cur_x = 0;
    8c4e:	67 66 c7 03 00 00    	movw   $0x0,(%bp,%di)
    8c54:	00 00                	add    %al,(%eax)
        cur_y = 0;
    8c56:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    8c5d:	00 00                	add    %al,(%eax)
    }
    void move_cursor(int x, int y)
    {
        uint16_t pos = x * 80 + y;
        sys_outb(0x3D4, 0x0F);
    8c5f:	66 6a 0f             	pushw  $0xf
    8c62:	66 68 d4 03          	pushw  $0x3d4
    8c66:	00 00                	add    %al,(%eax)
    8c68:	66 e8 6a f6          	callw  82d6 <sys_inb+0xd>
    8c6c:	ff                   	(bad)  
    8c6d:	ff 66 58             	jmp    *0x58(%esi)
        sys_outb(0x3D5, (uint8_t) (pos & 0xFF));
    8c70:	66 5a                	pop    %dx
    8c72:	66 6a 00             	pushw  $0x0
    8c75:	66 68 d5 03          	pushw  $0x3d5
    8c79:	00 00                	add    %al,(%eax)
    8c7b:	66 e8 57 f6          	callw  82d6 <sys_inb+0xd>
    8c7f:	ff                   	(bad)  
    8c80:	ff 66 59             	jmp    *0x59(%esi)
        sys_outb(0x3D4, 0x0E);
    8c83:	66 58                	pop    %ax
    8c85:	66 6a 0e             	pushw  $0xe
    8c88:	66 68 d4 03          	pushw  $0x3d4
    8c8c:	00 00                	add    %al,(%eax)
    8c8e:	66 e8 44 f6          	callw  82d6 <sys_inb+0xd>
    8c92:	ff                   	(bad)  
    8c93:	ff 66 58             	jmp    *0x58(%esi)
        sys_outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
    8c96:	66 5a                	pop    %dx
    8c98:	66 6a 00             	pushw  $0x0
    8c9b:	66 68 d5 03          	pushw  $0x3d5
    8c9f:	00 00                	add    %al,(%eax)
    8ca1:	66 e8 31 f6          	callw  82d6 <sys_inb+0xd>
    8ca5:	ff                   	(bad)  
    8ca6:	ff 67 66             	jmp    *0x66(%edi)
        color = MAKE_COLOR(VGA_BLACK, VGA_WHITE);
    8ca9:	c7 43 08 07 00 00 00 	movl   $0x7,0x8(%ebx)
    }
    8cb0:	66 59                	pop    %cx
    8cb2:	66 5b                	pop    %bx
    8cb4:	67 66 8b 5d fc       	mov    -0x4(%di),%bx
    8cb9:	66 c9                	leavew 
    8cbb:	66 c3                	retw   

Disassembly of section .text._ZN2sh4execEv:

00008cbe <_ZN2sh4execEv>:
    int exec()
    8cbe:	66 55                	push   %bp
    8cc0:	66 89 e5             	mov    %sp,%bp
    8cc3:	66 57                	push   %di
    8cc5:	66 56                	push   %si
    8cc7:	66 53                	push   %bx
    8cc9:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        if (strcmp(buf, "ls") == 0|| strcmp(buf, "dir") == 0)
    8cce:	66 68 a6 a7          	pushw  $0xa7a6
    8cd2:	00 00                	add    %al,(%eax)
    8cd4:	66 53                	push   %bx
    8cd6:	66 e8 c9 f7          	callw  84a3 <_Z6strcpyPcPKc+0x40>
    8cda:	ff                   	(bad)  
    8cdb:	ff 66 59             	jmp    *0x59(%esi)
    8cde:	66 5e                	pop    %si
    8ce0:	66 85 c0             	test   %ax,%ax
    8ce3:	75 1d                	jne    8d02 <_ZN2sh4execEv+0x44>
            printf("You have %d user programs intalled\n\n", prog_cnt);
    8ce5:	67 66 ff b3 40 08    	pushw  0x840(%bp,%di)
    8ceb:	00 00                	add    %al,(%eax)
    8ced:	66 68 7c a7          	pushw  $0xa77c
    8cf1:	00 00                	add    %al,(%eax)
    8cf3:	66 e8 e3 fe          	callw  8bda <_Z7sprintfPcPKcz+0x1e>
    8cf7:	ff                   	(bad)  
    8cf8:	ff 66 58             	jmp    *0x58(%esi)
    8cfb:	66 5a                	pop    %dx
            for(size_t i = 0; i < prog_cnt; ++i)
    8cfd:	66 31 f6             	xor    %si,%si
    8d00:	eb 31                	jmp    8d33 <_ZN2sh4execEv+0x75>
        if (strcmp(buf, "ls") == 0|| strcmp(buf, "dir") == 0)
    8d02:	66 68 a1 a7          	pushw  $0xa7a1
    8d06:	00 00                	add    %al,(%eax)
    8d08:	66 53                	push   %bx
    8d0a:	66 e8 95 f7          	callw  84a3 <_Z6strcpyPcPKc+0x40>
    8d0e:	ff                   	(bad)  
    8d0f:	ff 66 5e             	jmp    *0x5e(%esi)
    8d12:	66 5f                	pop    %di
    8d14:	66 85 c0             	test   %ax,%ax
    8d17:	74 cc                	je     8ce5 <_ZN2sh4execEv+0x27>
        } else if (strcmp(buf, "cls") == 0 || strcmp(buf, "clear") == 0)
    8d19:	66 68 a5 a7          	pushw  $0xa7a5
    8d1d:	00 00                	add    %al,(%eax)
    8d1f:	66 53                	push   %bx
    8d21:	66 e8 7e f7          	callw  84a3 <_Z6strcpyPcPKc+0x40>
    8d25:	ff                   	(bad)  
    8d26:	ff 66 5a             	jmp    *0x5a(%esi)
    8d29:	66 59                	pop    %cx
    8d2b:	66 85 c0             	test   %ax,%ax
    8d2e:	75 32                	jne    8d62 <_ZN2sh4execEv+0xa4>
    8d30:	e9 c2 00 67 66       	jmp    66678df7 <_GLOBAL_OFFSET_TABLE_+0x6666e5ff>
            for(size_t i = 0; i < prog_cnt; ++i)
    8d35:	39 b3 40 08 00 00    	cmp    %esi,0x840(%ebx)
    8d3b:	0f 86 e1 00 66 6b    	jbe    6b668e22 <_GLOBAL_OFFSET_TABLE_+0x6b65e62a>
                printf("%s\n", progs[i].name);
    8d41:	c6                   	(bad)  
    8d42:	24 67                	and    $0x67,%al
    8d44:	66 8d 84 03 00 06 00 	lea    0x600(%ebx,%eax,1),%ax
    8d4b:	00 
    8d4c:	66 50                	push   %ax
    8d4e:	66 68 a9 a7          	pushw  $0xa7a9
    8d52:	00 00                	add    %al,(%eax)
    8d54:	66 e8 82 fe          	callw  8bda <_Z7sprintfPcPKcz+0x1e>
    8d58:	ff                   	(bad)  
    8d59:	ff 66 46             	jmp    *0x46(%esi)
            for(size_t i = 0; i < prog_cnt; ++i)
    8d5c:	66 5f                	pop    %di
    8d5e:	66 58                	pop    %ax
    8d60:	eb d1                	jmp    8d33 <_ZN2sh4execEv+0x75>
        } else if (strcmp(buf, "cls") == 0 || strcmp(buf, "clear") == 0)
    8d62:	66 68 ad a7          	pushw  $0xa7ad
    8d66:	00 00                	add    %al,(%eax)
    8d68:	66 53                	push   %bx
    8d6a:	66 e8 35 f7          	callw  84a3 <_Z6strcpyPcPKc+0x40>
    8d6e:	ff                   	(bad)  
    8d6f:	ff 66 5a             	jmp    *0x5a(%esi)
    8d72:	66 59                	pop    %cx
    8d74:	66 85 c0             	test   %ax,%ax
    8d77:	74 7c                	je     8df5 <_ZN2sh4execEv+0x137>
        } else if (strcmp(buf, "help") == 0)
    8d79:	66 68 b3 a7          	pushw  $0xa7b3
    8d7d:	00 00                	add    %al,(%eax)
    8d7f:	66 53                	push   %bx
    8d81:	66 e8 1e f7          	callw  84a3 <_Z6strcpyPcPKc+0x40>
    8d85:	ff                   	(bad)  
    8d86:	ff 66 5e             	jmp    *0x5e(%esi)
    8d89:	66 5f                	pop    %di
            for(size_t i = 0; i < prog_cnt; ++i)
    8d8b:	66 31 f6             	xor    %si,%si
        } else if (strcmp(buf, "help") == 0)
    8d8e:	66 85 c0             	test   %ax,%ax
    8d91:	75 0d                	jne    8da0 <_ZN2sh4execEv+0xe2>
            printf("%s\n", help);
    8d93:	66 81 c3 00 04       	add    $0x400,%bx
    8d98:	00 00                	add    %al,(%eax)
    8d9a:	66 53                	push   %bx
    8d9c:	eb 72                	jmp    8e10 <_ZN2sh4execEv+0x152>
            for(size_t i = 0; i < prog_cnt; ++i)
    8d9e:	66 46                	inc    %si
    8da0:	67 66 39 b3 40 08    	cmp    %si,0x840(%bp,%di)
    8da6:	00 00                	add    %al,(%eax)
    8da8:	76 60                	jbe    8e0a <_ZN2sh4execEv+0x14c>
                if (strcmp(buf, progs[i].name) == 0)
    8daa:	66 6b fe 24          	imul   $0x24,%si,%di
    8dae:	67 66 8d 84 3b 00    	lea    0x3b(%si),%ax
    8db4:	06                   	push   %es
    8db5:	00 00                	add    %al,(%eax)
    8db7:	66 50                	push   %ax
    8db9:	66 53                	push   %bx
    8dbb:	66 e8 e4 f6          	callw  84a3 <_Z6strcpyPcPKc+0x40>
    8dbf:	ff                   	(bad)  
    8dc0:	ff 66 5a             	jmp    *0x5a(%esi)
    8dc3:	66 59                	pop    %cx
    8dc5:	66 85 c0             	test   %ax,%ax
    8dc8:	75 d4                	jne    8d9e <_ZN2sh4execEv+0xe0>
class bin_loader
{
public:
    static void load_binary_from_floppy(int n)
    {
        sys_read_disk(user_prog_segment, user_prog_load_addr, n, 2);
    8dca:	66 6a 02             	pushw  $0x2
    8dcd:	67 66 0f b7 84 3b 20 	movzww 0x203b(%si),%ax
    8dd4:	06                   	push   %es
    8dd5:	00 00                	add    %al,(%eax)
    8dd7:	66 50                	push   %ax
    8dd9:	66 68 00 a1          	pushw  $0xa100
    8ddd:	00 00                	add    %al,(%eax)
    8ddf:	66 68 00 10          	pushw  $0x1000
    8de3:	00 00                	add    %al,(%eax)
    8de5:	66 e8 22 f5          	callw  830b <sys_get_scancode+0xf>
    8de9:	ff                   	(bad)  
    8dea:	ff 66 83             	jmp    *-0x7d(%esi)
        sys_execve_bin();
    8ded:	c4 10                	les    (%eax),%edx
    8def:	66 e8 65 f2          	callw  8058 <sys_bios_getchar+0x5>
    8df3:	ff                   	(bad)  
    8df4:	ff 66 e8             	jmp    *-0x18(%esi)
                    sys_bios_clear_screen();
    8df7:	45                   	inc    %ebp
    8df8:	f2 ff                	repnz (bad) 
    8dfa:	ff 66 ff             	jmp    *-0x1(%esi)
                    sys_get_current_tty()->tty_init();
    8dfd:	36 40                	ss inc %eax
    8dff:	97                   	xchg   %eax,%edi
    8e00:	66 e8 3c fe          	callw  8c40 <_Z7isspacei+0x26>
    8e04:	ff                   	(bad)  
    8e05:	ff 66 59             	jmp    *0x59(%esi)
    8e08:	eb 16                	jmp    8e20 <_ZN2sh4execEv+0x162>
                printf("%s\n", "No such command or file");
    8e0a:	66 68 b8 a7          	pushw  $0xa7b8
    8e0e:	00 00                	add    %al,(%eax)
    8e10:	66 68 a9 a7          	pushw  $0xa7a9
    8e14:	00 00                	add    %al,(%eax)
    8e16:	66 e8 c0 fd          	callw  8bda <_Z7sprintfPcPKcz+0x1e>
    8e1a:	ff                   	(bad)  
    8e1b:	ff 66 58             	jmp    *0x58(%esi)
    8e1e:	66 5a                	pop    %dx
    }
    8e20:	66 31 c0             	xor    %ax,%ax
    8e23:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8e28:	66 5b                	pop    %bx
    8e2a:	66 5e                	pop    %si
    8e2c:	66 5f                	pop    %di
    8e2e:	66 5d                	pop    %bp
    8e30:	66 c3                	retw   

Disassembly of section .text._ZN2sh16read_prog_recordEv:

00008e32 <_ZN2sh16read_prog_recordEv>:
    void read_prog_record()
    8e32:	66 55                	push   %bp
    8e34:	66 89 e5             	mov    %sp,%bp
    8e37:	66 57                	push   %di
    8e39:	66 56                	push   %si
    8e3b:	66 53                	push   %bx
    8e3d:	66 83 ec 6c          	sub    $0x6c,%sp
    8e41:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        sys_read_disk(0, (uint32_t)record_buf, 34, 1);
    8e46:	67 66 8d bb 00 02    	lea    0x200(%bp,%di),%di
    8e4c:	00 00                	add    %al,(%eax)
    8e4e:	66 6a 01             	pushw  $0x1
    8e51:	66 6a 22             	pushw  $0x22
    8e54:	66 57                	push   %di
    8e56:	66 6a 00             	pushw  $0x0
    8e59:	66 e8 ae f4          	callw  830b <sys_get_scancode+0xf>
    8e5d:	ff                   	(bad)  
    8e5e:	ff 66 83             	jmp    *-0x7d(%esi)
        sscanf(p, "%s", buf1);
    8e61:	c4 10                	les    (%eax),%edx
    8e63:	67 66 8d 75 94       	lea    -0x6c(%di),%si
    8e68:	66 56                	push   %si
    8e6a:	66 68 d2 a7          	pushw  $0xa7d2
    8e6e:	00 00                	add    %al,(%eax)
    8e70:	66 57                	push   %di
    8e72:	66 e8 3a fb          	callw  89b0 <_Z7vsscanfPKcS0_Pc+0x1bf>
    8e76:	ff                   	(bad)  
    8e77:	ff 66 83             	jmp    *-0x7d(%esi)
        p += (strlen(buf1) + 1);
    8e7a:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    8e7d:	56                   	push   %esi
    8e7e:	66 e8 c3 f5          	callw  8445 <_Z6memsetPvim+0x23>
    8e82:	ff                   	(bad)  
    8e83:	ff 67 66             	jmp    *0x66(%edi)
    8e86:	8d 44 07 01          	lea    0x1(%edi,%eax,1),%eax
    8e8a:	67 66 89 45 8c       	mov    %ax,-0x74(%di)
        prog_cnt = strtol(buf1, nullptr, 10);
    8e8f:	67 66 c7 04 24 0a    	movw   $0xa24,(%si)
    8e95:	00 00                	add    %al,(%eax)
    8e97:	00 66 6a             	add    %ah,0x6a(%esi)
    8e9a:	00 66 56             	add    %ah,0x56(%esi)
    8e9d:	66 e8 05 f7          	callw  85a6 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    8ea1:	ff                   	(bad)  
    8ea2:	ff 67 66             	jmp    *0x66(%edi)
    8ea5:	89 83 40 08 00 00    	mov    %eax,0x840(%ebx)
    8eab:	66 83 c4 0c          	add    $0xc,%sp
        for(size_t i = 0; i < prog_cnt; ++i)
    8eaf:	67 66 c7 45 90 00 00 	movw   $0x0,-0x70(%di)
    8eb6:	00 00                	add    %al,(%eax)
    8eb8:	67 66 8b 45 90       	mov    -0x70(%di),%ax
    8ebd:	67 66 39 83 40 08    	cmp    %ax,0x840(%bp,%di)
    8ec3:	00 00                	add    %al,(%eax)
    8ec5:	0f 86 97 00 67 66    	jbe    66678f62 <_GLOBAL_OFFSET_TABLE_+0x6666e76a>
            sscanf(p, "%s%s", buf2, buf3);
    8ecb:	8d 7d d4             	lea    -0x2c(%ebp),%edi
    8ece:	66 57                	push   %di
    8ed0:	67 66 8d 75 b4       	lea    -0x4c(%di),%si
    8ed5:	66 56                	push   %si
    8ed7:	66 68 d0 a7          	pushw  $0xa7d0
    8edb:	00 00                	add    %al,(%eax)
    8edd:	67 66 ff 75 8c       	pushw  -0x74(%di)
    8ee2:	66 e8 ca fa          	callw  89b0 <_Z7vsscanfPKcS0_Pc+0x1bf>
    8ee6:	ff                   	(bad)  
    8ee7:	ff 67 66             	jmp    *0x66(%edi)
    8eea:	6b 4d 90 24          	imul   $0x24,-0x70(%ebp),%ecx
            strcpy(progs[i].name, buf2);
    8eee:	66 83 c4 10          	add    $0x10,%sp
    8ef2:	66 56                	push   %si
    8ef4:	67 66 8d 84 0b 00    	lea    0xb(%si),%ax
    8efa:	06                   	push   %es
    8efb:	00 00                	add    %al,(%eax)
    8efd:	67 66 89 4d 88       	mov    %cx,-0x78(%di)
    8f02:	66 50                	push   %ax
    8f04:	66 e8 59 f5          	callw  8461 <_Z6strlenPKc+0x1a>
    8f08:	ff                   	(bad)  
    8f09:	ff 66 58             	jmp    *0x58(%esi)
            progs[i].lba = strtol(buf3, nullptr, 10);
    8f0c:	66 5a                	pop    %dx
    8f0e:	66 6a 0a             	pushw  $0xa
    8f11:	66 6a 00             	pushw  $0x0
    8f14:	66 57                	push   %di
    8f16:	66 e8 8c f6          	callw  85a6 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    8f1a:	ff                   	(bad)  
    8f1b:	ff 67 66             	jmp    *0x66(%edi)
    8f1e:	8b 4d 88             	mov    -0x78(%ebp),%ecx
    8f21:	67 66 89 84 0b 20    	mov    %ax,0x200b(%si)
    8f27:	06                   	push   %es
    8f28:	00 00                	add    %al,(%eax)
            p += (strlen(buf2) + strlen(buf3) + 2);
    8f2a:	66 83 c4 0c          	add    $0xc,%sp
    8f2e:	66 56                	push   %si
    8f30:	66 e8 11 f5          	callw  8445 <_Z6memsetPvim+0x23>
    8f34:	ff                   	(bad)  
    8f35:	ff 67 66             	jmp    *0x66(%edi)
    8f38:	89 45 88             	mov    %eax,-0x78(%ebp)
    8f3b:	67 66 89 3c          	mov    %di,(%si)
    8f3f:	24 66                	and    $0x66,%al
    8f41:	e8 01 f5 ff ff       	call   8447 <_Z6strlenPKc>
    8f46:	67 66 8b 55 88       	mov    -0x78(%di),%dx
    8f4b:	67 66 8d 44 02       	lea    0x2(%si),%ax
    8f50:	02 67 66             	add    0x66(%edi),%ah
    8f53:	01 45 8c             	add    %eax,-0x74(%ebp)
        for(size_t i = 0; i < prog_cnt; ++i)
    8f56:	67 66 ff 45 90       	incw   -0x70(%di)
    8f5b:	66 59                	pop    %cx
    8f5d:	e9 58 ff 67 66       	jmp    66688eba <_GLOBAL_OFFSET_TABLE_+0x6667e6c2>
    }
    8f62:	8d 65 f4             	lea    -0xc(%ebp),%esp
    8f65:	66 5b                	pop    %bx
    8f67:	66 5e                	pop    %si
    8f69:	66 5f                	pop    %di
    8f6b:	66 5d                	pop    %bp
    8f6d:	66 c3                	retw   

Disassembly of section .text._ZN3tty7putcharEi:

00008f70 <_ZN3tty7putcharEi>:
        tty_mem[y + 80 * x] = c;
        tty_mem[y + 80 * x + 1] = color;
#endif
        sys_putchar(c, color, x, y);
    }
    void putchar(int c)
    8f70:	66 55                	push   %bp
    8f72:	66 89 e5             	mov    %sp,%bp
    8f75:	66 56                	push   %si
    8f77:	66 53                	push   %bx
    8f79:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8f7e:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    {
        switch(c)
    8f83:	66 83 f8 09          	cmp    $0x9,%ax
    8f87:	74 22                	je     8fab <_ZN3tty7putcharEi+0x3b>
    8f89:	7f 09                	jg     8f94 <_ZN3tty7putcharEi+0x24>
    8f8b:	66 83 f8 08          	cmp    $0x8,%ax
    8f8f:	74 36                	je     8fc7 <_ZN3tty7putcharEi+0x57>
    8f91:	e9 88 00 66 83       	jmp    8366901e <_GLOBAL_OFFSET_TABLE_+0x8365e826>
    8f96:	f8                   	clc    
    8f97:	0a 74 73 66          	or     0x66(%ebx,%esi,2),%dh
    8f9b:	83 f8 0d             	cmp    $0xd,%eax
    8f9e:	75 7c                	jne    901c <_ZN3tty7putcharEi+0xac>
                for(int i = 0; i < 4; ++i) putchar(' ');
                break;
            }
            case '\r':
            {
                cur_x = 0;
    8fa0:	67 66 c7 03 00 00    	movw   $0x0,(%bp,%di)
    8fa6:	00 00                	add    %al,(%eax)
                break;
    8fa8:	e9 b2 00 66 be       	jmp    be66905f <_GLOBAL_OFFSET_TABLE_+0xbe65e867>
        switch(c)
    8fad:	04 00                	add    $0x0,%al
    8faf:	00 00                	add    %al,(%eax)
                for(int i = 0; i < 4; ++i) putchar(' ');
    8fb1:	66 6a 20             	pushw  $0x20
    8fb4:	66 53                	push   %bx
    8fb6:	66 e8 b4 ff          	callw  8f6e <_ZN2sh16read_prog_recordEv+0x13c>
    8fba:	ff                   	(bad)  
    8fbb:	ff 66 58             	jmp    *0x58(%esi)
    8fbe:	66 5a                	pop    %dx
    8fc0:	66 4e                	dec    %si
    8fc2:	75 ed                	jne    8fb1 <_ZN3tty7putcharEi+0x41>
    8fc4:	e9 96 00 67 66       	jmp    6667905f <_GLOBAL_OFFSET_TABLE_+0x6666e867>
            }
            case '\b':
            {
                if(cur_y == 0 && cur_x == 0) 
    8fc9:	8b 53 04             	mov    0x4(%ebx),%edx
    8fcc:	67 66 8b 03          	mov    (%bp,%di),%ax
    8fd0:	66 85 d2             	test   %dx,%dx
    8fd3:	75 1b                	jne    8ff0 <_ZN3tty7putcharEi+0x80>
    8fd5:	66 85 c0             	test   %ax,%ax
    8fd8:	0f 84 99 00 67 66    	je     66679077 <_GLOBAL_OFFSET_TABLE_+0x6666e87f>
                {
                    break;
                }
                else if (cur_y == 0 && cur_x != 0)
                {
                    cur_y = 80 - 1;
    8fde:	c7 43 04 4f 00 00 00 	movl   $0x4f,0x4(%ebx)
                    cur_x--;
    8fe5:	66 48                	dec    %ax
    8fe7:	67 66 89 03          	mov    %ax,(%bp,%di)
        sys_putchar(c, color, x, y);
    8feb:	66 6a 4f             	pushw  $0x4f
    8fee:	eb 09                	jmp    8ff9 <_ZN3tty7putcharEi+0x89>
                    putchar_worker(' ', MAKE_COLOR(VGA_BLACK, VGA_WHITE) , cur_x, cur_y);
                    break;
                }
                else
                {
                    cur_y--;
    8ff0:	66 4a                	dec    %dx
    8ff2:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        sys_putchar(c, color, x, y);
    8ff7:	66 52                	push   %dx
    8ff9:	66 50                	push   %ax
    8ffb:	66 6a 07             	pushw  $0x7
    8ffe:	66 6a 20             	pushw  $0x20
    9001:	66 e8 31 f1          	callw  8136 <sys_bios_print_int+0xa4>
    9005:	ff                   	(bad)  
    9006:	ff 66 83             	jmp    *-0x7d(%esi)
    9009:	c4 10                	les    (%eax),%edx
    900b:	eb 50                	jmp    905d <_ZN3tty7putcharEi+0xed>
                    break;
                }
            }
            case '\n':
            {
                cur_x++;
    900d:	67 66 ff 03          	incw   (%bp,%di)
                cur_y = 0;
    9011:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    9018:	00 00                	add    %al,(%eax)
                break;
    901a:	eb 41                	jmp    905d <_ZN3tty7putcharEi+0xed>
        sys_putchar(c, color, x, y);
    901c:	67 66 ff 73 04       	pushw  0x4(%bp,%di)
    9021:	67 66 ff 33          	pushw  (%bp,%di)
    9025:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    902a:	66 50                	push   %ax
    902c:	66 e8 06 f1          	callw  8136 <sys_bios_print_int+0xa4>
    9030:	ff                   	(bad)  
    9031:	ff 67 66             	jmp    *0x66(%edi)
            }
            default:
            {
                putchar_worker(c, color, cur_x, cur_y);
                cur_x = (cur_y == 79) ? cur_x + 1 : cur_x;
    9034:	8b 43 04             	mov    0x4(%ebx),%eax
    9037:	66 83 c4 10          	add    $0x10,%sp
    903b:	66 83 f8 4f          	cmp    $0x4f,%ax
    903f:	67 66 8b 13          	mov    (%bp,%di),%dx
    9043:	75 02                	jne    9047 <_ZN3tty7putcharEi+0xd7>
    9045:	66 42                	inc    %dx
    9047:	67 66 89 13          	mov    %dx,(%bp,%di)
                cur_y = (cur_y + 1) % 80;
    904b:	66 40                	inc    %ax
    904d:	66 b9 50 00          	mov    $0x50,%cx
    9051:	00 00                	add    %al,(%eax)
    9053:	66 99                	cwtd   
    9055:	66 f7 f9             	idiv   %cx
    9058:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        if (cur_x >= 25)
    905d:	67 66 83 3b 18       	cmpw   $0x18,(%bp,%di)
    9062:	7e 11                	jle    9075 <_ZN3tty7putcharEi+0x105>
            sys_bios_scroll_up(color);
    9064:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    9069:	66 e8 fa f1          	callw  8267 <sys_print_int+0xa4>
    906d:	ff                   	(bad)  
    906e:	ff 67 66             	jmp    *0x66(%edi)
            --cur_x;
    9071:	ff 0b                	decl   (%ebx)
    9073:	66 59                	pop    %cx
        uint16_t pos = x * 80 + y;
    9075:	67 6b 03 50          	imul   $0x50,(%bp,%di),%eax
    9079:	67 66 03 43 04       	add    0x4(%bp,%di),%ax
    907e:	66 89 c3             	mov    %ax,%bx
        sys_outb(0x3D4, 0x0F);
    9081:	66 6a 0f             	pushw  $0xf
    9084:	66 68 d4 03          	pushw  $0x3d4
    9088:	00 00                	add    %al,(%eax)
    908a:	66 e8 48 f2          	callw  82d6 <sys_inb+0xd>
    908e:	ff                   	(bad)  
    908f:	ff 66 58             	jmp    *0x58(%esi)
        sys_outb(0x3D5, (uint8_t) (pos & 0xFF));
    9092:	66 5a                	pop    %dx
    9094:	66 0f b6 c3          	movzbw %bl,%ax
    9098:	66 50                	push   %ax
    909a:	66 68 d5 03          	pushw  $0x3d5
    909e:	00 00                	add    %al,(%eax)
    90a0:	66 e8 32 f2          	callw  82d6 <sys_inb+0xd>
    90a4:	ff                   	(bad)  
    90a5:	ff 66 59             	jmp    *0x59(%esi)
        sys_outb(0x3D4, 0x0E);
    90a8:	66 5e                	pop    %si
    90aa:	66 6a 0e             	pushw  $0xe
    90ad:	66 68 d4 03          	pushw  $0x3d4
    90b1:	00 00                	add    %al,(%eax)
    90b3:	66 e8 1f f2          	callw  82d6 <sys_inb+0xd>
    90b7:	ff                   	(bad)  
    90b8:	ff 66 58             	jmp    *0x58(%esi)
        sys_outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
    90bb:	66 5a                	pop    %dx
    90bd:	66 0f b6 df          	movzbw %bh,%bx
    90c1:	67 66 89 5d 0c       	mov    %bx,0xc(%di)
    90c6:	67 66 c7 45 08 d5 03 	movw   $0x3d5,0x8(%di)
    90cd:	00 00                	add    %al,(%eax)
                break;
            }
        }
        scroll_up();
        move_cursor(cur_x, cur_y);
    }
    90cf:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    90d4:	66 5b                	pop    %bx
    90d6:	66 5e                	pop    %si
    90d8:	66 5d                	pop    %bp
        sys_outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
    90da:	e9                   	.byte 0xe9
    90db:	fb                   	sti    
    90dc:	f1                   	icebp  

Disassembly of section .text._Z4itoaIjEvPcT_ib:

000090dd <_Z4itoaIjEvPcT_ib>:
void itoa(char* buffer, T num, int base, bool captial = false)
    90dd:	66 55                	push   %bp
    90df:	66 89 e5             	mov    %sp,%bp
    90e2:	66 57                	push   %di
    90e4:	66 56                	push   %si
    90e6:	66 53                	push   %bx
    90e8:	66 83 ec 08          	sub    $0x8,%sp
    90ec:	67 66 8b 75 08       	mov    0x8(%di),%si
    90f1:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    90f6:	67 66 8b 7d 10       	mov    0x10(%di),%di
    90fb:	67 8a 5d 14          	mov    0x14(%di),%bl
    90ff:	67 88 5d ef          	mov    %bl,-0x11(%di)
    char *p = buffer;
    9103:	66 89 f1             	mov    %si,%cx
    9106:	66 31 d2             	xor    %dx,%dx
    9109:	66 f7 f7             	div    %di
    910c:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    9111:	67 80 7d ef 00       	cmpb   $0x0,-0x11(%di)
    9116:	74 09                	je     9121 <_Z4itoaIjEvPcT_ib+0x44>
    9118:	67 8a 9a d5 a7       	mov    -0x582b(%bp,%si),%bl
    911d:	00 00                	add    %al,(%eax)
    911f:	eb 07                	jmp    9128 <_Z4itoaIjEvPcT_ib+0x4b>
    9121:	67 8a 9a e6 a7       	mov    -0x581a(%bp,%si),%bl
    9126:	00 00                	add    %al,(%eax)
    9128:	67 66 8d 51 01       	lea    0x1(%bx,%di),%dx
    912d:	67 88 5a ff          	mov    %bl,-0x1(%bp,%si)
        if(num == 0) break;
    9131:	67 66 83 7d f0 00    	cmpw   $0x0,-0x10(%di)
    9137:	74 05                	je     913e <_Z4itoaIjEvPcT_ib+0x61>
    9139:	66 89 d1             	mov    %dx,%cx
    913c:	eb c8                	jmp    9106 <_Z4itoaIjEvPcT_ib+0x29>
    *p = '\0';
    913e:	67 c6 41 01 00       	movb   $0x0,0x1(%bx,%di)
    reverse(buffer);
    9143:	67 66 89 75 08       	mov    %si,0x8(%di)
}
    9148:	66 58                	pop    %ax
    914a:	66 5a                	pop    %dx
    914c:	66 5b                	pop    %bx
    914e:	66 5e                	pop    %si
    9150:	66 5f                	pop    %di
    9152:	66 5d                	pop    %bp
    reverse(buffer);
    9154:	e9                   	.byte 0xe9
    9155:	bb                   	.byte 0xbb
    9156:	f3                   	repz
