
build/kernel/kernel.bin.elf:     file format elf32-i386


Disassembly of section .text:

00007e00 <_text>:
    7e00:	68 43 7e 68 80       	push   $0x80687e43
    7e05:	00 e8                	add    %ch,%al
    7e07:	21 00                	and    %eax,(%eax)
    7e09:	83 c4 04             	add    $0x4,%esp
    7e0c:	68 45 7e 68 84       	push   $0x84687e45
    7e11:	00 e8                	add    %ch,%al
    7e13:	15 00 83 c4 04       	adc    $0x4c48300,%eax
    7e18:	68 55 7e 68 60       	push   $0x60687e55
    7e1d:	02 e8                	add    %al,%ch
    7e1f:	09 00                	or     %eax,(%eax)
    7e21:	83 c4 04             	add    $0x4,%esp
    7e24:	e8 36 01 fa eb       	call   ebfa7f5f <_GLOBAL_OFFSET_TABLE_+0xebf9d35f>
    7e29:	fe                   	.byte 0xfe

00007e2a <install_int>:
    7e2a:	55                   	push   %ebp
    7e2b:	89 e5                	mov    %esp,%ebp
    7e2d:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    7e32:	8b 76 04             	mov    0x4(%esi),%esi
    7e35:	8b 4e 06             	mov    0x6(%esi),%ecx
    7e38:	26 89 0c 26          	mov    %ecx,%es:(%esi,%eiz,1)
    7e3c:	8c 4c 02 8e          	mov    %cs,-0x72(%edx,%eax,1)
    7e40:	c0                   	.byte 0xc0
    7e41:	5d                   	pop    %ebp
    7e42:	c3                   	ret    

00007e43 <interrupt_20h>:
    7e43:	b4 4c                	mov    $0x4c,%ah

00007e45 <interrupt_21h>:
    7e45:	80 fc 4c             	cmp    $0x4c,%ah
    7e48:	75 09                	jne    7e53 <panic_21h_func_not_impl>
    7e4a:	83 c4 06             	add    $0x6,%esp
    7e4d:	66 ff 26             	jmpw   *(%esi)
    7e50:	0a                   	.byte 0xa
    7e51:	a0                   	.byte 0xa0
    7e52:	cf                   	iret   

00007e53 <panic_21h_func_not_impl>:
    7e53:	eb fe                	jmp    7e53 <panic_21h_func_not_impl>

00007e55 <interrupt_98h>:
    7e55:	80 fc 00             	cmp    $0x0,%ah
    7e58:	75 05                	jne    7e5f <func_01>

00007e5a <func_00>:
    7e5a:	e8 16 02 eb 14       	call   14eb8075 <_GLOBAL_OFFSET_TABLE_+0x14ead475>

00007e5f <func_01>:
    7e5f:	60                   	pusha  
    7e60:	80 fc 01             	cmp    $0x1,%ah
    7e63:	75 0e                	jne    7e73 <func_02>
    7e65:	66 50                	push   %ax
    7e67:	66 e8 d0 00          	callw  7f3b <_Z19sys_get_current_ttyv+0xb>
    7e6b:	00 00                	add    %al,(%eax)
    7e6d:	83 c4 04             	add    $0x4,%esp
    7e70:	61                   	popa   
    7e71:	eb 00                	jmp    7e73 <func_02>

00007e73 <func_02>:
    7e73:	cf                   	iret   

00007e74 <_ZL8print_okPc>:
    int mask = 0x00FF;
    ch = ch & mask;
    sys_get_current_tty()->putchar(ch);
}
const char* str = "Welcome to HHOS version 1.2.0\nYou can input help to see how to use it!";
static inline void print_ok(char * mod) {
    7e74:	66 55                	push   %bp
    7e76:	66 89 e5             	mov    %sp,%bp
    printf("%s init [", mod);
    7e79:	66 50                	push   %ax
    7e7b:	66 68 d4 aa          	pushw  $0xaad4
    7e7f:	00 00                	add    %al,(%eax)
    7e81:	66 e8 23 0e          	callw  8ca8 <_Z7sprintfPcPKcz+0x1e>
    7e85:	00 00                	add    %al,(%eax)
    {
        cur_y = y;
    }
    void set_color(int _color)
    {
        color = _color;
    7e87:	66 a1 00 9b 67 66    	mov    0x66679b00,%ax
    7e8d:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
    current_tty->set_color(MAKE_COLOR(VGA_BLACK, VGA_GREEN));
    printf("OK");
    7e94:	66 58                	pop    %ax
    7e96:	66 5a                	pop    %dx
    7e98:	66 68 de aa          	pushw  $0xaade
    7e9c:	00 00                	add    %al,(%eax)
    7e9e:	66 e8 06 0e          	callw  8ca8 <_Z7sprintfPcPKcz+0x1e>
    7ea2:	00 00                	add    %al,(%eax)
    7ea4:	66 a1 00 9b 67 66    	mov    0x66679b00,%ax
    7eaa:	c7 40 08 07 00 00 00 	movl   $0x7,0x8(%eax)
    current_tty->set_color(MAKE_COLOR(VGA_BLACK, VGA_WHITE));
    printf("]\n");
    7eb1:	67 66 c7 04 24 e1    	movw   $0xe124,(%si)
    7eb7:	aa                   	stos   %al,%es:(%edi)
    7eb8:	00 00                	add    %al,(%eax)
    7eba:	66 e8 ea 0d          	callw  8ca8 <_Z7sprintfPcPKcz+0x1e>
    7ebe:	00 00                	add    %al,(%eax)
}
    7ec0:	66 59                	pop    %cx
    7ec2:	66 c9                	leavew 
    7ec4:	66 c3                	retw   

00007ec6 <_ZN3tty11move_cursorEii.isra.1>:
    }
    void move_cursor(int x, int y)
    7ec6:	66 55                	push   %bp
    7ec8:	66 89 e5             	mov    %sp,%bp
    7ecb:	66 53                	push   %bx
    {
        uint16_t pos = x * 80 + y;
    7ecd:	6b c0 50             	imul   $0x50,%eax,%eax
    7ed0:	67 66 8d 1c          	lea    (%si),%bx
    7ed4:	10 66 6a             	adc    %ah,0x6a(%esi)
        sys_outb(0x3D4, 0x0F);
    7ed7:	0f 66 68 d4          	pcmpgtd -0x2c(%eax),%mm5
    7edb:	03 00                	add    (%eax),%eax
    7edd:	00 66 e8             	add    %ah,-0x18(%esi)
    7ee0:	14 04                	adc    $0x4,%al
    7ee2:	00 00                	add    %al,(%eax)
        sys_outb(0x3D5, (uint8_t) (pos & 0xFF));
    7ee4:	66 58                	pop    %ax
    7ee6:	66 5a                	pop    %dx
    7ee8:	66 0f b6 c3          	movzbw %bl,%ax
    7eec:	66 50                	push   %ax
    7eee:	66 68 d5 03          	pushw  $0x3d5
    7ef2:	00 00                	add    %al,(%eax)
    7ef4:	66 e8 fe 03          	callw  82f6 <sys_inb+0xd>
    7ef8:	00 00                	add    %al,(%eax)
        sys_outb(0x3D4, 0x0E);
    7efa:	66 59                	pop    %cx
    7efc:	66 58                	pop    %ax
    7efe:	66 6a 0e             	pushw  $0xe
    7f01:	66 68 d4 03          	pushw  $0x3d4
    7f05:	00 00                	add    %al,(%eax)
    7f07:	66 e8 eb 03          	callw  82f6 <sys_inb+0xd>
    7f0b:	00 00                	add    %al,(%eax)
        sys_outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
    7f0d:	66 58                	pop    %ax
    7f0f:	66 5a                	pop    %dx
    7f11:	66 0f b6 df          	movzbw %bh,%bx
    7f15:	66 53                	push   %bx
    7f17:	66 68 d5 03          	pushw  $0x3d5
    7f1b:	00 00                	add    %al,(%eax)
    7f1d:	66 e8 d5 03          	callw  82f6 <sys_inb+0xd>
    7f21:	00 00                	add    %al,(%eax)
    7f23:	66 59                	pop    %cx
    7f25:	66 5b                	pop    %bx
    }
    7f27:	67 66 8b 5d fc       	mov    -0x4(%di),%bx
    7f2c:	66 c9                	leavew 
    7f2e:	66 c3                	retw   

00007f30 <_Z19sys_get_current_ttyv>:
tty* sys_get_current_tty(){return current_tty;}
    7f30:	66 55                	push   %bp
    7f32:	66 89 e5             	mov    %sp,%bp
    7f35:	66 a1 00 9b 66 5d    	mov    0x5d669b00,%ax
    7f3b:	66 c3                	retw   

00007f3d <sys_current_tty_putchar>:
{
    7f3d:	66 55                	push   %bp
    7f3f:	66 89 e5             	mov    %sp,%bp
    ch = ch & mask;
    7f42:	67 66 0f b6 45 08    	movzbw 0x8(%di),%ax
    sys_get_current_tty()->putchar(ch);
    7f48:	66 50                	push   %ax
    7f4a:	66 ff 36             	pushw  (%esi)
    7f4d:	00 9b 66 e8 cb 0d    	add    %bl,0xdcbe866(%ebx)
    7f53:	00 00                	add    %al,(%eax)
}
    7f55:	66 58                	pop    %ax
    7f57:	66 5a                	pop    %dx
    7f59:	66 c9                	leavew 
    7f5b:	66 c3                	retw   

00007f5d <kernel_main>:
extern "C" void kernel_main()
{
    7f5d:	66 55                	push   %bp
    7f5f:	66 89 e5             	mov    %sp,%bp
    7f62:	66 53                	push   %bx
    7f64:	66 81 ec d4 08       	sub    $0x8d4,%sp
    7f69:	00 00                	add    %al,(%eax)
        sys_bios_clear_screen();
    7f6b:	66 e8 ef 00          	callw  805e <sys_bios_print_string+0x1e>
    7f6f:	00 00                	add    %al,(%eax)
        tty_init();
    7f71:	67 66 8d 9d 28 f7    	lea    -0x8d8(%di),%bx
    7f77:	ff                   	(bad)  
    7f78:	ff 66 53             	jmp    *0x53(%esi)
    7f7b:	66 e8 67 0d          	callw  8ce6 <_Z6printfPKcz+0x3c>
    7f7f:	00 00                	add    %al,(%eax)


    tty tty1;
    current_tty = &tty1;
    7f81:	66 89 1e             	mov    %bx,(%esi)
    7f84:	00 9b 66 59 66 b8    	add    %bl,-0x4799a69a(%ebx)
    print_ok("TTY");
    7f8a:	e4 aa                	in     $0xaa,%al
    7f8c:	00 00                	add    %al,(%eax)
    7f8e:	66 e8 e0 fe          	callw  7e72 <func_01+0x13>
    7f92:	ff                   	(bad)  
    7f93:	ff 66 31             	jmp    *0x31(%esi)
        return i;
    }


public:
    sh(){
    7f96:	c0 67 66 8d          	shlb   $0x8d,0x66(%edi)
    struct cmd{
    7f9a:	9d                   	popf   
    7f9b:	34 f7                	xor    $0xf7,%al
    7f9d:	ff                   	(bad)  
    7f9e:	ff 67 66             	jmp    *0x66(%edi)
    7fa1:	c7 84 05 38 f8 ff ff 	movl   $0x0,-0x7c8(%ebp,%eax,1)
    7fa8:	00 00 00 00 
    7fac:	66 83 c0 08          	add    $0x8,%ax
    sh(){
    7fb0:	66 3d 00 01          	cmp    $0x100,%ax
    7fb4:	00 00                	add    %al,(%eax)
    7fb6:	75 e7                	jne    7f9f <kernel_main+0x42>
    7fb8:	67 66 c7 45 f4 00 00 	movw   $0x0,-0xc(%di)
    7fbf:	00 00                	add    %al,(%eax)
    7fc1:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    7fc8:	00 00                	add    %al,(%eax)
        memset(buf, 0, buf_size);
    7fca:	66 68 80 00          	pushw  $0x80
    7fce:	00 00                	add    %al,(%eax)
    7fd0:	66 6a 00             	pushw  $0x0
    7fd3:	67 66 8d 85 34 f9    	lea    -0x6cc(%di),%ax
    7fd9:	ff                   	(bad)  
    7fda:	ff 66 50             	jmp    *0x50(%esi)
    7fdd:	66 e8 5f 04          	callw  8440 <_Z7memmovePvPKvm+0x4b>
    7fe1:	00 00                	add    %al,(%eax)
        read_prog_record();
    7fe3:	66 83 c4 0c          	add    $0xc,%sp
    7fe7:	66 53                	push   %bx
    7fe9:	66 e8 77 10          	callw  9064 <_ZN2sh4execERKNS_3cmdE+0x242>
    7fed:	00 00                	add    %al,(%eax)
        sys_read_disk(0, (uint32_t)help, HELP_FILE_SECTOR, 1);
    7fef:	67 66 c7 04 24 01    	movw   $0x124,(%si)
    7ff5:	00 00                	add    %al,(%eax)
    7ff7:	00 66 6a             	add    %ah,0x6a(%esi)
    7ffa:	20 67 66             	and    %ah,0x66(%edi)
    7ffd:	8d 85 b4 fb ff ff    	lea    -0x44c(%ebp),%eax
    8003:	66 50                	push   %ax
    8005:	66 6a 00             	pushw  $0x0
    8008:	66 e8 1f 03          	callw  832b <sys_get_scancode+0xf>
    800c:	00 00                	add    %al,(%eax)
    sh sh1;
    print_ok("Shell");
    800e:	66 83 c4 10          	add    $0x10,%sp
    8012:	66 b8 e8 aa          	mov    $0xaae8,%ax
    8016:	00 00                	add    %al,(%eax)
    8018:	66 e8 56 fe          	callw  7e72 <func_01+0x13>
    801c:	ff                   	(bad)  
    801d:	ff 66 ff             	jmp    *-0x1(%esi)
    printf("%s\n", str);
    8020:	36 d0 aa 66 68 9d ab 	shrb   %ss:-0x5462979a(%edx)
    8027:	00 00                	add    %al,(%eax)
    8029:	66 e8 7b 0c          	callw  8ca8 <_Z7sprintfPcPKcz+0x1e>
    802d:	00 00                	add    %al,(%eax)
    sh1.run();
    802f:	66 58                	pop    %ax
    8031:	66 5a                	pop    %dx
    8033:	66 53                	push   %bx
    8035:	66 e8 69 11          	callw  91a2 <_ZN2sh16read_prog_recordEv+0x13c>
    8039:	00 00                	add    %al,(%eax)
    803b:	66 90                	xchg   %ax,%ax
    803d:	66 90                	xchg   %ax,%ax
    803f:	90                   	nop

00008040 <sys_bios_print_string>:
    8040:	55                   	push   %ebp
    8041:	89 e5                	mov    %esp,%ebp
    8043:	8b 4e 0a             	mov    0xa(%esi),%ecx
    8046:	8b 5e 0e             	mov    0xe(%esi),%ebx
    8049:	b7 00                	mov    $0x0,%bh
    804b:	8b 56 12             	mov    0x12(%esi),%edx
    804e:	8c d8                	mov    %ds,%eax
    8050:	8e c0                	mov    %eax,%es
    8052:	b8 01 13 8e ed       	mov    $0xed8e1301,%eax
    8057:	8b 6e 06             	mov    0x6(%esi),%ebp
    805a:	cd 10                	int    $0x10
    805c:	8c ed                	mov    %gs,%ebp
    805e:	5d                   	pop    %ebp
    805f:	c3                   	ret    

00008060 <sys_bios_clear_screen>:
    8060:	60                   	pusha  
    8061:	b4 06                	mov    $0x6,%ah
    8063:	b0 00                	mov    $0x0,%al
    8065:	b7 07                	mov    $0x7,%bh
    8067:	b5 00                	mov    $0x0,%ch
    8069:	b1 00                	mov    $0x0,%cl
    806b:	b6 18                	mov    $0x18,%dh
    806d:	b2 4f                	mov    $0x4f,%dl
    806f:	cd 10                	int    $0x10
    8071:	61                   	popa   
    8072:	c3                   	ret    

00008073 <sys_bios_getchar>:
    8073:	b4 00                	mov    $0x0,%ah
    8075:	cd 16                	int    $0x16
    8077:	b4 00                	mov    $0x0,%ah
    8079:	c3                   	ret    

0000807a <sys_execve_bin>:
    807a:	55                   	push   %ebp
    807b:	89 e5                	mov    %esp,%ebp
    807d:	60                   	pusha  
    807e:	1e                   	push   %ds
    807f:	06                   	push   %es
    8080:	b8 00 10 8e d8       	mov    $0xd88e1000,%eax
    8085:	8e c0                	mov    %eax,%es
    8087:	8e d0                	mov    %eax,%ss
    8089:	c7 06 00 a0 cd 00    	movl   $0xcda000,(%esi)
    808f:	c7 06 02 a0 20 00    	movl   $0x20a002,(%esi)
    8095:	c7 06 0a a0 a4 80    	movl   $0x80a4a00a,(%esi)
    809b:	8c 0e                	mov    %cs,(%esi)
    809d:	0c a0                	or     $0xa0,%al
    809f:	ea                   	.byte 0xea
    80a0:	00                   	.byte 0x0
    80a1:	a1                   	.byte 0xa1
    80a2:	00 10                	add    %dl,(%eax)

000080a4 <return_point>:
    80a4:	b8 00 00 8e d0       	mov    $0xd08e0000,%eax
    80a9:	58                   	pop    %eax
    80aa:	8e c0                	mov    %eax,%es
    80ac:	58                   	pop    %eax
    80ad:	8e d8                	mov    %eax,%ds
    80af:	61                   	popa   
    80b0:	5d                   	pop    %ebp
    80b1:	c3                   	ret    

000080b2 <sys_bios_print_int>:
#include "sys_lib.h"
void sys_bios_print_int(int num, int color, int pos)
{
    80b2:	66 55                	push   %bp
    80b4:	66 89 e5             	mov    %sp,%bp
    80b7:	66 57                	push   %di
    80b9:	66 56                	push   %si
    80bb:	66 53                	push   %bx
    80bd:	66 50                	push   %ax
    int num_ = num;
    80bf:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    80c4:	66 b9 01 00          	mov    $0x1,%cx
    80c8:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    80ca:	66 bb 0a 00          	mov    $0xa,%bx
    80ce:	00 00                	add    %al,(%eax)
    80d0:	66 99                	cwtd   
    80d2:	66 f7 fb             	idiv   %bx
    80d5:	66 85 c0             	test   %ax,%ax
    80d8:	74 04                	je     80de <sys_bios_print_int+0x2c>
    80da:	66 41                	inc    %cx
    80dc:	eb f2                	jmp    80d0 <sys_bios_print_int+0x1e>
    char arr[len + 1];
    80de:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    80e3:	66 83 e0 fc          	and    $0xfffc,%ax
    80e7:	66 29 c4             	sub    %ax,%sp
    80ea:	66 89 e7             	mov    %sp,%di
    80ed:	67 66 8d 1c          	lea    (%si),%bx
    80f1:	0c 67                	or     $0x67,%al
    int power = 1;
    80f3:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    80f9:	00 00                	add    %al,(%eax)
    for(int i = 0; i < len; ++i, power *= 10)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    80fb:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8100:	66 99                	cwtd   
    8102:	67 66 f7 7d f0       	idivw  -0x10(%di)
    8107:	66 be 0a 00          	mov    $0xa,%si
    810b:	00 00                	add    %al,(%eax)
    810d:	66 99                	cwtd   
    810f:	66 f7 fe             	idiv   %si
    8112:	66 83 c2 30          	add    $0x30,%dx
    8116:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    811a:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    8120:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8125:	66 4b                	dec    %bx
    8127:	66 39 df             	cmp    %bx,%di
    812a:	75 cf                	jne    80fb <sys_bios_print_int+0x49>
    arr[len] = '\0';
    812c:	67 c6 04 0f          	movb   $0xf,(%si)
    8130:	00 67 66             	add    %ah,0x66(%edi)
    sys_bios_print_string(arr, len, color, pos);
    8133:	ff 75 10             	pushl  0x10(%ebp)
    8136:	67 66 ff 75 0c       	pushw  0xc(%di)
    813b:	66 51                	push   %cx
    813d:	66 57                	push   %di
    813f:	66 e8 fb fe          	callw  803e <kernel_main+0xe1>
    8143:	ff                   	(bad)  
    8144:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8147:	c4 10                	les    (%eax),%edx
    8149:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    814e:	66 5b                	pop    %bx
    8150:	66 5e                	pop    %si
    8152:	66 5f                	pop    %di
    8154:	66 5d                	pop    %bp
    8156:	66 c3                	retw   

00008158 <sys_putchar>:
    //"mov word ptr gs:[bp],ax\n\t"
                   //".att_syntax noprefix\n\t");
//}

void sys_putchar(int c, int color, int x, int y)
{
    8158:	66 55                	push   %bp
    815a:	66 89 e5             	mov    %sp,%bp
    815d:	66 53                	push   %bx
    int offset = (x * 80 + y)*2;
    uint16_t ch = c | (color << 8);
    815f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8164:	66 c1 e0 08          	shl    $0x8,%ax
    8168:	67 66 0b 45 08       	or     0x8(%di),%ax
    int offset = (x * 80 + y)*2;
    816d:	67 66 6b 5d 10 50    	imul   $0x50,0x10(%di),%bx
    8173:	67 66 03 5d 14       	add    0x14(%di),%bx
    8178:	66 01 db             	add    %bx,%bx
    "mov word ptr gs:[bp],ax\n\t"
    "popa\n\t"
    ".att_syntax noprefix\n\t"
    :
    :"a"(ch),"b"(offset)
    :"%ecx");
    817b:	66 60                	pushaw 
    817d:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    8182:	89 dd                	mov    %ebx,%ebp
    8184:	65 89 46 00          	mov    %eax,%gs:0x0(%esi)
    8188:	66 61                	popaw  
}
    818a:	66 5b                	pop    %bx
    818c:	66 5d                	pop    %bp
    818e:	66 c3                	retw   

00008190 <sys_print_string>:
{
    8190:	66 55                	push   %bp
    8192:	66 89 e5             	mov    %sp,%bp
    8195:	66 56                	push   %si
    8197:	66 53                	push   %bx
    8199:	67 66 8b 5d 14       	mov    0x14(%di),%bx
    819e:	67 66 8b 75 0c       	mov    0xc(%di),%si
    81a3:	66 01 de             	add    %bx,%si
    81a6:	66 89 da             	mov    %bx,%dx
    for(unsigned int i = 0; i < len; ++i)
    81a9:	66 39 f2             	cmp    %si,%dx
    81ac:	74 28                	je     81d6 <sys_print_string+0x46>
        sys_putchar(str[i], color, x, y + i);
    81ae:	66 52                	push   %dx
    81b0:	67 66 ff 75 10       	pushw  0x10(%di)
    81b5:	66 6a 07             	pushw  $0x7
    81b8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    81bd:	66 29 d8             	sub    %bx,%ax
    81c0:	67 66 0f be 04       	movsbw (%si),%ax
    81c5:	10 66 50             	adc    %ah,0x50(%esi)
    81c8:	66 e8 8a ff          	callw  8156 <sys_bios_print_int+0xa4>
    81cc:	ff                   	(bad)  
    81cd:	ff 66 42             	jmp    *0x42(%esi)
    for(unsigned int i = 0; i < len; ++i)
    81d0:	66 83 c4 10          	add    $0x10,%sp
    81d4:	eb d3                	jmp    81a9 <sys_print_string+0x19>
}
    81d6:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    81db:	66 5b                	pop    %bx
    81dd:	66 5e                	pop    %si
    81df:	66 5d                	pop    %bp
    81e1:	66 c3                	retw   

000081e3 <sys_print_int>:
{
    81e3:	66 55                	push   %bp
    81e5:	66 89 e5             	mov    %sp,%bp
    81e8:	66 57                	push   %di
    81ea:	66 56                	push   %si
    81ec:	66 53                	push   %bx
    81ee:	66 50                	push   %ax
    int num_ = num;
    81f0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    81f5:	66 b9 01 00          	mov    $0x1,%cx
    81f9:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    81fb:	66 bb 0a 00          	mov    $0xa,%bx
    81ff:	00 00                	add    %al,(%eax)
    8201:	66 99                	cwtd   
    8203:	66 f7 fb             	idiv   %bx
    8206:	66 85 c0             	test   %ax,%ax
    8209:	74 04                	je     820f <sys_print_int+0x2c>
    820b:	66 41                	inc    %cx
    820d:	eb f2                	jmp    8201 <sys_print_int+0x1e>
    char arr[len + 1];
    820f:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    8214:	66 83 e0 fc          	and    $0xfffc,%ax
    8218:	66 29 c4             	sub    %ax,%sp
    821b:	66 89 e7             	mov    %sp,%di
    821e:	67 66 8d 1c          	lea    (%si),%bx
    8222:	0c 67                	or     $0x67,%al
    int power = 1;
    8224:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    822a:	00 00                	add    %al,(%eax)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    822c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8231:	66 99                	cwtd   
    8233:	67 66 f7 7d f0       	idivw  -0x10(%di)
    8238:	66 be 0a 00          	mov    $0xa,%si
    823c:	00 00                	add    %al,(%eax)
    823e:	66 99                	cwtd   
    8240:	66 f7 fe             	idiv   %si
    8243:	66 83 c2 30          	add    $0x30,%dx
    8247:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    824b:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    8251:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8256:	66 4b                	dec    %bx
    8258:	66 39 df             	cmp    %bx,%di
    825b:	75 cf                	jne    822c <sys_print_int+0x49>
    arr[len] = '\0';
    825d:	67 c6 04 0f          	movb   $0xf,(%si)
    8261:	00 67 66             	add    %ah,0x66(%edi)
    sys_print_string(arr, len, x, y); 
    8264:	ff 75 10             	pushl  0x10(%ebp)
    8267:	67 66 ff 75 0c       	pushw  0xc(%di)
    826c:	66 51                	push   %cx
    826e:	66 57                	push   %di
    8270:	66 e8 1a ff          	callw  818e <sys_putchar+0x36>
    8274:	ff                   	(bad)  
    8275:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8278:	c4 10                	les    (%eax),%edx
    827a:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    827f:	66 5b                	pop    %bx
    8281:	66 5e                	pop    %si
    8283:	66 5f                	pop    %di
    8285:	66 5d                	pop    %bp
    8287:	66 c3                	retw   

00008289 <sys_bios_scroll_up>:

void sys_bios_scroll_up(int color)
{
    8289:	66 55                	push   %bp
    828b:	66 89 e5             	mov    %sp,%bp
    "movb $79, %%dl\n\t"
    "movb $0x06, %%ah\n\t"
    "int $0x10\n\t"
    "popa\n\t"
    :
    : "g"(color));
    828e:	66 60                	pushaw 
    8290:	b0 01                	mov    $0x1,%al
    8292:	67 8a 7d 08          	mov    0x8(%di),%bh
    8296:	b5 00                	mov    $0x0,%ch
    8298:	b1 00                	mov    $0x0,%cl
    829a:	b6 18                	mov    $0x18,%dh
    829c:	b2 4f                	mov    $0x4f,%dl
    829e:	b4 06                	mov    $0x6,%ah
    82a0:	cd 10                	int    $0x10
    82a2:	66 61                	popaw  
}
    82a4:	66 5d                	pop    %bp
    82a6:	66 c3                	retw   

000082a8 <sys_bios_putchar>:

void sys_bios_putchar(char c, int color, int x, int y)
{
    82a8:	66 55                	push   %bp
    82aa:	66 89 e5             	mov    %sp,%bp
    82ad:	66 50                	push   %ax
    82af:	67 66 8b 45 08       	mov    0x8(%di),%ax
    82b4:	67 88 45 fc          	mov    %al,-0x4(%di)
    sys_bios_print_string(&c, 1, color, MAKE_POS(x, y));
    82b8:	67 66 8b 45 10       	mov    0x10(%di),%ax
    82bd:	66 c1 e0 08          	shl    $0x8,%ax
    82c1:	67 66 0f b6 55 14    	movzbw 0x14(%di),%dx
    82c7:	66 09 d0             	or     %dx,%ax
    82ca:	66 50                	push   %ax
    82cc:	67 66 ff 75 0c       	pushw  0xc(%di)
    82d1:	66 6a 01             	pushw  $0x1
    82d4:	67 66 8d 45 fc       	lea    -0x4(%di),%ax
    82d9:	66 50                	push   %ax
    82db:	66 e8 5f fd          	callw  803e <kernel_main+0xe1>
    82df:	ff                   	(bad)  
    82e0:	ff 66 83             	jmp    *-0x7d(%esi)
}
    82e3:	c4 10                	les    (%eax),%edx
    82e5:	66 c9                	leavew 
    82e7:	66 c3                	retw   

000082e9 <sys_inb>:

uint8_t sys_inb(uint16_t port)
{
    82e9:	66 55                	push   %bp
    82eb:	66 89 e5             	mov    %sp,%bp
    uint8_t ret;
    asm volatile ( "inb %1, %0"
                   : "=a"(ret)
                   : "Nd"(port) );
    82ee:	67 66 8b 55 08       	mov    0x8(%di),%dx
    82f3:	ec                   	in     (%dx),%al
    return ret;
}
    82f4:	66 5d                	pop    %bp
    82f6:	66 c3                	retw   

000082f8 <sys_outb>:
//    asm(".att_syntax noprefix\n");
//    return ret;
//}

void sys_outb(uint16_t port, uint8_t data)
{
    82f8:	66 55                	push   %bp
    82fa:	66 89 e5             	mov    %sp,%bp
    asm volatile ( "outb %0, %1"
                   : 
                   : "a"(data), "Nd"(port) );
    82fd:	67 66 8b 55 08       	mov    0x8(%di),%dx
    8302:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8307:	ee                   	out    %al,(%dx)
}
    8308:	66 5d                	pop    %bp
    830a:	66 c3                	retw   

0000830c <sys_dbg_bochs_putc>:
//                    : "=a"(ret)
//                    : "Nd"(port) );
//     return ret;
// }

void sys_dbg_bochs_putc(char c){
    830c:	66 55                	push   %bp
    830e:	66 89 e5             	mov    %sp,%bp
                   : "a"(data), "Nd"(port) );
    8311:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8316:	e6 e9                	out    %al,$0xe9
    sys_outb(0xe9, (uint8_t)c);
}
    8318:	66 5d                	pop    %bp
    831a:	66 c3                	retw   

0000831c <sys_get_scancode>:

char sys_get_scancode()
{
    831c:	66 55                	push   %bp
    831e:	66 89 e5             	mov    %sp,%bp
                   : "Nd"(port) );
    8321:	e4 64                	in     $0x64,%al
    while (!(sys_inb(0x64) & 1));
    8323:	a8 01                	test   $0x1,%al
    8325:	74 fa                	je     8321 <sys_get_scancode+0x5>
                   : "Nd"(port) );
    8327:	e4 60                	in     $0x60,%al
    return sys_inb(0x60);
}
    8329:	66 5d                	pop    %bp
    832b:	66 c3                	retw   

0000832d <sys_read_disk>:

void sys_read_disk(uint32_t segment, uint32_t address, uint16_t logical_start_sector, uint8_t secotr_cnt)
{
    832d:	66 55                	push   %bp
    832f:	66 89 e5             	mov    %sp,%bp
    8332:	66 53                	push   %bx
    uint8_t head = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) / FLOPPY_SECTOR_PER_TRACK;
    8334:	67 66 0f b7 45 10    	movzww 0x10(%di),%ax
    833a:	66 b9 24 00          	mov    $0x24,%cx
    833e:	00 00                	add    %al,(%eax)
    8340:	66 99                	cwtd   
    8342:	66 f7 f9             	idiv   %cx
    8345:	66 89 c1             	mov    %ax,%cx
    8348:	66 bb 12 00          	mov    $0x12,%bx
    834c:	00 00                	add    %al,(%eax)
    834e:	66 89 d0             	mov    %dx,%ax
    8351:	66 99                	cwtd   
    8353:	66 f7 fb             	idiv   %bx
    uint16_t cylinder = logical_start_sector / (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK);
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    //位操作一定要注意类型匹配（两小时）
    uint16_t mask1 = 255;
    uint16_t mask2 = 768;
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    8356:	66 89 cb             	mov    %cx,%bx
    8359:	66 c1 e3 08          	shl    $0x8,%bx
    835d:	66 81 e1 00 03       	and    $0x300,%cx
    8362:	00 00                	add    %al,(%eax)
    8364:	66 c1 f9 02          	sar    $0x2,%cx
    8368:	66 09 d9             	or     %bx,%cx
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    836b:	66 42                	inc    %dx
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    836d:	66 09 d1             	or     %dx,%cx
     "movb %4, %%al\n\t"    //扇区数
     "movb $0, %%dl\n\t"    //驱动器号
     "movb $2, %%ah\n\t"    //功能号
     "int $0x13\n\t"
     "pop %%es\n\t"
     : :"g"(segment), "g"(address), "g"(head), "g"(_cx), "g" (secotr_cnt));
    8370:	06                   	push   %es
    8371:	67 8b 5d 08          	mov    0x8(%di),%ebx
    8375:	8e c3                	mov    %ebx,%es
    8377:	67 8b 5d 0c          	mov    0xc(%di),%ebx
    837b:	88 c6                	mov    %al,%dh
    837d:	89 c9                	mov    %ecx,%ecx
    837f:	67 8a 45 14          	mov    0x14(%di),%al
    8383:	b2 00                	mov    $0x0,%dl
    8385:	b4 02                	mov    $0x2,%ah
    8387:	cd 13                	int    $0x13
    8389:	07                   	pop    %es
}
    838a:	66 5b                	pop    %bx
    838c:	66 5d                	pop    %bp
    838e:	66 c3                	retw   

00008390 <_Z6memcmpPKvS0_m>:
namespace hhlibc {

#endif

int memcmp(const void * _s1, const void* _s2, size_t n)
{
    8390:	66 55                	push   %bp
    8392:	66 89 e5             	mov    %sp,%bp
    8395:	66 31 d2             	xor    %dx,%dx
    auto s1 = reinterpret_cast<const unsigned char*>(_s1);
    auto s2 = reinterpret_cast<const unsigned char*>(_s2);
    while(n--)
    8398:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    839d:	74 22                	je     83c1 <_Z6memcmpPKvS0_m+0x31>
    {
        if(*s1 != *s2)          //**不能**让!=时跳出然后返回*s1 - *s2
    839f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    83a4:	67 66 0f b6 04       	movzbw (%si),%ax
    83a9:	10 66 42             	adc    %ah,0x42(%esi)
    83ac:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    83b1:	67 66 0f b6 4c 11    	movzbw 0x11(%si),%cx
    83b7:	ff                   	(bad)  
    83b8:	38 c8                	cmp    %cl,%al
    83ba:	74 dc                	je     8398 <_Z6memcmpPKvS0_m+0x8>
        {                       //因为那样在实际上==的时候，会比较错误
            return *s1 - *s2;
    83bc:	66 29 c8             	sub    %cx,%ax
    83bf:	eb 03                	jmp    83c4 <_Z6memcmpPKvS0_m+0x34>
        }
        ++s1;
        ++s2;
    }
    return 0;
    83c1:	66 31 c0             	xor    %ax,%ax
}
    83c4:	66 5d                	pop    %bp
    83c6:	66 c3                	retw   

000083c8 <_Z6memcpyPvPKvm>:

void* memcpy(void* _dst, const void* _src, size_t n)
{
    83c8:	66 55                	push   %bp
    83ca:	66 89 e5             	mov    %sp,%bp
    83cd:	66 53                	push   %bx
    83cf:	67 66 8b 45 08       	mov    0x8(%di),%ax
    83d4:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    83d9:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    while (n--)
    83dc:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    83e1:	74 0c                	je     83ef <_Z6memcpyPvPKvm+0x27>
    {
        *(dst++) = *(src++);
    83e3:	67 8a 0c             	mov    (%si),%cl
    83e6:	13 67 88             	adc    -0x78(%edi),%esp
    83e9:	0c 10                	or     $0x10,%al
    83eb:	66 42                	inc    %dx
    while (n--)
    83ed:	eb ed                	jmp    83dc <_Z6memcpyPvPKvm+0x14>
    }
    return _dst;
}
    83ef:	66 5b                	pop    %bx
    83f1:	66 5d                	pop    %bp
    83f3:	66 c3                	retw   

000083f5 <_Z7memmovePvPKvm>:
void* memmove(void* _dst, const void* _src, size_t n)
{
    83f5:	66 55                	push   %bp
    83f7:	66 89 e5             	mov    %sp,%bp
    83fa:	66 56                	push   %si
    83fc:	66 53                	push   %bx
    83fe:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8403:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    8408:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    if(dst < src)
    840d:	66 39 d8             	cmp    %bx,%ax
    8410:	73 14                	jae    8426 <_Z7memmovePvPKvm+0x31>
    8412:	66 31 c9             	xor    %cx,%cx
    {
        while(n--)
    8415:	66 39 f1             	cmp    %si,%cx
    8418:	74 20                	je     843a <_Z7memmovePvPKvm+0x45>
        {
            *(dst++) = *(src++);
    841a:	67 8a 14             	mov    (%si),%dl
    841d:	0b 67 88             	or     -0x78(%edi),%esp
    8420:	14 08                	adc    $0x8,%al
    8422:	66 41                	inc    %cx
        while(n--)
    8424:	eb ef                	jmp    8415 <_Z7memmovePvPKvm+0x20>
        }
    }
    else if(dst > src)
    8426:	76 12                	jbe    843a <_Z7memmovePvPKvm+0x45>
    {
        src += n;
        dst += n;
        while(n--)
    8428:	66 4e                	dec    %si
    842a:	66 83 fe ff          	cmp    $0xffff,%si
    842e:	74 0a                	je     843a <_Z7memmovePvPKvm+0x45>
        {
            *(--dst) = *(--src);
    8430:	67 8a 0c             	mov    (%si),%cl
    8433:	33 67 88             	xor    -0x78(%edi),%esp
    8436:	0c 30                	or     $0x30,%al
        while(n--)
    8438:	eb ee                	jmp    8428 <_Z7memmovePvPKvm+0x33>
        }
    }
    return _dst;
}
    843a:	66 5b                	pop    %bx
    843c:	66 5e                	pop    %si
    843e:	66 5d                	pop    %bp
    8440:	66 c3                	retw   

00008442 <_Z6memsetPvim>:
void* memset(void* _dst, int c, size_t n)
{
    8442:	66 55                	push   %bp
    8444:	66 89 e5             	mov    %sp,%bp
    8447:	67 66 8b 45 08       	mov    0x8(%di),%ax
    844c:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    8451:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    while(n--)
    8454:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    8459:	74 08                	je     8463 <_Z6memsetPvim+0x21>
    {
        *(dst++) = static_cast<unsigned char>(c);
    845b:	67 88 0c             	mov    %cl,(%si)
    845e:	10 66 42             	adc    %ah,0x42(%esi)
    while(n--)
    8461:	eb f1                	jmp    8454 <_Z6memsetPvim+0x12>
    }
    return _dst;
}
    8463:	66 5d                	pop    %bp
    8465:	66 c3                	retw   

00008467 <_Z6strlenPKc>:
size_t strlen(const char* _str)
{
    8467:	66 55                	push   %bp
    8469:	66 89 e5             	mov    %sp,%bp
    846c:	67 66 8b 55 08       	mov    0x8(%di),%dx
    auto str = _str;
    size_t len = 0;
    8471:	66 31 c0             	xor    %ax,%ax
    while(*(_str++))
    8474:	67 80 3c 02          	cmpb   $0x2,(%si)
    8478:	00 74 04 66          	add    %dh,0x66(%esp,%eax,1)
    {
        len++;
    847c:	40                   	inc    %eax
    while(*(_str++))
    847d:	eb f5                	jmp    8474 <_Z6strlenPKc+0xd>
    }
    return len;
}
    847f:	66 5d                	pop    %bp
    8481:	66 c3                	retw   

00008483 <_Z6strcpyPcPKc>:
char *strcpy(char* _dst, const char* _src)
{
    8483:	66 55                	push   %bp
    8485:	66 89 e5             	mov    %sp,%bp
    8488:	66 56                	push   %si
    848a:	66 53                	push   %bx
    848c:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8491:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    auto len = strlen(_src);
    8496:	66 51                	push   %cx
    8498:	66 e8 c9 ff          	callw  8465 <_Z6memsetPvim+0x23>
    849c:	ff                   	(bad)  
    849d:	ff 66 89             	jmp    *-0x77(%esi)
    84a0:	c6                   	(bad)  
    memcpy(reinterpret_cast<void*>(_dst), reinterpret_cast<const void *>(_src), len);
    84a1:	67 66 89 04          	mov    %ax,(%si)
    84a5:	24 66                	and    $0x66,%al
    84a7:	51                   	push   %ecx
    84a8:	66 53                	push   %bx
    84aa:	66 e8 18 ff          	callw  83c6 <_Z6memcmpPKvS0_m+0x36>
    84ae:	ff                   	(bad)  
    84af:	ff 67 c6             	jmp    *-0x3a(%edi)
    _dst[len] = '\0';
    84b2:	04 33                	add    $0x33,%al
    84b4:	00 66 89             	add    %ah,-0x77(%esi)
    return _dst;
}
    84b7:	d8 67 66             	fsubs  0x66(%edi)
    84ba:	8d 65 f8             	lea    -0x8(%ebp),%esp
    84bd:	66 5b                	pop    %bx
    84bf:	66 5e                	pop    %si
    84c1:	66 5d                	pop    %bp
    84c3:	66 c3                	retw   

000084c5 <_Z6strcmpPKcS0_>:
int strcmp(const char* _s1, const char* _s2)
{
    84c5:	66 55                	push   %bp
    84c7:	66 89 e5             	mov    %sp,%bp
    84ca:	66 57                	push   %di
    84cc:	66 56                	push   %si
    84ce:	66 53                	push   %bx
    84d0:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    84d5:	67 66 8b 7d 0c       	mov    0xc(%di),%di
    auto len1 = strlen(_s1);
    84da:	66 51                	push   %cx
    84dc:	66 e8 85 ff          	callw  8465 <_Z6memsetPvim+0x23>
    84e0:	ff                   	(bad)  
    84e1:	ff 66 89             	jmp    *-0x77(%esi)
    84e4:	c3                   	ret    
    auto len2 = strlen(_s2);
    84e5:	67 66 89 3c          	mov    %di,(%si)
    84e9:	24 66                	and    $0x66,%al
    84eb:	e8 77 ff ff ff       	call   8467 <_Z6strlenPKc>
    84f0:	66 5a                	pop    %dx
    84f2:	66 89 c6             	mov    %ax,%si
    auto len = len1 < len2 ? len1 : len2;
    auto ret = memcmp(reinterpret_cast<const void*>(_s1), reinterpret_cast<const void *>(_s2), len);
    84f5:	66 39 c3             	cmp    %ax,%bx
    84f8:	77 03                	ja     84fd <_Z6strcmpPKcS0_+0x38>
    84fa:	66 89 d8             	mov    %bx,%ax
    84fd:	66 50                	push   %ax
    84ff:	66 57                	push   %di
    8501:	66 51                	push   %cx
    8503:	66 e8 87 fe          	callw  838e <sys_read_disk+0x61>
    8507:	ff                   	(bad)  
    8508:	ff 66 83             	jmp    *-0x7d(%esi)
    850b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    if(ret == 0)
    850e:	85 c0                	test   %eax,%eax
    8510:	75 11                	jne    8523 <_Z6strcmpPKcS0_+0x5e>
    {
        if(len1 == len2)
    8512:	66 39 f3             	cmp    %si,%bx
    8515:	74 0c                	je     8523 <_Z6strcmpPKcS0_+0x5e>
        {
            return -1;
        }
        else
        {
            return 1;
    8517:	66 39 de             	cmp    %bx,%si
    851a:	66 19 c0             	sbb    %ax,%ax
    851d:	66 83 e0 02          	and    $0x2,%ax
    8521:	66 48                	dec    %ax
        }
    }
    return ret;
}
    8523:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8528:	66 5b                	pop    %bx
    852a:	66 5e                	pop    %si
    852c:	66 5f                	pop    %di
    852e:	66 5d                	pop    %bp
    8530:	66 c3                	retw   

00008532 <_Z7reversePc>:

void reverse(char* buffer)
{
    8532:	66 55                	push   %bp
    8534:	66 89 e5             	mov    %sp,%bp
    8537:	66 56                	push   %si
    8539:	66 53                	push   %bx
    853b:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    char ch;
    size_t len = strlen(buffer);
    8540:	66 51                	push   %cx
    8542:	66 e8 1f ff          	callw  8465 <_Z6memsetPvim+0x23>
    8546:	ff                   	(bad)  
    8547:	ff 66 5a             	jmp    *0x5a(%esi)
    854a:	66 89 ca             	mov    %cx,%dx
    854d:	67 66 8d 0c          	lea    (%si),%cx
    8551:	01 66 d1             	add    %esp,-0x2f(%esi)
    for(size_t i = 0; i < len / 2; ++i)
    8554:	e8 67 66 8d 34       	call   348debc0 <_GLOBAL_OFFSET_TABLE_+0x348d3fc0>
    8559:	10 66 49             	adc    %ah,0x49(%esi)
    855c:	66 39 f2             	cmp    %si,%dx
    855f:	74 10                	je     8571 <_Z7reversePc+0x3f>
    {
        ch = *(buffer + i);
    8561:	67 8a 1a             	mov    (%bp,%si),%bl
        *(buffer + i) = *(buffer + len - 1 - i);
    8564:	67 8a 01             	mov    (%bx,%di),%al
    8567:	67 88 02             	mov    %al,(%bp,%si)
        *(buffer + len - 1 - i)  = ch;
    856a:	67 88 19             	mov    %bl,(%bx,%di)
    856d:	66 42                	inc    %dx
    for(size_t i = 0; i < len / 2; ++i)
    856f:	eb e9                	jmp    855a <_Z7reversePc+0x28>
    }
}
    8571:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    8576:	66 5b                	pop    %bx
    8578:	66 5e                	pop    %si
    857a:	66 5d                	pop    %bp
    857c:	66 c3                	retw   

0000857e <_Z7isspacei>:
namespace hhlibc {

#endif

int isspace( int ch )
{
    857e:	66 55                	push   %bp
    8580:	66 89 e5             	mov    %sp,%bp
    8583:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return (ch == 9 || ch == 32 || (ch >= 10 && ch <= 13));
    8588:	67 66 8d 42 f7       	lea    -0x9(%bp,%si),%ax
    858d:	66 83 f8 04          	cmp    $0x4,%ax
    8591:	0f 96 c0             	setbe  %al
    8594:	66 83 fa 20          	cmp    $0x20,%dx
    8598:	0f 94 c2             	sete   %dl
    859b:	66 09 d0             	or     %dx,%ax
    859e:	66 0f b6 c0          	movzbw %al,%ax
}
    85a2:	66 5d                	pop    %bp
    85a4:	66 c3                	retw   

000085a6 <_Z7isalnumi>:

int isalnum(int ch)
{
    85a6:	66 55                	push   %bp
    85a8:	66 89 e5             	mov    %sp,%bp
    85ab:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return ((ch >= 48 && ch <= 57) || (ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122));
    85b0:	67 66 8d 4a d0       	lea    -0x30(%bp,%si),%cx
    85b5:	b0 01                	mov    $0x1,%al
    85b7:	66 83 f9 09          	cmp    $0x9,%cx
    85bb:	76 0f                	jbe    85cc <_Z7isalnumi+0x26>
    85bd:	66 83 e2 df          	and    $0xffdf,%dx
    85c1:	66 83 ea 41          	sub    $0x41,%dx
    85c5:	66 83 fa 19          	cmp    $0x19,%dx
    85c9:	0f 96 c0             	setbe  %al
    85cc:	66 0f b6 c0          	movzbw %al,%ax
}
    85d0:	66 5d                	pop    %bp
    85d2:	66 c3                	retw   

000085d4 <_Z7isdigiti>:

int isdigit(int ch)
{
    85d4:	66 55                	push   %bp
    85d6:	66 89 e5             	mov    %sp,%bp
    return (ch >= 48 && ch <= 57);
    85d9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    85de:	66 83 e8 30          	sub    $0x30,%ax
    85e2:	66 83 f8 09          	cmp    $0x9,%ax
    85e6:	0f 96 c0             	setbe  %al
    85e9:	66 0f b6 c0          	movzbw %al,%ax
}
    85ed:	66 5d                	pop    %bp
    85ef:	66 c3                	retw   
    85f1:	90                   	nop

000085f2 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0>:
    if(base == 0 && !auto_detected)
    {
        base = 10;
        auto_detected = true;
    }
    auto char_to_digit = [](auto ch){
    85f2:	66 55                	push   %bp
    85f4:	66 89 e5             	mov    %sp,%bp
    85f7:	66 89 c2             	mov    %ax,%dx
        int digit;
        if(ch >= '0' && ch <= '9')
    85fa:	66 83 e8 30          	sub    $0x30,%ax
    85fe:	3c 09                	cmp    $0x9,%al
    8600:	77 0b                	ja     860d <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x1b>
            digit = ch - '0';
    8602:	66 0f be d2          	movsbw %dl,%dx
    8606:	67 66 8d 42 d0       	lea    -0x30(%bp,%si),%ax
    860b:	eb 2b                	jmp    8638 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='A' && ch <= 'F')
    860d:	67 66 8d 42 bf       	lea    -0x41(%bp,%si),%ax
    8612:	3c 05                	cmp    $0x5,%al
    8614:	77 0b                	ja     8621 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x2f>
            digit = ch - 'A' + 10;
    8616:	66 0f be d2          	movsbw %dl,%dx
    861a:	67 66 8d 42 c9       	lea    -0x37(%bp,%si),%ax
    861f:	eb 17                	jmp    8638 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='a' && ch <= 'f')
    8621:	67 66 8d 4a 9f       	lea    -0x61(%bp,%si),%cx
            digit = ch - 'a' + 10;
        else
            digit = -1;
    8626:	66 83 c8 ff          	or     $0xffff,%ax
        else if(ch >='a' && ch <= 'f')
    862a:	80 f9 05             	cmp    $0x5,%cl
    862d:	77 09                	ja     8638 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
            digit = ch - 'a' + 10;
    862f:	66 0f be d2          	movsbw %dl,%dx
    8633:	67 66 8d 42 a9       	lea    -0x57(%bp,%si),%ax
        return digit;
    };
    8638:	66 5d                	pop    %bp
    863a:	66 c3                	retw   

0000863c <_Z6strtolPKcPPci>:
{
    863c:	66 55                	push   %bp
    863e:	66 89 e5             	mov    %sp,%bp
    8641:	66 57                	push   %di
    8643:	66 56                	push   %si
    8645:	66 53                	push   %bx
    8647:	66 83 ec 0c          	sub    $0xc,%sp
    864b:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto start = str;   
    8650:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    while(isspace(*start))
    8655:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    865a:	66 50                	push   %ax
    865c:	66 e8 1c ff          	callw  857c <_Z7reversePc+0x4a>
    8660:	ff                   	(bad)  
    8661:	ff 66 5f             	jmp    *0x5f(%esi)
    8664:	66 85 c0             	test   %ax,%ax
    8667:	74 04                	je     866d <_Z6strtolPKcPPci+0x31>
        ++start;
    8669:	66 43                	inc    %bx
    while(isspace(*start))
    866b:	eb e8                	jmp    8655 <_Z6strtolPKcPPci+0x19>
    size_t len_num = strlen(start);//非白空格数字串长度
    866d:	66 53                	push   %bx
    866f:	66 e8 f2 fd          	callw  8465 <_Z6memsetPvim+0x23>
    8673:	ff                   	(bad)  
    8674:	ff 66 59             	jmp    *0x59(%esi)
    if(len_num == 0)
    8677:	66 85 c0             	test   %ax,%ax
    867a:	75 1e                	jne    869a <_Z6strtolPKcPPci+0x5e>
        return 0;
    867c:	66 31 c0             	xor    %ax,%ax
        if(str_end) *str_end = const_cast<char*>(str);
    867f:	67 66 83 7d 0c 00    	cmpw   $0x0,0xc(%di)
    8685:	0f 84 4d 01 67 66    	je     666787d8 <_GLOBAL_OFFSET_TABLE_+0x6666dbd8>
    868b:	8b 7d 0c             	mov    0xc(%ebp),%edi
    868e:	67 66 8b 75 08       	mov    0x8(%di),%si
    8693:	67 66 89 37          	mov    %si,(%bx)
    8697:	e9 3c 01 67 8a       	jmp    8a6787d8 <_GLOBAL_OFFSET_TABLE_+0x8a66dbd8>
    if(*high == '+' || *high == '-')
    869c:	13 80 fa 2b 74 10    	adc    0x10742bfa(%eax),%eax
    86a2:	80 fa 2d             	cmp    $0x2d,%dl
    86a5:	75 21                	jne    86c8 <_Z6strtolPKcPPci+0x8c>
        sign = (*high == '+') ? 1 : -1;
    86a7:	67 66 c7 45 f0 ff ff 	movw   $0xffff,-0x10(%di)
    86ae:	ff                   	(bad)  
    86af:	ff                   	(bad)  
    86b0:	eb 09                	jmp    86bb <_Z6strtolPKcPPci+0x7f>
    86b2:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    86b9:	00 00                	add    %al,(%eax)
        ++high;
    86bb:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
        sign_char_bit = 1;
    86c0:	66 ba 01 00          	mov    $0x1,%dx
    86c4:	00 00                	add    %al,(%eax)
    86c6:	eb 0f                	jmp    86d7 <_Z6strtolPKcPPci+0x9b>
    86c8:	66 89 df             	mov    %bx,%di
    size_t sign_char_bit = 0;
    86cb:	66 31 d2             	xor    %dx,%dx
    int sign = 1;
    86ce:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    86d5:	00 00                	add    %al,(%eax)
    if(base == 16 || (base == 0 && !auto_detected))
    86d7:	66 f7 c6 ef ff       	test   $0xffef,%si
    86dc:	ff                   	(bad)  
    86dd:	ff 75 29             	pushl  0x29(%ebp)
        if(len_num > 1 + sign_char_bit && 
    86e0:	67 66 8d 4a 01       	lea    0x1(%bp,%si),%cx
    86e5:	66 39 c1             	cmp    %ax,%cx
    86e8:	73 1f                	jae    8709 <_Z6strtolPKcPPci+0xcd>
    86ea:	67 80 3f 30          	cmpb   $0x30,(%bx)
    86ee:	75 19                	jne    8709 <_Z6strtolPKcPPci+0xcd>
           (*(high + 1) == 'x' || *(high + 1) == 'X'))
    86f0:	67 8a 4f 01          	mov    0x1(%bx),%cl
    86f4:	66 83 e1 df          	and    $0xffdf,%cx
    86f8:	80 f9 58             	cmp    $0x58,%cl
    86fb:	75 0c                	jne    8709 <_Z6strtolPKcPPci+0xcd>
             high += 2;
    86fd:	66 83 c7 02          	add    $0x2,%di
             base = 16;
    8701:	66 be 10 00          	mov    $0x10,%si
    8705:	00 00                	add    %al,(%eax)
    8707:	eb 2b                	jmp    8734 <_Z6strtolPKcPPci+0xf8>
    if(base == 8 || (base == 0 && !auto_detected))
    8709:	66 83 fe 08          	cmp    $0x8,%si
    870d:	74 05                	je     8714 <_Z6strtolPKcPPci+0xd8>
    870f:	66 85 f6             	test   %si,%si
    8712:	75 20                	jne    8734 <_Z6strtolPKcPPci+0xf8>
        if(len_num > sign_char_bit && *high == 0)   //存在八进制前缀0
    8714:	66 39 c2             	cmp    %ax,%dx
    8717:	73 10                	jae    8729 <_Z6strtolPKcPPci+0xed>
    8719:	67 80 3f 00          	cmpb   $0x0,(%bx)
    871d:	75 0a                	jne    8729 <_Z6strtolPKcPPci+0xed>
            high += 1;
    871f:	66 47                	inc    %di
            base = 8;
    8721:	66 be 08 00          	mov    $0x8,%si
    8725:	00 00                	add    %al,(%eax)
    8727:	eb 0b                	jmp    8734 <_Z6strtolPKcPPci+0xf8>
    if(base == 0 && !auto_detected)
    8729:	66 85 f6             	test   %si,%si
    872c:	75 06                	jne    8734 <_Z6strtolPKcPPci+0xf8>
        base = 10;
    872e:	66 be 0a 00          	mov    $0xa,%si
    8732:	00 00                	add    %al,(%eax)
    bool has_vaild_char = false;
    8734:	67 c6 45 ec 00       	movb   $0x0,-0x14(%di)
    auto low = start;   
    //使low指向数字低位后的一个位置
    while(!isspace(*low) &&             //判断是否是白空格
    8739:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    873e:	66 50                	push   %ax
    8740:	66 e8 38 fe          	callw  857c <_Z7reversePc+0x4a>
    8744:	ff                   	(bad)  
    8745:	ff 66 5a             	jmp    *0x5a(%esi)
          (*low != '\0') &&             //判断是否字符串结束
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    8748:	66 85 c0             	test   %ax,%ax
    874b:	75 28                	jne    8775 <_Z6strtolPKcPPci+0x139>
          (*low != '\0') &&             //判断是否字符串结束
    874d:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    while(!isspace(*low) &&             //判断是否是白空格
    8752:	84 c0                	test   %al,%al
    8754:	74 1f                	je     8775 <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    8756:	66 e8 96 fe          	callw  85f0 <_Z7isdigiti+0x1c>
    875a:	ff                   	(bad)  
    875b:	ff 66 83             	jmp    *-0x7d(%esi)
          (*low != '\0') &&             //判断是否字符串结束
    875e:	f8                   	clc    
    875f:	ff 0f                	decl   (%edi)
    8761:	95                   	xchg   %eax,%ebp
    8762:	c2 66 39             	ret    $0x3966
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    8765:	f0 0f 9c c0          	lock setl %al
    8769:	20 c2                	and    %al,%dl
    876b:	74 08                	je     8775 <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) < base    //判断是否是该进制
          )
    {
        ++low;
    876d:	66 43                	inc    %bx
        has_vaild_char = true;
    876f:	67 88 55 ec          	mov    %dl,-0x14(%di)
    while(!isspace(*low) &&             //判断是否是白空格
    8773:	eb c4                	jmp    8739 <_Z6strtolPKcPPci+0xfd>
    }
    if(!has_vaild_char)
    8775:	67 80 7d ec 00       	cmpb   $0x0,-0x14(%di)
    877a:	0f 84 fe fe 67 66    	je     6668867e <_GLOBAL_OFFSET_TABLE_+0x6667da7e>
        if (str_end) *str_end = const_cast<char*>(str);
        return 0;
    }
    long power = 1;
    long ret = 0;
    if(str_end) *str_end = const_cast<char*>(low);
    8780:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
    8784:	74 09                	je     878f <_Z6strtolPKcPPci+0x153>
    8786:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    878b:	67 66 89 18          	mov    %bx,(%bx,%si)
    for(auto p = low - 1; p >= high; --p)
    878f:	66 4b                	dec    %bx
    long ret = 0;
    8791:	66 31 c9             	xor    %cx,%cx
    long power = 1;
    8794:	66 ba 01 00          	mov    $0x1,%dx
    8798:	00 00                	add    %al,(%eax)
    879a:	67 66 89 55 e8       	mov    %dx,-0x18(%di)
    for(auto p = low - 1; p >= high; --p)
    879f:	66 39 fb             	cmp    %di,%bx
    87a2:	72 29                	jb     87cd <_Z6strtolPKcPPci+0x191>
    87a4:	67 66 89 4d ec       	mov    %cx,-0x14(%di)
    {
        int digit = char_to_digit(*p);
    87a9:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    87ae:	66 e8 3e fe          	callw  85f0 <_Z7isdigiti+0x1c>
    87b2:	ff                   	(bad)  
    87b3:	ff 67 66             	jmp    *0x66(%edi)
        ret += power * digit;
    87b6:	8b 55 e8             	mov    -0x18(%ebp),%edx
    87b9:	66 0f af c2          	imul   %dx,%ax
    87bd:	67 66 8b 4d ec       	mov    -0x14(%di),%cx
    87c2:	66 01 c1             	add    %ax,%cx
        
        power *= base;
    87c5:	66 0f af d6          	imul   %si,%dx
    for(auto p = low - 1; p >= high; --p)
    87c9:	66 4b                	dec    %bx
    87cb:	eb cd                	jmp    879a <_Z6strtolPKcPPci+0x15e>
    }
    ret *= sign;
    87cd:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    87d2:	66 0f af c1          	imul   %cx,%ax
    return ret;
}
    87d6:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    87db:	66 5b                	pop    %bx
    87dd:	66 5e                	pop    %si
    87df:	66 5f                	pop    %di
    87e1:	66 5d                	pop    %bp
    87e3:	66 c3                	retw   

000087e5 <_ZL19system_call_putchari>:
    int mask = 0x00FF;
    ret = ret & mask;
    return ret;
}
static inline void system_call_putchar(int ch)
{
    87e5:	66 55                	push   %bp
    87e7:	66 89 e5             	mov    %sp,%bp
    87ea:	66 53                	push   %bx
    87ec:	66 89 c2             	mov    %ax,%dx
            "movw %%bx, %%es\n\t"

    :
    :"r"(c)
    :"%eax", "ebx"
    );
    87ef:	88 d0                	mov    %dl,%al
    87f1:	b4 01                	mov    $0x1,%ah
    87f3:	8c d3                	mov    %ss,%ebx
    87f5:	8e e3                	mov    %ebx,%fs
    87f7:	bb 00 00 8e d3       	mov    $0xd38e0000,%ebx
    87fc:	8e db                	mov    %ebx,%ds
    87fe:	8e c3                	mov    %ebx,%es
    8800:	cd 98                	int    $0x98
    8802:	8c e3                	mov    %fs,%ebx
    8804:	8e d3                	mov    %ebx,%ss
    8806:	8e db                	mov    %ebx,%ds
    8808:	8e c3                	mov    %ebx,%es
}
    880a:	66 5b                	pop    %bx
    880c:	66 5d                	pop    %bp
    880e:	66 c3                	retw   

00008810 <_Z7putchari>:
namespace hhlibc {

#endif
#ifndef _HHOS_LIBC_TEST
int putchar( int ch )
{
    8810:	66 55                	push   %bp
    8812:	66 89 e5             	mov    %sp,%bp
    8815:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    //sys_get_current_tty()->putchar(ch);
    system_call_putchar(ch);
    881a:	66 89 c8             	mov    %cx,%ax
    881d:	66 e8 c2 ff          	callw  87e3 <_Z6strtolPKcPPci+0x1a7>
    8821:	ff                   	(bad)  
    8822:	ff 66 89             	jmp    *-0x77(%esi)
    //sys_tty_putchar(ch);
    return ch;
}
    8825:	c8 66 5d 66          	enter  $0x5d66,$0x66
    8829:	c3                   	ret    

0000882a <_Z4putsPKc>:

int puts(const char* string)
{
    882a:	66 55                	push   %bp
    882c:	66 89 e5             	mov    %sp,%bp
    882f:	66 53                	push   %bx
    8831:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    auto len = strlen(string);
    8836:	66 53                	push   %bx
    8838:	66 e8 29 fc          	callw  8465 <_Z6memsetPvim+0x23>
    883c:	ff                   	(bad)  
    883d:	ff 66 89             	jmp    *-0x77(%esi)
    8840:	d9 67 66             	fldenv 0x66(%edi)
    8843:	8d 1c 03             	lea    (%ebx,%eax,1),%ebx
    8846:	66 58                	pop    %ax
    for(size_t i = 0; i < len; ++i)
    8848:	66 39 d9             	cmp    %bx,%cx
    884b:	74 0f                	je     885c <_Z4putsPKc+0x32>
    {
        putchar(*(string + i));
    884d:	67 66 0f be 01       	movsbw (%bx,%di),%ax
    system_call_putchar(ch);
    8852:	66 e8 8d ff          	callw  87e3 <_Z6strtolPKcPPci+0x1a7>
    8856:	ff                   	(bad)  
    8857:	ff 66 41             	jmp    *0x41(%esi)
    for(size_t i = 0; i < len; ++i)
    885a:	eb ec                	jmp    8848 <_Z4putsPKc+0x1e>
    }
    return 0;
}
    885c:	66 31 c0             	xor    %ax,%ax
    885f:	67 66 8b 5d fc       	mov    -0x4(%di),%bx
    8864:	66 c9                	leavew 
    8866:	66 c3                	retw   

00008868 <_Z7getcharv>:
#endif


#ifndef _HHOS_LIBC_TEST
int getchar(void)
{
    8868:	66 55                	push   %bp
    886a:	66 89 e5             	mov    %sp,%bp
    );
    886d:	b4 00                	mov    $0x0,%ah
    886f:	cd 98                	int    $0x98
    8871:	66 89 c2             	mov    %ax,%dx
    ret = ret & mask;
    8874:	66 0f b6 c2          	movzbw %dl,%ax
    return system_call_getchar();
}
    8878:	66 5d                	pop    %bp
    887a:	66 c3                	retw   

0000887c <_Z4getsPc>:
char *gets( char *str )
{
    887c:	66 55                	push   %bp
    887e:	66 89 e5             	mov    %sp,%bp
    8881:	66 53                	push   %bx
    8883:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    );
    8888:	b4 00                	mov    $0x0,%ah
    888a:	cd 98                	int    $0x98
    888c:	66 89 c3             	mov    %ax,%bx
    char ch;
    while(true)
    {
        ch = getchar();
        putchar(ch);
    888f:	66 0f be c3          	movsbw %bl,%ax
    system_call_putchar(ch);
    8893:	66 e8 4c ff          	callw  87e3 <_Z6strtolPKcPPci+0x1a7>
    8897:	ff                   	(bad)  
    8898:	ff 80 fb 0d 74 08    	incl   0x8740dfb(%eax)
        if(ch == 13) {
            putchar('\n');
            break;
        }
        *(str++) = ch;
    889e:	66 41                	inc    %cx
    88a0:	67 88 59 ff          	mov    %bl,-0x1(%bx,%di)
        ch = getchar();
    88a4:	eb e2                	jmp    8888 <_Z4getsPc+0xc>
    system_call_putchar(ch);
    88a6:	66 b8 0a 00          	mov    $0xa,%ax
    88aa:	00 00                	add    %al,(%eax)
    88ac:	66 e8 33 ff          	callw  87e3 <_Z6strtolPKcPPci+0x1a7>
    88b0:	ff                   	(bad)  
    88b1:	ff 67 c6             	jmp    *-0x3a(%edi)
    }
    *str = '\0';
    88b4:	01 00                	add    %eax,(%eax)
    return str;
}
    88b6:	66 89 c8             	mov    %cx,%ax
    88b9:	66 5b                	pop    %bx
    88bb:	66 5d                	pop    %bp
    88bd:	66 c3                	retw   

000088bf <_Z7vsscanfPKcS0_Pc>:
#endif

int vsscanf( const char* buffer, const char* format, va_list vlist )
{
    88bf:	66 55                	push   %bp
    88c1:	66 89 e5             	mov    %sp,%bp
    88c4:	66 57                	push   %di
    88c6:	66 56                	push   %si
    88c8:	66 53                	push   %bx
    88ca:	66 83 ec 14          	sub    $0x14,%sp
    88ce:	67 66 8b 75 08       	mov    0x8(%di),%si
    88d3:	67 66 8b 7d 10       	mov    0x10(%di),%di
    auto len_fmt = strlen(format);
    88d8:	67 66 ff 75 0c       	pushw  0xc(%di)
    88dd:	66 e8 84 fb          	callw  8465 <_Z6memsetPvim+0x23>
    88e1:	ff                   	(bad)  
    88e2:	ff 67 66             	jmp    *0x66(%edi)
    88e5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    88e8:	66 59                	pop    %cx
    auto p_fmt = format; 
    88ea:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    88ef:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    auto p_buf = buffer;
    bool error = false;
    int ret = 0;
    88f4:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    88fb:	00 00                	add    %al,(%eax)
    bool error = false;
    88fd:	67 c6 45 e7 00       	movb   $0x0,-0x19(%di)
    while(static_cast<size_t>(p_fmt - format) < len_fmt)
    8902:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    8907:	67 66 2b 45 0c       	sub    0xc(%di),%ax
    890c:	67 66 3b 45 e0       	cmp    -0x20(%di),%ax
    8911:	0f 93 c0             	setae  %al
    {
        if(error) break;
    8914:	67 08 45 e7          	or     %al,-0x19(%di)
    8918:	0f 85 50 01 67 66    	jne    66678a6e <_GLOBAL_OFFSET_TABLE_+0x6666de6e>
        if(isspace(*p_fmt)) //略过白空格
    891e:	8b 45 e8             	mov    -0x18(%ebp),%eax
    8921:	67 66 0f be 00       	movsbw (%bx,%si),%ax
    8926:	66 50                	push   %ax
    8928:	66 e8 50 fc          	callw  857c <_Z7reversePc+0x4a>
    892c:	ff                   	(bad)  
    892d:	ff 66 5a             	jmp    *0x5a(%esi)
    8930:	66 85 c0             	test   %ax,%ax
    8933:	74 1d                	je     8952 <_Z7vsscanfPKcS0_Pc+0x93>
        {
            p_fmt++;
    8935:	67 66 ff 45 e8       	incw   -0x18(%di)
            while(isspace(*buffer)) buffer++;
    893a:	67 66 0f be 06 66 50 	movsbw 0x5066,%ax
    8941:	66 e8 37 fc          	callw  857c <_Z7reversePc+0x4a>
    8945:	ff                   	(bad)  
    8946:	ff 66 5b             	jmp    *0x5b(%esi)
    8949:	66 85 c0             	test   %ax,%ax
    894c:	74 b4                	je     8902 <_Z7vsscanfPKcS0_Pc+0x43>
    894e:	66 46                	inc    %si
    8950:	eb e8                	jmp    893a <_Z7vsscanfPKcS0_Pc+0x7b>
            continue;
        }
        else if(*p_fmt == '%') //格式控制符
    8952:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    8957:	67 80 38 25          	cmpb   $0x25,(%bx,%si)
    895b:	75 a5                	jne    8902 <_Z7vsscanfPKcS0_Pc+0x43>
        {
            p_fmt++;
            char specifier = *p_fmt;
    895d:	67 8a 40 01          	mov    0x1(%bx,%si),%al
            p_fmt++;
    8961:	67 66 83 45 e8 02    	addw   $0x2,-0x18(%di)
            switch(specifier)
    8967:	3c 69                	cmp    $0x69,%al
    8969:	0f 84 b0 00 7f 25    	je     257f8a1f <_GLOBAL_OFFSET_TABLE_+0x257ede1f>
    896f:	3c 58                	cmp    $0x58,%al
    8971:	0f 84 c4 00 7f 10    	je     107f8a3b <_GLOBAL_OFFSET_TABLE_+0x107ede3b>
    8977:	3c 25                	cmp    $0x25,%al
    8979:	75 87                	jne    8902 <_Z7vsscanfPKcS0_Pc+0x43>
            {
                case '%':
                {
                    if(*buffer == '%') 
    897b:	67 80 3e 25 67 0f    	cmpb   $0xf,0x6725
    8981:	95                   	xchg   %eax,%ebp
    8982:	45                   	inc    %ebp
    8983:	e7 e9                	out    %eax,$0xe9
    8985:	7b ff                	jnp    8986 <_Z7vsscanfPKcS0_Pc+0xc7>
            switch(specifier)
    8987:	3c 63                	cmp    $0x63,%al
    8989:	74 31                	je     89bc <_Z7vsscanfPKcS0_Pc+0xfd>
    898b:	3c 64                	cmp    $0x64,%al
    898d:	0f 84 9a 00 e9 6e    	je     6ee98a2d <_GLOBAL_OFFSET_TABLE_+0x6ee8de2d>
    8993:	ff                   	(bad)  
    8994:	3c 73                	cmp    $0x73,%al
    8996:	74 4d                	je     89e5 <_Z7vsscanfPKcS0_Pc+0x126>
    8998:	7f 15                	jg     89af <_Z7vsscanfPKcS0_Pc+0xf0>
    899a:	3c 6f                	cmp    $0x6f,%al
    899c:	0f 85 62 ff 67 66    	jne    66688904 <_GLOBAL_OFFSET_TABLE_+0x6667dd04>
                    ++ret;
                    break;
                }
                case 'o':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    89a2:	8d 5f 04             	lea    0x4(%edi),%ebx
    89a5:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 8);
    89a9:	66 6a 08             	pushw  $0x8
    89ac:	e9 96 00 3c 75       	jmp    753c8a47 <_GLOBAL_OFFSET_TABLE_+0x753bde47>
            switch(specifier)
    89b1:	74 78                	je     8a2b <_Z7vsscanfPKcS0_Pc+0x16c>
    89b3:	3c 78                	cmp    $0x78,%al
    89b5:	0f 84 80 00 e9 46    	je     46e98a3b <_GLOBAL_OFFSET_TABLE_+0x46e8de3b>
    89bb:	ff 67 66             	jmp    *0x66(%edi)
                    char* p = va_arg(vlist, char*);
    89be:	8b 17                	mov    (%edi),%edx
                    *p = *buffer;
    89c0:	67 8a 06 67 88       	mov    -0x7799,%al
    89c5:	02 66 46             	add    0x46(%esi),%ah
                    ++ret;
    89c8:	67 66 ff 45 ec       	incw   -0x14(%di)
                    char* p = va_arg(vlist, char*);
    89cd:	66 83 c7 04          	add    $0x4,%di
                    break;
    89d1:	e9 2e ff 66 50       	jmp    50678904 <_GLOBAL_OFFSET_TABLE_+0x5066dd04>
                    while (*buffer && isspace(*buffer)) buffer++;
    89d6:	66 e8 a2 fb          	callw  857c <_Z7reversePc+0x4a>
    89da:	ff                   	(bad)  
    89db:	ff 66 59             	jmp    *0x59(%esi)
    89de:	66 85 c0             	test   %ax,%ax
    89e1:	74 0b                	je     89ee <_Z7vsscanfPKcS0_Pc+0x12f>
    89e3:	66 46                	inc    %si
    89e5:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    89ec:	75 e6                	jne    89d4 <_Z7vsscanfPKcS0_Pc+0x115>
                    char* p = va_arg(vlist, char*);
    89ee:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    89f3:	67 66 8b 3f          	mov    (%bx),%di
                    while(*buffer && !isspace(*buffer))
    89f7:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    89fe:	75 0b                	jne    8a0b <_Z7vsscanfPKcS0_Pc+0x14c>
                    *p = '\0';
    8a00:	67 c6 07 00          	movb   $0x0,(%bx)
                    ++ret;
    8a04:	67 66 ff 45 ec       	incw   -0x14(%di)
    8a09:	eb 5b                	jmp    8a66 <_Z7vsscanfPKcS0_Pc+0x1a7>
                    while(*buffer && !isspace(*buffer))
    8a0b:	66 50                	push   %ax
    8a0d:	66 e8 6b fb          	callw  857c <_Z7reversePc+0x4a>
    8a11:	ff                   	(bad)  
    8a12:	ff 66 5a             	jmp    *0x5a(%esi)
    8a15:	66 85 c0             	test   %ax,%ax
    8a18:	75 e6                	jne    8a00 <_Z7vsscanfPKcS0_Pc+0x141>
                        *(p++) = *(buffer++);
    8a1a:	a4                   	movsb  %ds:(%esi),%es:(%edi)
                    while(*buffer && !isspace(*buffer))
    8a1b:	eb da                	jmp    89f7 <_Z7vsscanfPKcS0_Pc+0x138>
                    int* p = va_arg(vlist, int*);
    8a1d:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8a22:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 0);
    8a26:	66 6a 00             	pushw  $0x0
    8a29:	eb 1a                	jmp    8a45 <_Z7vsscanfPKcS0_Pc+0x186>
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8a2b:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8a30:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 10);
    8a34:	66 6a 0a             	pushw  $0xa
    8a37:	eb 0c                	jmp    8a45 <_Z7vsscanfPKcS0_Pc+0x186>
                    break;
                }
                case 'x':
                case 'X':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8a39:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8a3e:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 16);
    8a42:	66 6a 10             	pushw  $0x10
    8a45:	67 66 8d 45 f0       	lea    -0x10(%di),%ax
    8a4a:	66 50                	push   %ax
    8a4c:	66 56                	push   %si
    8a4e:	66 e8 e8 fb          	callw  863a <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    8a52:	ff                   	(bad)  
    8a53:	ff 67 66             	jmp    *0x66(%edi)
                    *p = static_cast<unsigned int>(num);
    8a56:	89 07                	mov    %eax,(%edi)
                    buffer = end;
    8a58:	67 66 8b 75 f0       	mov    -0x10(%di),%si
                    ++ret;
    8a5d:	67 66 ff 45 ec       	incw   -0x14(%di)
    8a62:	66 83 c4 0c          	add    $0xc,%sp
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8a66:	66 89 df             	mov    %bx,%di
    8a69:	e9 96 fe 67 66       	jmp    66688904 <_GLOBAL_OFFSET_TABLE_+0x6667dd04>
                    break;
            }
        }
    }
    return ret;
}
    8a6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
    8a71:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8a76:	66 5b                	pop    %bx
    8a78:	66 5e                	pop    %si
    8a7a:	66 5f                	pop    %di
    8a7c:	66 5d                	pop    %bp
    8a7e:	66 c3                	retw   

00008a80 <_Z6sscanfPKcS0_z>:
int sscanf( const char* buffer, const char* format, ... )
{
    8a80:	66 55                	push   %bp
    8a82:	66 89 e5             	mov    %sp,%bp
   	int ret;
	va_list va;
	va_start(va, format);
    8a85:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsscanf(buffer, format, va);
    8a8a:	66 50                	push   %ax
    8a8c:	67 66 ff 75 0c       	pushw  0xc(%di)
    8a91:	67 66 ff 75 08       	pushw  0x8(%di)
    8a96:	66 e8 23 fe          	callw  88bd <_Z4getsPc+0x41>
    8a9a:	ff                   	(bad)  
    8a9b:	ff 66 c9             	jmp    *-0x37(%esi)
	va_end(va);
    return ret; 
}
    8a9e:	66 c3                	retw   

00008aa0 <_Z5scanfPKcz>:
#ifndef _HHOS_LIBC_TEST
static char scanfbuf[80*25];
//TODO 关于这个返回值
int scanf( const char* format, ... )
{
    8aa0:	66 55                	push   %bp
    8aa2:	66 89 e5             	mov    %sp,%bp
    if (!gets(scanfbuf)) return EOF;
    8aa5:	66 68 20 9b          	pushw  $0x9b20
    8aa9:	00 00                	add    %al,(%eax)
    8aab:	66 e8 cb fd          	callw  887a <_Z7getcharv+0x12>
    8aaf:	ff                   	(bad)  
    8ab0:	ff 66 89             	jmp    *-0x77(%esi)
    8ab3:	c2 66 58             	ret    $0x5866
    8ab6:	66 83 c8 ff          	or     $0xffff,%ax
    8aba:	66 85 d2             	test   %dx,%dx
    8abd:	74 1c                	je     8adb <_Z5scanfPKcz+0x3b>
	int ret;
	va_list va;
	va_start(va, format);
    8abf:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsscanf(scanfbuf, format, va);
    8ac4:	66 50                	push   %ax
    8ac6:	67 66 ff 75 08       	pushw  0x8(%di)
    8acb:	66 68 20 9b          	pushw  $0x9b20
    8acf:	00 00                	add    %al,(%eax)
    8ad1:	66 e8 e8 fd          	callw  88bd <_Z4getsPc+0x41>
    8ad5:	ff                   	(bad)  
    8ad6:	ff 66 83             	jmp    *-0x7d(%esi)
	va_end(va);
    return ret;
    8ad9:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    8adc:	c9                   	leave  
    8add:	66 c3                	retw   

00008adf <_Z8vsprintfPcPKcS_>:
{
    8adf:	66 55                	push   %bp
    8ae1:	66 89 e5             	mov    %sp,%bp
    8ae4:	66 57                	push   %di
    8ae6:	66 56                	push   %si
    8ae8:	66 53                	push   %bx
    8aea:	66 83 ec 0c          	sub    $0xc,%sp
    8aee:	67 66 8b 75 0c       	mov    0xc(%di),%si
    8af3:	67 66 8b 55 10       	mov    0x10(%di),%dx
    8af8:	67 66 89 55 f0       	mov    %dx,-0x10(%di)
    auto len_fmt = strlen(format);
    8afd:	66 56                	push   %si
    8aff:	66 e8 62 f9          	callw  8465 <_Z6memsetPvim+0x23>
    8b03:	ff                   	(bad)  
    8b04:	ff 67 66             	jmp    *0x66(%edi)
    8b07:	89 45 ec             	mov    %eax,-0x14(%ebp)
    8b0a:	66 58                	pop    %ax
    auto p_buf = buffer;
    8b0c:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8b11:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    while(len_fmt--)
    8b16:	67 66 ff 4d ec       	decw   -0x14(%di)
    8b1b:	67 66 83 7d ec ff    	cmpw   $0xffff,-0x14(%di)
    8b21:	0f 84 4a 01 67 8a    	je     8a678c71 <_GLOBAL_OFFSET_TABLE_+0x8a66e071>
        if(*p_fmt != '%')
    8b27:	06                   	push   %es
    8b28:	3c 25                	cmp    $0x25,%al
    8b2a:	74 07                	je     8b33 <_Z8vsprintfPcPKcS_+0x54>
            *(p_buf++) = *(p_fmt++);    //非控制字符
    8b2c:	66 46                	inc    %si
    8b2e:	67 88 03             	mov    %al,(%bp,%di)
    8b31:	eb 5f                	jmp    8b92 <_Z8vsprintfPcPKcS_+0xb3>
            char specifier = *(++p_fmt); //%后面一个字符是specifier
    8b33:	67 8a 46 01          	mov    0x1(%bp),%al
            ++p_fmt;                     //记录specifier并跳过
    8b37:	66 83 c6 02          	add    $0x2,%si
            switch (specifier)
    8b3b:	3c 69                	cmp    $0x69,%al
    8b3d:	0f 84 81 00 7f 17    	je     177f8bc4 <_GLOBAL_OFFSET_TABLE_+0x177edfc4>
    8b43:	3c 63                	cmp    $0x63,%al
    8b45:	74 40                	je     8b87 <_Z8vsprintfPcPKcS_+0xa8>
    8b47:	3c 64                	cmp    $0x64,%al
    8b49:	74 77                	je     8bc2 <_Z8vsprintfPcPKcS_+0xe3>
    8b4b:	3c 58                	cmp    $0x58,%al
    8b4d:	75 c7                	jne    8b16 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8b4f:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16, true);
    8b54:	66 6a 01             	pushw  $0x1
    8b57:	e9 e2 00 3c 73       	jmp    733c8c3e <_GLOBAL_OFFSET_TABLE_+0x733be03e>
            switch (specifier)
    8b5c:	74 38                	je     8b96 <_Z8vsprintfPcPKcS_+0xb7>
    8b5e:	7f 12                	jg     8b72 <_Z8vsprintfPcPKcS_+0x93>
    8b60:	3c 6f                	cmp    $0x6f,%al
    8b62:	75 b2                	jne    8b16 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8b64:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 8);
    8b69:	66 6a 00             	pushw  $0x0
    8b6c:	66 6a 08             	pushw  $0x8
    8b6f:	e9 da 00 3c 75       	jmp    753c8c4e <_GLOBAL_OFFSET_TABLE_+0x753be04e>
            switch (specifier)
    8b74:	0f 84 c9 00 3c 78    	je     783c8c43 <_GLOBAL_OFFSET_TABLE_+0x783be043>
    8b7a:	75 9a                	jne    8b16 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    8b7c:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16);
    8b81:	66 6a 00             	pushw  $0x0
    8b84:	e9 b5 00 67 66       	jmp    66678c3e <_GLOBAL_OFFSET_TABLE_+0x6666e03e>
                    *(p_buf++) = va_arg(vlist, int); 
    8b89:	8b 02                	mov    (%edx),%eax
    8b8b:	67 88 03             	mov    %al,(%bp,%di)
    8b8e:	66 83 c2 04          	add    $0x4,%dx
    8b92:	66 43                	inc    %bx
                    break;
    8b94:	eb 80                	jmp    8b16 <_Z8vsprintfPcPKcS_+0x37>
                    const char * str = va_arg(vlist, char*);
    8b96:	67 66 8d 42 04       	lea    0x4(%bp,%si),%ax
    8b9b:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8ba0:	67 66 8b 3a          	mov    (%bp,%si),%di
                    strcpy(p_buf, str);
    8ba4:	66 57                	push   %di
    8ba6:	66 53                	push   %bx
    8ba8:	66 e8 d5 f8          	callw  8481 <_Z6strlenPKc+0x1a>
    8bac:	ff                   	(bad)  
    8bad:	ff 66 59             	jmp    *0x59(%esi)
                    p_buf += strlen(str);               //p应当永远指向有意义的字符后面一位
    8bb0:	66 58                	pop    %ax
    8bb2:	66 57                	push   %di
    8bb4:	66 e8 ad f8          	callw  8465 <_Z6memsetPvim+0x23>
    8bb8:	ff                   	(bad)  
    8bb9:	ff 66 01             	jmp    *0x1(%esi)
    8bbc:	c3                   	ret    
                    break;
    8bbd:	66 58                	pop    %ax
    8bbf:	e9 4f ff 67 66       	jmp    66688b13 <_GLOBAL_OFFSET_TABLE_+0x6667df13>
                    int num = va_arg(vlist, int);
    8bc4:	8d 42 04             	lea    0x4(%edx),%eax
    8bc7:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    8bcc:	67 66 8b 02          	mov    (%bp,%si),%ax
template<typename T>
void itoa(char* buffer, T num, int base, bool captial = false)
{
    const char* num_char_upper = "0123456789ABCDEF";
    const char* num_char_lower = "0123456789abcdef";
    if(num < 0)
    8bd0:	66 89 df             	mov    %bx,%di
    8bd3:	66 85 c0             	test   %ax,%ax
    8bd6:	79 0c                	jns    8be4 <_Z8vsprintfPcPKcS_+0x105>
    8bd8:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
    {
        *(buffer++) = '-';
    8bdd:	67 c6 03 2d          	movb   $0x2d,(%bp,%di)
        num = -num;
    8be1:	66 f7 d8             	neg    %ax
    }
    char *p = buffer;
    8be4:	67 66 89 7d f0       	mov    %di,-0x10(%di)
    int mod = 0;
    while(true)
    {
        mod = num % base;
        num /= base;
    8be9:	66 b9 0a 00          	mov    $0xa,%cx
    8bed:	00 00                	add    %al,(%eax)
    8bef:	66 99                	cwtd   
    8bf1:	66 f7 f9             	idiv   %cx
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    8bf4:	67 66 8b 4d f0       	mov    -0x10(%di),%cx
    8bf9:	66 41                	inc    %cx
    8bfb:	67 8a 92 ec ab       	mov    -0x5414(%bp,%si),%dl
    8c00:	00 00                	add    %al,(%eax)
    8c02:	67 88 51 ff          	mov    %dl,-0x1(%bx,%di)
        if(num == 0) break;
    8c06:	66 85 c0             	test   %ax,%ax
    8c09:	74 07                	je     8c12 <_Z8vsprintfPcPKcS_+0x133>
    8c0b:	67 66 89 4d f0       	mov    %cx,-0x10(%di)
    8c10:	eb d7                	jmp    8be9 <_Z8vsprintfPcPKcS_+0x10a>
    }
    *p = '\0';
    8c12:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8c17:	67 c6 40 01 00       	movb   $0x0,0x1(%bx,%si)
    reverse(buffer);
    8c1c:	66 57                	push   %di
    8c1e:	66 e8 0e f9          	callw  8530 <_Z6strcmpPKcS0_+0x6b>
    8c22:	ff                   	(bad)  
    8c23:	ff 67 66             	jmp    *0x66(%edi)
                    p_buf += strlen(p_buf);             //同理
    8c26:	89 1c 24             	mov    %ebx,(%esp)
    8c29:	66 e8 38 f8          	callw  8465 <_Z6memsetPvim+0x23>
    8c2d:	ff                   	(bad)  
    8c2e:	ff 66 01             	jmp    *0x1(%esi)
    8c31:	c3                   	ret    
                    break;
    8c32:	66 5a                	pop    %dx
                    int num = va_arg(vlist, int);
    8c34:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
                    break;
    8c39:	e9 da fe 66 6a       	jmp    6a678b18 <_GLOBAL_OFFSET_TABLE_+0x6a66df18>
                    itoa(p_buf, num, 16, true);
    8c3e:	10 eb                	adc    %ch,%bl
    8c40:	0b 67 66             	or     0x66(%edi),%esp
                    unsigned int num = va_arg(vlist, int);
    8c43:	8d 7a 04             	lea    0x4(%edx),%edi
                    itoa(p_buf, num, 10);
    8c46:	66 6a 00             	pushw  $0x0
    8c49:	66 6a 0a             	pushw  $0xa
    8c4c:	67 66 ff 32          	pushw  (%bp,%si)
    8c50:	66 53                	push   %bx
    8c52:	66 e8 6f 07          	callw  93c5 <_ZN2sh3runEv+0x221>
    8c56:	00 00                	add    %al,(%eax)
                    p_buf += strlen(p_buf);             //同理
    8c58:	66 83 c4 10          	add    $0x10,%sp
    8c5c:	66 53                	push   %bx
    8c5e:	66 e8 03 f8          	callw  8465 <_Z6memsetPvim+0x23>
    8c62:	ff                   	(bad)  
    8c63:	ff 66 01             	jmp    *0x1(%esi)
    8c66:	c3                   	ret    
                    break;
    8c67:	66 58                	pop    %ax
                    unsigned int num = va_arg(vlist, int);
    8c69:	66 89 fa             	mov    %di,%dx
                    break;
    8c6c:	e9 a7 fe 67 c6       	jmp    c6688b18 <_GLOBAL_OFFSET_TABLE_+0xc667df18>
    *p_buf = '\0';
    8c71:	03 00                	add    (%eax),%eax
    return p_buf - buffer;
    8c73:	66 89 d8             	mov    %bx,%ax
    8c76:	67 66 2b 45 08       	sub    0x8(%di),%ax
}
    8c7b:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8c80:	66 5b                	pop    %bx
    8c82:	66 5e                	pop    %si
    8c84:	66 5f                	pop    %di
    8c86:	66 5d                	pop    %bp
    8c88:	66 c3                	retw   

00008c8a <_Z7sprintfPcPKcz>:
{
    8c8a:	66 55                	push   %bp
    8c8c:	66 89 e5             	mov    %sp,%bp
	va_start(va, format);
    8c8f:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsprintf(buffer, format, va);
    8c94:	66 50                	push   %ax
    8c96:	67 66 ff 75 0c       	pushw  0xc(%di)
    8c9b:	67 66 ff 75 08       	pushw  0x8(%di)
    8ca0:	66 e8 39 fe          	callw  8add <_Z5scanfPKcz+0x3d>
    8ca4:	ff                   	(bad)  
    8ca5:	ff 66 c9             	jmp    *-0x37(%esi)
}
    8ca8:	66 c3                	retw   

00008caa <_Z6printfPKcz>:
{
    8caa:	66 55                	push   %bp
    8cac:	66 89 e5             	mov    %sp,%bp
    8caf:	66 53                	push   %bx
	va_start(va, format);
    8cb1:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsprintf(printbuf, format, va);
    8cb6:	66 50                	push   %ax
    8cb8:	67 66 ff 75 08       	pushw  0x8(%di)
    8cbd:	66 68 00 a3          	pushw  $0xa300
    8cc1:	00 00                	add    %al,(%eax)
    8cc3:	66 e8 16 fe          	callw  8add <_Z5scanfPKcz+0x3d>
    8cc7:	ff                   	(bad)  
    8cc8:	ff 66 89             	jmp    *-0x77(%esi)
    8ccb:	c3                   	ret    
    puts(printbuf);
    8ccc:	66 83 c4 0c          	add    $0xc,%sp
    8cd0:	66 68 00 a3          	pushw  $0xa300
    8cd4:	00 00                	add    %al,(%eax)
    8cd6:	66 e8 4e fb          	callw  8828 <_Z7putchari+0x18>
    8cda:	ff                   	(bad)  
    8cdb:	ff 66 89             	jmp    *-0x77(%esi)
}
    8cde:	d8 67 66             	fsubs  0x66(%edi)
    8ce1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    8ce4:	66 c9                	leavew 
    8ce6:	66 c3                	retw   

Disassembly of section .text._ZN3tty8tty_initEv:

00008ce8 <_ZN3tty8tty_initEv>:
    void tty_init()
    8ce8:	66 55                	push   %bp
    8cea:	66 89 e5             	mov    %sp,%bp
    8ced:	66 53                	push   %bx
    8cef:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        cur_x = 0;
    8cf4:	67 66 c7 03 00 00    	movw   $0x0,(%bp,%di)
    8cfa:	00 00                	add    %al,(%eax)
        cur_y = 0;
    8cfc:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    8d03:	00 00                	add    %al,(%eax)
        move_cursor(0, 0);
    8d05:	66 31 d2             	xor    %dx,%dx
    8d08:	66 31 c0             	xor    %ax,%ax
    8d0b:	66 e8 b5 f1          	callw  7ec4 <_ZL8print_okPc+0x50>
    8d0f:	ff                   	(bad)  
    8d10:	ff 67 66             	jmp    *0x66(%edi)
        color = MAKE_COLOR(VGA_BLACK, VGA_WHITE);
    8d13:	c7 43 08 07 00 00 00 	movl   $0x7,0x8(%ebx)
    }
    8d1a:	66 5b                	pop    %bx
    8d1c:	66 5d                	pop    %bp
    8d1e:	66 c3                	retw   

Disassembly of section .text._ZN3tty7putcharEi:

00008d20 <_ZN3tty7putcharEi>:
        tty_mem[y + 80 * x] = c;
        tty_mem[y + 80 * x + 1] = color;
#endif
        sys_putchar(c, color, x, y);
    }
    void putchar(int c)
    8d20:	66 55                	push   %bp
    8d22:	66 89 e5             	mov    %sp,%bp
    8d25:	66 56                	push   %si
    8d27:	66 53                	push   %bx
    8d29:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8d2e:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    {
        switch(c)
    8d33:	66 83 f8 0d          	cmp    $0xd,%ax
    8d37:	77 79                	ja     8db2 <_ZN3tty7putcharEi+0x92>
    8d39:	67 ff 24             	jmp    *(%si)
    8d3c:	85 38                	test   %edi,(%eax)
    8d3e:	ab                   	stos   %eax,%es:(%edi)
    8d3f:	00 00                	add    %al,(%eax)
    8d41:	66 be 04 00          	mov    $0x4,%si
    8d45:	00 00                	add    %al,(%eax)
        {
            case '\t':
            {
                for(int i = 0; i < 4; ++i) putchar(' ');
    8d47:	66 6a 20             	pushw  $0x20
    8d4a:	66 53                	push   %bx
    8d4c:	66 e8 ce ff          	callw  8d1e <_text_end+0x36>
    8d50:	ff                   	(bad)  
    8d51:	ff 66 5a             	jmp    *0x5a(%esi)
    8d54:	66 59                	pop    %cx
    8d56:	66 4e                	dec    %si
    8d58:	75 ed                	jne    8d47 <_ZN3tty7putcharEi+0x27>
    8d5a:	e9 96 00 67 66       	jmp    66678df5 <_GLOBAL_OFFSET_TABLE_+0x6666e1f5>
            }
            case 0:
                break;
            case '\b':
            {
                if(cur_y == 0 && cur_x == 0) 
    8d5f:	8b 53 04             	mov    0x4(%ebx),%edx
    8d62:	67 66 8b 03          	mov    (%bp,%di),%ax
    8d66:	66 85 d2             	test   %dx,%dx
    8d69:	75 1b                	jne    8d86 <_ZN3tty7putcharEi+0x66>
    8d6b:	66 85 c0             	test   %ax,%ax
    8d6e:	0f 84 99 00 67 66    	je     66678e0d <_GLOBAL_OFFSET_TABLE_+0x6666e20d>
                {
                    break;
                }
                else if (cur_y == 0 && cur_x != 0)
                {
                    cur_y = 80 - 1;
    8d74:	c7 43 04 4f 00 00 00 	movl   $0x4f,0x4(%ebx)
                    cur_x--;
    8d7b:	66 48                	dec    %ax
    8d7d:	67 66 89 03          	mov    %ax,(%bp,%di)
        sys_putchar(c, color, x, y);
    8d81:	66 6a 4f             	pushw  $0x4f
    8d84:	eb 09                	jmp    8d8f <_ZN3tty7putcharEi+0x6f>
                    putchar_worker(' ', MAKE_COLOR(VGA_BLACK, VGA_WHITE) , cur_x, cur_y);
                    break;
                }
                else
                {
                    cur_y--;
    8d86:	66 4a                	dec    %dx
    8d88:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        sys_putchar(c, color, x, y);
    8d8d:	66 52                	push   %dx
    8d8f:	66 50                	push   %ax
    8d91:	66 6a 07             	pushw  $0x7
    8d94:	66 6a 20             	pushw  $0x20
    8d97:	66 e8 bb f3          	callw  8156 <sys_bios_print_int+0xa4>
    8d9b:	ff                   	(bad)  
    8d9c:	ff 66 83             	jmp    *-0x7d(%esi)
    8d9f:	c4 10                	les    (%eax),%edx
    8da1:	eb 50                	jmp    8df3 <_ZN3tty7putcharEi+0xd3>
                    break;
                }
            }
            case '\n':
            {
                cur_x++;
    8da3:	67 66 ff 03          	incw   (%bp,%di)
                cur_y = 0;
    8da7:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    8dae:	00 00                	add    %al,(%eax)
                break;
    8db0:	eb 41                	jmp    8df3 <_ZN3tty7putcharEi+0xd3>
        sys_putchar(c, color, x, y);
    8db2:	67 66 ff 73 04       	pushw  0x4(%bp,%di)
    8db7:	67 66 ff 33          	pushw  (%bp,%di)
    8dbb:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    8dc0:	66 50                	push   %ax
    8dc2:	66 e8 90 f3          	callw  8156 <sys_bios_print_int+0xa4>
    8dc6:	ff                   	(bad)  
    8dc7:	ff 67 66             	jmp    *0x66(%edi)
            }
            default:
            {
                putchar_worker(c, color, cur_x, cur_y);
                cur_x = (cur_y == 79) ? cur_x + 1 : cur_x;
    8dca:	8b 43 04             	mov    0x4(%ebx),%eax
    8dcd:	66 83 c4 10          	add    $0x10,%sp
    8dd1:	66 83 f8 4f          	cmp    $0x4f,%ax
    8dd5:	67 66 8b 13          	mov    (%bp,%di),%dx
    8dd9:	75 02                	jne    8ddd <_ZN3tty7putcharEi+0xbd>
    8ddb:	66 42                	inc    %dx
    8ddd:	67 66 89 13          	mov    %dx,(%bp,%di)
                cur_y = (cur_y + 1) % 80;
    8de1:	66 40                	inc    %ax
    8de3:	66 b9 50 00          	mov    $0x50,%cx
    8de7:	00 00                	add    %al,(%eax)
    8de9:	66 99                	cwtd   
    8deb:	66 f7 f9             	idiv   %cx
    8dee:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        if (cur_x >= 25)
    8df3:	67 66 83 3b 18       	cmpw   $0x18,(%bp,%di)
    8df8:	7e 11                	jle    8e0b <_ZN3tty7putcharEi+0xeb>
            sys_bios_scroll_up(color);
    8dfa:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    8dff:	66 e8 84 f4          	callw  8287 <sys_print_int+0xa4>
    8e03:	ff                   	(bad)  
    8e04:	ff 67 66             	jmp    *0x66(%edi)
            --cur_x;
    8e07:	ff 0b                	decl   (%ebx)
    8e09:	66 58                	pop    %ax
                break;
            }
        }
        scroll_up();
        move_cursor(cur_x, cur_y);
    8e0b:	67 66 8b 53 04       	mov    0x4(%bp,%di),%dx
    8e10:	67 66 8b 03          	mov    (%bp,%di),%ax
    }
    8e14:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    8e19:	66 5b                	pop    %bx
    8e1b:	66 5e                	pop    %si
    8e1d:	66 5d                	pop    %bp
        move_cursor(cur_x, cur_y);
    8e1f:	e9                   	.byte 0xe9
    8e20:	a4                   	movsb  %ds:(%esi),%es:(%edi)
    8e21:	f0                   	lock

Disassembly of section .text._ZN2sh4execERKNS_3cmdE:

00008e22 <_ZN2sh4execERKNS_3cmdE>:
    int exec(const cmd & input_cmd)
    8e22:	66 55                	push   %bp
    8e24:	66 89 e5             	mov    %sp,%bp
    8e27:	66 57                	push   %di
    8e29:	66 56                	push   %si
    8e2b:	66 53                	push   %bx
    8e2d:	66 83 ec 08          	sub    $0x8,%sp
    8e31:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8e36:	67 66 8b 75 0c       	mov    0xc(%di),%si
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8e3b:	66 68 9a ab          	pushw  $0xab9a
    8e3f:	00 00                	add    %al,(%eax)
    8e41:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8e47:	ff 34 83             	pushl  (%ebx,%eax,4)
    8e4a:	66 e8 75 f6          	callw  84c3 <_Z6strcpyPcPKc+0x40>
    8e4e:	ff                   	(bad)  
    8e4f:	ff 66 5a             	jmp    *0x5a(%esi)
        if (is_command(input_cmd, "ls") || is_command(input_cmd, "dir")) {
    8e52:	66 59                	pop    %cx
    8e54:	66 85 c0             	test   %ax,%ax
    8e57:	75 1d                	jne    8e76 <_ZN2sh4execERKNS_3cmdE+0x54>
            printf("You have %d user programs intalled\n\n", prog_cnt);
    8e59:	67 66 ff b3 c0 08    	pushw  0x8c0(%bp,%di)
    8e5f:	00 00                	add    %al,(%eax)
    8e61:	66 68 70 ab          	pushw  $0xab70
    8e65:	00 00                	add    %al,(%eax)
    8e67:	66 e8 3d fe          	callw  8ca8 <_Z7sprintfPcPKcz+0x1e>
    8e6b:	ff                   	(bad)  
    8e6c:	ff 66 59             	jmp    *0x59(%esi)
    8e6f:	66 5e                	pop    %si
            for (size_t i = 0; i < prog_cnt; ++i) {
    8e71:	66 31 f6             	xor    %si,%si
    8e74:	eb 3f                	jmp    8eb5 <_ZN2sh4execERKNS_3cmdE+0x93>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8e76:	66 68 95 ab          	pushw  $0xab95
    8e7a:	00 00                	add    %al,(%eax)
    8e7c:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8e82:	ff 34 83             	pushl  (%ebx,%eax,4)
    8e85:	66 e8 3a f6          	callw  84c3 <_Z6strcpyPcPKc+0x40>
    8e89:	ff                   	(bad)  
    8e8a:	ff 66 5f             	jmp    *0x5f(%esi)
        if (is_command(input_cmd, "ls") || is_command(input_cmd, "dir")) {
    8e8d:	66 5a                	pop    %dx
    8e8f:	66 85 c0             	test   %ax,%ax
    8e92:	74 c5                	je     8e59 <_ZN2sh4execERKNS_3cmdE+0x37>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8e94:	66 68 99 ab          	pushw  $0xab99
    8e98:	00 00                	add    %al,(%eax)
    8e9a:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8ea0:	ff 34 83             	pushl  (%ebx,%eax,4)
    8ea3:	66 e8 1c f6          	callw  84c3 <_Z6strcpyPcPKc+0x40>
    8ea7:	ff                   	(bad)  
    8ea8:	ff 66 5a             	jmp    *0x5a(%esi)
        else if (is_command(input_cmd, "cls") || is_command(input_cmd, "clear"))
    8eab:	66 59                	pop    %cx
    8ead:	66 85 c0             	test   %ax,%ax
    8eb0:	75 32                	jne    8ee4 <_ZN2sh4execERKNS_3cmdE+0xc2>
    8eb2:	e9 34 01 67 66       	jmp    66678feb <_GLOBAL_OFFSET_TABLE_+0x6666e3eb>
            for (size_t i = 0; i < prog_cnt; ++i) {
    8eb7:	39 b3 c0 08 00 00    	cmp    %esi,0x8c0(%ebx)
    8ebd:	0f 86 93 01 66 6b    	jbe    6b669056 <_GLOBAL_OFFSET_TABLE_+0x6b65e456>
                printf("%s\n", progs[i].name);
    8ec3:	c6                   	(bad)  
    8ec4:	24 67                	and    $0x67,%al
    8ec6:	66 8d 84 03 80 06 00 	lea    0x680(%ebx,%eax,1),%ax
    8ecd:	00 
    8ece:	66 50                	push   %ax
    8ed0:	66 68 9d ab          	pushw  $0xab9d
    8ed4:	00 00                	add    %al,(%eax)
    8ed6:	66 e8 ce fd          	callw  8ca8 <_Z7sprintfPcPKcz+0x1e>
    8eda:	ff                   	(bad)  
    8edb:	ff 66 46             	jmp    *0x46(%esi)
            for (size_t i = 0; i < prog_cnt; ++i) {
    8ede:	66 5f                	pop    %di
    8ee0:	66 58                	pop    %ax
    8ee2:	eb d1                	jmp    8eb5 <_ZN2sh4execERKNS_3cmdE+0x93>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8ee4:	66 68 a1 ab          	pushw  $0xaba1
    8ee8:	00 00                	add    %al,(%eax)
    8eea:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8ef0:	ff 34 83             	pushl  (%ebx,%eax,4)
    8ef3:	66 e8 cc f5          	callw  84c3 <_Z6strcpyPcPKc+0x40>
    8ef7:	ff                   	(bad)  
    8ef8:	ff 66 5a             	jmp    *0x5a(%esi)
        else if (is_command(input_cmd, "cls") || is_command(input_cmd, "clear"))
    8efb:	66 59                	pop    %cx
    8efd:	66 85 c0             	test   %ax,%ax
    8f00:	0f 84 e5 00 66 68    	je     68668feb <_GLOBAL_OFFSET_TABLE_+0x6865e3eb>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8f06:	a7                   	cmpsl  %es:(%edi),%ds:(%esi)
    8f07:	ab                   	stos   %eax,%es:(%edi)
    8f08:	00 00                	add    %al,(%eax)
    8f0a:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8f10:	ff 34 83             	pushl  (%ebx,%eax,4)
    8f13:	66 e8 ac f5          	callw  84c3 <_Z6strcpyPcPKc+0x40>
    8f17:	ff                   	(bad)  
    8f18:	ff 66 59             	jmp    *0x59(%esi)
        else if (is_command(input_cmd, "help"))
    8f1b:	66 5f                	pop    %di
    8f1d:	66 85 c0             	test   %ax,%ax
    8f20:	75 0c                	jne    8f2e <_ZN2sh4execERKNS_3cmdE+0x10c>
            printf("%s\n", help);
    8f22:	66 81 c3 80 04       	add    $0x480,%bx
    8f27:	00 00                	add    %al,(%eax)
    8f29:	66 53                	push   %bx
    8f2b:	e9 d9 00 66 68       	jmp    68669009 <_GLOBAL_OFFSET_TABLE_+0x6865e409>
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8f30:	ac                   	lods   %ds:(%esi),%al
    8f31:	ab                   	stos   %eax,%es:(%edi)
    8f32:	00 00                	add    %al,(%eax)
    8f34:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8f3a:	ff 34 83             	pushl  (%ebx,%eax,4)
    8f3d:	66 e8 82 f5          	callw  84c3 <_Z6strcpyPcPKc+0x40>
    8f41:	ff                   	(bad)  
    8f42:	ff 66 5f             	jmp    *0x5f(%esi)
        else if (is_command(input_cmd, "echo"))
    8f45:	66 5a                	pop    %dx
    8f47:	66 85 c0             	test   %ax,%ax
    8f4a:	0f 84 cb 00 66 31    	je     3166901b <_GLOBAL_OFFSET_TABLE_+0x3165e41b>
            for(size_t i = 0; i < prog_cnt; ++i)
    8f50:	c9                   	leave  
    8f51:	67 66 39 8b c0 08    	cmp    %cx,0x8c0(%bp,%di)
    8f57:	00 00                	add    %al,(%eax)
    8f59:	0f 86 a4 00 66 6b    	jbe    6b669003 <_GLOBAL_OFFSET_TABLE_+0x6b65e403>
    8f5f:	d1 24 67             	shll   (%edi,%eiz,2)
    8f62:	66 89 4d ec          	mov    %cx,-0x14(%ebp)
    8f66:	67 66 8d bc 13 80    	lea    -0x7fed(%si),%di
    8f6c:	06                   	push   %es
    8f6d:	00 00                	add    %al,(%eax)
    8f6f:	67 66 89 55 f0       	mov    %dx,-0x10(%di)
        return (strcmp(inputs[input_cmd.start], cmd_name) == 0);
    8f74:	66 57                	push   %di
    8f76:	67 66 8b 06 67 66    	mov    0x6667,%ax
    8f7c:	ff 34 83             	pushl  (%ebx,%eax,4)
    8f7f:	66 e8 40 f5          	callw  84c3 <_Z6strcpyPcPKc+0x40>
    8f83:	ff                   	(bad)  
    8f84:	ff 66 5a             	jmp    *0x5a(%esi)
                if (is_command(input_cmd, progs[i].name))
    8f87:	66 59                	pop    %cx
    8f89:	66 85 c0             	test   %ax,%ax
    8f8c:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    8f91:	67 66 8b 4d ec       	mov    -0x14(%di),%cx
    8f96:	75 64                	jne    8ffc <_ZN2sh4execERKNS_3cmdE+0x1da>
class bin_loader
{
public:
    static void load_binary_from_floppy(int n)
    {
        sys_read_disk(user_prog_segment, user_prog_load_addr, n, 20);
    8f98:	66 6a 14             	pushw  $0x14
                    bin_loader::load_binary_from_floppy(progs[i].lba);
    8f9b:	66 01 d3             	add    %dx,%bx
    8f9e:	67 66 0f b7 83 a0 06 	movzww 0x6a0(%bp,%di),%ax
    8fa5:	00 00                	add    %al,(%eax)
    8fa7:	66 50                	push   %ax
    8fa9:	66 68 00 a1          	pushw  $0xa100
    8fad:	00 00                	add    %al,(%eax)
    8faf:	66 68 00 10          	pushw  $0x1000
    8fb3:	00 00                	add    %al,(%eax)
    8fb5:	66 e8 72 f3          	callw  832b <sys_get_scancode+0xf>
    8fb9:	ff                   	(bad)  
    8fba:	ff 66 83             	jmp    *-0x7d(%esi)
        sys_execve_bin();
    8fbd:	c4 10                	les    (%eax),%edx
    8fbf:	66 e8 b5 f0          	callw  8078 <sys_bios_getchar+0x5>
    8fc3:	ff                   	(bad)  
    8fc4:	ff 66 57             	jmp    *0x57(%esi)
                    if(!(strlen(progs[i].name) > 2 && progs[i].name[0] == 'c' && progs[i].name[1] == '_'))
    8fc7:	66 e8 9a f4          	callw  8465 <_Z6memsetPvim+0x23>
    8fcb:	ff                   	(bad)  
    8fcc:	ff 66 5f             	jmp    *0x5f(%esi)
    8fcf:	66 83 f8 02          	cmp    $0x2,%ax
    8fd3:	76 14                	jbe    8fe9 <_ZN2sh4execERKNS_3cmdE+0x1c7>
    8fd5:	67 80 bb 80 06 00    	cmpb   $0x0,0x680(%bp,%di)
    8fdb:	00 63 75             	add    %ah,0x75(%ebx)
    8fde:	0a 67 80             	or     -0x80(%edi),%ah
    8fe1:	bb 81 06 00 00       	mov    $0x681,%ebx
    8fe6:	5f                   	pop    %edi
    8fe7:	74 6b                	je     9054 <_ZN2sh4execERKNS_3cmdE+0x232>
                        sys_bios_clear_screen();
    8fe9:	66 e8 71 f0          	callw  805e <sys_bios_print_string+0x1e>
    8fed:	ff                   	(bad)  
    8fee:	ff 66 ff             	jmp    *-0x1(%esi)
                        sys_get_current_tty()->tty_init();
    8ff1:	36 00 9b 66 e8 ee fc 	add    %bl,%ss:-0x311179a(%ebx)
    8ff8:	ff                   	(bad)  
    8ff9:	ff                   	(bad)  
    8ffa:	eb 56                	jmp    9052 <_ZN2sh4execERKNS_3cmdE+0x230>
            for(size_t i = 0; i < prog_cnt; ++i)
    8ffc:	66 41                	inc    %cx
    8ffe:	e9 50 ff 66 68       	jmp    68678f53 <_GLOBAL_OFFSET_TABLE_+0x6866e353>
                printf("%s\n", "No such command or file");
    9003:	b1 ab                	mov    $0xab,%cl
    9005:	00 00                	add    %al,(%eax)
    9007:	66 68 9d ab          	pushw  $0xab9d
    900b:	00 00                	add    %al,(%eax)
    900d:	66 e8 97 fc          	callw  8ca8 <_Z7sprintfPcPKcz+0x1e>
    9011:	ff                   	(bad)  
    9012:	ff 66 5b             	jmp    *0x5b(%esi)
    9015:	66 5e                	pop    %si
    9017:	eb 3b                	jmp    9054 <_ZN2sh4execERKNS_3cmdE+0x232>
            for(int i = 1; i < input_cmd.cnt; ++i)
    9019:	66 bf 01 00          	mov    $0x1,%di
    901d:	00 00                	add    %al,(%eax)
    901f:	67 66 39 7e 04       	cmp    %di,0x4(%bp)
    9024:	7e 20                	jle    9046 <_ZN2sh4execERKNS_3cmdE+0x224>
                printf("%s ", inputs[input_cmd.start + i]);
    9026:	67 66 8b 06 66 01    	mov    0x166,%ax
    902c:	f8                   	clc    
    902d:	67 66 ff 34          	pushw  (%si)
    9031:	83 66 68 c9          	andl   $0xffffffc9,0x68(%esi)
    9035:	ab                   	stos   %eax,%es:(%edi)
    9036:	00 00                	add    %al,(%eax)
    9038:	66 e8 6c fc          	callw  8ca8 <_Z7sprintfPcPKcz+0x1e>
    903c:	ff                   	(bad)  
    903d:	ff 66 47             	jmp    *0x47(%esi)
            for(int i = 1; i < input_cmd.cnt; ++i)
    9040:	66 5a                	pop    %dx
    9042:	66 59                	pop    %cx
    9044:	eb d9                	jmp    901f <_ZN2sh4execERKNS_3cmdE+0x1fd>
            printf("\n");
    9046:	66 68 93 ab          	pushw  $0xab93
    904a:	00 00                	add    %al,(%eax)
    904c:	66 e8 58 fc          	callw  8ca8 <_Z7sprintfPcPKcz+0x1e>
    9050:	ff                   	(bad)  
    9051:	ff 66 58             	jmp    *0x58(%esi)
    }
    9054:	66 31 c0             	xor    %ax,%ax
    9057:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    905c:	66 5b                	pop    %bx
    905e:	66 5e                	pop    %si
    9060:	66 5f                	pop    %di
    9062:	66 5d                	pop    %bp
    9064:	66 c3                	retw   

Disassembly of section .text._ZN2sh16read_prog_recordEv:

00009066 <_ZN2sh16read_prog_recordEv>:
    void read_prog_record()
    9066:	66 55                	push   %bp
    9068:	66 89 e5             	mov    %sp,%bp
    906b:	66 57                	push   %di
    906d:	66 56                	push   %si
    906f:	66 53                	push   %bx
    9071:	66 83 ec 6c          	sub    $0x6c,%sp
    9075:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        sys_read_disk(0, (uint32_t)record_buf, REC_FILE_SECTOR, 1);
    907a:	67 66 8d bb 80 02    	lea    0x280(%bp,%di),%di
    9080:	00 00                	add    %al,(%eax)
    9082:	66 6a 01             	pushw  $0x1
    9085:	66 6a 34             	pushw  $0x34
    9088:	66 57                	push   %di
    908a:	66 6a 00             	pushw  $0x0
    908d:	66 e8 9a f2          	callw  832b <sys_get_scancode+0xf>
    9091:	ff                   	(bad)  
    9092:	ff 66 83             	jmp    *-0x7d(%esi)
        sscanf(p, "%s", buf1);
    9095:	c4 10                	les    (%eax),%edx
    9097:	67 66 8d 75 94       	lea    -0x6c(%di),%si
    909c:	66 56                	push   %si
    909e:	66 68 cf ab          	pushw  $0xabcf
    90a2:	00 00                	add    %al,(%eax)
    90a4:	66 57                	push   %di
    90a6:	66 e8 d4 f9          	callw  8a7e <_Z7vsscanfPKcS0_Pc+0x1bf>
    90aa:	ff                   	(bad)  
    90ab:	ff 66 83             	jmp    *-0x7d(%esi)
        p += (strlen(buf1) + 1);
    90ae:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    90b1:	56                   	push   %esi
    90b2:	66 e8 af f3          	callw  8465 <_Z6memsetPvim+0x23>
    90b6:	ff                   	(bad)  
    90b7:	ff 67 66             	jmp    *0x66(%edi)
    90ba:	8d 44 07 01          	lea    0x1(%edi,%eax,1),%eax
    90be:	67 66 89 45 8c       	mov    %ax,-0x74(%di)
        prog_cnt = strtol(buf1, nullptr, 10);
    90c3:	67 66 c7 04 24 0a    	movw   $0xa24,(%si)
    90c9:	00 00                	add    %al,(%eax)
    90cb:	00 66 6a             	add    %ah,0x6a(%esi)
    90ce:	00 66 56             	add    %ah,0x56(%esi)
    90d1:	66 e8 65 f5          	callw  863a <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    90d5:	ff                   	(bad)  
    90d6:	ff 67 66             	jmp    *0x66(%edi)
    90d9:	89 83 c0 08 00 00    	mov    %eax,0x8c0(%ebx)
    90df:	66 83 c4 0c          	add    $0xc,%sp
        for(size_t i = 0; i < prog_cnt; ++i)
    90e3:	67 66 c7 45 90 00 00 	movw   $0x0,-0x70(%di)
    90ea:	00 00                	add    %al,(%eax)
    90ec:	67 66 8b 45 90       	mov    -0x70(%di),%ax
    90f1:	67 66 39 83 c0 08    	cmp    %ax,0x8c0(%bp,%di)
    90f7:	00 00                	add    %al,(%eax)
    90f9:	0f 86 97 00 67 66    	jbe    66679196 <_GLOBAL_OFFSET_TABLE_+0x6666e596>
            sscanf(p, "%s%s", buf2, buf3);
    90ff:	8d 7d d4             	lea    -0x2c(%ebp),%edi
    9102:	66 57                	push   %di
    9104:	67 66 8d 75 b4       	lea    -0x4c(%di),%si
    9109:	66 56                	push   %si
    910b:	66 68 cd ab          	pushw  $0xabcd
    910f:	00 00                	add    %al,(%eax)
    9111:	67 66 ff 75 8c       	pushw  -0x74(%di)
    9116:	66 e8 64 f9          	callw  8a7e <_Z7vsscanfPKcS0_Pc+0x1bf>
    911a:	ff                   	(bad)  
    911b:	ff 67 66             	jmp    *0x66(%edi)
    911e:	6b 4d 90 24          	imul   $0x24,-0x70(%ebp),%ecx
            strcpy(progs[i].name, buf2);
    9122:	66 83 c4 10          	add    $0x10,%sp
    9126:	66 56                	push   %si
    9128:	67 66 8d 84 0b 80    	lea    -0x7ff5(%si),%ax
    912e:	06                   	push   %es
    912f:	00 00                	add    %al,(%eax)
    9131:	67 66 89 4d 88       	mov    %cx,-0x78(%di)
    9136:	66 50                	push   %ax
    9138:	66 e8 45 f3          	callw  8481 <_Z6strlenPKc+0x1a>
    913c:	ff                   	(bad)  
    913d:	ff 66 58             	jmp    *0x58(%esi)
            progs[i].lba = strtol(buf3, nullptr, 10);
    9140:	66 5a                	pop    %dx
    9142:	66 6a 0a             	pushw  $0xa
    9145:	66 6a 00             	pushw  $0x0
    9148:	66 57                	push   %di
    914a:	66 e8 ec f4          	callw  863a <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    914e:	ff                   	(bad)  
    914f:	ff 67 66             	jmp    *0x66(%edi)
    9152:	8b 4d 88             	mov    -0x78(%ebp),%ecx
    9155:	67 66 89 84 0b a0    	mov    %ax,-0x5ff5(%si)
    915b:	06                   	push   %es
    915c:	00 00                	add    %al,(%eax)
            p += (strlen(buf2) + strlen(buf3) + 2);
    915e:	66 83 c4 0c          	add    $0xc,%sp
    9162:	66 56                	push   %si
    9164:	66 e8 fd f2          	callw  8465 <_Z6memsetPvim+0x23>
    9168:	ff                   	(bad)  
    9169:	ff 67 66             	jmp    *0x66(%edi)
    916c:	89 45 88             	mov    %eax,-0x78(%ebp)
    916f:	67 66 89 3c          	mov    %di,(%si)
    9173:	24 66                	and    $0x66,%al
    9175:	e8 ed f2 ff ff       	call   8467 <_Z6strlenPKc>
    917a:	67 66 8b 55 88       	mov    -0x78(%di),%dx
    917f:	67 66 8d 44 02       	lea    0x2(%si),%ax
    9184:	02 67 66             	add    0x66(%edi),%ah
    9187:	01 45 8c             	add    %eax,-0x74(%ebp)
        for(size_t i = 0; i < prog_cnt; ++i)
    918a:	67 66 ff 45 90       	incw   -0x70(%di)
    918f:	66 59                	pop    %cx
    9191:	e9 58 ff 67 66       	jmp    666890ee <_GLOBAL_OFFSET_TABLE_+0x6667e4ee>
    }
    9196:	8d 65 f4             	lea    -0xc(%ebp),%esp
    9199:	66 5b                	pop    %bx
    919b:	66 5e                	pop    %si
    919d:	66 5f                	pop    %di
    919f:	66 5d                	pop    %bp
    91a1:	66 c3                	retw   

Disassembly of section .text._ZN2sh3runEv:

000091a4 <_ZN2sh3runEv>:
        read_help_file();
    }
    void run () {
    91a4:	66 55                	push   %bp
    91a6:	66 89 e5             	mov    %sp,%bp
    91a9:	66 57                	push   %di
    91ab:	66 56                	push   %si
    91ad:	66 53                	push   %bx
    91af:	66 83 ec 0c          	sub    $0xc,%sp
    91b3:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        printf("%s", prompt);
    91b8:	66 68 d2 ab          	pushw  $0xabd2
    91bc:	00 00                	add    %al,(%eax)
    91be:	66 68 cf ab          	pushw  $0xabcf
    91c2:	00 00                	add    %al,(%eax)
    91c4:	66 e8 e0 fa          	callw  8ca8 <_Z7sprintfPcPKcz+0x1e>
    91c8:	ff                   	(bad)  
    91c9:	ff 66 59             	jmp    *0x59(%esi)
    91cc:	66 5e                	pop    %si
        while(true)
        {
            char in = getchar();
    91ce:	66 e8 94 f6          	callw  8866 <_Z4putsPKc+0x3c>
    91d2:	ff                   	(bad)  
    91d3:	ff 66 89             	jmp    *-0x77(%esi)
    91d6:	c2 3c 08             	ret    $0x83c
            if (in == '\b')
    91d9:	75 35                	jne    9210 <_ZN2sh3runEv+0x6c>
            {
                if(pos != 0){
    91db:	67 66 83 bb c4 08 00 	cmpw   $0x0,0x8c4(%bp,%di)
    91e2:	00 00                	add    %al,(%eax)
    91e4:	74 e8                	je     91ce <_ZN2sh3runEv+0x2a>
                    putchar('\b');
    91e6:	66 6a 08             	pushw  $0x8
    91e9:	66 e8 21 f6          	callw  880e <_ZL19system_call_putchari+0x29>
    91ed:	ff                   	(bad)  
    91ee:	ff 67 66             	jmp    *0x66(%edi)
                    buf[pos--] = '\0';
    91f1:	8b 83 c4 08 00 00    	mov    0x8c4(%ebx),%eax
    91f7:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    91fc:	67 66 89 93 c4 08    	mov    %dx,0x8c4(%bp,%di)
    9202:	00 00                	add    %al,(%eax)
    9204:	67 c6 84 03 00 02    	movb   $0x2,0x3(%si)
    920a:	00 00                	add    %al,(%eax)
    920c:	00 e9                	add    %ch,%cl
    920e:	b2 01                	mov    $0x1,%dl
                }
            }
            else if (in == 13)
    9210:	3c 0d                	cmp    $0xd,%al
    9212:	0f 85 73 01 66 6a    	jne    6a66938b <_GLOBAL_OFFSET_TABLE_+0x6a65e78b>
            {
                putchar('\n');
    9218:	0a 66 e8             	or     -0x18(%esi),%ah
    921b:	f1                   	icebp  
    921c:	f5                   	cmc    
    921d:	ff                   	(bad)  
    921e:	ff 67 66             	jmp    *0x66(%edi)
                int input_cnt = split_input(buf);
    9221:	8d 83 00 02 00 00    	lea    0x200(%ebx),%eax
    9227:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    922c:	66 5a                	pop    %dx
        char * p = buf;
    922e:	66 89 c6             	mov    %ax,%si
        while(*p && isspace(*p)){
    9231:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    9238:	75 08                	jne    9242 <_ZN2sh3runEv+0x9e>
        char * p = buf;
    923a:	66 31 d2             	xor    %dx,%dx
    923d:	66 31 ff             	xor    %di,%di
    9240:	eb 39                	jmp    927b <_ZN2sh3runEv+0xd7>
        while(*p && isspace(*p)){
    9242:	66 50                	push   %ax
    9244:	66 e8 34 f3          	callw  857c <_Z7reversePc+0x4a>
    9248:	ff                   	(bad)  
    9249:	ff 66 5f             	jmp    *0x5f(%esi)
    924c:	66 85 c0             	test   %ax,%ax
    924f:	74 e9                	je     923a <_ZN2sh3runEv+0x96>
            ++p;
    9251:	66 46                	inc    %si
    9253:	eb dc                	jmp    9231 <_ZN2sh3runEv+0x8d>
    9255:	67 88 55 ec          	mov    %dl,-0x14(%di)
            if(isspace(*p))
    9259:	66 50                	push   %ax
    925b:	66 e8 1d f3          	callw  857c <_Z7reversePc+0x4a>
    925f:	ff                   	(bad)  
    9260:	ff 66 59             	jmp    *0x59(%esi)
    9263:	66 85 c0             	test   %ax,%ax
    9266:	67 8a 55 ec          	mov    -0x14(%di),%dl
    926a:	74 1a                	je     9286 <_ZN2sh3runEv+0xe2>
                *p = '\0';
    926c:	67 c6 06 00 84 d2    	movb   $0xd2,-0x7c00
                if(con)
    9272:	74 05                	je     9279 <_ZN2sh3runEv+0xd5>
                    ++i;
    9274:	66 47                	inc    %di
                    con = false;
    9276:	66 31 d2             	xor    %dx,%dx
            ++p;
    9279:	66 46                	inc    %si
        while (*p)
    927b:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    9282:	75 d1                	jne    9255 <_ZN2sh3runEv+0xb1>
    9284:	eb 0d                	jmp    9293 <_ZN2sh3runEv+0xef>
                if(!con)
    9286:	84 d2                	test   %dl,%dl
    9288:	75 ef                	jne    9279 <_ZN2sh3runEv+0xd5>
                    inputs[i] = p;
    928a:	67 66 89 34          	mov    %si,(%si)
    928e:	bb b2 01 eb e6       	mov    $0xe6eb01b2,%ebx
        if(con) ++i;
    9293:	84 d2                	test   %dl,%dl
    9295:	74 04                	je     929b <_ZN2sh3runEv+0xf7>
    9297:	66 47                	inc    %di
    9299:	eb 07                	jmp    92a2 <_ZN2sh3runEv+0xfe>
                if (input_cnt == 0)
    929b:	66 85 ff             	test   %di,%di
    929e:	0f 84 2c ff 66 31    	je     316791d0 <_GLOBAL_OFFSET_TABLE_+0x3166e5d0>
        int p = 0;
    92a4:	d2 66 68             	shlb   %cl,0x68(%esi)
        while(strcmp(inputs[p], ";") == 0){
    92a7:	d9 ab 00 00 67 66    	fldcw  0x66670000(%ebx)
    92ad:	ff 34 93             	pushl  (%ebx,%edx,4)
    92b0:	67 66 89 55 ec       	mov    %dx,-0x14(%di)
    92b5:	66 e8 0a f2          	callw  84c3 <_Z6strcpyPcPKc+0x40>
    92b9:	ff                   	(bad)  
    92ba:	ff 66 5e             	jmp    *0x5e(%esi)
    92bd:	66 5a                	pop    %dx
    92bf:	66 85 c0             	test   %ax,%ax
    92c2:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    92c7:	75 04                	jne    92cd <_ZN2sh3runEv+0x129>
            ++p;
    92c9:	66 42                	inc    %dx
    92cb:	eb d8                	jmp    92a5 <_ZN2sh3runEv+0x101>
        bool con = false;
    92cd:	66 31 c9             	xor    %cx,%cx
        int i = 0;
    92d0:	66 31 f6             	xor    %si,%si
        while (p < input_cnt)
    92d3:	66 39 fa             	cmp    %di,%dx
    92d6:	7d 61                	jge    9339 <_ZN2sh3runEv+0x195>
    92d8:	67 88 4d eb          	mov    %cl,-0x15(%di)
            if(strcmp(inputs[p], ";") == 0)
    92dc:	66 68 d9 ab          	pushw  $0xabd9
    92e0:	00 00                	add    %al,(%eax)
    92e2:	67 66 ff 34          	pushw  (%si)
    92e6:	93                   	xchg   %eax,%ebx
    92e7:	67 66 89 55 ec       	mov    %dx,-0x14(%di)
    92ec:	66 e8 d3 f1          	callw  84c3 <_Z6strcpyPcPKc+0x40>
    92f0:	ff                   	(bad)  
    92f1:	ff 66 5a             	jmp    *0x5a(%esi)
    92f4:	66 59                	pop    %cx
    92f6:	66 85 c0             	test   %ax,%ax
    92f9:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    92fe:	67 8a 4d eb          	mov    -0x15(%di),%cl
    9302:	75 0b                	jne    930f <_ZN2sh3runEv+0x16b>
                if(con)
    9304:	84 c9                	test   %cl,%cl
    9306:	74 2d                	je     9335 <_ZN2sh3runEv+0x191>
                    ++i;
    9308:	66 46                	inc    %si
                    con = false;
    930a:	66 31 c9             	xor    %cx,%cx
    930d:	eb 26                	jmp    9335 <_ZN2sh3runEv+0x191>
                if(!con)
    930f:	84 c9                	test   %cl,%cl
    9311:	75 19                	jne    932c <_ZN2sh3runEv+0x188>
    9313:	67 66 8d 04          	lea    (%si),%ax
    9317:	f3 67 66 89 90 00 01 	xrelease mov %dx,0x100(%bx,%si)
                    cmds[i].start = p;
    931e:	00 00                	add    %al,(%eax)
                    cmds[i].cnt++;
    9320:	67 66 ff 80 04 01    	incw   0x104(%bx,%si)
    9326:	00 00                	add    %al,(%eax)
                    con = true;
    9328:	b1 01                	mov    $0x1,%cl
    932a:	eb 09                	jmp    9335 <_ZN2sh3runEv+0x191>
                    cmds[i].cnt++;
    932c:	67 66 ff 84 f3 04    	incw   0x4f3(%si)
    9332:	01 00                	add    %eax,(%eax)
    9334:	00 66 42             	add    %ah,0x42(%esi)
            ++p;
    9337:	eb 9a                	jmp    92d3 <_ZN2sh3runEv+0x12f>
        if(con) ++i;
    9339:	84 c9                	test   %cl,%cl
    933b:	74 02                	je     933f <_ZN2sh3runEv+0x19b>
    933d:	66 46                	inc    %si
                    continue;
                int cmd_cnt = split_batch(inputs, input_cnt);
                for(int cmd_num = 0; cmd_num < cmd_cnt; ++ cmd_num)
    933f:	66 31 ff             	xor    %di,%di
    9342:	66 39 f7             	cmp    %si,%di
    9345:	74 1b                	je     9362 <_ZN2sh3runEv+0x1be>
                {
                    exec(cmds[cmd_num]);
    9347:	67 66 8d 84 fb 00    	lea    0xfb(%si),%ax
    934d:	01 00                	add    %eax,(%eax)
    934f:	00 66 50             	add    %ah,0x50(%esi)
    9352:	66 53                	push   %bx
    9354:	66 e8 c8 fa          	callw  8e20 <_ZN3tty7putcharEi+0x100>
    9358:	ff                   	(bad)  
    9359:	ff 66 47             	jmp    *0x47(%esi)
                for(int cmd_num = 0; cmd_num < cmd_cnt; ++ cmd_num)
    935c:	66 5a                	pop    %dx
    935e:	66 59                	pop    %cx
    9360:	eb e0                	jmp    9342 <_ZN2sh3runEv+0x19e>
                }
                memset(buf, 0, buf_size);
    9362:	66 68 80 00          	pushw  $0x80
    9366:	00 00                	add    %al,(%eax)
    9368:	66 6a 00             	pushw  $0x0
    936b:	67 66 ff 75 f0       	pushw  -0x10(%di)
    9370:	66 e8 cc f0          	callw  8440 <_Z7memmovePvPKvm+0x4b>
    9374:	ff                   	(bad)  
    9375:	ff 67 66             	jmp    *0x66(%edi)
                pos = 0;
    9378:	c7 83 c4 08 00 00 00 	movl   $0x0,0x8c4(%ebx)
    937f:	00 00 00 
                printf("%s", prompt);
    9382:	66 83 c4 0c          	add    $0xc,%sp
    9386:	e9 2f fe 84 c0       	jmp    c08591ba <_GLOBAL_OFFSET_TABLE_+0xc084e5ba>
            }
            else if (in == 0)
    938b:	0f 84 3f fe 66 0f    	je     f6791d0 <_GLOBAL_OFFSET_TABLE_+0xf66e5d0>
            {
                continue;
            }
            else {
                putchar(in);
    9391:	be c0 67 66 89       	mov    $0x896667c0,%esi
    9396:	55                   	push   %ebp
    9397:	f0 66 50             	lock push %ax
    939a:	66 e8 70 f4          	callw  880e <_ZL19system_call_putchari+0x29>
    939e:	ff                   	(bad)  
    939f:	ff 67 66             	jmp    *0x66(%edi)
                buf[pos++] = in;
    93a2:	8b 83 c4 08 00 00    	mov    0x8c4(%ebx),%eax
    93a8:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    93ad:	67 66 89 8b c4 08    	mov    %cx,0x8c4(%bp,%di)
    93b3:	00 00                	add    %al,(%eax)
    93b5:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    93ba:	67 88 94 03 00       	mov    %dl,0x3(%si)
    93bf:	02 00                	add    (%eax),%al
    93c1:	00 66 58             	add    %ah,0x58(%esi)
    93c4:	e9                   	.byte 0xe9
    93c5:	07                   	pop    %es
    93c6:	fe                   	.byte 0xfe

Disassembly of section .text._Z4itoaIjEvPcT_ib:

000093c7 <_Z4itoaIjEvPcT_ib>:
void itoa(char* buffer, T num, int base, bool captial = false)
    93c7:	66 55                	push   %bp
    93c9:	66 89 e5             	mov    %sp,%bp
    93cc:	66 57                	push   %di
    93ce:	66 56                	push   %si
    93d0:	66 53                	push   %bx
    93d2:	66 83 ec 08          	sub    $0x8,%sp
    93d6:	67 66 8b 75 08       	mov    0x8(%di),%si
    93db:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    93e0:	67 66 8b 7d 10       	mov    0x10(%di),%di
    93e5:	67 8a 5d 14          	mov    0x14(%di),%bl
    93e9:	67 88 5d ef          	mov    %bl,-0x11(%di)
    char *p = buffer;
    93ed:	66 89 f1             	mov    %si,%cx
    93f0:	66 31 d2             	xor    %dx,%dx
    93f3:	66 f7 f7             	div    %di
    93f6:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    93fb:	67 80 7d ef 00       	cmpb   $0x0,-0x11(%di)
    9400:	74 09                	je     940b <_Z4itoaIjEvPcT_ib+0x44>
    9402:	67 8a 9a db ab       	mov    -0x5425(%bp,%si),%bl
    9407:	00 00                	add    %al,(%eax)
    9409:	eb 07                	jmp    9412 <_Z4itoaIjEvPcT_ib+0x4b>
    940b:	67 8a 9a ec ab       	mov    -0x5414(%bp,%si),%bl
    9410:	00 00                	add    %al,(%eax)
    9412:	67 66 8d 51 01       	lea    0x1(%bx,%di),%dx
    9417:	67 88 5a ff          	mov    %bl,-0x1(%bp,%si)
        if(num == 0) break;
    941b:	67 66 83 7d f0 00    	cmpw   $0x0,-0x10(%di)
    9421:	74 05                	je     9428 <_Z4itoaIjEvPcT_ib+0x61>
    9423:	66 89 d1             	mov    %dx,%cx
    9426:	eb c8                	jmp    93f0 <_Z4itoaIjEvPcT_ib+0x29>
    *p = '\0';
    9428:	67 c6 41 01 00       	movb   $0x0,0x1(%bx,%di)
    reverse(buffer);
    942d:	67 66 89 75 08       	mov    %si,0x8(%di)
}
    9432:	66 58                	pop    %ax
    9434:	66 5a                	pop    %dx
    9436:	66 5b                	pop    %bx
    9438:	66 5e                	pop    %si
    943a:	66 5f                	pop    %di
    943c:	66 5d                	pop    %bp
    reverse(buffer);
    943e:	e9                   	.byte 0xe9
    943f:	f1                   	icebp  
    9440:	f0                   	lock
