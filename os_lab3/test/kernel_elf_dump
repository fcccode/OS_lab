
build/kernel/kernel.bin.elf:     file format elf32-i386


Disassembly of section .text:

00007e00 <_text>:
    7e00:	68 37 7e 68 80       	push   $0x80687e37
    7e05:	00 e8                	add    %ch,%al
    7e07:	15 00 83 c4 04       	adc    $0x4c48300,%eax
    7e0c:	68 39 7e 68 84       	push   $0x84687e39
    7e11:	00 e8                	add    %ch,%al
    7e13:	09 00                	or     %eax,(%eax)
    7e15:	83 c4 04             	add    $0x4,%esp
    7e18:	e8 3b 00 fa eb       	call   ebfa7e58 <_GLOBAL_OFFSET_TABLE_+0xebf9d87c>
    7e1d:	fe                   	.byte 0xfe

00007e1e <install_int>:
    7e1e:	55                   	push   %ebp
    7e1f:	89 e5                	mov    %esp,%ebp
    7e21:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    7e26:	8b 76 04             	mov    0x4(%esi),%esi
    7e29:	8b 4e 06             	mov    0x6(%esi),%ecx
    7e2c:	26 89 0c 26          	mov    %ecx,%es:(%esi,%eiz,1)
    7e30:	8c 4c 02 8e          	mov    %cs,-0x72(%edx,%eax,1)
    7e34:	c0                   	.byte 0xc0
    7e35:	5d                   	pop    %ebp
    7e36:	c3                   	ret    

00007e37 <interrupt_20h>:
    7e37:	b4 4c                	mov    $0x4c,%ah

00007e39 <interrupt_21h>:
    7e39:	80 fc 4c             	cmp    $0x4c,%ah
    7e3c:	75 09                	jne    7e47 <panic_21h_func_not_impl>
    7e3e:	83 c4 06             	add    $0x6,%esp
    7e41:	66 ff 26             	jmpw   *(%esi)
    7e44:	0a                   	.byte 0xa
    7e45:	a0                   	.byte 0xa0
    7e46:	cf                   	iret   

00007e47 <panic_21h_func_not_impl>:
    7e47:	eb fe                	jmp    7e47 <panic_21h_func_not_impl>

00007e49 <_Z19sys_get_current_ttyv>:
#include "../libc/string.h"
#include "../libc/stdio.h"
#include "sh.h"

static tty* current_tty = nullptr;
tty* sys_get_current_tty(){return current_tty;}
    7e49:	66 55                	push   %bp
    7e4b:	66 89 e5             	mov    %sp,%bp
    7e4e:	66 a1 a0 95 66 5d    	mov    0x5d6695a0,%ax
    7e54:	66 c3                	retw   

00007e56 <kernel_main>:
const char* str = "I am back";
extern "C" void kernel_main()
{
    7e56:	66 55                	push   %bp
    7e58:	66 89 e5             	mov    %sp,%bp
    7e5b:	66 53                	push   %bx
    7e5d:	66 81 ec 54 06       	sub    $0x654,%sp
    7e62:	00 00                	add    %al,(%eax)
#ifdef _USE_MULTI_TTY_
    char tty_mem[80*25*2];
#endif
public:
    tty() {
        sys_bios_clear_screen();
    7e64:	66 e8 16 01          	callw  7f7e <sys_bios_print_string+0x1e>
    7e68:	00 00                	add    %al,(%eax)
        tty_init();
    }
    void tty_init()
    {
        cur_x = 0;
    7e6a:	67 66 c7 85 a8 f9 ff 	movw   $0xffff,-0x658(%di)
    7e71:	ff 
    7e72:	00 00                	add    %al,(%eax)
    7e74:	00 00                	add    %al,(%eax)
        cur_y = 0;
    7e76:	67 66 c7 85 ac f9 ff 	movw   $0xffff,-0x654(%di)
    7e7d:	ff 
    7e7e:	00 00                	add    %al,(%eax)
    7e80:	00 00                	add    %al,(%eax)
        color = color;
    }
    void move_cursor(int x, int y)
    {
        uint16_t pos = x * 80 + y;
        sys_outb(0x3D4, 0x0F);
    7e82:	66 6a 0f             	pushw  $0xf
    7e85:	66 68 d4 03          	pushw  $0x3d4
    7e89:	00 00                	add    %al,(%eax)
    7e8b:	66 e8 84 03          	callw  8213 <sys_inb+0xd>
    7e8f:	00 00                	add    %al,(%eax)
        sys_outb(0x3D5, (uint8_t) (pos & 0xFF));
    7e91:	66 58                	pop    %ax
    7e93:	66 5a                	pop    %dx
    7e95:	66 6a 00             	pushw  $0x0
    7e98:	66 68 d5 03          	pushw  $0x3d5
    7e9c:	00 00                	add    %al,(%eax)
    7e9e:	66 e8 71 03          	callw  8213 <sys_inb+0xd>
    7ea2:	00 00                	add    %al,(%eax)
        sys_outb(0x3D4, 0x0E);
    7ea4:	66 59                	pop    %cx
    7ea6:	66 5b                	pop    %bx
    7ea8:	66 6a 0e             	pushw  $0xe
    7eab:	66 68 d4 03          	pushw  $0x3d4
    7eaf:	00 00                	add    %al,(%eax)
    7eb1:	66 e8 5e 03          	callw  8213 <sys_inb+0xd>
    7eb5:	00 00                	add    %al,(%eax)
        sys_outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
    7eb7:	66 58                	pop    %ax
    7eb9:	66 5a                	pop    %dx
    7ebb:	66 6a 00             	pushw  $0x0
    7ebe:	66 68 d5 03          	pushw  $0x3d5
    7ec2:	00 00                	add    %al,(%eax)
    7ec4:	66 e8 4b 03          	callw  8213 <sys_inb+0xd>
    7ec8:	00 00                	add    %al,(%eax)
        color = MAKE_COLOR(VGA_BLACK, VGA_WHITE);
    7eca:	67 66 c7 85 b0 f9 ff 	movw   $0xffff,-0x650(%di)
    7ed1:	ff 
    7ed2:	07                   	pop    %es
    7ed3:	00 00                	add    %al,(%eax)
    7ed5:	00 67 66             	add    %ah,0x66(%edi)
    tty tty1;
    current_tty = &tty1;
    7ed8:	8d 85 a8 f9 ff ff    	lea    -0x658(%ebp),%eax
    7ede:	66 a3 a0 95 66 59    	mov    %ax,0x596695a0
//        if (ch == 13)
//            putchar('\n');
//        else
//            putchar(ch);
//    }
    printf("%s\n", "tty init OK");
    7ee4:	66 5b                	pop    %bx
    7ee6:	66 68 96 a5          	pushw  $0xa596
    7eea:	00 00                	add    %al,(%eax)
    7eec:	66 68 92 a5          	pushw  $0xa592
    7ef0:	00 00                	add    %al,(%eax)
    7ef2:	66 e8 22 0c          	callw  8b18 <_Z7sprintfPcPKcz+0x1e>
    7ef6:	00 00                	add    %al,(%eax)
            progs[i].lba = strtol(buf3, nullptr, 10);
            p += (strlen(buf2) + strlen(buf3) + 2);
        }
    }
public:
    sh(){
    7ef8:	67 66 c7 45 f4 00 00 	movw   $0x0,-0xc(%di)
    7eff:	00 00                	add    %al,(%eax)
    7f01:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    7f08:	00 00                	add    %al,(%eax)
        memset(buf, 0, buf_size);
    7f0a:	66 58                	pop    %ax
    7f0c:	66 5a                	pop    %dx
    7f0e:	66 68 00 02          	pushw  $0x200
    7f12:	00 00                	add    %al,(%eax)
    7f14:	66 6a 00             	pushw  $0x0
    7f17:	67 66 8d 9d b4 f9    	lea    -0x64c(%di),%bx
    7f1d:	ff                   	(bad)  
    7f1e:	ff 66 53             	jmp    *0x53(%esi)
    7f21:	66 e8 38 04          	callw  835d <_Z7memmovePvPKvm+0x4b>
    7f25:	00 00                	add    %al,(%eax)
        read_prog_record();
    7f27:	66 83 c4 0c          	add    $0xc,%sp
    7f2b:	66 53                	push   %bx
    7f2d:	66 e8 4d 0c          	callw  8b7e <_Z7isspacei+0x26>
    7f31:	00 00                	add    %al,(%eax)
    sh sh1;
    printf("%s\n", "sh init OK");
    7f33:	67 66 c7 04 24 a2    	movw   $0xa224,(%si)
    7f39:	a5                   	movsl  %ds:(%esi),%es:(%edi)
    7f3a:	00 00                	add    %al,(%eax)
    7f3c:	66 68 92 a5          	pushw  $0xa592
    7f40:	00 00                	add    %al,(%eax)
    7f42:	66 e8 d2 0b          	callw  8b18 <_Z7sprintfPcPKcz+0x1e>
    7f46:	00 00                	add    %al,(%eax)
    sh1.run();
    7f48:	66 59                	pop    %cx
    7f4a:	66 58                	pop    %ax
    7f4c:	66 53                	push   %bx
    7f4e:	66 e8 6a 0d          	callw  8cbc <_text_end+0x13c>
    7f52:	00 00                	add    %al,(%eax)
    7f54:	66 90                	xchg   %ax,%ax
    7f56:	66 90                	xchg   %ax,%ax
    7f58:	66 90                	xchg   %ax,%ax
    7f5a:	66 90                	xchg   %ax,%ax
    7f5c:	66 90                	xchg   %ax,%ax
    7f5e:	66 90                	xchg   %ax,%ax

00007f60 <sys_bios_print_string>:
    7f60:	55                   	push   %ebp
    7f61:	89 e5                	mov    %esp,%ebp
    7f63:	8b 4e 0a             	mov    0xa(%esi),%ecx
    7f66:	8b 5e 0e             	mov    0xe(%esi),%ebx
    7f69:	b7 00                	mov    $0x0,%bh
    7f6b:	8b 56 12             	mov    0x12(%esi),%edx
    7f6e:	8c d8                	mov    %ds,%eax
    7f70:	8e c0                	mov    %eax,%es
    7f72:	b8 01 13 8e ed       	mov    $0xed8e1301,%eax
    7f77:	8b 6e 06             	mov    0x6(%esi),%ebp
    7f7a:	cd 10                	int    $0x10
    7f7c:	8c ed                	mov    %gs,%ebp
    7f7e:	5d                   	pop    %ebp
    7f7f:	c3                   	ret    

00007f80 <sys_bios_clear_screen>:
    7f80:	60                   	pusha  
    7f81:	b4 06                	mov    $0x6,%ah
    7f83:	b0 00                	mov    $0x0,%al
    7f85:	b7 07                	mov    $0x7,%bh
    7f87:	b5 00                	mov    $0x0,%ch
    7f89:	b1 00                	mov    $0x0,%cl
    7f8b:	b6 18                	mov    $0x18,%dh
    7f8d:	b2 4f                	mov    $0x4f,%dl
    7f8f:	cd 10                	int    $0x10
    7f91:	61                   	popa   
    7f92:	c3                   	ret    

00007f93 <sys_bios_getchar>:
    7f93:	b4 00                	mov    $0x0,%ah
    7f95:	cd 16                	int    $0x16
    7f97:	b4 00                	mov    $0x0,%ah
    7f99:	c3                   	ret    

00007f9a <sys_execve_bin>:
    7f9a:	55                   	push   %ebp
    7f9b:	89 e5                	mov    %esp,%ebp
    7f9d:	1e                   	push   %ds
    7f9e:	06                   	push   %es
    7f9f:	16                   	push   %ss
    7fa0:	b8 00 10 8e d8       	mov    $0xd88e1000,%eax
    7fa5:	8e c0                	mov    %eax,%es
    7fa7:	8e d0                	mov    %eax,%ss
    7fa9:	c7 06 00 a0 cd 00    	movl   $0xcda000,(%esi)
    7faf:	c7 06 02 a0 20 00    	movl   $0x20a002,(%esi)
    7fb5:	c7 06 0a a0 c4 7f    	movl   $0x7fc4a00a,(%esi)
    7fbb:	8c 0e                	mov    %cs,(%esi)
    7fbd:	0c a0                	or     $0xa0,%al
    7fbf:	ea                   	.byte 0xea
    7fc0:	00                   	.byte 0x0
    7fc1:	a1                   	.byte 0xa1
    7fc2:	00 10                	add    %dl,(%eax)

00007fc4 <return_point>:
    7fc4:	58                   	pop    %eax
    7fc5:	8e d0                	mov    %eax,%ss
    7fc7:	58                   	pop    %eax
    7fc8:	8e c0                	mov    %eax,%es
    7fca:	58                   	pop    %eax
    7fcb:	8e d8                	mov    %eax,%ds
    7fcd:	5d                   	pop    %ebp
    7fce:	c3                   	ret    

00007fcf <sys_bios_print_int>:
#include "sys_lib.h"
void sys_bios_print_int(int num, int color, int pos)
{
    7fcf:	66 55                	push   %bp
    7fd1:	66 89 e5             	mov    %sp,%bp
    7fd4:	66 57                	push   %di
    7fd6:	66 56                	push   %si
    7fd8:	66 53                	push   %bx
    7fda:	66 50                	push   %ax
    int num_ = num;
    7fdc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    7fe1:	66 b9 01 00          	mov    $0x1,%cx
    7fe5:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    7fe7:	66 bb 0a 00          	mov    $0xa,%bx
    7feb:	00 00                	add    %al,(%eax)
    7fed:	66 99                	cwtd   
    7fef:	66 f7 fb             	idiv   %bx
    7ff2:	66 85 c0             	test   %ax,%ax
    7ff5:	74 04                	je     7ffb <sys_bios_print_int+0x2c>
    7ff7:	66 41                	inc    %cx
    7ff9:	eb f2                	jmp    7fed <sys_bios_print_int+0x1e>
    char arr[len + 1];
    7ffb:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    8000:	66 83 e0 fc          	and    $0xfffc,%ax
    8004:	66 29 c4             	sub    %ax,%sp
    8007:	66 89 e7             	mov    %sp,%di
    800a:	67 66 8d 1c          	lea    (%si),%bx
    800e:	0c 67                	or     $0x67,%al
    int power = 1;
    8010:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    8016:	00 00                	add    %al,(%eax)
    for(int i = 0; i < len; ++i, power *= 10)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    8018:	67 66 8b 45 08       	mov    0x8(%di),%ax
    801d:	66 99                	cwtd   
    801f:	67 66 f7 7d f0       	idivw  -0x10(%di)
    8024:	66 be 0a 00          	mov    $0xa,%si
    8028:	00 00                	add    %al,(%eax)
    802a:	66 99                	cwtd   
    802c:	66 f7 fe             	idiv   %si
    802f:	66 83 c2 30          	add    $0x30,%dx
    8033:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    8037:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    803d:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8042:	66 4b                	dec    %bx
    8044:	66 39 df             	cmp    %bx,%di
    8047:	75 cf                	jne    8018 <sys_bios_print_int+0x49>
    arr[len] = '\0';
    8049:	67 c6 04 0f          	movb   $0xf,(%si)
    804d:	00 67 66             	add    %ah,0x66(%edi)
    sys_bios_print_string(arr, len, color, pos);
    8050:	ff 75 10             	pushl  0x10(%ebp)
    8053:	67 66 ff 75 0c       	pushw  0xc(%di)
    8058:	66 51                	push   %cx
    805a:	66 57                	push   %di
    805c:	66 e8 fe fe          	callw  7f5e <kernel_main+0x108>
    8060:	ff                   	(bad)  
    8061:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8064:	c4 10                	les    (%eax),%edx
    8066:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    806b:	66 5b                	pop    %bx
    806d:	66 5e                	pop    %si
    806f:	66 5f                	pop    %di
    8071:	66 5d                	pop    %bp
    8073:	66 c3                	retw   

00008075 <sys_putchar>:
    //"mov word ptr gs:[bp],ax\n\t"
                   //".att_syntax noprefix\n\t");
//}

void sys_putchar(int c, int color, int x, int y)
{
    8075:	66 55                	push   %bp
    8077:	66 89 e5             	mov    %sp,%bp
    807a:	66 53                	push   %bx
    int offset = (x * 80 + y)*2;
    uint16_t ch = c | (color << 8);
    807c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8081:	66 c1 e0 08          	shl    $0x8,%ax
    8085:	67 66 0b 45 08       	or     0x8(%di),%ax
    int offset = (x * 80 + y)*2;
    808a:	67 66 6b 5d 10 50    	imul   $0x50,0x10(%di),%bx
    8090:	67 66 03 5d 14       	add    0x14(%di),%bx
    8095:	66 01 db             	add    %bx,%bx
    "mov word ptr gs:[bp],ax\n\t"
    "popa\n\t"
    ".att_syntax noprefix\n\t"
    :
    :"a"(ch),"b"(offset)
    :"%ecx");
    8098:	66 60                	pushaw 
    809a:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    809f:	89 dd                	mov    %ebx,%ebp
    80a1:	65 89 46 00          	mov    %eax,%gs:0x0(%esi)
    80a5:	66 61                	popaw  
}
    80a7:	66 5b                	pop    %bx
    80a9:	66 5d                	pop    %bp
    80ab:	66 c3                	retw   

000080ad <sys_print_string>:
{
    80ad:	66 55                	push   %bp
    80af:	66 89 e5             	mov    %sp,%bp
    80b2:	66 56                	push   %si
    80b4:	66 53                	push   %bx
    80b6:	67 66 8b 5d 14       	mov    0x14(%di),%bx
    80bb:	67 66 8b 75 0c       	mov    0xc(%di),%si
    80c0:	66 01 de             	add    %bx,%si
    80c3:	66 89 da             	mov    %bx,%dx
    for(unsigned int i = 0; i < len; ++i)
    80c6:	66 39 f2             	cmp    %si,%dx
    80c9:	74 28                	je     80f3 <sys_print_string+0x46>
        sys_putchar(str[i], color, x, y + i);
    80cb:	66 52                	push   %dx
    80cd:	67 66 ff 75 10       	pushw  0x10(%di)
    80d2:	66 6a 07             	pushw  $0x7
    80d5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    80da:	66 29 d8             	sub    %bx,%ax
    80dd:	67 66 0f be 04       	movsbw (%si),%ax
    80e2:	10 66 50             	adc    %ah,0x50(%esi)
    80e5:	66 e8 8a ff          	callw  8073 <sys_bios_print_int+0xa4>
    80e9:	ff                   	(bad)  
    80ea:	ff 66 42             	jmp    *0x42(%esi)
    for(unsigned int i = 0; i < len; ++i)
    80ed:	66 83 c4 10          	add    $0x10,%sp
    80f1:	eb d3                	jmp    80c6 <sys_print_string+0x19>
}
    80f3:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    80f8:	66 5b                	pop    %bx
    80fa:	66 5e                	pop    %si
    80fc:	66 5d                	pop    %bp
    80fe:	66 c3                	retw   

00008100 <sys_print_int>:
{
    8100:	66 55                	push   %bp
    8102:	66 89 e5             	mov    %sp,%bp
    8105:	66 57                	push   %di
    8107:	66 56                	push   %si
    8109:	66 53                	push   %bx
    810b:	66 50                	push   %ax
    int num_ = num;
    810d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    int len = 1;
    8112:	66 b9 01 00          	mov    $0x1,%cx
    8116:	00 00                	add    %al,(%eax)
    while(num_ /= 10) len++;
    8118:	66 bb 0a 00          	mov    $0xa,%bx
    811c:	00 00                	add    %al,(%eax)
    811e:	66 99                	cwtd   
    8120:	66 f7 fb             	idiv   %bx
    8123:	66 85 c0             	test   %ax,%ax
    8126:	74 04                	je     812c <sys_print_int+0x2c>
    8128:	66 41                	inc    %cx
    812a:	eb f2                	jmp    811e <sys_print_int+0x1e>
    char arr[len + 1];
    812c:	67 66 8d 41 04       	lea    0x4(%bx,%di),%ax
    8131:	66 83 e0 fc          	and    $0xfffc,%ax
    8135:	66 29 c4             	sub    %ax,%sp
    8138:	66 89 e7             	mov    %sp,%di
    813b:	67 66 8d 1c          	lea    (%si),%bx
    813f:	0c 67                	or     $0x67,%al
    int power = 1;
    8141:	66 c7 45 f0 01 00    	movw   $0x1,-0x10(%ebp)
    8147:	00 00                	add    %al,(%eax)
        arr[len - i - 1] = '0' + ((num / power) % 10);
    8149:	67 66 8b 45 08       	mov    0x8(%di),%ax
    814e:	66 99                	cwtd   
    8150:	67 66 f7 7d f0       	idivw  -0x10(%di)
    8155:	66 be 0a 00          	mov    $0xa,%si
    8159:	00 00                	add    %al,(%eax)
    815b:	66 99                	cwtd   
    815d:	66 f7 fe             	idiv   %si
    8160:	66 83 c2 30          	add    $0x30,%dx
    8164:	67 88 53 ff          	mov    %dl,-0x1(%bp,%di)
    for(int i = 0; i < len; ++i, power *= 10)
    8168:	67 66 6b 45 f0 0a    	imul   $0xa,-0x10(%di),%ax
    816e:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8173:	66 4b                	dec    %bx
    8175:	66 39 df             	cmp    %bx,%di
    8178:	75 cf                	jne    8149 <sys_print_int+0x49>
    arr[len] = '\0';
    817a:	67 c6 04 0f          	movb   $0xf,(%si)
    817e:	00 67 66             	add    %ah,0x66(%edi)
    sys_print_string(arr, len, x, y); 
    8181:	ff 75 10             	pushl  0x10(%ebp)
    8184:	67 66 ff 75 0c       	pushw  0xc(%di)
    8189:	66 51                	push   %cx
    818b:	66 57                	push   %di
    818d:	66 e8 1a ff          	callw  80ab <sys_putchar+0x36>
    8191:	ff                   	(bad)  
    8192:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8195:	c4 10                	les    (%eax),%edx
    8197:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    819c:	66 5b                	pop    %bx
    819e:	66 5e                	pop    %si
    81a0:	66 5f                	pop    %di
    81a2:	66 5d                	pop    %bp
    81a4:	66 c3                	retw   

000081a6 <sys_bios_scroll_up>:

void sys_bios_scroll_up(int color)
{
    81a6:	66 55                	push   %bp
    81a8:	66 89 e5             	mov    %sp,%bp
    "movb $79, %%dl\n\t"
    "movb $0x06, %%ah\n\t"
    "int $0x10\n\t"
    "popa\n\t"
    :
    : "g"(color));
    81ab:	66 60                	pushaw 
    81ad:	b0 01                	mov    $0x1,%al
    81af:	67 8a 7d 08          	mov    0x8(%di),%bh
    81b3:	b5 00                	mov    $0x0,%ch
    81b5:	b1 00                	mov    $0x0,%cl
    81b7:	b6 18                	mov    $0x18,%dh
    81b9:	b2 4f                	mov    $0x4f,%dl
    81bb:	b4 06                	mov    $0x6,%ah
    81bd:	cd 10                	int    $0x10
    81bf:	66 61                	popaw  
}
    81c1:	66 5d                	pop    %bp
    81c3:	66 c3                	retw   

000081c5 <sys_bios_putchar>:

void sys_bios_putchar(char c, int color, int x, int y)
{
    81c5:	66 55                	push   %bp
    81c7:	66 89 e5             	mov    %sp,%bp
    81ca:	66 50                	push   %ax
    81cc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    81d1:	67 88 45 fc          	mov    %al,-0x4(%di)
    sys_bios_print_string(&c, 1, color, MAKE_POS(x, y));
    81d5:	67 66 8b 45 10       	mov    0x10(%di),%ax
    81da:	66 c1 e0 08          	shl    $0x8,%ax
    81de:	67 66 0f b6 55 14    	movzbw 0x14(%di),%dx
    81e4:	66 09 d0             	or     %dx,%ax
    81e7:	66 50                	push   %ax
    81e9:	67 66 ff 75 0c       	pushw  0xc(%di)
    81ee:	66 6a 01             	pushw  $0x1
    81f1:	67 66 8d 45 fc       	lea    -0x4(%di),%ax
    81f6:	66 50                	push   %ax
    81f8:	66 e8 62 fd          	callw  7f5e <kernel_main+0x108>
    81fc:	ff                   	(bad)  
    81fd:	ff 66 83             	jmp    *-0x7d(%esi)
}
    8200:	c4 10                	les    (%eax),%edx
    8202:	66 c9                	leavew 
    8204:	66 c3                	retw   

00008206 <sys_inb>:

uint8_t sys_inb(uint16_t port)
{
    8206:	66 55                	push   %bp
    8208:	66 89 e5             	mov    %sp,%bp
    uint8_t ret;
    asm volatile ( "inb %1, %0"
                   : "=a"(ret)
                   : "Nd"(port) );
    820b:	67 66 8b 55 08       	mov    0x8(%di),%dx
    8210:	ec                   	in     (%dx),%al
    return ret;
}
    8211:	66 5d                	pop    %bp
    8213:	66 c3                	retw   

00008215 <sys_outb>:
//    asm(".att_syntax noprefix\n");
//    return ret;
//}

void sys_outb(uint16_t port, uint8_t data)
{
    8215:	66 55                	push   %bp
    8217:	66 89 e5             	mov    %sp,%bp
    asm volatile ( "outb %0, %1"
                   : 
                   : "a"(data), "Nd"(port) );
    821a:	67 66 8b 55 08       	mov    0x8(%di),%dx
    821f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8224:	ee                   	out    %al,(%dx)
}
    8225:	66 5d                	pop    %bp
    8227:	66 c3                	retw   

00008229 <sys_dbg_bochs_putc>:
//                    : "=a"(ret)
//                    : "Nd"(port) );
//     return ret;
// }

void sys_dbg_bochs_putc(char c){
    8229:	66 55                	push   %bp
    822b:	66 89 e5             	mov    %sp,%bp
                   : "a"(data), "Nd"(port) );
    822e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8233:	e6 e9                	out    %al,$0xe9
    sys_outb(0xe9, (uint8_t)c);
}
    8235:	66 5d                	pop    %bp
    8237:	66 c3                	retw   

00008239 <sys_get_scancode>:

char sys_get_scancode()
{
    8239:	66 55                	push   %bp
    823b:	66 89 e5             	mov    %sp,%bp
                   : "Nd"(port) );
    823e:	e4 64                	in     $0x64,%al
    while (!(sys_inb(0x64) & 1));
    8240:	a8 01                	test   $0x1,%al
    8242:	74 fa                	je     823e <sys_get_scancode+0x5>
                   : "Nd"(port) );
    8244:	e4 60                	in     $0x60,%al
    return sys_inb(0x60);
}
    8246:	66 5d                	pop    %bp
    8248:	66 c3                	retw   

0000824a <sys_read_disk>:

void sys_read_disk(uint32_t segment, uint32_t address, uint16_t logical_start_sector, uint8_t secotr_cnt)
{
    824a:	66 55                	push   %bp
    824c:	66 89 e5             	mov    %sp,%bp
    824f:	66 53                	push   %bx
    uint8_t head = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) / FLOPPY_SECTOR_PER_TRACK;
    8251:	67 66 0f b7 45 10    	movzww 0x10(%di),%ax
    8257:	66 b9 24 00          	mov    $0x24,%cx
    825b:	00 00                	add    %al,(%eax)
    825d:	66 99                	cwtd   
    825f:	66 f7 f9             	idiv   %cx
    8262:	66 89 c1             	mov    %ax,%cx
    8265:	66 bb 12 00          	mov    $0x12,%bx
    8269:	00 00                	add    %al,(%eax)
    826b:	66 89 d0             	mov    %dx,%ax
    826e:	66 99                	cwtd   
    8270:	66 f7 fb             	idiv   %bx
    uint16_t cylinder = logical_start_sector / (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK);
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    //位操作一定要注意类型匹配（两小时）
    uint16_t mask1 = 255;
    uint16_t mask2 = 768;
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    8273:	66 89 cb             	mov    %cx,%bx
    8276:	66 c1 e3 08          	shl    $0x8,%bx
    827a:	66 81 e1 00 03       	and    $0x300,%cx
    827f:	00 00                	add    %al,(%eax)
    8281:	66 c1 f9 02          	sar    $0x2,%cx
    8285:	66 09 d9             	or     %bx,%cx
    uint16_t sector = (logical_start_sector % (FLOPPY_HEAD_PER_DISK * FLOPPY_SECTOR_PER_TRACK)) % FLOPPY_SECTOR_PER_TRACK + 1;
    8288:	66 42                	inc    %dx
    uint16_t _cx = ((cylinder & mask1) << 8) | ((cylinder & mask2) >> 2) | sector;
    828a:	66 09 d1             	or     %dx,%cx
     "movb %4, %%al\n\t"    //扇区数
     "movb $0, %%dl\n\t"    //驱动器号
     "movb $2, %%ah\n\t"    //功能号
     "int $0x13\n\t"
     "pop %%es\n\t"
     : :"g"(segment), "g"(address), "g"(head), "g"(_cx), "g" (secotr_cnt));
    828d:	06                   	push   %es
    828e:	67 8b 5d 08          	mov    0x8(%di),%ebx
    8292:	8e c3                	mov    %ebx,%es
    8294:	67 8b 5d 0c          	mov    0xc(%di),%ebx
    8298:	88 c6                	mov    %al,%dh
    829a:	89 c9                	mov    %ecx,%ecx
    829c:	67 8a 45 14          	mov    0x14(%di),%al
    82a0:	b2 00                	mov    $0x0,%dl
    82a2:	b4 02                	mov    $0x2,%ah
    82a4:	cd 13                	int    $0x13
    82a6:	07                   	pop    %es
}
    82a7:	66 5b                	pop    %bx
    82a9:	66 5d                	pop    %bp
    82ab:	66 c3                	retw   

000082ad <_Z6memcmpPKvS0_m>:
namespace hhlibc {

#endif

int memcmp(const void * _s1, const void* _s2, size_t n)
{
    82ad:	66 55                	push   %bp
    82af:	66 89 e5             	mov    %sp,%bp
    82b2:	66 31 d2             	xor    %dx,%dx
    auto s1 = reinterpret_cast<const unsigned char*>(_s1);
    auto s2 = reinterpret_cast<const unsigned char*>(_s2);
    while(n--)
    82b5:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    82ba:	74 22                	je     82de <_Z6memcmpPKvS0_m+0x31>
    {
        if(*s1 != *s2)          //**不能**让!=时跳出然后返回*s1 - *s2
    82bc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    82c1:	67 66 0f b6 04       	movzbw (%si),%ax
    82c6:	10 66 42             	adc    %ah,0x42(%esi)
    82c9:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    82ce:	67 66 0f b6 4c 11    	movzbw 0x11(%si),%cx
    82d4:	ff                   	(bad)  
    82d5:	38 c8                	cmp    %cl,%al
    82d7:	74 dc                	je     82b5 <_Z6memcmpPKvS0_m+0x8>
        {                       //因为那样在实际上==的时候，会比较错误
            return *s1 - *s2;
    82d9:	66 29 c8             	sub    %cx,%ax
    82dc:	eb 03                	jmp    82e1 <_Z6memcmpPKvS0_m+0x34>
        }
        ++s1;
        ++s2;
    }
    return 0;
    82de:	66 31 c0             	xor    %ax,%ax
}
    82e1:	66 5d                	pop    %bp
    82e3:	66 c3                	retw   

000082e5 <_Z6memcpyPvPKvm>:

void* memcpy(void* _dst, const void* _src, size_t n)
{
    82e5:	66 55                	push   %bp
    82e7:	66 89 e5             	mov    %sp,%bp
    82ea:	66 53                	push   %bx
    82ec:	67 66 8b 45 08       	mov    0x8(%di),%ax
    82f1:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    82f6:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    while (n--)
    82f9:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    82fe:	74 0c                	je     830c <_Z6memcpyPvPKvm+0x27>
    {
        *(dst++) = *(src++);
    8300:	67 8a 0c             	mov    (%si),%cl
    8303:	13 67 88             	adc    -0x78(%edi),%esp
    8306:	0c 10                	or     $0x10,%al
    8308:	66 42                	inc    %dx
    while (n--)
    830a:	eb ed                	jmp    82f9 <_Z6memcpyPvPKvm+0x14>
    }
    return _dst;
}
    830c:	66 5b                	pop    %bx
    830e:	66 5d                	pop    %bp
    8310:	66 c3                	retw   

00008312 <_Z7memmovePvPKvm>:
void* memmove(void* _dst, const void* _src, size_t n)
{
    8312:	66 55                	push   %bp
    8314:	66 89 e5             	mov    %sp,%bp
    8317:	66 56                	push   %si
    8319:	66 53                	push   %bx
    831b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8320:	67 66 8b 5d 0c       	mov    0xc(%di),%bx
    8325:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    auto src = reinterpret_cast<const unsigned char*>(_src);
    if(dst < src)
    832a:	66 39 d8             	cmp    %bx,%ax
    832d:	73 14                	jae    8343 <_Z7memmovePvPKvm+0x31>
    832f:	66 31 c9             	xor    %cx,%cx
    {
        while(n--)
    8332:	66 39 f1             	cmp    %si,%cx
    8335:	74 20                	je     8357 <_Z7memmovePvPKvm+0x45>
        {
            *(dst++) = *(src++);
    8337:	67 8a 14             	mov    (%si),%dl
    833a:	0b 67 88             	or     -0x78(%edi),%esp
    833d:	14 08                	adc    $0x8,%al
    833f:	66 41                	inc    %cx
        while(n--)
    8341:	eb ef                	jmp    8332 <_Z7memmovePvPKvm+0x20>
        }
    }
    else if(dst > src)
    8343:	76 12                	jbe    8357 <_Z7memmovePvPKvm+0x45>
    {
        src += n;
        dst += n;
        while(n--)
    8345:	66 4e                	dec    %si
    8347:	66 83 fe ff          	cmp    $0xffff,%si
    834b:	74 0a                	je     8357 <_Z7memmovePvPKvm+0x45>
        {
            *(--dst) = *(--src);
    834d:	67 8a 0c             	mov    (%si),%cl
    8350:	33 67 88             	xor    -0x78(%edi),%esp
    8353:	0c 30                	or     $0x30,%al
        while(n--)
    8355:	eb ee                	jmp    8345 <_Z7memmovePvPKvm+0x33>
        }
    }
    return _dst;
}
    8357:	66 5b                	pop    %bx
    8359:	66 5e                	pop    %si
    835b:	66 5d                	pop    %bp
    835d:	66 c3                	retw   

0000835f <_Z6memsetPvim>:
void* memset(void* _dst, int c, size_t n)
{
    835f:	66 55                	push   %bp
    8361:	66 89 e5             	mov    %sp,%bp
    8364:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8369:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    836e:	66 31 d2             	xor    %dx,%dx
    auto dst = reinterpret_cast<unsigned char*>(_dst);
    while(n--)
    8371:	67 66 39 55 10       	cmp    %dx,0x10(%di)
    8376:	74 08                	je     8380 <_Z6memsetPvim+0x21>
    {
        *(dst++) = static_cast<unsigned char>(c);
    8378:	67 88 0c             	mov    %cl,(%si)
    837b:	10 66 42             	adc    %ah,0x42(%esi)
    while(n--)
    837e:	eb f1                	jmp    8371 <_Z6memsetPvim+0x12>
    }
    return _dst;
}
    8380:	66 5d                	pop    %bp
    8382:	66 c3                	retw   

00008384 <_Z6strlenPKc>:
size_t strlen(const char* _str)
{
    8384:	66 55                	push   %bp
    8386:	66 89 e5             	mov    %sp,%bp
    8389:	67 66 8b 55 08       	mov    0x8(%di),%dx
    auto str = _str;
    size_t len = 0;
    838e:	66 31 c0             	xor    %ax,%ax
    while(*(_str++))
    8391:	67 80 3c 02          	cmpb   $0x2,(%si)
    8395:	00 74 04 66          	add    %dh,0x66(%esp,%eax,1)
    {
        len++;
    8399:	40                   	inc    %eax
    while(*(_str++))
    839a:	eb f5                	jmp    8391 <_Z6strlenPKc+0xd>
    }
    return len;
}
    839c:	66 5d                	pop    %bp
    839e:	66 c3                	retw   

000083a0 <_Z6strcpyPcPKc>:
char *strcpy(char* _dst, const char* _src)
{
    83a0:	66 55                	push   %bp
    83a2:	66 89 e5             	mov    %sp,%bp
    83a5:	66 56                	push   %si
    83a7:	66 53                	push   %bx
    83a9:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    83ae:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    auto len = strlen(_src);
    83b3:	66 51                	push   %cx
    83b5:	66 e8 c9 ff          	callw  8382 <_Z6memsetPvim+0x23>
    83b9:	ff                   	(bad)  
    83ba:	ff 66 89             	jmp    *-0x77(%esi)
    83bd:	c6                   	(bad)  
    memcpy(reinterpret_cast<void*>(_dst), reinterpret_cast<const void *>(_src), len);
    83be:	67 66 89 04          	mov    %ax,(%si)
    83c2:	24 66                	and    $0x66,%al
    83c4:	51                   	push   %ecx
    83c5:	66 53                	push   %bx
    83c7:	66 e8 18 ff          	callw  82e3 <_Z6memcmpPKvS0_m+0x36>
    83cb:	ff                   	(bad)  
    83cc:	ff 67 c6             	jmp    *-0x3a(%edi)
    _dst[len] = '\0';
    83cf:	04 33                	add    $0x33,%al
    83d1:	00 66 89             	add    %ah,-0x77(%esi)
    return _dst;
}
    83d4:	d8 67 66             	fsubs  0x66(%edi)
    83d7:	8d 65 f8             	lea    -0x8(%ebp),%esp
    83da:	66 5b                	pop    %bx
    83dc:	66 5e                	pop    %si
    83de:	66 5d                	pop    %bp
    83e0:	66 c3                	retw   

000083e2 <_Z6strcmpPKcS0_>:
int strcmp(const char* _s1, const char* _s2)
{
    83e2:	66 55                	push   %bp
    83e4:	66 89 e5             	mov    %sp,%bp
    83e7:	66 57                	push   %di
    83e9:	66 56                	push   %si
    83eb:	66 53                	push   %bx
    83ed:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    83f2:	67 66 8b 7d 0c       	mov    0xc(%di),%di
    auto len1 = strlen(_s1);
    83f7:	66 51                	push   %cx
    83f9:	66 e8 85 ff          	callw  8382 <_Z6memsetPvim+0x23>
    83fd:	ff                   	(bad)  
    83fe:	ff 66 89             	jmp    *-0x77(%esi)
    8401:	c3                   	ret    
    auto len2 = strlen(_s2);
    8402:	67 66 89 3c          	mov    %di,(%si)
    8406:	24 66                	and    $0x66,%al
    8408:	e8 77 ff ff ff       	call   8384 <_Z6strlenPKc>
    840d:	66 5a                	pop    %dx
    840f:	66 89 c6             	mov    %ax,%si
    auto len = len1 < len2 ? len1 : len2;
    auto ret = memcmp(reinterpret_cast<const void*>(_s1), reinterpret_cast<const void *>(_s2), len);
    8412:	66 39 c3             	cmp    %ax,%bx
    8415:	77 03                	ja     841a <_Z6strcmpPKcS0_+0x38>
    8417:	66 89 d8             	mov    %bx,%ax
    841a:	66 50                	push   %ax
    841c:	66 57                	push   %di
    841e:	66 51                	push   %cx
    8420:	66 e8 87 fe          	callw  82ab <sys_read_disk+0x61>
    8424:	ff                   	(bad)  
    8425:	ff 66 83             	jmp    *-0x7d(%esi)
    8428:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    if(ret == 0)
    842b:	85 c0                	test   %eax,%eax
    842d:	75 11                	jne    8440 <_Z6strcmpPKcS0_+0x5e>
    {
        if(len1 == len2)
    842f:	66 39 f3             	cmp    %si,%bx
    8432:	74 0c                	je     8440 <_Z6strcmpPKcS0_+0x5e>
        {
            return -1;
        }
        else
        {
            return 1;
    8434:	66 39 de             	cmp    %bx,%si
    8437:	66 19 c0             	sbb    %ax,%ax
    843a:	66 83 e0 02          	and    $0x2,%ax
    843e:	66 48                	dec    %ax
        }
    }
    return ret;
}
    8440:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8445:	66 5b                	pop    %bx
    8447:	66 5e                	pop    %si
    8449:	66 5f                	pop    %di
    844b:	66 5d                	pop    %bp
    844d:	66 c3                	retw   

0000844f <_Z7reversePc>:

void reverse(char* buffer)
{
    844f:	66 55                	push   %bp
    8451:	66 89 e5             	mov    %sp,%bp
    8454:	66 56                	push   %si
    8456:	66 53                	push   %bx
    8458:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    char ch;
    size_t len = strlen(buffer);
    845d:	66 51                	push   %cx
    845f:	66 e8 1f ff          	callw  8382 <_Z6memsetPvim+0x23>
    8463:	ff                   	(bad)  
    8464:	ff 66 5a             	jmp    *0x5a(%esi)
    8467:	66 89 ca             	mov    %cx,%dx
    846a:	67 66 8d 0c          	lea    (%si),%cx
    846e:	01 66 d1             	add    %esp,-0x2f(%esi)
    for(size_t i = 0; i < len / 2; ++i)
    8471:	e8 67 66 8d 34       	call   348deadd <_GLOBAL_OFFSET_TABLE_+0x348d4501>
    8476:	10 66 49             	adc    %ah,0x49(%esi)
    8479:	66 39 f2             	cmp    %si,%dx
    847c:	74 10                	je     848e <_Z7reversePc+0x3f>
    {
        ch = *(buffer + i);
    847e:	67 8a 1a             	mov    (%bp,%si),%bl
        *(buffer + i) = *(buffer + len - 1 - i);
    8481:	67 8a 01             	mov    (%bx,%di),%al
    8484:	67 88 02             	mov    %al,(%bp,%si)
        *(buffer + len - 1 - i)  = ch;
    8487:	67 88 19             	mov    %bl,(%bx,%di)
    848a:	66 42                	inc    %dx
    for(size_t i = 0; i < len / 2; ++i)
    848c:	eb e9                	jmp    8477 <_Z7reversePc+0x28>
    }
}
    848e:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    8493:	66 5b                	pop    %bx
    8495:	66 5e                	pop    %si
    8497:	66 5d                	pop    %bp
    8499:	66 c3                	retw   
    849b:	90                   	nop

0000849c <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0>:
    if(base == 0 && !auto_detected)
    {
        base = 10;
        auto_detected = true;
    }
    auto char_to_digit = [](auto ch){
    849c:	66 55                	push   %bp
    849e:	66 89 e5             	mov    %sp,%bp
    84a1:	66 89 c2             	mov    %ax,%dx
        int digit;
        if(ch >= '0' && ch <= '9')
    84a4:	66 83 e8 30          	sub    $0x30,%ax
    84a8:	3c 09                	cmp    $0x9,%al
    84aa:	77 0b                	ja     84b7 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x1b>
            digit = ch - '0';
    84ac:	66 0f be d2          	movsbw %dl,%dx
    84b0:	67 66 8d 42 d0       	lea    -0x30(%bp,%si),%ax
    84b5:	eb 2b                	jmp    84e2 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='A' && ch <= 'F')
    84b7:	67 66 8d 42 bf       	lea    -0x41(%bp,%si),%ax
    84bc:	3c 05                	cmp    $0x5,%al
    84be:	77 0b                	ja     84cb <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x2f>
            digit = ch - 'A' + 10;
    84c0:	66 0f be d2          	movsbw %dl,%dx
    84c4:	67 66 8d 42 c9       	lea    -0x37(%bp,%si),%ax
    84c9:	eb 17                	jmp    84e2 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
        else if(ch >='a' && ch <= 'f')
    84cb:	67 66 8d 4a 9f       	lea    -0x61(%bp,%si),%cx
            digit = ch - 'a' + 10;
        else
            digit = -1;
    84d0:	66 83 c8 ff          	or     $0xffff,%ax
        else if(ch >='a' && ch <= 'f')
    84d4:	80 f9 05             	cmp    $0x5,%cl
    84d7:	77 09                	ja     84e2 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x46>
            digit = ch - 'a' + 10;
    84d9:	66 0f be d2          	movsbw %dl,%dx
    84dd:	67 66 8d 42 a9       	lea    -0x57(%bp,%si),%ax
        return digit;
    };
    84e2:	66 5d                	pop    %bp
    84e4:	66 c3                	retw   

000084e6 <_Z6strtolPKcPPci>:
{
    84e6:	66 55                	push   %bp
    84e8:	66 89 e5             	mov    %sp,%bp
    84eb:	66 57                	push   %di
    84ed:	66 56                	push   %si
    84ef:	66 53                	push   %bx
    84f1:	66 83 ec 0c          	sub    $0xc,%sp
    84f5:	67 66 8b 75 10       	mov    0x10(%di),%si
    auto start = str;   
    84fa:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    while(isspace(*start))
    84ff:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    8504:	66 50                	push   %ax
    8506:	66 e8 4c 06          	callw  8b56 <_Z6printfPKcz+0x3c>
    850a:	00 00                	add    %al,(%eax)
    850c:	66 5f                	pop    %di
    850e:	66 85 c0             	test   %ax,%ax
    8511:	74 04                	je     8517 <_Z6strtolPKcPPci+0x31>
        ++start;
    8513:	66 43                	inc    %bx
    while(isspace(*start))
    8515:	eb e8                	jmp    84ff <_Z6strtolPKcPPci+0x19>
    size_t len_num = strlen(start);//非白空格数字串长度
    8517:	66 53                	push   %bx
    8519:	66 e8 65 fe          	callw  8382 <_Z6memsetPvim+0x23>
    851d:	ff                   	(bad)  
    851e:	ff 66 59             	jmp    *0x59(%esi)
    if(len_num == 0)
    8521:	66 85 c0             	test   %ax,%ax
    8524:	75 1e                	jne    8544 <_Z6strtolPKcPPci+0x5e>
        return 0;
    8526:	66 31 c0             	xor    %ax,%ax
        if(str_end) *str_end = const_cast<char*>(str);
    8529:	67 66 83 7d 0c 00    	cmpw   $0x0,0xc(%di)
    852f:	0f 84 4d 01 67 66    	je     66678682 <_GLOBAL_OFFSET_TABLE_+0x6666e0a6>
    8535:	8b 7d 0c             	mov    0xc(%ebp),%edi
    8538:	67 66 8b 75 08       	mov    0x8(%di),%si
    853d:	67 66 89 37          	mov    %si,(%bx)
    8541:	e9 3c 01 67 8a       	jmp    8a678682 <_GLOBAL_OFFSET_TABLE_+0x8a66e0a6>
    if(*high == '+' || *high == '-')
    8546:	13 80 fa 2b 74 10    	adc    0x10742bfa(%eax),%eax
    854c:	80 fa 2d             	cmp    $0x2d,%dl
    854f:	75 21                	jne    8572 <_Z6strtolPKcPPci+0x8c>
        sign = (*high == '+') ? 1 : -1;
    8551:	67 66 c7 45 f0 ff ff 	movw   $0xffff,-0x10(%di)
    8558:	ff                   	(bad)  
    8559:	ff                   	(bad)  
    855a:	eb 09                	jmp    8565 <_Z6strtolPKcPPci+0x7f>
    855c:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    8563:	00 00                	add    %al,(%eax)
        ++high;
    8565:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
        sign_char_bit = 1;
    856a:	66 ba 01 00          	mov    $0x1,%dx
    856e:	00 00                	add    %al,(%eax)
    8570:	eb 0f                	jmp    8581 <_Z6strtolPKcPPci+0x9b>
    8572:	66 89 df             	mov    %bx,%di
    size_t sign_char_bit = 0;
    8575:	66 31 d2             	xor    %dx,%dx
    int sign = 1;
    8578:	67 66 c7 45 f0 01 00 	movw   $0x1,-0x10(%di)
    857f:	00 00                	add    %al,(%eax)
    if(base == 16 || (base == 0 && !auto_detected))
    8581:	66 f7 c6 ef ff       	test   $0xffef,%si
    8586:	ff                   	(bad)  
    8587:	ff 75 29             	pushl  0x29(%ebp)
        if(len_num > 1 + sign_char_bit && 
    858a:	67 66 8d 4a 01       	lea    0x1(%bp,%si),%cx
    858f:	66 39 c1             	cmp    %ax,%cx
    8592:	73 1f                	jae    85b3 <_Z6strtolPKcPPci+0xcd>
    8594:	67 80 3f 30          	cmpb   $0x30,(%bx)
    8598:	75 19                	jne    85b3 <_Z6strtolPKcPPci+0xcd>
           (*(high + 1) == 'x' || *(high + 1) == 'X'))
    859a:	67 8a 4f 01          	mov    0x1(%bx),%cl
    859e:	66 83 e1 df          	and    $0xffdf,%cx
    85a2:	80 f9 58             	cmp    $0x58,%cl
    85a5:	75 0c                	jne    85b3 <_Z6strtolPKcPPci+0xcd>
             high += 2;
    85a7:	66 83 c7 02          	add    $0x2,%di
             base = 16;
    85ab:	66 be 10 00          	mov    $0x10,%si
    85af:	00 00                	add    %al,(%eax)
    85b1:	eb 2b                	jmp    85de <_Z6strtolPKcPPci+0xf8>
    if(base == 8 || (base == 0 && !auto_detected))
    85b3:	66 83 fe 08          	cmp    $0x8,%si
    85b7:	74 05                	je     85be <_Z6strtolPKcPPci+0xd8>
    85b9:	66 85 f6             	test   %si,%si
    85bc:	75 20                	jne    85de <_Z6strtolPKcPPci+0xf8>
        if(len_num > sign_char_bit && *high == 0)   //存在八进制前缀0
    85be:	66 39 c2             	cmp    %ax,%dx
    85c1:	73 10                	jae    85d3 <_Z6strtolPKcPPci+0xed>
    85c3:	67 80 3f 00          	cmpb   $0x0,(%bx)
    85c7:	75 0a                	jne    85d3 <_Z6strtolPKcPPci+0xed>
            high += 1;
    85c9:	66 47                	inc    %di
            base = 8;
    85cb:	66 be 08 00          	mov    $0x8,%si
    85cf:	00 00                	add    %al,(%eax)
    85d1:	eb 0b                	jmp    85de <_Z6strtolPKcPPci+0xf8>
    if(base == 0 && !auto_detected)
    85d3:	66 85 f6             	test   %si,%si
    85d6:	75 06                	jne    85de <_Z6strtolPKcPPci+0xf8>
        base = 10;
    85d8:	66 be 0a 00          	mov    $0xa,%si
    85dc:	00 00                	add    %al,(%eax)
    bool has_vaild_char = false;
    85de:	67 c6 45 ec 00       	movb   $0x0,-0x14(%di)
    auto low = start;   
    //使low指向数字低位后的一个位置
    while(!isspace(*low) &&             //判断是否是白空格
    85e3:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    85e8:	66 50                	push   %ax
    85ea:	66 e8 68 05          	callw  8b56 <_Z6printfPKcz+0x3c>
    85ee:	00 00                	add    %al,(%eax)
          (*low != '\0') &&             //判断是否字符串结束
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    85f0:	66 5a                	pop    %dx
    85f2:	66 85 c0             	test   %ax,%ax
    85f5:	75 28                	jne    861f <_Z6strtolPKcPPci+0x139>
          (*low != '\0') &&             //判断是否字符串结束
    85f7:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    while(!isspace(*low) &&             //判断是否是白空格
    85fc:	84 c0                	test   %al,%al
    85fe:	74 1f                	je     861f <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    8600:	66 e8 96 fe          	callw  849a <_Z7reversePc+0x4b>
    8604:	ff                   	(bad)  
    8605:	ff 66 83             	jmp    *-0x7d(%esi)
          (*low != '\0') &&             //判断是否字符串结束
    8608:	f8                   	clc    
    8609:	ff 0f                	decl   (%edi)
    860b:	95                   	xchg   %eax,%ebp
    860c:	c2 66 39             	ret    $0x3966
          char_to_digit(*low) != -1 &&  //判断是否是合法数字
    860f:	f0 0f 9c c0          	lock setl %al
    8613:	20 c2                	and    %al,%dl
    8615:	74 08                	je     861f <_Z6strtolPKcPPci+0x139>
          char_to_digit(*low) < base    //判断是否是该进制
          )
    {
        ++low;
    8617:	66 43                	inc    %bx
        has_vaild_char = true;
    8619:	67 88 55 ec          	mov    %dl,-0x14(%di)
    while(!isspace(*low) &&             //判断是否是白空格
    861d:	eb c4                	jmp    85e3 <_Z6strtolPKcPPci+0xfd>
    }
    if(!has_vaild_char)
    861f:	67 80 7d ec 00       	cmpb   $0x0,-0x14(%di)
    8624:	0f 84 fe fe 67 66    	je     66688528 <_GLOBAL_OFFSET_TABLE_+0x6667df4c>
        if (str_end) *str_end = const_cast<char*>(str);
        return 0;
    }
    long power = 1;
    long ret = 0;
    if(str_end) *str_end = const_cast<char*>(low);
    862a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
    862e:	74 09                	je     8639 <_Z6strtolPKcPPci+0x153>
    8630:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8635:	67 66 89 18          	mov    %bx,(%bx,%si)
    for(auto p = low - 1; p >= high; --p)
    8639:	66 4b                	dec    %bx
    long ret = 0;
    863b:	66 31 c9             	xor    %cx,%cx
    long power = 1;
    863e:	66 ba 01 00          	mov    $0x1,%dx
    8642:	00 00                	add    %al,(%eax)
    8644:	67 66 89 55 e8       	mov    %dx,-0x18(%di)
    for(auto p = low - 1; p >= high; --p)
    8649:	66 39 fb             	cmp    %di,%bx
    864c:	72 29                	jb     8677 <_Z6strtolPKcPPci+0x191>
    864e:	67 66 89 4d ec       	mov    %cx,-0x14(%di)
    {
        int digit = char_to_digit(*p);
    8653:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    8658:	66 e8 3e fe          	callw  849a <_Z7reversePc+0x4b>
    865c:	ff                   	(bad)  
    865d:	ff 67 66             	jmp    *0x66(%edi)
        ret += power * digit;
    8660:	8b 55 e8             	mov    -0x18(%ebp),%edx
    8663:	66 0f af c2          	imul   %dx,%ax
    8667:	67 66 8b 4d ec       	mov    -0x14(%di),%cx
    866c:	66 01 c1             	add    %ax,%cx
        
        power *= base;
    866f:	66 0f af d6          	imul   %si,%dx
    for(auto p = low - 1; p >= high; --p)
    8673:	66 4b                	dec    %bx
    8675:	eb cd                	jmp    8644 <_Z6strtolPKcPPci+0x15e>
    }
    ret *= sign;
    8677:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    867c:	66 0f af c1          	imul   %cx,%ax
    return ret;
}
    8680:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8685:	66 5b                	pop    %bx
    8687:	66 5e                	pop    %si
    8689:	66 5f                	pop    %di
    868b:	66 5d                	pop    %bp
    868d:	66 c3                	retw   

0000868f <_Z7putchari>:
namespace hhlibc {

#endif
#ifndef _HHOS_LIBC_TEST
int putchar( int ch )
{
    868f:	66 55                	push   %bp
    8691:	66 89 e5             	mov    %sp,%bp
    8694:	66 53                	push   %bx
    8696:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    sys_get_current_tty()->putchar(ch);
    869b:	66 e8 a8 f7          	callw  7e47 <panic_21h_func_not_impl>
    869f:	ff                   	(bad)  
    86a0:	ff 66 53             	jmp    *0x53(%esi)
    86a3:	66 50                	push   %ax
    86a5:	66 e8 03 07          	callw  8dac <_ZN2sh3runEv+0xee>
    86a9:	00 00                	add    %al,(%eax)
    //sys_tty_putchar(ch);
    return ch;
}
    86ab:	66 89 d8             	mov    %bx,%ax
    86ae:	67 66 8b 5d fc       	mov    -0x4(%di),%bx
    86b3:	66 c9                	leavew 
    86b5:	66 c3                	retw   

000086b7 <_Z4putsPKc>:

int puts(const char* string)
{
    86b7:	66 55                	push   %bp
    86b9:	66 89 e5             	mov    %sp,%bp
    86bc:	66 56                	push   %si
    86be:	66 53                	push   %bx
    86c0:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    auto len = strlen(string);
    86c5:	66 53                	push   %bx
    86c7:	66 e8 b7 fc          	callw  8382 <_Z6memsetPvim+0x23>
    86cb:	ff                   	(bad)  
    86cc:	ff 67 66             	jmp    *0x66(%edi)
    86cf:	8d 34 03             	lea    (%ebx,%eax,1),%esi
    86d2:	66 58                	pop    %ax
    for(size_t i = 0; i < len; ++i)
    86d4:	66 39 f3             	cmp    %si,%bx
    86d7:	74 11                	je     86ea <_Z4putsPKc+0x33>
    {
        putchar(*(string + i));
    86d9:	67 66 0f be 03       	movsbw (%bp,%di),%ax
    86de:	66 50                	push   %ax
    86e0:	66 e8 a9 ff          	callw  868d <_Z6strtolPKcPPci+0x1a7>
    86e4:	ff                   	(bad)  
    86e5:	ff 66 43             	jmp    *0x43(%esi)
    86e8:	eb e8                	jmp    86d2 <_Z4putsPKc+0x1b>
    }
    return 0;
}
    86ea:	66 31 c0             	xor    %ax,%ax
    86ed:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    86f2:	66 5b                	pop    %bx
    86f4:	66 5e                	pop    %si
    86f6:	66 5d                	pop    %bp
    86f8:	66 c3                	retw   

000086fa <_Z7getcharv>:
#endif


#ifndef _HHOS_LIBC_TEST
int getchar(void)
{
    86fa:	66 55                	push   %bp
    86fc:	66 89 e5             	mov    %sp,%bp
    return sys_bios_getchar();
}
    86ff:	66 5d                	pop    %bp
    return sys_bios_getchar();
    8701:	e9                   	.byte 0xe9
    8702:	8f                   	(bad)  
    8703:	f8                   	clc    

00008704 <_Z4getsPc>:
char *gets( char *str )
{
    8704:	66 55                	push   %bp
    8706:	66 89 e5             	mov    %sp,%bp
    8709:	66 53                	push   %bx
    870b:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    return sys_bios_getchar();
    8710:	66 e8 7d f8          	callw  7f91 <sys_bios_clear_screen+0x11>
    8714:	ff                   	(bad)  
    8715:	ff                   	(bad)  
    char ch;
    while(true)
    {
        ch = getchar();
        if(ch == '\n') break;
    8716:	3c 0a                	cmp    $0xa,%al
    8718:	74 08                	je     8722 <_Z4getsPc+0x1e>
        *(str++) = ch;
    871a:	66 43                	inc    %bx
    871c:	67 88 43 ff          	mov    %al,-0x1(%bp,%di)
        ch = getchar();
    8720:	eb ee                	jmp    8710 <_Z4getsPc+0xc>
    }
    *str = '\0';
    8722:	67 c6 03 00          	movb   $0x0,(%bp,%di)
    return str;
}
    8726:	66 89 d8             	mov    %bx,%ax
    8729:	66 5b                	pop    %bx
    872b:	66 5d                	pop    %bp
    872d:	66 c3                	retw   

0000872f <_Z7vsscanfPKcS0_Pc>:
#endif

int vsscanf( const char* buffer, const char* format, va_list vlist )
{
    872f:	66 55                	push   %bp
    8731:	66 89 e5             	mov    %sp,%bp
    8734:	66 57                	push   %di
    8736:	66 56                	push   %si
    8738:	66 53                	push   %bx
    873a:	66 83 ec 14          	sub    $0x14,%sp
    873e:	67 66 8b 75 08       	mov    0x8(%di),%si
    8743:	67 66 8b 7d 10       	mov    0x10(%di),%di
    auto len_fmt = strlen(format);
    8748:	67 66 ff 75 0c       	pushw  0xc(%di)
    874d:	66 e8 31 fc          	callw  8382 <_Z6memsetPvim+0x23>
    8751:	ff                   	(bad)  
    8752:	ff 67 66             	jmp    *0x66(%edi)
    8755:	89 45 e0             	mov    %eax,-0x20(%ebp)
    8758:	66 59                	pop    %cx
    auto p_fmt = format; 
    875a:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    875f:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    auto p_buf = buffer;
    bool error = false;
    int ret = 0;
    8764:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    876b:	00 00                	add    %al,(%eax)
    bool error = false;
    876d:	67 c6 45 e7 00       	movb   $0x0,-0x19(%di)
    while(static_cast<size_t>(p_fmt - format) < len_fmt)
    8772:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    8777:	67 66 2b 45 0c       	sub    0xc(%di),%ax
    877c:	67 66 3b 45 e0       	cmp    -0x20(%di),%ax
    8781:	0f 93 c0             	setae  %al
    {
        if(error) break;
    8784:	67 08 45 e7          	or     %al,-0x19(%di)
    8788:	0f 85 50 01 67 66    	jne    666788de <_GLOBAL_OFFSET_TABLE_+0x6666e302>
        if(isspace(*p_fmt)) //略过白空格
    878e:	8b 45 e8             	mov    -0x18(%ebp),%eax
    8791:	67 66 0f be 00       	movsbw (%bx,%si),%ax
    8796:	66 50                	push   %ax
    8798:	66 e8 ba 03          	callw  8b56 <_Z6printfPKcz+0x3c>
    879c:	00 00                	add    %al,(%eax)
    879e:	66 5a                	pop    %dx
    87a0:	66 85 c0             	test   %ax,%ax
    87a3:	74 1d                	je     87c2 <_Z7vsscanfPKcS0_Pc+0x93>
        {
            p_fmt++;
    87a5:	67 66 ff 45 e8       	incw   -0x18(%di)
            while(isspace(*buffer)) buffer++;
    87aa:	67 66 0f be 06 66 50 	movsbw 0x5066,%ax
    87b1:	66 e8 a1 03          	callw  8b56 <_Z6printfPKcz+0x3c>
    87b5:	00 00                	add    %al,(%eax)
    87b7:	66 5b                	pop    %bx
    87b9:	66 85 c0             	test   %ax,%ax
    87bc:	74 b4                	je     8772 <_Z7vsscanfPKcS0_Pc+0x43>
    87be:	66 46                	inc    %si
    87c0:	eb e8                	jmp    87aa <_Z7vsscanfPKcS0_Pc+0x7b>
            continue;
        }
        else if(*p_fmt == '%') //格式控制符
    87c2:	67 66 8b 45 e8       	mov    -0x18(%di),%ax
    87c7:	67 80 38 25          	cmpb   $0x25,(%bx,%si)
    87cb:	75 a5                	jne    8772 <_Z7vsscanfPKcS0_Pc+0x43>
        {
            p_fmt++;
            char specifier = *p_fmt;
    87cd:	67 8a 40 01          	mov    0x1(%bx,%si),%al
            p_fmt++;
    87d1:	67 66 83 45 e8 02    	addw   $0x2,-0x18(%di)
            switch(specifier)
    87d7:	3c 69                	cmp    $0x69,%al
    87d9:	0f 84 b0 00 7f 25    	je     257f888f <_GLOBAL_OFFSET_TABLE_+0x257ee2b3>
    87df:	3c 58                	cmp    $0x58,%al
    87e1:	0f 84 c4 00 7f 10    	je     107f88ab <_GLOBAL_OFFSET_TABLE_+0x107ee2cf>
    87e7:	3c 25                	cmp    $0x25,%al
    87e9:	75 87                	jne    8772 <_Z7vsscanfPKcS0_Pc+0x43>
            {
                case '%':
                {
                    if(*buffer == '%') 
    87eb:	67 80 3e 25 67 0f    	cmpb   $0xf,0x6725
    87f1:	95                   	xchg   %eax,%ebp
    87f2:	45                   	inc    %ebp
    87f3:	e7 e9                	out    %eax,$0xe9
    87f5:	7b ff                	jnp    87f6 <_Z7vsscanfPKcS0_Pc+0xc7>
            switch(specifier)
    87f7:	3c 63                	cmp    $0x63,%al
    87f9:	74 31                	je     882c <_Z7vsscanfPKcS0_Pc+0xfd>
    87fb:	3c 64                	cmp    $0x64,%al
    87fd:	0f 84 9a 00 e9 6e    	je     6ee9889d <_GLOBAL_OFFSET_TABLE_+0x6ee8e2c1>
    8803:	ff                   	(bad)  
    8804:	3c 73                	cmp    $0x73,%al
    8806:	74 4d                	je     8855 <_Z7vsscanfPKcS0_Pc+0x126>
    8808:	7f 15                	jg     881f <_Z7vsscanfPKcS0_Pc+0xf0>
    880a:	3c 6f                	cmp    $0x6f,%al
    880c:	0f 85 62 ff 67 66    	jne    66688774 <_GLOBAL_OFFSET_TABLE_+0x6667e198>
                    ++ret;
                    break;
                }
                case 'o':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    8812:	8d 5f 04             	lea    0x4(%edi),%ebx
    8815:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 8);
    8819:	66 6a 08             	pushw  $0x8
    881c:	e9 96 00 3c 75       	jmp    753c88b7 <_GLOBAL_OFFSET_TABLE_+0x753be2db>
            switch(specifier)
    8821:	74 78                	je     889b <_Z7vsscanfPKcS0_Pc+0x16c>
    8823:	3c 78                	cmp    $0x78,%al
    8825:	0f 84 80 00 e9 46    	je     46e988ab <_GLOBAL_OFFSET_TABLE_+0x46e8e2cf>
    882b:	ff 67 66             	jmp    *0x66(%edi)
                    char* p = va_arg(vlist, char*);
    882e:	8b 17                	mov    (%edi),%edx
                    *p = *buffer;
    8830:	67 8a 06 67 88       	mov    -0x7799,%al
    8835:	02 66 46             	add    0x46(%esi),%ah
                    ++ret;
    8838:	67 66 ff 45 ec       	incw   -0x14(%di)
                    char* p = va_arg(vlist, char*);
    883d:	66 83 c7 04          	add    $0x4,%di
                    break;
    8841:	e9 2e ff 66 50       	jmp    50678774 <_GLOBAL_OFFSET_TABLE_+0x5066e198>
                    while (*buffer && isspace(*buffer)) buffer++;
    8846:	66 e8 0c 03          	callw  8b56 <_Z6printfPKcz+0x3c>
    884a:	00 00                	add    %al,(%eax)
    884c:	66 59                	pop    %cx
    884e:	66 85 c0             	test   %ax,%ax
    8851:	74 0b                	je     885e <_Z7vsscanfPKcS0_Pc+0x12f>
    8853:	66 46                	inc    %si
    8855:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    885c:	75 e6                	jne    8844 <_Z7vsscanfPKcS0_Pc+0x115>
                    char* p = va_arg(vlist, char*);
    885e:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8863:	67 66 8b 3f          	mov    (%bx),%di
                    while(*buffer && !isspace(*buffer))
    8867:	67 66 0f be 06 84 c0 	movsbw -0x3f7c,%ax
    886e:	75 0b                	jne    887b <_Z7vsscanfPKcS0_Pc+0x14c>
                    *p = '\0';
    8870:	67 c6 07 00          	movb   $0x0,(%bx)
                    ++ret;
    8874:	67 66 ff 45 ec       	incw   -0x14(%di)
    8879:	eb 5b                	jmp    88d6 <_Z7vsscanfPKcS0_Pc+0x1a7>
                    while(*buffer && !isspace(*buffer))
    887b:	66 50                	push   %ax
    887d:	66 e8 d5 02          	callw  8b56 <_Z6printfPKcz+0x3c>
    8881:	00 00                	add    %al,(%eax)
    8883:	66 5a                	pop    %dx
    8885:	66 85 c0             	test   %ax,%ax
    8888:	75 e6                	jne    8870 <_Z7vsscanfPKcS0_Pc+0x141>
                        *(p++) = *(buffer++);
    888a:	a4                   	movsb  %ds:(%esi),%es:(%edi)
                    while(*buffer && !isspace(*buffer))
    888b:	eb da                	jmp    8867 <_Z7vsscanfPKcS0_Pc+0x138>
                    int* p = va_arg(vlist, int*);
    888d:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    8892:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 0);
    8896:	66 6a 00             	pushw  $0x0
    8899:	eb 1a                	jmp    88b5 <_Z7vsscanfPKcS0_Pc+0x186>
                    unsigned int* p = va_arg(vlist, unsigned int*);
    889b:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    88a0:	67 66 8b 3f          	mov    (%bx),%di
                    long num = strtol(buffer, &end, 10);
    88a4:	66 6a 0a             	pushw  $0xa
    88a7:	eb 0c                	jmp    88b5 <_Z7vsscanfPKcS0_Pc+0x186>
                    break;
                }
                case 'x':
                case 'X':
                {
                    unsigned int* p = va_arg(vlist, unsigned int*);
    88a9:	67 66 8d 5f 04       	lea    0x4(%bx),%bx
    88ae:	67 66 8b 3f          	mov    (%bx),%di
                    char* end;
                    long num = strtol(buffer, &end, 16);
    88b2:	66 6a 10             	pushw  $0x10
    88b5:	67 66 8d 45 f0       	lea    -0x10(%di),%ax
    88ba:	66 50                	push   %ax
    88bc:	66 56                	push   %si
    88be:	66 e8 22 fc          	callw  84e4 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    88c2:	ff                   	(bad)  
    88c3:	ff 67 66             	jmp    *0x66(%edi)
                    *p = static_cast<unsigned int>(num);
    88c6:	89 07                	mov    %eax,(%edi)
                    buffer = end;
    88c8:	67 66 8b 75 f0       	mov    -0x10(%di),%si
                    ++ret;
    88cd:	67 66 ff 45 ec       	incw   -0x14(%di)
    88d2:	66 83 c4 0c          	add    $0xc,%sp
                    unsigned int* p = va_arg(vlist, unsigned int*);
    88d6:	66 89 df             	mov    %bx,%di
    88d9:	e9 96 fe 67 66       	jmp    66688774 <_GLOBAL_OFFSET_TABLE_+0x6667e198>
                    break;
            }
        }
    }
    return ret;
}
    88de:	8b 45 ec             	mov    -0x14(%ebp),%eax
    88e1:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    88e6:	66 5b                	pop    %bx
    88e8:	66 5e                	pop    %si
    88ea:	66 5f                	pop    %di
    88ec:	66 5d                	pop    %bp
    88ee:	66 c3                	retw   

000088f0 <_Z6sscanfPKcS0_z>:
int sscanf( const char* buffer, const char* format, ... )
{
    88f0:	66 55                	push   %bp
    88f2:	66 89 e5             	mov    %sp,%bp
   	int ret;
	va_list va;
	va_start(va, format);
    88f5:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsscanf(buffer, format, va);
    88fa:	66 50                	push   %ax
    88fc:	67 66 ff 75 0c       	pushw  0xc(%di)
    8901:	67 66 ff 75 08       	pushw  0x8(%di)
    8906:	66 e8 23 fe          	callw  872d <_Z4getsPc+0x29>
    890a:	ff                   	(bad)  
    890b:	ff 66 c9             	jmp    *-0x37(%esi)
	va_end(va);
    return ret; 
}
    890e:	66 c3                	retw   

00008910 <_Z5scanfPKcz>:
#ifndef _HHOS_LIBC_TEST
static char scanfbuf[80*25];
//TODO 关于这个返回值
int scanf( const char* format, ... )
{
    8910:	66 55                	push   %bp
    8912:	66 89 e5             	mov    %sp,%bp
    if (!gets(scanfbuf)) return EOF;
    8915:	66 68 c0 95          	pushw  $0x95c0
    8919:	00 00                	add    %al,(%eax)
    891b:	66 e8 e3 fd          	callw  8702 <_Z7getcharv+0x8>
    891f:	ff                   	(bad)  
    8920:	ff 66 89             	jmp    *-0x77(%esi)
    8923:	c2 66 58             	ret    $0x5866
    8926:	66 83 c8 ff          	or     $0xffff,%ax
    892a:	66 85 d2             	test   %dx,%dx
    892d:	74 1c                	je     894b <_Z5scanfPKcz+0x3b>
	int ret;
	va_list va;
	va_start(va, format);
    892f:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsscanf(scanfbuf, format, va);
    8934:	66 50                	push   %ax
    8936:	67 66 ff 75 08       	pushw  0x8(%di)
    893b:	66 68 c0 95          	pushw  $0x95c0
    893f:	00 00                	add    %al,(%eax)
    8941:	66 e8 e8 fd          	callw  872d <_Z4getsPc+0x29>
    8945:	ff                   	(bad)  
    8946:	ff 66 83             	jmp    *-0x7d(%esi)
	va_end(va);
    return ret;
    8949:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    894c:	c9                   	leave  
    894d:	66 c3                	retw   

0000894f <_Z8vsprintfPcPKcS_>:
{
    894f:	66 55                	push   %bp
    8951:	66 89 e5             	mov    %sp,%bp
    8954:	66 57                	push   %di
    8956:	66 56                	push   %si
    8958:	66 53                	push   %bx
    895a:	66 83 ec 0c          	sub    $0xc,%sp
    895e:	67 66 8b 75 0c       	mov    0xc(%di),%si
    8963:	67 66 8b 55 10       	mov    0x10(%di),%dx
    8968:	67 66 89 55 f0       	mov    %dx,-0x10(%di)
    auto len_fmt = strlen(format);
    896d:	66 56                	push   %si
    896f:	66 e8 0f fa          	callw  8382 <_Z6memsetPvim+0x23>
    8973:	ff                   	(bad)  
    8974:	ff 67 66             	jmp    *0x66(%edi)
    8977:	89 45 ec             	mov    %eax,-0x14(%ebp)
    897a:	66 58                	pop    %ax
    auto p_buf = buffer;
    897c:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8981:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    while(len_fmt--)
    8986:	67 66 ff 4d ec       	decw   -0x14(%di)
    898b:	67 66 83 7d ec ff    	cmpw   $0xffff,-0x14(%di)
    8991:	0f 84 4a 01 67 8a    	je     8a678ae1 <_GLOBAL_OFFSET_TABLE_+0x8a66e505>
        if(*p_fmt != '%')
    8997:	06                   	push   %es
    8998:	3c 25                	cmp    $0x25,%al
    899a:	74 07                	je     89a3 <_Z8vsprintfPcPKcS_+0x54>
            *(p_buf++) = *(p_fmt++);    //非控制字符
    899c:	66 46                	inc    %si
    899e:	67 88 03             	mov    %al,(%bp,%di)
    89a1:	eb 5f                	jmp    8a02 <_Z8vsprintfPcPKcS_+0xb3>
            char specifier = *(++p_fmt); //%后面一个字符是specifier
    89a3:	67 8a 46 01          	mov    0x1(%bp),%al
            ++p_fmt;                     //记录specifier并跳过
    89a7:	66 83 c6 02          	add    $0x2,%si
            switch (specifier)
    89ab:	3c 69                	cmp    $0x69,%al
    89ad:	0f 84 81 00 7f 17    	je     177f8a34 <_GLOBAL_OFFSET_TABLE_+0x177ee458>
    89b3:	3c 63                	cmp    $0x63,%al
    89b5:	74 40                	je     89f7 <_Z8vsprintfPcPKcS_+0xa8>
    89b7:	3c 64                	cmp    $0x64,%al
    89b9:	74 77                	je     8a32 <_Z8vsprintfPcPKcS_+0xe3>
    89bb:	3c 58                	cmp    $0x58,%al
    89bd:	75 c7                	jne    8986 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    89bf:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16, true);
    89c4:	66 6a 01             	pushw  $0x1
    89c7:	e9 e2 00 3c 73       	jmp    733c8aae <_GLOBAL_OFFSET_TABLE_+0x733be4d2>
            switch (specifier)
    89cc:	74 38                	je     8a06 <_Z8vsprintfPcPKcS_+0xb7>
    89ce:	7f 12                	jg     89e2 <_Z8vsprintfPcPKcS_+0x93>
    89d0:	3c 6f                	cmp    $0x6f,%al
    89d2:	75 b2                	jne    8986 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    89d4:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 8);
    89d9:	66 6a 00             	pushw  $0x0
    89dc:	66 6a 08             	pushw  $0x8
    89df:	e9 da 00 3c 75       	jmp    753c8abe <_GLOBAL_OFFSET_TABLE_+0x753be4e2>
            switch (specifier)
    89e4:	0f 84 c9 00 3c 78    	je     783c8ab3 <_GLOBAL_OFFSET_TABLE_+0x783be4d7>
    89ea:	75 9a                	jne    8986 <_Z8vsprintfPcPKcS_+0x37>
                    unsigned int num = va_arg(vlist, int);
    89ec:	67 66 8d 7a 04       	lea    0x4(%bp,%si),%di
                    itoa(p_buf, num, 16);
    89f1:	66 6a 00             	pushw  $0x0
    89f4:	e9 b5 00 67 66       	jmp    66678aae <_GLOBAL_OFFSET_TABLE_+0x6666e4d2>
                    *(p_buf++) = va_arg(vlist, int); 
    89f9:	8b 02                	mov    (%edx),%eax
    89fb:	67 88 03             	mov    %al,(%bp,%di)
    89fe:	66 83 c2 04          	add    $0x4,%dx
    8a02:	66 43                	inc    %bx
                    break;
    8a04:	eb 80                	jmp    8986 <_Z8vsprintfPcPKcS_+0x37>
                    const char * str = va_arg(vlist, char*);
    8a06:	67 66 8d 42 04       	lea    0x4(%bp,%si),%ax
    8a0b:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
    8a10:	67 66 8b 3a          	mov    (%bp,%si),%di
                    strcpy(p_buf, str);
    8a14:	66 57                	push   %di
    8a16:	66 53                	push   %bx
    8a18:	66 e8 82 f9          	callw  839e <_Z6strlenPKc+0x1a>
    8a1c:	ff                   	(bad)  
    8a1d:	ff 66 59             	jmp    *0x59(%esi)
                    p_buf += strlen(str);               //p应当永远指向有意义的字符后面一位
    8a20:	66 58                	pop    %ax
    8a22:	66 57                	push   %di
    8a24:	66 e8 5a f9          	callw  8382 <_Z6memsetPvim+0x23>
    8a28:	ff                   	(bad)  
    8a29:	ff 66 01             	jmp    *0x1(%esi)
    8a2c:	c3                   	ret    
                    break;
    8a2d:	66 58                	pop    %ax
    8a2f:	e9 4f ff 67 66       	jmp    66688983 <_GLOBAL_OFFSET_TABLE_+0x6667e3a7>
                    int num = va_arg(vlist, int);
    8a34:	8d 42 04             	lea    0x4(%edx),%eax
    8a37:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
    8a3c:	67 66 8b 02          	mov    (%bp,%si),%ax
template<typename T>
void itoa(char* buffer, T num, int base, bool captial = false)
{
    const char* num_char_upper = "0123456789ABCDEF";
    const char* num_char_lower = "0123456789abcdef";
    if(num < 0)
    8a40:	66 89 df             	mov    %bx,%di
    8a43:	66 85 c0             	test   %ax,%ax
    8a46:	79 0c                	jns    8a54 <_Z8vsprintfPcPKcS_+0x105>
    8a48:	67 66 8d 7b 01       	lea    0x1(%bp,%di),%di
    {
        *(buffer++) = '-';
    8a4d:	67 c6 03 2d          	movb   $0x2d,(%bp,%di)
        num = -num;
    8a51:	66 f7 d8             	neg    %ax
    }
    char *p = buffer;
    8a54:	67 66 89 7d f0       	mov    %di,-0x10(%di)
    int mod = 0;
    while(true)
    {
        mod = num % base;
        num /= base;
    8a59:	66 b9 0a 00          	mov    $0xa,%cx
    8a5d:	00 00                	add    %al,(%eax)
    8a5f:	66 99                	cwtd   
    8a61:	66 f7 f9             	idiv   %cx
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    8a64:	67 66 8b 4d f0       	mov    -0x10(%di),%cx
    8a69:	66 41                	inc    %cx
    8a6b:	67 8a 92 c8 a5       	mov    -0x5a38(%bp,%si),%dl
    8a70:	00 00                	add    %al,(%eax)
    8a72:	67 88 51 ff          	mov    %dl,-0x1(%bx,%di)
        if(num == 0) break;
    8a76:	66 85 c0             	test   %ax,%ax
    8a79:	74 07                	je     8a82 <_Z8vsprintfPcPKcS_+0x133>
    8a7b:	67 66 89 4d f0       	mov    %cx,-0x10(%di)
    8a80:	eb d7                	jmp    8a59 <_Z8vsprintfPcPKcS_+0x10a>
    }
    *p = '\0';
    8a82:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8a87:	67 c6 40 01 00       	movb   $0x0,0x1(%bx,%si)
    reverse(buffer);
    8a8c:	66 57                	push   %di
    8a8e:	66 e8 bb f9          	callw  844d <_Z6strcmpPKcS0_+0x6b>
    8a92:	ff                   	(bad)  
    8a93:	ff 67 66             	jmp    *0x66(%edi)
                    p_buf += strlen(p_buf);             //同理
    8a96:	89 1c 24             	mov    %ebx,(%esp)
    8a99:	66 e8 e5 f8          	callw  8382 <_Z6memsetPvim+0x23>
    8a9d:	ff                   	(bad)  
    8a9e:	ff 66 01             	jmp    *0x1(%esi)
    8aa1:	c3                   	ret    
                    break;
    8aa2:	66 5a                	pop    %dx
                    int num = va_arg(vlist, int);
    8aa4:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
                    break;
    8aa9:	e9 da fe 66 6a       	jmp    6a678988 <_GLOBAL_OFFSET_TABLE_+0x6a66e3ac>
                    itoa(p_buf, num, 16, true);
    8aae:	10 eb                	adc    %ch,%bl
    8ab0:	0b 67 66             	or     0x66(%edi),%esp
                    unsigned int num = va_arg(vlist, int);
    8ab3:	8d 7a 04             	lea    0x4(%edx),%edi
                    itoa(p_buf, num, 10);
    8ab6:	66 6a 00             	pushw  $0x0
    8ab9:	66 6a 0a             	pushw  $0xa
    8abc:	67 66 ff 32          	pushw  (%bp,%si)
    8ac0:	66 53                	push   %bx
    8ac2:	66 e8 b1 04          	callw  8f77 <_ZN3tty7putcharEi+0x1c9>
    8ac6:	00 00                	add    %al,(%eax)
                    p_buf += strlen(p_buf);             //同理
    8ac8:	66 83 c4 10          	add    $0x10,%sp
    8acc:	66 53                	push   %bx
    8ace:	66 e8 b0 f8          	callw  8382 <_Z6memsetPvim+0x23>
    8ad2:	ff                   	(bad)  
    8ad3:	ff 66 01             	jmp    *0x1(%esi)
    8ad6:	c3                   	ret    
                    break;
    8ad7:	66 58                	pop    %ax
                    unsigned int num = va_arg(vlist, int);
    8ad9:	66 89 fa             	mov    %di,%dx
                    break;
    8adc:	e9 a7 fe 67 c6       	jmp    c6688988 <_GLOBAL_OFFSET_TABLE_+0xc667e3ac>
    *p_buf = '\0';
    8ae1:	03 00                	add    (%eax),%eax
    return p_buf - buffer;
    8ae3:	66 89 d8             	mov    %bx,%ax
    8ae6:	67 66 2b 45 08       	sub    0x8(%di),%ax
}
    8aeb:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8af0:	66 5b                	pop    %bx
    8af2:	66 5e                	pop    %si
    8af4:	66 5f                	pop    %di
    8af6:	66 5d                	pop    %bp
    8af8:	66 c3                	retw   

00008afa <_Z7sprintfPcPKcz>:
{
    8afa:	66 55                	push   %bp
    8afc:	66 89 e5             	mov    %sp,%bp
	va_start(va, format);
    8aff:	67 66 8d 45 10       	lea    0x10(%di),%ax
	ret = vsprintf(buffer, format, va);
    8b04:	66 50                	push   %ax
    8b06:	67 66 ff 75 0c       	pushw  0xc(%di)
    8b0b:	67 66 ff 75 08       	pushw  0x8(%di)
    8b10:	66 e8 39 fe          	callw  894d <_Z5scanfPKcz+0x3d>
    8b14:	ff                   	(bad)  
    8b15:	ff 66 c9             	jmp    *-0x37(%esi)
}
    8b18:	66 c3                	retw   

00008b1a <_Z6printfPKcz>:
{
    8b1a:	66 55                	push   %bp
    8b1c:	66 89 e5             	mov    %sp,%bp
    8b1f:	66 53                	push   %bx
	va_start(va, format);
    8b21:	67 66 8d 45 0c       	lea    0xc(%di),%ax
	ret = vsprintf(printbuf, format, va);
    8b26:	66 50                	push   %ax
    8b28:	67 66 ff 75 08       	pushw  0x8(%di)
    8b2d:	66 68 a0 9d          	pushw  $0x9da0
    8b31:	00 00                	add    %al,(%eax)
    8b33:	66 e8 16 fe          	callw  894d <_Z5scanfPKcz+0x3d>
    8b37:	ff                   	(bad)  
    8b38:	ff 66 89             	jmp    *-0x77(%esi)
    8b3b:	c3                   	ret    
    puts(printbuf);
    8b3c:	66 83 c4 0c          	add    $0xc,%sp
    8b40:	66 68 a0 9d          	pushw  $0x9da0
    8b44:	00 00                	add    %al,(%eax)
    8b46:	66 e8 6b fb          	callw  86b5 <_Z7putchari+0x26>
    8b4a:	ff                   	(bad)  
    8b4b:	ff 66 89             	jmp    *-0x77(%esi)
}
    8b4e:	d8 67 66             	fsubs  0x66(%edi)
    8b51:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    8b54:	66 c9                	leavew 
    8b56:	66 c3                	retw   

00008b58 <_Z7isspacei>:
namespace hhlibc {

#endif

int isspace( int ch )
{
    8b58:	66 55                	push   %bp
    8b5a:	66 89 e5             	mov    %sp,%bp
    8b5d:	67 66 8b 55 08       	mov    0x8(%di),%dx
    return (ch == 9 || ch == 32 || (ch >= 10 && ch <= 13));
    8b62:	67 66 8d 42 f7       	lea    -0x9(%bp,%si),%ax
    8b67:	66 83 f8 04          	cmp    $0x4,%ax
    8b6b:	0f 96 c0             	setbe  %al
    8b6e:	66 83 fa 20          	cmp    $0x20,%dx
    8b72:	0f 94 c2             	sete   %dl
    8b75:	66 09 d0             	or     %dx,%ax
    8b78:	66 0f b6 c0          	movzbw %al,%ax
}
    8b7c:	66 5d                	pop    %bp
    8b7e:	66 c3                	retw   

Disassembly of section .text._ZN2sh16read_prog_recordEv:

00008b80 <_ZN2sh16read_prog_recordEv>:
    void read_prog_record()
    8b80:	66 55                	push   %bp
    8b82:	66 89 e5             	mov    %sp,%bp
    8b85:	66 57                	push   %di
    8b87:	66 56                	push   %si
    8b89:	66 53                	push   %bx
    8b8b:	66 83 ec 6c          	sub    $0x6c,%sp
    8b8f:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        sys_read_disk(0, (uint32_t)record_buf, 32, 1);
    8b94:	67 66 8d bb 00 02    	lea    0x200(%bp,%di),%di
    8b9a:	00 00                	add    %al,(%eax)
    8b9c:	66 6a 01             	pushw  $0x1
    8b9f:	66 6a 20             	pushw  $0x20
    8ba2:	66 57                	push   %di
    8ba4:	66 6a 00             	pushw  $0x0
    8ba7:	66 e8 9d f6          	callw  8248 <sys_get_scancode+0xf>
    8bab:	ff                   	(bad)  
    8bac:	ff 66 83             	jmp    *-0x7d(%esi)
        sscanf(p, "%s", buf1);
    8baf:	c4 10                	les    (%eax),%edx
    8bb1:	67 66 8d 75 94       	lea    -0x6c(%di),%si
    8bb6:	66 56                	push   %si
    8bb8:	66 68 76 a5          	pushw  $0xa576
    8bbc:	00 00                	add    %al,(%eax)
    8bbe:	66 57                	push   %di
    8bc0:	66 e8 2a fd          	callw  88ee <_Z7vsscanfPKcS0_Pc+0x1bf>
    8bc4:	ff                   	(bad)  
    8bc5:	ff 66 83             	jmp    *-0x7d(%esi)
        p += (strlen(buf1) + 1);
    8bc8:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    8bcb:	56                   	push   %esi
    8bcc:	66 e8 b2 f7          	callw  8382 <_Z6memsetPvim+0x23>
    8bd0:	ff                   	(bad)  
    8bd1:	ff 67 66             	jmp    *0x66(%edi)
    8bd4:	8d 44 07 01          	lea    0x1(%edi,%eax,1),%eax
    8bd8:	67 66 89 45 8c       	mov    %ax,-0x74(%di)
        prog_cnt = strtol(buf1, nullptr, 10);
    8bdd:	67 66 c7 04 24 0a    	movw   $0xa24,(%si)
    8be3:	00 00                	add    %al,(%eax)
    8be5:	00 66 6a             	add    %ah,0x6a(%esi)
    8be8:	00 66 56             	add    %ah,0x56(%esi)
    8beb:	66 e8 f5 f8          	callw  84e4 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    8bef:	ff                   	(bad)  
    8bf0:	ff 67 66             	jmp    *0x66(%edi)
    8bf3:	89 83 40 06 00 00    	mov    %eax,0x640(%ebx)
    8bf9:	66 83 c4 0c          	add    $0xc,%sp
        for(size_t i = 0; i < prog_cnt; ++i)
    8bfd:	67 66 c7 45 90 00 00 	movw   $0x0,-0x70(%di)
    8c04:	00 00                	add    %al,(%eax)
    8c06:	67 66 8b 45 90       	mov    -0x70(%di),%ax
    8c0b:	67 66 39 83 40 06    	cmp    %ax,0x640(%bp,%di)
    8c11:	00 00                	add    %al,(%eax)
    8c13:	0f 86 97 00 67 66    	jbe    66678cb0 <_GLOBAL_OFFSET_TABLE_+0x6666e6d4>
            sscanf(p, "%s%s", buf2, buf3);
    8c19:	8d 7d d4             	lea    -0x2c(%ebp),%edi
    8c1c:	66 57                	push   %di
    8c1e:	67 66 8d 75 b4       	lea    -0x4c(%di),%si
    8c23:	66 56                	push   %si
    8c25:	66 68 74 a5          	pushw  $0xa574
    8c29:	00 00                	add    %al,(%eax)
    8c2b:	67 66 ff 75 8c       	pushw  -0x74(%di)
    8c30:	66 e8 ba fc          	callw  88ee <_Z7vsscanfPKcS0_Pc+0x1bf>
    8c34:	ff                   	(bad)  
    8c35:	ff 67 66             	jmp    *0x66(%edi)
    8c38:	6b 4d 90 24          	imul   $0x24,-0x70(%ebp),%ecx
            strcpy(progs[i].name, buf2);
    8c3c:	66 83 c4 10          	add    $0x10,%sp
    8c40:	66 56                	push   %si
    8c42:	67 66 8d 84 0b 00    	lea    0xb(%si),%ax
    8c48:	04 00                	add    $0x0,%al
    8c4a:	00 67 66             	add    %ah,0x66(%edi)
    8c4d:	89 4d 88             	mov    %ecx,-0x78(%ebp)
    8c50:	66 50                	push   %ax
    8c52:	66 e8 48 f7          	callw  839e <_Z6strlenPKc+0x1a>
    8c56:	ff                   	(bad)  
    8c57:	ff 66 58             	jmp    *0x58(%esi)
            progs[i].lba = strtol(buf3, nullptr, 10);
    8c5a:	66 5a                	pop    %dx
    8c5c:	66 6a 0a             	pushw  $0xa
    8c5f:	66 6a 00             	pushw  $0x0
    8c62:	66 57                	push   %di
    8c64:	66 e8 7c f8          	callw  84e4 <_ZZ6strtolPKcPPciENKUlT_E_clIcEEDaS3_.constprop.0+0x48>
    8c68:	ff                   	(bad)  
    8c69:	ff 67 66             	jmp    *0x66(%edi)
    8c6c:	8b 4d 88             	mov    -0x78(%ebp),%ecx
    8c6f:	67 66 89 84 0b 20    	mov    %ax,0x200b(%si)
    8c75:	04 00                	add    $0x0,%al
    8c77:	00 66 83             	add    %ah,-0x7d(%esi)
            p += (strlen(buf2) + strlen(buf3) + 2);
    8c7a:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    8c7d:	56                   	push   %esi
    8c7e:	66 e8 00 f7          	callw  8382 <_Z6memsetPvim+0x23>
    8c82:	ff                   	(bad)  
    8c83:	ff 67 66             	jmp    *0x66(%edi)
    8c86:	89 45 88             	mov    %eax,-0x78(%ebp)
    8c89:	67 66 89 3c          	mov    %di,(%si)
    8c8d:	24 66                	and    $0x66,%al
    8c8f:	e8 f0 f6 ff ff       	call   8384 <_Z6strlenPKc>
    8c94:	67 66 8b 55 88       	mov    -0x78(%di),%dx
    8c99:	67 66 8d 44 02       	lea    0x2(%si),%ax
    8c9e:	02 67 66             	add    0x66(%edi),%ah
    8ca1:	01 45 8c             	add    %eax,-0x74(%ebp)
        for(size_t i = 0; i < prog_cnt; ++i)
    8ca4:	67 66 ff 45 90       	incw   -0x70(%di)
    8ca9:	66 59                	pop    %cx
    8cab:	e9 58 ff 67 66       	jmp    66688c08 <_GLOBAL_OFFSET_TABLE_+0x6667e62c>
    }
    8cb0:	8d 65 f4             	lea    -0xc(%ebp),%esp
    8cb3:	66 5b                	pop    %bx
    8cb5:	66 5e                	pop    %si
    8cb7:	66 5f                	pop    %di
    8cb9:	66 5d                	pop    %bp
    8cbb:	66 c3                	retw   

Disassembly of section .text._ZN2sh3runEv:

00008cbe <_ZN2sh3runEv>:
    }
    void run () {
    8cbe:	66 55                	push   %bp
    8cc0:	66 89 e5             	mov    %sp,%bp
    8cc3:	66 57                	push   %di
    8cc5:	66 56                	push   %si
    8cc7:	66 53                	push   %bx
    8cc9:	66 51                	push   %cx
    8ccb:	67 66 8b 5d 08       	mov    0x8(%di),%bx
        while(true)
        {
            char in = getchar();
    8cd0:	66 e8 24 fa          	callw  86f8 <_Z4putsPKc+0x41>
    8cd4:	ff                   	(bad)  
    8cd5:	ff 66 89             	jmp    *-0x77(%esi)
    8cd8:	c2 3c 0d             	ret    $0xd3c
            if (in == 13)
    8cdb:	0f 85 9b 00 66 6a    	jne    6a668d7c <_GLOBAL_OFFSET_TABLE_+0x6a65e7a0>
            {
                putchar('\n');
    8ce1:	0a 66 e8             	or     -0x18(%esi),%ah
    8ce4:	a7                   	cmpsl  %es:(%edi),%ds:(%esi)
    8ce5:	f9                   	stc    
    8ce6:	ff                   	(bad)  
    8ce7:	ff 67 66             	jmp    *0x66(%edi)
        printf("Exec %s\n", buf);
    8cea:	89 1c 24             	mov    %ebx,(%esp)
    8ced:	66 68 79 a5          	pushw  $0xa579
    8cf1:	00 00                	add    %al,(%eax)
    8cf3:	66 e8 21 fe          	callw  8b18 <_Z7sprintfPcPKcz+0x1e>
    8cf7:	ff                   	(bad)  
    8cf8:	ff 66 59             	jmp    *0x59(%esi)
        if (strcmp(buf, "ls") == 0)
    8cfb:	66 5e                	pop    %si
    8cfd:	66 68 82 a5          	pushw  $0xa582
    8d01:	00 00                	add    %al,(%eax)
    8d03:	66 53                	push   %bx
    8d05:	66 e8 d7 f6          	callw  83e0 <_Z6strcpyPcPKc+0x40>
    8d09:	ff                   	(bad)  
    8d0a:	ff 66 5f             	jmp    *0x5f(%esi)
    8d0d:	66 5a                	pop    %dx
    8d0f:	66 85 c0             	test   %ax,%ax
    8d12:	75 42                	jne    8d56 <_ZN2sh3runEv+0x98>
            printf("lba\tname\n");
    8d14:	66 68 85 a5          	pushw  $0xa585
    8d18:	00 00                	add    %al,(%eax)
    8d1a:	66 e8 fa fd          	callw  8b18 <_Z7sprintfPcPKcz+0x1e>
    8d1e:	ff                   	(bad)  
    8d1f:	ff 67 66             	jmp    *0x66(%edi)
    8d22:	8d b3 00 04 00 00    	lea    0x400(%ebx),%esi
    8d28:	66 5a                	pop    %dx
            for(size_t i = 0; i < prog_cnt; ++i)
    8d2a:	66 31 ff             	xor    %di,%di
    8d2d:	67 66 39 bb 40 06    	cmp    %di,0x640(%bp,%di)
    8d33:	00 00                	add    %al,(%eax)
    8d35:	76 1f                	jbe    8d56 <_ZN2sh3runEv+0x98>
                printf("%d\t%s\n", progs[i].lba, progs[i].name);
    8d37:	66 56                	push   %si
    8d39:	67 66 ff 76 20       	pushw  0x20(%bp)
    8d3e:	66 68 8f a5          	pushw  $0xa58f
    8d42:	00 00                	add    %al,(%eax)
    8d44:	66 e8 d0 fd          	callw  8b18 <_Z7sprintfPcPKcz+0x1e>
    8d48:	ff                   	(bad)  
    8d49:	ff 66 47             	jmp    *0x47(%esi)
            for(size_t i = 0; i < prog_cnt; ++i)
    8d4c:	66 83 c6 24          	add    $0x24,%si
    8d50:	66 83 c4 0c          	add    $0xc,%sp
    8d54:	eb d7                	jmp    8d2d <_ZN2sh3runEv+0x6f>
                exec();
                memset(buf, 0, buf_size);
    8d56:	66 68 00 02          	pushw  $0x200
    8d5a:	00 00                	add    %al,(%eax)
    8d5c:	66 6a 00             	pushw  $0x0
    8d5f:	66 53                	push   %bx
    8d61:	66 e8 f8 f5          	callw  835d <_Z7memmovePvPKvm+0x4b>
    8d65:	ff                   	(bad)  
    8d66:	ff 67 66             	jmp    *0x66(%edi)
                pos = 0;
    8d69:	c7 83 44 06 00 00 00 	movl   $0x0,0x644(%ebx)
    8d70:	00 00 00 
                continue;
    8d73:	66 83 c4 0c          	add    $0xc,%sp
    8d77:	e9 56 ff 66 0f       	jmp    f678cd2 <_GLOBAL_OFFSET_TABLE_+0xf66e6f6>
            }
            putchar(in);
    8d7c:	be c0 67 66 89       	mov    $0x896667c0,%esi
    8d81:	55                   	push   %ebp
    8d82:	f0 66 50             	lock push %ax
    8d85:	66 e8 04 f9          	callw  868d <_Z6strtolPKcPPci+0x1a7>
    8d89:	ff                   	(bad)  
    8d8a:	ff 67 66             	jmp    *0x66(%edi)
            buf[pos++] = in;
    8d8d:	8b 83 44 06 00 00    	mov    0x644(%ebx),%eax
    8d93:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    8d98:	67 66 89 8b 44 06    	mov    %cx,0x644(%bp,%di)
    8d9e:	00 00                	add    %al,(%eax)
    8da0:	67 66 8b 55 f0       	mov    -0x10(%di),%dx
    8da5:	67 88 14             	mov    %dl,(%si)
    8da8:	03 66 58             	add    0x58(%esi),%esp
    8dab:	e9                   	.byte 0xe9
    8dac:	22 ff                	and    %bh,%bh

Disassembly of section .text._ZN3tty7putcharEi:

00008dae <_ZN3tty7putcharEi>:
        tty_mem[y + 80 * x] = c;
        tty_mem[y + 80 * x + 1] = color;
#endif
        sys_putchar(c, color, x, y);
    }
    void putchar(int c)
    8dae:	66 55                	push   %bp
    8db0:	66 89 e5             	mov    %sp,%bp
    8db3:	66 56                	push   %si
    8db5:	66 53                	push   %bx
    8db7:	67 66 8b 5d 08       	mov    0x8(%di),%bx
    8dbc:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    {
        switch(c)
    8dc1:	66 83 f8 09          	cmp    $0x9,%ax
    8dc5:	74 22                	je     8de9 <_ZN3tty7putcharEi+0x3b>
    8dc7:	7f 09                	jg     8dd2 <_ZN3tty7putcharEi+0x24>
    8dc9:	66 83 f8 08          	cmp    $0x8,%ax
    8dcd:	74 36                	je     8e05 <_ZN3tty7putcharEi+0x57>
    8dcf:	e9 88 00 66 83       	jmp    83668e5c <_GLOBAL_OFFSET_TABLE_+0x8365e880>
    8dd4:	f8                   	clc    
    8dd5:	0a 74 73 66          	or     0x66(%ebx,%esi,2),%dh
    8dd9:	83 f8 0d             	cmp    $0xd,%eax
    8ddc:	75 7c                	jne    8e5a <_ZN3tty7putcharEi+0xac>
                for(int i = 0; i < 4; ++i) putchar(' ');
                break;
            }
            case '\r':
            {
                cur_x = 0;
    8dde:	67 66 c7 03 00 00    	movw   $0x0,(%bp,%di)
    8de4:	00 00                	add    %al,(%eax)
                break;
    8de6:	e9 b2 00 66 be       	jmp    be668e9d <_GLOBAL_OFFSET_TABLE_+0xbe65e8c1>
        switch(c)
    8deb:	04 00                	add    $0x0,%al
    8ded:	00 00                	add    %al,(%eax)
                for(int i = 0; i < 4; ++i) putchar(' ');
    8def:	66 6a 20             	pushw  $0x20
    8df2:	66 53                	push   %bx
    8df4:	66 e8 b4 ff          	callw  8dac <_ZN2sh3runEv+0xee>
    8df8:	ff                   	(bad)  
    8df9:	ff 66 58             	jmp    *0x58(%esi)
    8dfc:	66 5a                	pop    %dx
    8dfe:	66 4e                	dec    %si
    8e00:	75 ed                	jne    8def <_ZN3tty7putcharEi+0x41>
    8e02:	e9 96 00 67 66       	jmp    66678e9d <_GLOBAL_OFFSET_TABLE_+0x6666e8c1>
            }
            case '\b':
            {
                if(cur_y == 0 && cur_x == 0) 
    8e07:	8b 53 04             	mov    0x4(%ebx),%edx
    8e0a:	67 66 8b 03          	mov    (%bp,%di),%ax
    8e0e:	66 85 d2             	test   %dx,%dx
    8e11:	75 1b                	jne    8e2e <_ZN3tty7putcharEi+0x80>
    8e13:	66 85 c0             	test   %ax,%ax
    8e16:	0f 84 81 00 67 66    	je     66678e9d <_GLOBAL_OFFSET_TABLE_+0x6666e8c1>
                {
                    break;
                }
                else if (cur_y == 0 && cur_x != 0)
                {
                    cur_y = 80 - 1;
    8e1c:	c7 43 04 4f 00 00 00 	movl   $0x4f,0x4(%ebx)
                    cur_x--;
    8e23:	66 48                	dec    %ax
    8e25:	67 66 89 03          	mov    %ax,(%bp,%di)
        sys_putchar(c, color, x, y);
    8e29:	66 6a 4f             	pushw  $0x4f
    8e2c:	eb 09                	jmp    8e37 <_ZN3tty7putcharEi+0x89>
                    putchar_worker(' ', MAKE_COLOR(VGA_BLACK, VGA_WHITE) , cur_x, cur_y);
                    break;
                }
                else
                {
                    cur_y--;
    8e2e:	66 4a                	dec    %dx
    8e30:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
        sys_putchar(c, color, x, y);
    8e35:	66 52                	push   %dx
    8e37:	66 50                	push   %ax
    8e39:	66 6a 07             	pushw  $0x7
    8e3c:	66 6a 20             	pushw  $0x20
    8e3f:	66 e8 30 f2          	callw  8073 <sys_bios_print_int+0xa4>
    8e43:	ff                   	(bad)  
    8e44:	ff 66 83             	jmp    *-0x7d(%esi)
    8e47:	c4 10                	les    (%eax),%edx
    8e49:	eb 50                	jmp    8e9b <_ZN3tty7putcharEi+0xed>
                    break;
                }
            }
            case '\n':
            {
                cur_x++;
    8e4b:	67 66 ff 03          	incw   (%bp,%di)
                cur_y = 0;
    8e4f:	67 66 c7 43 04 00 00 	movw   $0x0,0x4(%bp,%di)
    8e56:	00 00                	add    %al,(%eax)
                break;
    8e58:	eb 41                	jmp    8e9b <_ZN3tty7putcharEi+0xed>
        sys_putchar(c, color, x, y);
    8e5a:	67 66 ff 73 04       	pushw  0x4(%bp,%di)
    8e5f:	67 66 ff 33          	pushw  (%bp,%di)
    8e63:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    8e68:	66 50                	push   %ax
    8e6a:	66 e8 05 f2          	callw  8073 <sys_bios_print_int+0xa4>
    8e6e:	ff                   	(bad)  
    8e6f:	ff 67 66             	jmp    *0x66(%edi)
            }
            default:
            {
                putchar_worker(c, color, cur_x, cur_y);
                cur_x = (cur_y == 79) ? cur_x + 1 : cur_x;
    8e72:	8b 43 04             	mov    0x4(%ebx),%eax
    8e75:	66 83 c4 10          	add    $0x10,%sp
    8e79:	66 83 f8 4f          	cmp    $0x4f,%ax
    8e7d:	67 66 8b 13          	mov    (%bp,%di),%dx
    8e81:	75 02                	jne    8e85 <_ZN3tty7putcharEi+0xd7>
    8e83:	66 42                	inc    %dx
    8e85:	67 66 89 13          	mov    %dx,(%bp,%di)
                cur_y = (cur_y + 1) % 80;
    8e89:	66 40                	inc    %ax
    8e8b:	66 b9 50 00          	mov    $0x50,%cx
    8e8f:	00 00                	add    %al,(%eax)
    8e91:	66 99                	cwtd   
    8e93:	66 f7 f9             	idiv   %cx
    8e96:	67 66 89 53 04       	mov    %dx,0x4(%bp,%di)
                break;
            }
        }
        sys_bios_print_int(cur_x, MAKE_COLOR(VGA_BLACK, VGA_WHITE), MAKE_POS(7, 40));
    8e9b:	66 68 28 07          	pushw  $0x728
    8e9f:	00 00                	add    %al,(%eax)
    8ea1:	66 6a 07             	pushw  $0x7
    8ea4:	67 66 ff 33          	pushw  (%bp,%di)
    8ea8:	66 e8 21 f1          	callw  7fcd <return_point+0x9>
    8eac:	ff                   	(bad)  
    8ead:	ff 66 83             	jmp    *-0x7d(%esi)
        sys_bios_print_int(cur_y, MAKE_COLOR(VGA_BLACK, VGA_WHITE), MAKE_POS(8, 42));
    8eb0:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    8eb3:	68 2a 08 00 00       	push   $0x82a
    8eb8:	66 6a 07             	pushw  $0x7
    8ebb:	67 66 ff 73 04       	pushw  0x4(%bp,%di)
    8ec0:	66 e8 09 f1          	callw  7fcd <return_point+0x9>
    8ec4:	ff                   	(bad)  
    8ec5:	ff 66 83             	jmp    *-0x7d(%esi)
        if (cur_x >= 25)
    8ec8:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    8ecb:	66 83 3b 18          	cmpw   $0x18,(%ebx)
    8ecf:	7e 11                	jle    8ee2 <_ZN3tty7putcharEi+0x134>
            sys_bios_scroll_up(color);
    8ed1:	67 66 ff 73 08       	pushw  0x8(%bp,%di)
    8ed6:	66 e8 ca f2          	callw  81a4 <sys_print_int+0xa4>
    8eda:	ff                   	(bad)  
    8edb:	ff 67 66             	jmp    *0x66(%edi)
            --cur_x;
    8ede:	ff 0b                	decl   (%ebx)
    8ee0:	66 59                	pop    %cx
        scroll_up();
        sys_bios_print_int(cur_x, MAKE_COLOR(VGA_BLACK, VGA_YELLOW), MAKE_POS(15, 44));
    8ee2:	66 68 2c 0f          	pushw  $0xf2c
    8ee6:	00 00                	add    %al,(%eax)
    8ee8:	66 6a 0e             	pushw  $0xe
    8eeb:	67 66 ff 33          	pushw  (%bp,%di)
    8eef:	66 e8 da f0          	callw  7fcd <return_point+0x9>
    8ef3:	ff                   	(bad)  
    8ef4:	ff 66 83             	jmp    *-0x7d(%esi)
        sys_bios_print_int(cur_y, MAKE_COLOR(VGA_BLACK, VGA_YELLOW), MAKE_POS(16, 46));
    8ef7:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    8efa:	68 2e 10 00 00       	push   $0x102e
    8eff:	66 6a 0e             	pushw  $0xe
    8f02:	67 66 ff 73 04       	pushw  0x4(%bp,%di)
    8f07:	66 e8 c2 f0          	callw  7fcd <return_point+0x9>
    8f0b:	ff                   	(bad)  
    8f0c:	ff 67 6b             	jmp    *0x6b(%edi)
        uint16_t pos = x * 80 + y;
    8f0f:	03 50 67             	add    0x67(%eax),%edx
    8f12:	66 03 43 04          	add    0x4(%ebx),%ax
    8f16:	66 89 c3             	mov    %ax,%bx
        sys_outb(0x3D4, 0x0F);
    8f19:	66 83 c4 0c          	add    $0xc,%sp
    8f1d:	66 6a 0f             	pushw  $0xf
    8f20:	66 68 d4 03          	pushw  $0x3d4
    8f24:	00 00                	add    %al,(%eax)
    8f26:	66 e8 e9 f2          	callw  8213 <sys_inb+0xd>
    8f2a:	ff                   	(bad)  
    8f2b:	ff 66 58             	jmp    *0x58(%esi)
        sys_outb(0x3D5, (uint8_t) (pos & 0xFF));
    8f2e:	66 5a                	pop    %dx
    8f30:	66 0f b6 c3          	movzbw %bl,%ax
    8f34:	66 50                	push   %ax
    8f36:	66 68 d5 03          	pushw  $0x3d5
    8f3a:	00 00                	add    %al,(%eax)
    8f3c:	66 e8 d3 f2          	callw  8213 <sys_inb+0xd>
    8f40:	ff                   	(bad)  
    8f41:	ff 66 59             	jmp    *0x59(%esi)
        sys_outb(0x3D4, 0x0E);
    8f44:	66 5e                	pop    %si
    8f46:	66 6a 0e             	pushw  $0xe
    8f49:	66 68 d4 03          	pushw  $0x3d4
    8f4d:	00 00                	add    %al,(%eax)
    8f4f:	66 e8 c0 f2          	callw  8213 <sys_inb+0xd>
    8f53:	ff                   	(bad)  
    8f54:	ff 66 58             	jmp    *0x58(%esi)
        sys_outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
    8f57:	66 5a                	pop    %dx
    8f59:	66 0f b6 df          	movzbw %bh,%bx
    8f5d:	67 66 89 5d 0c       	mov    %bx,0xc(%di)
    8f62:	67 66 c7 45 08 d5 03 	movw   $0x3d5,0x8(%di)
    8f69:	00 00                	add    %al,(%eax)
        move_cursor(cur_x, cur_y);
    }
    8f6b:	67 66 8d 65 f8       	lea    -0x8(%di),%sp
    8f70:	66 5b                	pop    %bx
    8f72:	66 5e                	pop    %si
    8f74:	66 5d                	pop    %bp
        sys_outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
    8f76:	e9                   	.byte 0xe9
    8f77:	9c                   	pushf  
    8f78:	f2                   	repnz

Disassembly of section .text._Z4itoaIjEvPcT_ib:

00008f79 <_Z4itoaIjEvPcT_ib>:
void itoa(char* buffer, T num, int base, bool captial = false)
    8f79:	66 55                	push   %bp
    8f7b:	66 89 e5             	mov    %sp,%bp
    8f7e:	66 57                	push   %di
    8f80:	66 56                	push   %si
    8f82:	66 53                	push   %bx
    8f84:	66 83 ec 08          	sub    $0x8,%sp
    8f88:	67 66 8b 75 08       	mov    0x8(%di),%si
    8f8d:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8f92:	67 66 8b 7d 10       	mov    0x10(%di),%di
    8f97:	67 8a 5d 14          	mov    0x14(%di),%bl
    8f9b:	67 88 5d ef          	mov    %bl,-0x11(%di)
    char *p = buffer;
    8f9f:	66 89 f1             	mov    %si,%cx
    8fa2:	66 31 d2             	xor    %dx,%dx
    8fa5:	66 f7 f7             	div    %di
    8fa8:	67 66 89 45 f0       	mov    %ax,-0x10(%di)
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
    8fad:	67 80 7d ef 00       	cmpb   $0x0,-0x11(%di)
    8fb2:	74 09                	je     8fbd <_Z4itoaIjEvPcT_ib+0x44>
    8fb4:	67 8a 9a b7 a5       	mov    -0x5a49(%bp,%si),%bl
    8fb9:	00 00                	add    %al,(%eax)
    8fbb:	eb 07                	jmp    8fc4 <_Z4itoaIjEvPcT_ib+0x4b>
    8fbd:	67 8a 9a c8 a5       	mov    -0x5a38(%bp,%si),%bl
    8fc2:	00 00                	add    %al,(%eax)
    8fc4:	67 66 8d 51 01       	lea    0x1(%bx,%di),%dx
    8fc9:	67 88 5a ff          	mov    %bl,-0x1(%bp,%si)
        if(num == 0) break;
    8fcd:	67 66 83 7d f0 00    	cmpw   $0x0,-0x10(%di)
    8fd3:	74 05                	je     8fda <_Z4itoaIjEvPcT_ib+0x61>
    8fd5:	66 89 d1             	mov    %dx,%cx
    8fd8:	eb c8                	jmp    8fa2 <_Z4itoaIjEvPcT_ib+0x29>
    *p = '\0';
    8fda:	67 c6 41 01 00       	movb   $0x0,0x1(%bx,%di)
    reverse(buffer);
    8fdf:	67 66 89 75 08       	mov    %si,0x8(%di)
}
    8fe4:	66 58                	pop    %ax
    8fe6:	66 5a                	pop    %dx
    8fe8:	66 5b                	pop    %bx
    8fea:	66 5e                	pop    %si
    8fec:	66 5f                	pop    %di
    8fee:	66 5d                	pop    %bp
    reverse(buffer);
    8ff0:	e9                   	.byte 0xe9
    8ff1:	5c                   	pop    %esp
    8ff2:	f4                   	hlt    
