# 1 "basic_lib/cmos.cpp"
# 1 "/Users/lixinrui/onedrive/Documents/大学课程/2018操作系统实验/os_lab3/test//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "basic_lib/cmos.cpp"
# 1 "basic_lib/sys_lib.h" 1


# 1 "basic_lib/../include/defines.h" 1
# 10 "basic_lib/../include/defines.h"
__asm__(".code16gcc\n");


typedef __builtin_va_list va_list;
# 25 "basic_lib/../include/defines.h"
using size_t = unsigned long;
using uint8_t = unsigned char;
using uint16_t = unsigned short;
using uint32_t = unsigned int;


enum VGA_COLOR{
    VGA_BLACK = 0x00,
    VGA_BLUE = 0x01,
    VGA_GREEN = 0x02,
    VGA_CYAN = 0x03,
    VGA_RED = 0x04,
    VGA_MAGENTA = 0x05,
    VGA_BROWN = 0x06,
    VGA_WHITE = 0x07,
    VGA_GRAY = 0x08,
    VGA_BRIGHT_BLUE = 0x09,
    VGA_BRIGHT_GREEN = 0x0A,
    VGA_BRIGHT_CYAN = 0x0B,
    VGA_BRIGHT_RED = 0x0C,
    VGA_BRIGHT_MAGENTA = 0x0D,
    VGA_YELLOW = 0x0E,
    VGA_BRIGHT_WHITE = 0x0F
};
# 4 "basic_lib/sys_lib.h" 2




extern "C"{

    void sys_execve_bin();
    void sys_dbg_bochs_putc(char c);
    void sys_bios_print_string(const char* str, unsigned int len, int color, int pos);
    void sys_bios_print_int(int num, int color, int pos);
    void sys_bios_clear_screen();
    void sys_bios_putchar(char c, int color, int x, int y);
    uint8_t sys_inb(uint16_t port);
    void sys_outb(uint16_t port, uint8_t data);
    char sys_get_scancode();
    int sys_getchar();
    void sys_putchar(int c, int color, int x, int y);
    void sys_print_string(const char* str, unsigned int len, int x, int y);
    void sys_print_int(int num, int x, int y);
    void sys_read_disk(uint32_t segment, uint32_t address, uint16_t logical_start_sector, uint8_t secotr_cnt);
    void sys_bios_scroll_up(int color);
    void sys_sleep(int n);
    void read_rtc();


}
# 2 "basic_lib/cmos.cpp" 2
# 1 "basic_lib/../libc/stdio.h" 1



# 1 "basic_lib/../libc/../include/defines.h" 1
# 5 "basic_lib/../libc/stdio.h" 2
# 1 "basic_lib/../libc/sys/hhos.h" 1


# 1 "basic_lib/../libc/sys/../../kernel/tty.h" 1


# 1 "basic_lib/../libc/sys/../../kernel/../basic_lib/sys_lib.h" 1
# 4 "basic_lib/../libc/sys/../../kernel/tty.h" 2
# 1 "basic_lib/../libc/sys/../../kernel/../libc/string.h" 1



# 1 "basic_lib/../libc/sys/../../kernel/../libc/../include/defines.h" 1
# 5 "basic_lib/../libc/sys/../../kernel/../libc/string.h" 2
# 15 "basic_lib/../libc/sys/../../kernel/../libc/string.h"
int memcmp(const void* _s1, const void* _s2, size_t n);
void* memcpy(void* _dst, const void* _src, size_t n);
void* memmove(void* _dst, const void* _src, size_t n);
void* memset(void* _dst, int c, size_t n);
size_t strlen(const char* _str);
char *strcpy( char* _dst, const char* _src);
int strcmp( const char* _s1, const char* _s2);

void utoa(char* buffer, unsigned int num, int base);
void reverse(char* buffer);
template<typename T>
void itoa(char* buffer, T num, int base, bool captial = false)
{
    const char* num_char_upper = "0123456789ABCDEF";
    const char* num_char_lower = "0123456789abcdef";
    if(num < 0)
    {
        *(buffer++) = '-';
        num = -num;
    }
    char *p = buffer;
    int mod = 0;
    while(true)
    {
        mod = num % base;
        num /= base;
        *(p++) = captial ? num_char_upper[mod] : num_char_lower[mod];
        if(num == 0) break;
    }
    *p = '\0';
    reverse(buffer);
}
# 5 "basic_lib/../libc/sys/../../kernel/tty.h" 2

class tty{

private:
    int cur_x;
    int cur_y;
    int color;







public:
    tty() {
        sys_bios_clear_screen();
        tty_init();
    }
    void tty_init()
    {
        cur_x = 0;
        cur_y = 0;
        move_cursor(0, 0);
        color = (((VGA_BLACK << 4) | (VGA_WHITE & 0x0F)));



    }
    int get_x()
    {
        return cur_x;
    }
    int get_y()
    {
        return cur_y;
    }
    int get_color()
    {
        return color;
    }
    void set_x(int x)
    {
        cur_x = x;
    }
    void set_y(int y)
    {
        cur_y = y;
    }
    void set_color(int _color)
    {
        color = _color;
    }
    void move_cursor(int x, int y)
    {
        uint16_t pos = x * 80 + y;
        sys_outb(0x3D4, 0x0F);
        sys_outb(0x3D5, (uint8_t) (pos & 0xFF));
        sys_outb(0x3D4, 0x0E);
        sys_outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
    }
    void scroll_up()
    {
        if (cur_x >= 25)
        {
            sys_bios_scroll_up(color);
            --cur_x;
        }
    }
    void putchar_worker(int c, int color, int x, int y)
    {




        sys_putchar(c, color, x, y);
    }
    void putchar(int c)
    {
        switch(c)
        {
            case '\t':
            {
                for(int i = 0; i < 4; ++i) putchar(' ');
                break;
            }
            case '\r':
            {
                cur_y = 0;
                break;
            }
            case 0:
                break;
            case '\b':
            {
                if(cur_y == 0 && cur_x == 0)
                {
                    break;
                }
                else if (cur_y == 0 && cur_x != 0)
                {
                    cur_y = 80 - 1;
                    cur_x--;
                    putchar_worker(' ', (((VGA_BLACK << 4) | (VGA_WHITE & 0x0F))) , cur_x, cur_y);
                    break;
                }
                else
                {
                    cur_y--;
                    putchar_worker(' ', (((VGA_BLACK << 4) | (VGA_WHITE & 0x0F))) , cur_x, cur_y);
                    break;
                }
            }
            case '\n':
            {
                cur_x++;
                cur_y = 0;
                break;
            }
            default:
            {
                putchar_worker(c, color, cur_x, cur_y);
                cur_x = (cur_y == 79) ? cur_x + 1 : cur_x;
                cur_y = (cur_y + 1) % 80;
                break;
            }
        }
        scroll_up();
        move_cursor(cur_x, cur_y);
    }
};
# 4 "basic_lib/../libc/sys/hhos.h" 2
# 1 "basic_lib/../libc/sys/../../basic_lib/sys_lib.h" 1
# 5 "basic_lib/../libc/sys/hhos.h" 2
tty* sys_get_current_tty();

static inline void system_call_sleep(unsigned int n)
{
    asm volatile(
    "movl %0, %%ecx\n\t"
    "movb $2, %%ah\n\t"
            "movw %%ss, %%bx\n\t"
            "movw %%bx, %%fs\n\t"
            "movw $0, %%bx\n\t"
            "movw %%bx, %%ss\n\t"
            "movw %%bx, %%ds\n\t"
            "movw %%bx, %%es\n\t"
    "int $0x98\n\t"
            "movw %%fs, %%bx\n\t"
            "movw %%bx, %%ss\n\t"
            "movw %%bx, %%ds\n\t"
            "movw %%bx, %%es\n\t"

    :
    :"r"(n)
    :"%eax", "%ebx", "%ecx"
    );

}

static inline int system_call_getchar()
{
    int ret = 0;
    asm volatile (
    "movb $0, %%ah\n\t"
    "int $0x98\n\t"
    "movl %%eax, %0\n\t"
    :"=r"(ret)
    :
    :"%eax"
    );
    int mask = 0x00FF;
    ret = ret & mask;
    return ret;
}
static inline void system_call_putchar(int ch)
{
    int mask = 0x0FF;
    ch = ch & mask;
    char c = ch;
    asm volatile(
    "movb %0, %%al\n\t"
    "movb $1, %%ah\n\t"
            "movw %%ss, %%bx\n\t"
            "movw %%bx, %%fs\n\t"
            "movw $0, %%bx\n\t"
            "movw %%bx, %%ss\n\t"
            "movw %%bx, %%ds\n\t"
            "movw %%bx, %%es\n\t"
    "int $0x98\n\t"
            "movw %%fs, %%bx\n\t"
            "movw %%bx, %%ss\n\t"
            "movw %%bx, %%ds\n\t"
            "movw %%bx, %%es\n\t"

    :
    :"r"(c)
    :"%eax", "ebx"
    );

}
# 6 "basic_lib/../libc/stdio.h" 2
# 20 "basic_lib/../libc/stdio.h"
int putchar( int ch );
int puts(const char* string);
int vsprintf( char* buffer, const char* format, va_list vlist );
int sprintf( char *buffer, const char *format, ... );
int printf( const char* format, ... );

int getchar(void);
char *gets( char *str );
int vsscanf( const char* buffer, const char* format, va_list vlist );
int sscanf( const char* buffer, const char* format, ... );
int scanf( const char* format, ... );

int scanf( const char* format, ... );

int rand();
void srand( unsigned seed );
# 3 "basic_lib/cmos.cpp" 2
void read_cmos (unsigned char array [])
{
   unsigned char tvalue, index;

   for(index = 0; index < 128; index++)
   {
       asm volatile(
            "cli\n\t"
            "movb %1, %%al\n\t"
            "out %%al, $0x70\n\t"
            "in $0x71, %%al\b\t"
            "sti\n\t"
            "movb %%al, %0\n\t"
            :"=r"(tvalue)
            :"r"(index)
            :"%eax"
               );
       array[index] = tvalue;
   }
}



unsigned char sys_internal_second;
unsigned char sys_internal_minute;
unsigned char hour;
unsigned char day;
unsigned char month;
unsigned int year;


enum {
      cmos_address = 0x70,
      cmos_data = 0x71
};

int get_update_in_progress_flag() {
      sys_outb(cmos_address, 0x0A);
      return (sys_inb(cmos_data) & 0x80);
}

unsigned char get_RTC_register(int reg) {
      sys_outb(cmos_address, reg);
      return sys_inb(cmos_data);
}

void read_rtc() {
      unsigned char last_second;
      unsigned char last_minute;
      unsigned char last_hour;
      unsigned char last_day;
      unsigned char last_month;
      unsigned char last_year;
      unsigned char registerB;

      while (get_update_in_progress_flag());
      sys_internal_second = get_RTC_register(0x00);
      sys_internal_minute = get_RTC_register(0x02);
      hour = get_RTC_register(0x04);
      day = get_RTC_register(0x07);
      month = get_RTC_register(0x08);
      year = get_RTC_register(0x09);

      do {
            last_second = sys_internal_second;
            last_minute = sys_internal_minute;
            last_hour = hour;
            last_day = day;
            last_month = month;
            last_year = year;

            while (get_update_in_progress_flag());
            sys_internal_second = get_RTC_register(0x00);
            sys_internal_minute = get_RTC_register(0x02);
            hour = get_RTC_register(0x04);
            day = get_RTC_register(0x07);
            month = get_RTC_register(0x08);
            year = get_RTC_register(0x09);
      } while( (last_second != sys_internal_second) || (last_minute != sys_internal_minute) || (last_hour != hour) ||
               (last_day != day) || (last_month != month) || (last_year != year));

      registerB = get_RTC_register(0x0B);

      if (!(registerB & 0x04)) {
            sys_internal_second = (sys_internal_second & 0x0F) + ((sys_internal_second / 16) * 10);
            sys_internal_minute = (sys_internal_minute & 0x0F) + ((sys_internal_minute / 16) * 10);
            hour = ( (hour & 0x0F) + (((hour & 0x70) / 16) * 10) ) | (hour & 0x80);
            day = (day & 0x0F) + ((day / 16) * 10);
            month = (month & 0x0F) + ((month / 16) * 10);
            year = (year & 0x0F) + ((year / 16) * 10);
      }

      if (!(registerB & 0x02) && (hour & 0x80)) {
            hour = ((hour & 0x7F) + 12) % 24;
      }

      year += (2018 / 100) * 100;
      if(year < 2018) year += 100;
      printf("%d:%d:%d\n", hour, sys_internal_minute, sys_internal_second);
}
